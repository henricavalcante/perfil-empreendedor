/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var mui = __webpack_require__(157);
	var injectTapEventPlugin = __webpack_require__(311)();
	var ThemeManager = new mui.Styles.ThemeManager();
	var RadioButtonGroup = mui.RadioButtonGroup;
	var RadioButton = mui.RadioButton;
	var CardHeader = mui.CardReader;
	var CardText = mui.CardText;
	var CardMedia = mui.CardMedia;
	var CardTitle = mui.CardTitle;
	var CardActions = mui.CardActions;
	var Card = mui.Card;
	var Avatar = mui.Avater;
	var List = mui.List;
	var ListItem = mui.ListItem;
	var ListDivider = mui.ListDivider;
	var FlatButton = mui.FlatButton;
	var Colors = mui.Styles.Colors;
	var AppCanvas = mui.AppCanvas;
	var Paper = mui.Paper;
	var Table = mui.Table;
	var TableHeader = mui.TableHeader;
	var TableHeaderColumn = mui.TableHeaderColumn;
	var TableRow = mui.TableRow;
	var TableRowColumn = mui.TableRowColumn;
	var TableBody = mui.TableBody;
	var TableFooter = mui.TableFooter;
	var Dialog = mui.Dialog;
	var TextField = mui.TextField;
	var AppBar = mui.AppBar;
	var DropDownMenu = mui.DropDownMenu;

	var Highcharts = __webpack_require__(315);

	var Tab = mui.Tab;
	var Tabs = mui.Tabs;

	var BarChart = __webpack_require__(318).Bar;

	var questoes = __webpack_require__(328);
	var comp_mask = __webpack_require__(329);

	var FireBase = __webpack_require__(330);
	var myFireBaseRef = new FireBase('https://brilliant-heat-9005.firebaseio.com');

	var queryString = __webpack_require__(331);
	var uniqid = __webpack_require__(333);

	var PerfilEmpreendedor = React.createClass({
	  displayName: 'PerfilEmpreendedor',

	  childContextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  getChildContext: function getChildContext() {
	    return {
	      muiTheme: ThemeManager.getCurrentTheme()
	    };
	  },

	  componentWillMount: function componentWillMount() {
	    ThemeManager.setPalette({
	      accent1Color: Colors.deepOrange500
	    });
	  },

	  modalDismiss: function modalDismiss() {
	    this.refs.modalInstricoes.dismiss();
	  },

	  instrucoesShow: function instrucoesShow() {
	    this.refs.modalInstricoes.show();
	  },

	  getInitialState: function getInitialState() {
	    var urlData = queryString.parse(location.search);
	    return {
	      msgError: "",
	      display: "welcome"
	    };
	  },

	  showQuestionario: function showQuestionario() {
	    this.setState({ display: "questionario", nome: this.refs.welcome.state.nome, key: this.refs.welcome.state.key });
	  },

	  Finalize: function Finalize() {

	    console.log("Final");
	    var toDb = {
	      nome: this.state.nome,
	      key: this.state.key,
	      ans: this.refs.questionario.state.ans
	    };

	    myFireBaseRef.push(toDb);

	    this.setState({ display: "relatorio", ans: this.refs.questionario.state.ans }, function () {
	      window.scrollTo(0, 0);
	    });
	  },

	  render: function render() {
	    var _this2 = this;

	    var customActions = [React.createElement(FlatButton, {
	      hoverColor: 'rgba(0,49,63,0.2)',
	      rippleColor: 'rgba(0,49,63,0.4)',
	      style: { color: '#00313f' },
	      label: 'ENTENDIDO',
	      primary: true,
	      onTouchTap: this.modalDismiss, onClick: this.modalDismiss })];
	    var instru = this.state.display == "questionario" ? React.createElement(FlatButton, { rippleColor: 'rgba(255,255,255,0.5)',
	      style: { color: '#fff' }, label: 'instruções', onClick: this.instrucoesShow }) : false;
	    return React.createElement(
	      AppCanvas,
	      null,
	      React.createElement(
	        'section',
	        null,
	        (function () {
	          if (_this2.state.display == "welcome") {
	            return React.createElement(Welcome, { ref: "welcome", parent: _this2 });
	          }
	        })(),
	        React.createElement(AppBar, { title: 'Olá, ' + this.state.nome,
	          iconElementLeft: React.createElement('img', { src: "./src/img/wiSymbol.svg", width: 45, style: { margin: '0 20px' } }),
	          iconElementRight: instru,
	          style: { background: '#00313f' },
	          className: 'menu' }),
	        (function () {
	          if (_this2.state.display == "questionario") {
	            return React.createElement(
	              'section',
	              null,
	              React.createElement(
	                Dialog,
	                {
	                  style: { overflowY: "scroll" },
	                  ref: 'modalInstricoes',
	                  title: 'Instruções',
	                  actions: customActions,
	                  actionFocus: 'submit', modal: true, openImmediately: true },
	                React.createElement(
	                  'p',
	                  null,
	                  'O principal objetivo deste questionário, é ajudá-lo a intensificar o seu autoconhecimento.  Não há respostas certas ou erradas. Mas elas, em seu conjunto apontam tendências que podem contribuir para seu aperfeiçoamento como pessoa e profissional. Ninguém é polivalente em todos os campos do conhecimento e do trabalho.'
	                ),
	                React.createElement(
	                  'p',
	                  null,
	                  'Responda por isso as perguntas da forma crítica e sincera.'
	                ),
	                React.createElement(
	                  'p',
	                  null,
	                  'Leia, portanto, as 55 questões e faça a escolha da opção de 1 a 5 que mais se aplica a você de acordo com os conceitos da tabela abaixo, e marque um “X” no número correspondente à pontuação escolhida, nas colunas à direita de cada uma das afirmações.'
	                ),
	                React.createElement(
	                  'ol',
	                  null,
	                  React.createElement(
	                    'li',
	                    null,
	                    'Nunca'
	                  ),
	                  React.createElement(
	                    'li',
	                    null,
	                    'Raramente'
	                  ),
	                  React.createElement(
	                    'li',
	                    null,
	                    'Algumas vezes'
	                  ),
	                  React.createElement(
	                    'li',
	                    null,
	                    'Geralmente'
	                  ),
	                  React.createElement(
	                    'li',
	                    null,
	                    'Sempre'
	                  )
	                ),
	                React.createElement(
	                  'p',
	                  null,
	                  'Mesmo que as afirmativas pareçam similares, elas não são réplicas uma das outras, pois procuram sempre focalizar algum aspecto diferente das demais.'
	                )
	              ),
	              React.createElement(Questionario, { ref: "questionario", parent: _this2, questoes: questoes })
	            );
	          }
	        })(),
	        (function () {
	          if (_this2.state.display == "relatorio") {
	            return React.createElement(
	              'section',
	              null,
	              React.createElement(Relatorio, { username: _this2.state.nome.toUpperCase(), ans: _this2.state.ans, competencias: comp_mask })
	            );
	          }
	        })()
	      )
	    );
	  }
	});

	var Welcome = React.createClass({
	  displayName: 'Welcome',

	  getInitialState: function getInitialState() {
	    var urlData = queryString.parse(location.search);
	    return {
	      nome: urlData.nome,
	      display: 'table',
	      key: urlData.key || uniqid()
	    };
	  },

	  hide: function hide(e) {
	    e.preventDefault();
	    var _nome = React.findDOMNode(this.refs.nome).value;
	    if (_nome) {
	      this.setState({ display: 'none', nome: _nome }, function () {
	        this.props.parent.showQuestionario();
	      });
	    }
	  },

	  cancelSubmit: function cancelSubmit(e) {
	    e.preventDefault();
	  },

	  render: function render() {

	    return React.createElement(
	      'div',
	      { className: 'container-modal' },
	      React.createElement(
	        'div',
	        { className: 'middle-modal' },
	        React.createElement(
	          'div',
	          { className: 'center-modal', style: {} },
	          React.createElement(
	            'div',
	            null,
	            React.createElement(
	              'h3',
	              null,
	              'Seja Bem Vindo(a) ao...'
	            ),
	            React.createElement(
	              'div',
	              { style: { textAlign: 'center' } },
	              React.createElement(
	                'h1',
	                null,
	                'PERFIL EMPREENDEDOR'
	              ),
	              React.createElement(
	                'h3',
	                { className: 'roboto', style: { textAlign: 'center' } },
	                'Uma ferramenta que visa realiza uma análise do seu perfil empreendedor através de questinamentos'
	              )
	            )
	          ),
	          React.createElement(
	            'div',
	            null,
	            React.createElement(
	              'form',
	              { onSubmit: this.cancelSubmit },
	              React.createElement(
	                'label',
	                null,
	                React.createElement(
	                  'div',
	                  { className: 'input-modal', style: { margin: '20px 0' } },
	                  React.createElement('input', { ref: 'nome', placeholder: "Qual seu nome?", value: this.state.nome })
	                ),
	                React.createElement(
	                  'div',
	                  { style: { textAlign: 'center' } },
	                  React.createElement(
	                    'a',
	                    { onClick: this.hide },
	                    'CONTINUAR'
	                  )
	                )
	              )
	            )
	          )
	        )
	      ),
	      React.createElement(
	        'div',
	        { className: 'img-modal' },
	        React.createElement('img', { src: './src/img/logo.svg' })
	      )
	    );
	  }
	});

	var Questionario = React.createClass({
	  displayName: 'Questionario',

	  getInitialState: function getInitialState() {
	    return {
	      questao: 0,
	      fim: false,
	      competencias: this.props.competencias,
	      tabsValue: 'a',
	      ans: []
	    };
	  },

	  prosseguir: function prosseguir(e) {
	    var ans = React.findDOMNode(this.refs.current).querySelector('input:checked');
	    if (ans) {
	      this.state.ans.push(ans.value);
	      if (this.state.questao < this.props.questoes.length - 1) {
	        this.setState({ questao: ++this.state.questao }, function () {
	          this.refs.current.refs.opt.clearValue();
	        });
	      } else {
	        this.setState({ fim: true }, this.props.parent.Finalize);
	      }
	      return;
	    }
	    this.refs.modalError.show();
	  },

	  modalDismiss: function modalDismiss() {
	    this.refs.modalError.dismiss();
	  },

	  handleTabsChange: function handleTabsChange(value, e, tab) {
	    console.log("porra");
	    this.setState({ tabsValue: value });
	  },

	  render: function render() {
	    var _this = this;
	    return React.createElement(
	      'section',
	      null,
	      React.createElement(
	        Dialog,
	        {
	          ref: 'modalError',
	          title: 'Atenção!',
	          actions: [React.createElement(FlatButton, {
	            hoverColor: 'rgba(0,49,63,0.2)',
	            rippleColor: 'rgba(0,49,63,0.4)',
	            style: { color: '#00313f' },
	            label: 'Ok! ENTENDI',
	            primary: true,
	            onTouchTap: this.modalDismiss, onClick: this.modalDismiss })],
	          actionFocus: 'submit', modal: true },
	        'Responda a questão para prosseguir'
	      ),
	      React.createElement(
	        'form',
	        { name: 'questionario' },
	        React.createElement(
	          Paper,
	          { style: { background: '#ededed', margin: '2vw 7vw', padding: '5vw', boxShadow: 'none' } },
	          React.createElement(
	            List,
	            { style: { background: '#ededed' } },
	            React.createElement(Pergunta, { ref: 'current', questao: this.props.questoes[this.state.questao] })
	          )
	        ),
	        React.createElement(
	          'div',
	          { style: { width: '100%', textAlign: 'right' } },
	          React.createElement(FlatButton, {
	            hoverColor: 'rgba(0,49,63,0.2)',
	            rippleColor: 'rgba(0,49,63,0.4)',
	            style: { color: '#00313f', marginRight: '7vw', right: 0 }, label: 'Prosseguir', onClick: this.state.fim ? null : this.prosseguir })
	        )
	      )
	    );
	  }

	});

	var Pergunta = React.createClass({
	  displayName: 'Pergunta',

	  render: function render() {
	    var _this = this;
	    return React.createElement(
	      'div',
	      { style: this.props.style },
	      React.createElement(
	        'h3',
	        null,
	        React.createElement(
	          'span',
	          null,
	          React.createElement(
	            'strong',
	            null,
	            'Questão: '
	          ),
	          this.props.questao.id
	        )
	      ),
	      React.createElement(
	        'p',
	        null,
	        this.props.questao.pergunta
	      ),
	      React.createElement(
	        RadioButtonGroup,
	        { ref: "opt", name: "questao_" + this.props.questao.id },
	        ["Nunca", "Raramente", "Algumas vezes", "Geralmente", "Sempre"].map(function (label, index) {
	          return React.createElement(RadioButton, { ref: label, value: index + 1, label: label });
	        })
	      )
	    );
	  }
	});

	var Relatorio = React.createClass({
	  displayName: 'Relatorio',

	  childContextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  getChildContext: function getChildContext() {
	    return {
	      muiTheme: ThemeManager.getCurrentTheme()
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      competencias: this.props.competencias,
	      tabsValue: 'a'
	    };
	  },

	  componentWillMount: function componentWillMount() {
	    ThemeManager.setPalette({
	      accent1Color: Colors.deepOrange500
	    });
	  },

	  subTotal1: 0,
	  subTotal2: 0,
	  subTotal3: 0,
	  caracteristicasData: {
	    name: "a",
	    colorByPoint: true,
	    data: []
	  },
	  informacoesData: {
	    name: "Brands",
	    colorByPoint: true,
	    data: []
	  },

	  render: function render() {
	    var _this = this;
	    var qIndex = undefined;
	    var value = 0;
	    var factor = 0;
	    var competencias = this.state.competencias;
	    for (var m in competencias.fatMask) {
	      qIndex = competencias.fatMask[m];

	      value = Math.sign(qIndex) * this.props.ans[Math.abs(qIndex) - 1].value;

	      factor += value;
	    }

	    factor = competencias.correcao(factor);

	    for (var competencia in competencias.competencias) {

	      competencias.competencias[competencia].value = 0;

	      for (var m in competencias.competencias[competencia].mask) {
	        qIndex = competencias.competencias[competencia].mask[m];

	        value = Math.sign(qIndex) * this.props.ans[Math.abs(qIndex) - 1];

	        competencias.competencias[competencia].value += value;
	      }

	      competencias.competencias[competencia].value += 6;
	      competencias.competencias[competencia].value -= factor;
	      competencias.competencias[competencia].value *= 100 / 25;
	    }

	    return React.createElement(
	      AppCanvas,
	      null,
	      React.createElement(
	        Tabs,
	        { onChange: this.handleTabsChange },
	        React.createElement(
	          Tab,
	          { label: 'Características', value: 'a' },
	          React.createElement(
	            Paper,
	            { style: { margin: '5vw', padding: '5vw', overflow: 'auto' } },
	            React.createElement('hr', null),
	            React.createElement(
	              'div',
	              { className: 'caracteristicas-table' },
	              React.createElement(
	                'table',
	                { style: { width: '100%' } },
	                React.createElement(
	                  'thead',
	                  null,
	                  React.createElement(
	                    'tr',
	                    null,
	                    React.createElement(
	                      'th',
	                      { style: { width: '80%' } },
	                      'Características empreendedoras pessoais'
	                    ),
	                    React.createElement(
	                      'th',
	                      { style: { width: '10%' } },
	                      'OBITIDA'
	                    ),
	                    React.createElement(
	                      'th',
	                      { style: { width: '10%' } },
	                      'MÁXIMA'
	                    )
	                  )
	                ),
	                React.createElement(
	                  'tbody',
	                  null,
	                  React.createElement(
	                    'tr',
	                    null,
	                    React.createElement(
	                      'th',
	                      null,
	                      'Realização'
	                    )
	                  ),
	                  competencias.competencias.slice(0, 5).map(function (data) {
	                    _this.subTotal1 += data.value;
	                    _this.caracteristicasData.data.push({ y: data.value, name: data.label });
	                    _this.informacoesData.data.push({ y: data.value, name: data.label });
	                    return React.createElement(
	                      'tr',
	                      null,
	                      React.createElement(
	                        'td',
	                        null,
	                        data.label
	                      ),
	                      React.createElement(
	                        'td',
	                        { style: { 'text-align': 'center' } },
	                        data.value
	                      ),
	                      React.createElement(
	                        'td',
	                        { style: { 'text-align': 'center' } },
	                        '100'
	                      )
	                    );
	                  }),
	                  React.createElement(
	                    'tr',
	                    null,
	                    React.createElement(
	                      'th',
	                      { style: { 'text-align': 'left' } },
	                      'Sub Total I'
	                    ),
	                    React.createElement(
	                      'th',
	                      null,
	                      this.subTotal1
	                    ),
	                    React.createElement(
	                      'th',
	                      null,
	                      '500'
	                    )
	                  ),
	                  React.createElement('tr', null),
	                  React.createElement(
	                    'tr',
	                    null,
	                    React.createElement(
	                      'th',
	                      null,
	                      'Planejamento'
	                    )
	                  ),
	                  competencias.competencias.slice(5, 8).map(function (data) {
	                    _this.subTotal2 += data.value;
	                    _this.caracteristicasData.data.push({ y: data.value, name: data.label });
	                    _this.informacoesData.data.push({ y: data.value, name: data.label });
	                    return React.createElement(
	                      'tr',
	                      null,
	                      React.createElement(
	                        'td',
	                        null,
	                        data.label
	                      ),
	                      React.createElement(
	                        'td',
	                        { style: { 'text-align': 'center' } },
	                        data.value
	                      ),
	                      React.createElement(
	                        'td',
	                        { style: { 'text-align': 'center' } },
	                        '100'
	                      )
	                    );
	                  }),
	                  React.createElement(
	                    'tr',
	                    null,
	                    React.createElement(
	                      'th',
	                      { style: { 'text-align': 'left' } },
	                      'Sub Total II'
	                    ),
	                    React.createElement(
	                      'th',
	                      null,
	                      this.subTotal2
	                    ),
	                    React.createElement(
	                      'th',
	                      null,
	                      '300'
	                    )
	                  ),
	                  React.createElement('tr', null),
	                  React.createElement(
	                    'tr',
	                    null,
	                    React.createElement(
	                      'th',
	                      null,
	                      'Poder'
	                    )
	                  ),
	                  competencias.competencias.slice(8, 10).map(function (data) {
	                    _this.subTotal3 += data.value;
	                    _this.caracteristicasData.data.push({ y: data.value, name: data.label });
	                    _this.informacoesData.data.push({ y: data.value, name: data.label });
	                    return React.createElement(
	                      'tr',
	                      null,
	                      React.createElement(
	                        'td',
	                        null,
	                        data.label
	                      ),
	                      React.createElement(
	                        'td',
	                        { style: { 'text-align': 'center' } },
	                        data.value
	                      ),
	                      React.createElement(
	                        'td',
	                        { style: { 'text-align': 'center' } },
	                        '100'
	                      )
	                    );
	                  }),
	                  React.createElement(
	                    'tr',
	                    null,
	                    React.createElement(
	                      'th',
	                      { style: { 'text-align': 'left' } },
	                      'Sub Total III'
	                    ),
	                    React.createElement(
	                      'th',
	                      null,
	                      this.subTotal3
	                    ),
	                    React.createElement(
	                      'th',
	                      null,
	                      '200'
	                    )
	                  )
	                )
	              )
	            ),
	            React.createElement(
	              'div',
	              { className: 'caracteristicas-totais-table' },
	              React.createElement(
	                'table',
	                { style: { width: '100%' } },
	                React.createElement(
	                  'thead',
	                  null,
	                  React.createElement(
	                    'tr',
	                    null,
	                    React.createElement(
	                      'th',
	                      { style: { width: '70%' } },
	                      'CARACTERÍSTICAS'
	                    ),
	                    React.createElement(
	                      'th',
	                      { style: { width: '10%' } },
	                      'OBTIDA'
	                    ),
	                    React.createElement(
	                      'th',
	                      { style: { width: '10%' } },
	                      'MÁXIMA'
	                    ),
	                    React.createElement(
	                      'th',
	                      { style: { width: '10%' } },
	                      '%'
	                    )
	                  )
	                ),
	                React.createElement(
	                  'tbody',
	                  null,
	                  React.createElement(
	                    'tr',
	                    null,
	                    React.createElement(
	                      'td',
	                      null,
	                      'Realização'
	                    ),
	                    React.createElement(
	                      'td',
	                      { style: { 'text-align': 'center' } },
	                      this.subTotal1
	                    ),
	                    React.createElement(
	                      'td',
	                      { style: { 'text-align': 'center' } },
	                      '500'
	                    ),
	                    React.createElement(
	                      'td',
	                      { style: { 'text-align': 'center' } },
	                      Math.round(100 * this.subTotal1 / 500)
	                    )
	                  ),
	                  React.createElement(
	                    'tr',
	                    null,
	                    React.createElement(
	                      'td',
	                      { style: { 'text-align': 'left' } },
	                      'Planejamento'
	                    ),
	                    React.createElement(
	                      'td',
	                      { style: { 'text-align': 'center' } },
	                      this.subTotal2
	                    ),
	                    React.createElement(
	                      'td',
	                      { style: { 'text-align': 'center' } },
	                      '300'
	                    ),
	                    React.createElement(
	                      'td',
	                      { style: { 'text-align': 'center' } },
	                      Math.round(100 * this.subTotal2 / 300)
	                    )
	                  ),
	                  React.createElement(
	                    'tr',
	                    null,
	                    React.createElement(
	                      'td',
	                      { style: { 'text-align': 'left' } },
	                      'Poder'
	                    ),
	                    React.createElement(
	                      'td',
	                      { style: { 'text-align': 'center' } },
	                      this.subTotal3
	                    ),
	                    React.createElement(
	                      'td',
	                      { style: { 'text-align': 'center' } },
	                      '200'
	                    ),
	                    React.createElement(
	                      'td',
	                      { style: { 'text-align': 'center' } },
	                      Math.round(100 * this.subTotal3 / 200)
	                    )
	                  ),
	                  React.createElement(
	                    'tr',
	                    null,
	                    React.createElement(
	                      'th',
	                      { style: { 'text-align': 'left' } },
	                      'Total'
	                    ),
	                    React.createElement(
	                      'th',
	                      { style: { 'text-align': 'center' } },
	                      this.subTotal1 + this.subTotal2 + this.subTotal3
	                    ),
	                    React.createElement(
	                      'th',
	                      { style: { 'text-align': 'center' } },
	                      '1000'
	                    ),
	                    React.createElement(
	                      'th',
	                      { style: { 'text-align': 'center' } },
	                      Math.round(100 * (this.subTotal1 + this.subTotal2 + this.subTotal3) / 1000)
	                    )
	                  )
	                )
	              )
	            )
	          )
	        ),
	        React.createElement(
	          Tab,
	          { label: 'Gráfico Detalhado', value: 'b' },
	          React.createElement(
	            Paper,
	            { style: { margin: '5vw', padding: '5vw' } },
	            React.createElement(Highcharts, { config: {
	                chart: {
	                  type: 'column'
	                },
	                title: {
	                  text: 'GRÁFICO CARACTERÍSTICA REALIZAÇÃO'
	                },
	                xAxis: {
	                  type: 'category',
	                  labels: {
	                    autoRotation: [-90]
	                  }
	                },
	                yAxis: {
	                  labels: {
	                    enabled: false
	                  },
	                  title: {
	                    text: false
	                  }

	                },
	                legend: {
	                  enabled: false
	                },
	                plotOptions: {
	                  series: {
	                    borderWidth: 0,
	                    dataLabels: {
	                      enabled: true,
	                      format: '{point.y:.1f}%'
	                    }
	                  }
	                },
	                tooltip: {
	                  headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
	                  pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.0f}%</b> of total<br/>'
	                },
	                series: [this.informacoesData]
	              } })
	          )
	        ),
	        React.createElement(
	          Tab,
	          { label: 'Gráfico Total', value: 'c' },
	          React.createElement(
	            Paper,
	            { style: { margin: '5vw', padding: '5vw' } },
	            React.createElement(Highcharts, { config: {
	                chart: {
	                  type: 'column'
	                },
	                title: {
	                  text: 'GRÁFICO CARACTERÍSTICA TOTAL'
	                },
	                xAxis: {
	                  type: 'category',
	                  labels: {
	                    autoRotation: [-10, -20, -30, -40, -50, -60, -70, -80, -90]
	                  }
	                },
	                yAxis: {
	                  labels: {
	                    enabled: false
	                  },
	                  title: {
	                    text: false
	                  }
	                },
	                legend: {
	                  enabled: false
	                },
	                plotOptions: {
	                  series: {
	                    borderWidth: 0,
	                    dataLabels: {
	                      enabled: true,
	                      format: '{point.y:.1f}%'
	                    }
	                  }
	                },
	                tooltip: {
	                  headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
	                  pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.1f}%</b> of total<br/>'
	                },
	                series: [{
	                  name: "Característica",
	                  colorByPoint: true,
	                  data: [{
	                    name: "Realização",
	                    y: this.subTotal1
	                  }, {
	                    name: "Planejamento",
	                    y: this.subTotal2
	                  }, {
	                    name: "Poder",
	                    y: this.subTotal3
	                  }, {
	                    name: "Total",
	                    y: this.subTotal1 + this.subTotal2 + this.subTotal3
	                  }]
	                }]
	              } })
	          )
	        )
	      )
	    );
	  }
	});
	React.render(React.createElement(PerfilEmpreendedor, null), document.body);
	/*REALIZAÇÃO*/ /*TOTAL*/

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var EventPluginUtils = __webpack_require__(4);
	var ReactChildren = __webpack_require__(8);
	var ReactComponent = __webpack_require__(22);
	var ReactClass = __webpack_require__(37);
	var ReactContext = __webpack_require__(12);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactElement = __webpack_require__(11);
	var ReactElementValidator = __webpack_require__(32);
	var ReactDOM = __webpack_require__(40);
	var ReactDOMTextComponent = __webpack_require__(42);
	var ReactDefaultInjection = __webpack_require__(91);
	var ReactInstanceHandles = __webpack_require__(19);
	var ReactMount = __webpack_require__(67);
	var ReactPerf = __webpack_require__(28);
	var ReactPropTypes = __webpack_require__(122);
	var ReactReconciler = __webpack_require__(29);
	var ReactServerRendering = __webpack_require__(154);

	var assign = __webpack_require__(13);
	var findDOMNode = __webpack_require__(111);
	var onlyChild = __webpack_require__(156);

	ReactDefaultInjection.inject();

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if ("production" !== process.env.NODE_ENV) {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    only: onlyChild
	  },
	  Component: ReactComponent,
	  DOM: ReactDOM,
	  PropTypes: ReactPropTypes,
	  initializeTouchEvents: function(shouldUseTouch) {
	    EventPluginUtils.useTouchEvents = shouldUseTouch;
	  },
	  createClass: ReactClass.createClass,
	  createElement: createElement,
	  cloneElement: cloneElement,
	  createFactory: createFactory,
	  createMixin: function(mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
	  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
	  findDOMNode: findDOMNode,
	  render: render,
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  isValidElement: ReactElement.isValidElement,
	  withContext: ReactContext.withContext,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if ("production" !== process.env.NODE_ENV) {
	  var ExecutionEnvironment = __webpack_require__(51);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // If we're in Chrome, look for the devtools marker and provide a download
	    // link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1) {
	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	        console.debug(
	          'Download the React DevTools for a better development experience: ' +
	          'https://fb.me/react-devtools'
	        );
	      }
	    }

	    var expectedFeatures = [
	      // shims
	      Array.isArray,
	      Array.prototype.every,
	      Array.prototype.forEach,
	      Array.prototype.indexOf,
	      Array.prototype.map,
	      Date.now,
	      Function.prototype.bind,
	      Object.keys,
	      String.prototype.split,
	      String.prototype.trim,

	      // shams
	      Object.create,
	      Object.freeze
	    ];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error(
	          'One or more ES5 shim/shams expected by React are not available: ' +
	          'https://fb.me/react-warning-polyfills'
	        );
	        break;
	      }
	    }
	  }
	}

	React.version = '0.13.3';

	module.exports = React;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);

	var invariant = __webpack_require__(7);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        InjectedMount && InjectedMount.getNode,
	        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
	        'is missing getNode.'
	      ) : invariant(InjectedMount && InjectedMount.getNode));
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp ||
	         topLevelType === topLevelTypes.topTouchEnd ||
	         topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove ||
	         topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown ||
	         topLevelType === topLevelTypes.topTouchStart;
	}


	var validateEventDispatches;
	if ("production" !== process.env.NODE_ENV) {
	  validateEventDispatches = function(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ?
	      dispatchListeners.length :
	      dispatchListeners ? 1 : 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      idsIsArr === listenersIsArr && IDsLen === listenersLen,
	      'EventPluginUtils: Invalid `event`.'
	    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
	  };
	}

	/**
	 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
	 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
	 * kept separate to conserve memory.
	 */
	function forEachEventDispatch(event, cb) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      cb(event, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    cb(event, dispatchListeners, dispatchIDs);
	  }
	}

	/**
	 * Default implementation of PluginModule.executeDispatch().
	 * @param {SyntheticEvent} SyntheticEvent to handle
	 * @param {function} Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, listener, domID) {
	  event.currentTarget = injection.Mount.getNode(domID);
	  var returnValue = listener(event, domID);
	  event.currentTarget = null;
	  return returnValue;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, cb) {
	  forEachEventDispatch(event, cb);
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return id of the first dispatch execution who's listener returns true, or
	 * null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(dispatchListener),
	    'executeDirectDispatch(...): Invalid `event`.'
	  ) : invariant(!Array.isArray(dispatchListener)));
	  var res = dispatchListener ?
	    dispatchListener(event, dispatchID) :
	    null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {bool} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatch: executeDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	  injection: injection,
	  useTouchEvents: false
	};

	module.exports = EventPluginUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(6);

	var PropagationPhases = keyMirror({bubbled: null, captured: null});

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topBlur: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topReset: null,
	  topScroll: null,
	  topSelectionChange: null,
	  topSubmit: null,
	  topTextInput: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    obj instanceof Object && !Array.isArray(obj),
	    'keyMirror(...): Argument must be an object.'
	  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);
	var ReactFragment = __webpack_require__(10);

	var traverseAllChildren = __webpack_require__(18);
	var warning = __webpack_require__(15);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var threeArgumentPooler = PooledClass.threeArgumentPooler;

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.forEachFunction = forEachFunction;
	  this.forEachContext = forEachContext;
	}
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(traverseContext, child, name, i) {
	  var forEachBookKeeping = traverseContext;
	  forEachBookKeeping.forEachFunction.call(
	    forEachBookKeeping.forEachContext, child, i);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }

	  var traverseContext =
	    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, mapFunction, mapContext) {
	  this.mapResult = mapResult;
	  this.mapFunction = mapFunction;
	  this.mapContext = mapContext;
	}
	PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

	function mapSingleChildIntoContext(traverseContext, child, name, i) {
	  var mapBookKeeping = traverseContext;
	  var mapResult = mapBookKeeping.mapResult;

	  var keyUnique = !mapResult.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'ReactChildren.map(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }

	  if (keyUnique) {
	    var mappedChild =
	      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
	    mapResult[name] = mappedChild;
	  }
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * TODO: This may likely break any calls to `ReactChildren.map` that were
	 * previously relying on the fact that we guarded against null children.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var mapResult = {};
	  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	  return ReactFragment.create(mapResult);
	}

	function forEachSingleChildDummy(traverseContext, child, name, i) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  count: countChildren
	};

	module.exports = ReactChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function(instance) {
	  var Klass = this;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance instanceof Klass,
	    'Trying to release an instance into a pool of a different type.'
	  ) : invariant(instance instanceof Klass));
	  if (instance.destructor) {
	    instance.destructor();
	  }
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactFragment
	*/

	'use strict';

	var ReactElement = __webpack_require__(11);

	var warning = __webpack_require__(15);

	/**
	 * We used to allow keyed objects to serve as a collection of ReactElements,
	 * or nested sets. This allowed us a way to explicitly key a set a fragment of
	 * components. This is now being replaced with an opaque data structure.
	 * The upgrade path is to call React.addons.createFragment({ key: value }) to
	 * create a keyed fragment. The resulting data structure is opaque, for now.
	 */

	if ("production" !== process.env.NODE_ENV) {
	  var fragmentKey = '_reactFragment';
	  var didWarnKey = '_reactDidWarn';
	  var canWarnForReactFragment = false;

	  try {
	    // Feature test. Don't even try to issue this warning if we can't use
	    // enumerable: false.

	    var dummy = function() {
	      return 1;
	    };

	    Object.defineProperty(
	      {},
	      fragmentKey,
	      {enumerable: false, value: true}
	    );

	    Object.defineProperty(
	      {},
	      'key',
	      {enumerable: true, get: dummy}
	    );

	    canWarnForReactFragment = true;
	  } catch (x) { }

	  var proxyPropertyAccessWithWarning = function(obj, key) {
	    Object.defineProperty(obj, key, {
	      enumerable: true,
	      get: function() {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an opaque type. Accessing any of its ' +
	          'properties is deprecated. Pass it to one of the React.Children ' +
	          'helpers.'
	        ) : null);
	        this[didWarnKey] = true;
	        return this[fragmentKey][key];
	      },
	      set: function(value) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an immutable opaque type. Mutating its ' +
	          'properties is deprecated.'
	        ) : null);
	        this[didWarnKey] = true;
	        this[fragmentKey][key] = value;
	      }
	    });
	  };

	  var issuedWarnings = {};

	  var didWarnForFragment = function(fragment) {
	    // We use the keys and the type of the value as a heuristic to dedupe the
	    // warning to avoid spamming too much.
	    var fragmentCacheKey = '';
	    for (var key in fragment) {
	      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
	    }
	    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
	    issuedWarnings[fragmentCacheKey] = true;
	    return alreadyWarnedOnce;
	  };
	}

	var ReactFragment = {
	  // Wrap a keyed object in an opaque proxy that warns you if you access any
	  // of its properties.
	  create: function(object) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (typeof object !== 'object' || !object || Array.isArray(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment only accepts a single object.',
	          object
	        ) : null);
	        return object;
	      }
	      if (ReactElement.isValidElement(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment does not accept a ReactElement ' +
	          'without a wrapper object.'
	        ) : null);
	        return object;
	      }
	      if (canWarnForReactFragment) {
	        var proxy = {};
	        Object.defineProperty(proxy, fragmentKey, {
	          enumerable: false,
	          value: object
	        });
	        Object.defineProperty(proxy, didWarnKey, {
	          writable: true,
	          enumerable: false,
	          value: false
	        });
	        for (var key in object) {
	          proxyPropertyAccessWithWarning(proxy, key);
	        }
	        Object.preventExtensions(proxy);
	        return proxy;
	      }
	    }
	    return object;
	  },
	  // Extract the original keyed object from the fragment opaque type. Warn if
	  // a plain object is passed here.
	  extract: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        if (!fragment[fragmentKey]) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnForFragment(fragment),
	            'Any use of a keyed object should be wrapped in ' +
	            'React.addons.createFragment(object) before being passed as a ' +
	            'child.'
	          ) : null);
	          return fragment;
	        }
	        return fragment[fragmentKey];
	      }
	    }
	    return fragment;
	  },
	  // Check if this is a fragment and if so, extract the keyed object. If it
	  // is a fragment-like object, warn that it should be wrapped. Ignore if we
	  // can't determine what kind of object this is.
	  extractIfFragment: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        // If it is the opaque type, return the keyed object.
	        if (fragment[fragmentKey]) {
	          return fragment[fragmentKey];
	        }
	        // Otherwise, check each property if it has an element, if it does
	        // it is probably meant as a fragment, so we can warn early. Defer,
	        // the warning to extract.
	        for (var key in fragment) {
	          if (fragment.hasOwnProperty(key) &&
	              ReactElement.isValidElement(fragment[key])) {
	            // This looks like a fragment object, we should provide an
	            // early warning.
	            return ReactFragment.extract(fragment);
	          }
	        }
	      }
	    }
	    return fragment;
	  }
	};

	module.exports = ReactFragment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactContext = __webpack_require__(12);
	var ReactCurrentOwner = __webpack_require__(17);

	var assign = __webpack_require__(13);
	var warning = __webpack_require__(15);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true
	};

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} object
	 * @param {string} key
	 */
	function defineWarningProperty(object, key) {
	  Object.defineProperty(object, key, {

	    configurable: false,
	    enumerable: true,

	    get: function() {
	      if (!this._store) {
	        return null;
	      }
	      return this._store[key];
	    },

	    set: function(value) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        false,
	        'Don\'t set the %s property of the React element. Instead, ' +
	        'specify the correct value when initially creating the element.',
	        key
	      ) : null);
	      this._store[key] = value;
	    }

	  });
	}

	/**
	 * This is updated to true if the membrane is successfully created.
	 */
	var useMutationMembrane = false;

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} element
	 */
	function defineMutationMembrane(prototype) {
	  try {
	    var pseudoFrozenProperties = {
	      props: true
	    };
	    for (var key in pseudoFrozenProperties) {
	      defineWarningProperty(prototype, key);
	    }
	    useMutationMembrane = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {string|object} ref
	 * @param {*} key
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function(type, key, ref, owner, context, props) {
	  // Built-in properties that belong on the element
	  this.type = type;
	  this.key = key;
	  this.ref = ref;

	  // Record the component responsible for creating this element.
	  this._owner = owner;

	  // TODO: Deprecate withContext, and then the context becomes accessible
	  // through the owner.
	  this._context = context;

	  if ("production" !== process.env.NODE_ENV) {
	    // The validation flag and props are currently mutative. We put them on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    this._store = {props: props, originalProps: assign({}, props)};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    try {
	      Object.defineProperty(this._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true
	      });
	    } catch (x) {
	    }
	    this._store.validated = false;

	    // We're not allowed to set props directly on the object so we early
	    // return and rely on the prototype membrane to forward to the backing
	    // store.
	    if (useMutationMembrane) {
	      Object.freeze(this);
	      return;
	    }
	  }

	  this.props = props;
	};

	// We intentionally don't expose the function on the constructor property.
	// ReactElement should be indistinguishable from a plain object.
	ReactElement.prototype = {
	  _isReactElement: true
	};

	if ("production" !== process.env.NODE_ENV) {
	  defineMutationMembrane(ReactElement.prototype);
	}

	ReactElement.createElement = function(type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return new ReactElement(
	    type,
	    key,
	    ref,
	    ReactCurrentOwner.current,
	    ReactContext.current,
	    props
	  );
	};

	ReactElement.createFactory = function(type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
	  var newElement = new ReactElement(
	    oldElement.type,
	    oldElement.key,
	    oldElement.ref,
	    oldElement._owner,
	    oldElement._context,
	    newProps
	  );

	  if ("production" !== process.env.NODE_ENV) {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	  return newElement;
	};

	ReactElement.cloneElement = function(element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return new ReactElement(
	    element.type,
	    key,
	    ref,
	    owner,
	    element._context,
	    props
	  );
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function(object) {
	  // ReactTestUtils is often used outside of beforeEach where as React is
	  // within it. This leads to two different instances of React on the same
	  // page. To identify a element from a different React instance we use
	  // a flag instead of an instanceof check.
	  var isElement = !!(object && object._isReactElement);
	  // if (isElement && !(object instanceof ReactElement)) {
	  // This is an indicator that you're using multiple versions of React at the
	  // same time. This will screw with ownership and stuff. Fix it, please.
	  // TODO: We could possibly warn here.
	  // }
	  return isElement;
	};

	module.exports = ReactElement;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactContext
	 */

	'use strict';

	var assign = __webpack_require__(13);
	var emptyObject = __webpack_require__(14);
	var warning = __webpack_require__(15);

	var didWarn = false;

	/**
	 * Keeps track of the current context.
	 *
	 * The context is automatically passed down the component ownership hierarchy
	 * and is accessible via `this.context` on ReactCompositeComponents.
	 */
	var ReactContext = {

	  /**
	   * @internal
	   * @type {object}
	   */
	  current: emptyObject,

	  /**
	   * Temporarily extends the current context while executing scopedCallback.
	   *
	   * A typical use case might look like
	   *
	   *  render: function() {
	   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
	   *
	   *    ));
	   *    return <div>{children}</div>;
	   *  }
	   *
	   * @param {object} newContext New context to merge into the existing context
	   * @param {function} scopedCallback Callback to run with the new context
	   * @return {ReactComponent|array<ReactComponent>}
	   */
	  withContext: function(newContext, scopedCallback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        didWarn,
	        'withContext is deprecated and will be removed in a future version. ' +
	        'Use a wrapper component with getChildContext instead.'
	      ) : null);

	      didWarn = true;
	    }

	    var result;
	    var previousContext = ReactContext.current;
	    ReactContext.current = assign({}, previousContext, newContext);
	    try {
	      result = scopedCallback();
	    } finally {
	      ReactContext.current = previousContext;
	    }
	    return result;
	  }

	};

	module.exports = ReactContext;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 13 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	"use strict";

	var emptyObject = {};

	if ("production" !== process.env.NODE_ENV) {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	"use strict";

	var emptyFunction = __webpack_require__(16);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if ("production" !== process.env.NODE_ENV) {
	  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
	      console.warn(message);
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 16 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	function makeEmptyFunction(arg) {
	  return function() {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function() { return this; };
	emptyFunction.thatReturnsArgument = function(arg) { return arg; };

	module.exports = emptyFunction;


/***/ },
/* 17 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 *
	 * The depth indicate how many composite components are above this render level.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactFragment = __webpack_require__(10);
	var ReactInstanceHandles = __webpack_require__(19);

	var getIteratorFn = __webpack_require__(21);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} key Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(
	    userProvidedKeyEscapeRegex,
	    userProvidedKeyEscaper
	  );
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!number} indexSoFar Number of children encountered until this point.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(
	  children,
	  nameSoFar,
	  indexSoFar,
	  callback,
	  traverseContext
	) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null ||
	      type === 'string' ||
	      type === 'number' ||
	      ReactElement.isValidElement(children)) {
	    callback(
	      traverseContext,
	      children,
	      // If it's the only child, treat the name as if it was wrapped in an array
	      // so that it's consistent if the number of children grows.
	      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
	      indexSoFar
	    );
	    return 1;
	  }

	  var child, nextName, nextIndex;
	  var subtreeCount = 0; // Count of children found in the current subtree.

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = (
	        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	        getComponentKey(child, i)
	      );
	      nextIndex = indexSoFar + subtreeCount;
	      subtreeCount += traverseAllChildrenImpl(
	        child,
	        nextName,
	        nextIndex,
	        callback,
	        traverseContext
	      );
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            getComponentKey(child, ii++)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      } else {
	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnAboutMaps,
	            'Using Maps as children is not yet fully supported. It is an ' +
	            'experimental feature that might be removed. Convert it to a ' +
	            'sequence / iterable of keyed ReactElements instead.'
	          ) : null);
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = (
	              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
	              getComponentKey(child, 0)
	            );
	            nextIndex = indexSoFar + subtreeCount;
	            subtreeCount += traverseAllChildrenImpl(
	              child,
	              nextName,
	              nextIndex,
	              callback,
	              traverseContext
	            );
	          }
	        }
	      }
	    } else if (type === 'object') {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        children.nodeType !== 1,
	        'traverseAllChildren(...): Encountered an invalid child; DOM ' +
	        'elements are not valid children of React components.'
	      ) : invariant(children.nodeType !== 1));
	      var fragment = ReactFragment.extract(children);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          child = fragment[key];
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            wrapUserProvidedKey(key) + SUBSEPARATOR +
	            getComponentKey(child, 0)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      }
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
	}

	module.exports = traverseAllChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(20);

	var invariant = __webpack_require__(7);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 100;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || (
	    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
	  );
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return (
	    descendantID.indexOf(ancestorID) === 0 &&
	    isBoundary(descendantID, ancestorID.length)
	  );
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(ancestorID) && isValidID(destinationID),
	    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
	    ancestorID,
	    destinationID
	  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isAncestorIDOf(ancestorID, destinationID),
	    'getNextDescendantID(...): React has made an invalid assumption about ' +
	    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
	    ancestorID,
	    destinationID
	  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(longestCommonID),
	    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
	    oneID,
	    twoID,
	    longestCommonID
	  ) : invariant(isValidID(longestCommonID)));
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  ("production" !== process.env.NODE_ENV ? invariant(
	    start !== stop,
	    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
	    start
	  ) : invariant(start !== stop));
	  var traverseUp = isAncestorIDOf(stop, start);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    traverseUp || isAncestorIDOf(start, stop),
	    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
	    'not have a parent path.',
	    start,
	    stop
	  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start; /* until break */; id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      depth++ < MAX_TREE_DEPTH,
	      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
	      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
	      start, stop
	    ) : invariant(depth++ < MAX_TREE_DEPTH));
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function(rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 20 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;


/***/ },
/* 21 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (
	    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
	  );
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactUpdateQueue = __webpack_require__(23);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context) {
	  this.props = props;
	  this.context = context;
	}

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function(partialState, callback) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof partialState === 'object' ||
	    typeof partialState === 'function' ||
	    partialState == null,
	    'setState(...): takes an object of state variables to update or a ' +
	    'function which returns an object of state variables.'
	  ) : invariant(typeof partialState === 'object' ||
	  typeof partialState === 'function' ||
	  partialState == null));
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      partialState != null,
	      'setState(...): You passed an undefined or null state object; ' +
	      'instead, use forceUpdate().'
	    ) : null);
	  }
	  ReactUpdateQueue.enqueueSetState(this, partialState);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function(callback) {
	  ReactUpdateQueue.enqueueForceUpdate(this);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if ("production" !== process.env.NODE_ENV) {
	  var deprecatedAPIs = {
	    getDOMNode: [
	      'getDOMNode',
	      'Use React.findDOMNode(component) instead.'
	    ],
	    isMounted: [
	      'isMounted',
	      'Instead, make sure to clean up subscriptions and pending requests in ' +
	      'componentWillUnmount to prevent memory leaks.'
	    ],
	    replaceProps: [
	      'replaceProps',
	      'Instead, call React.render again at the top level.'
	    ],
	    replaceState: [
	      'replaceState',
	      'Refactor your code to use setState instead (see ' +
	      'https://github.com/facebook/react/issues/3236).'
	    ],
	    setProps: [
	      'setProps',
	      'Instead, call React.render again at the top level.'
	    ]
	  };
	  var defineDeprecationWarning = function(methodName, info) {
	    try {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function() {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            '%s(...) is deprecated in plain JavaScript React classes. %s',
	            info[0],
	            info[1]
	          ) : null);
	          return undefined;
	        }
	      });
	    } catch (x) {
	      // IE will fail on defineProperty (es5-shim/sham too)
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactLifeCycle = __webpack_require__(24);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactElement = __webpack_require__(11);
	var ReactInstanceMap = __webpack_require__(25);
	var ReactUpdates = __webpack_require__(26);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	function enqueueUpdate(internalInstance) {
	  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
	    // If we're in a componentWillMount handler, don't enqueue a rerender
	    // because ReactUpdates assumes we're in a browser context (which is
	    // wrong for server rendering) and we're about to do a render anyway.
	    // See bug in #1740.
	    ReactUpdates.enqueueUpdate(internalInstance);
	  }
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactCurrentOwner.current == null,
	    '%s(...): Cannot update during an existing state transition ' +
	    '(such as within `render`). Render methods should be a pure function ' +
	    'of props and state.',
	    callerName
	  ) : invariant(ReactCurrentOwner.current == null));

	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if ("production" !== process.env.NODE_ENV) {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !callerName,
	        '%s(...): Can only update a mounted or mounting component. ' +
	        'This usually means you called %s() on an unmounted ' +
	        'component. This is a no-op.',
	        callerName,
	        callerName
	      ) : null);
	    }
	    return null;
	  }

	  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
	    return null;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function(publicInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance ||
	        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function(internalInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldUpdateComponent`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function(publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'forceUpdate'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function(publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function(publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    var queue =
	      internalInstance._pendingStateQueue ||
	      (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function(publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'setProps(...): You called `setProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    var props = assign({}, element.props, partialProps);
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function(publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'replaceProps(...): You called `replaceProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function(internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 24 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLifeCycle
	 */

	'use strict';

	/**
	 * This module manages the bookkeeping when a component is in the process
	 * of being mounted or being unmounted. This is used as a way to enforce
	 * invariants (or warnings) when it is not recommended to call
	 * setState/forceUpdate.
	 *
	 * currentlyMountingInstance: During the construction phase, it is not possible
	 * to trigger an update since the instance is not fully mounted yet. However, we
	 * currently allow this as a convenience for mutating the initial state.
	 *
	 * currentlyUnmountingInstance: During the unmounting phase, the instance is
	 * still mounted and can therefore schedule an update. However, this is not
	 * recommended and probably an error since it's about to be unmounted.
	 * Therefore we still want to trigger in an error for that case.
	 */

	var ReactLifeCycle = {
	  currentlyMountingInstance: null,
	  currentlyUnmountingInstance: null
	};

	module.exports = ReactLifeCycle;


/***/ },
/* 25 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function(key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function(key) {
	    return key._reactInternalInstance;
	  },

	  has: function(key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function(key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(27);
	var PooledClass = __webpack_require__(9);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactPerf = __webpack_require__(28);
	var ReactReconciler = __webpack_require__(29);
	var Transaction = __webpack_require__(36);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
	    'ReactUpdates: must inject a reconcile transaction class and batching ' +
	    'strategy'
	  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
	}

	var NESTED_UPDATES = {
	  initialize: function() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function() {
	    this.callbackQueue.reset();
	  },
	  close: function() {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction =
	    ReactUpdates.ReactReconcileTransaction.getPooled();
	}

	assign(
	  ReactUpdatesFlushTransaction.prototype,
	  Transaction.Mixin, {
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(
	      this,
	      this.reconcileTransaction.perform,
	      this.reconcileTransaction,
	      method,
	      scope,
	      a
	    );
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    len === dirtyComponents.length,
	    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
	    'match dirty-components array length (%s).',
	    len,
	    dirtyComponents.length
	  ) : invariant(len === dirtyComponents.length));

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(
	      component,
	      transaction.reconcileTransaction
	    );

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(
	          callbacks[j],
	          component.getPublicInstance()
	        );
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function() {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure(
	  'ReactUpdates',
	  'flushBatchedUpdates',
	  flushBatchedUpdates
	);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	  ("production" !== process.env.NODE_ENV ? warning(
	    ReactCurrentOwner.current == null,
	    'enqueueUpdate(): Render methods should be a pure function of props ' +
	    'and state; triggering nested component updates from render is not ' +
	    'allowed. If necessary, trigger nested updates in ' +
	    'componentDidUpdate.'
	  ) : null);

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    batchingStrategy.isBatchingUpdates,
	    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
	    'updates are not being batched.'
	  ) : invariant(batchingStrategy.isBatchingUpdates));
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function(ReconcileTransaction) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReconcileTransaction,
	      'ReactUpdates: must provide a reconcile transaction class'
	    ) : invariant(ReconcileTransaction));
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function(_batchingStrategy) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      _batchingStrategy,
	      'ReactUpdates: must provide a batching strategy'
	    ) : invariant(_batchingStrategy));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.batchedUpdates === 'function',
	      'ReactUpdates: must provide a batchedUpdates() function'
	    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
	      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
	    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        callbacks.length === contexts.length,
	        'Mismatched list of contexts in callback queue'
	      ) : invariant(callbacks.length === contexts.length));
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0, l = callbacks.length; i < l; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function() {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function() {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function(object, objectName, methodNames) {
	    if ("production" !== process.env.NODE_ENV) {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(
	          objectName,
	          methodNames[key],
	          object[key]
	        );
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function(objName, fnName, func) {
	    if ("production" !== process.env.NODE_ENV) {
	      var measuredFunc = null;
	      var wrapper = function() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function(measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(30);
	var ReactElementValidator = __webpack_require__(32);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(
	        internalInstance._currentElement
	      );
	    }
	    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function(internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function(
	    internalInstance, nextElement, transaction, context
	  ) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && nextElement._owner != null) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(
	      prevElement,
	      nextElement
	    );

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(
	    internalInstance,
	    transaction
	  ) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(31);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  return (
	    nextElement._owner !== prevElement._owner ||
	    nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function(object) {
	    return !!(
	      (object &&
	      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
	    );
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to add a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to remove a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactFragment = __webpack_require__(10);
	var ReactPropTypeLocations = __webpack_require__(33);
	var ReactPropTypeLocationNames = __webpack_require__(34);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactNativeComponent = __webpack_require__(35);

	var getIteratorFn = __webpack_require__(21);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	var NUMERIC_PROPERTY_REGEX = /^\d+$/;

	/**
	 * Gets the instance's name for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getName(instance) {
	  var publicInstance = instance && instance.getPublicInstance();
	  if (!publicInstance) {
	    return undefined;
	  }
	  var constructor = publicInstance.constructor;
	  if (!constructor) {
	    return undefined;
	  }
	  return constructor.displayName || constructor.name || undefined;
	}

	/**
	 * Gets the current owner's displayName for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getCurrentOwnerDisplayName() {
	  var current = ReactCurrentOwner.current;
	  return (
	    current && getName(current) || undefined
	  );
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  warnAndMonitorForKeyUse(
	    'Each child in an array or iterator should have a unique "key" prop.',
	    element,
	    parentType
	  );
	}

	/**
	 * Warn if the key is being defined as an object property but has an incorrect
	 * value.
	 *
	 * @internal
	 * @param {string} name Property name of the key.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validatePropertyKey(name, element, parentType) {
	  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
	    return;
	  }
	  warnAndMonitorForKeyUse(
	    'Child objects should have non-numeric keys so ordering is preserved.',
	    element,
	    parentType
	  );
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} message The base warning that gets output.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function warnAndMonitorForKeyUse(message, element, parentType) {
	  var ownerName = getCurrentOwnerDisplayName();
	  var parentName = typeof parentType === 'string' ?
	    parentType : parentType.displayName || parentType.name;

	  var useName = ownerName || parentName;
	  var memoizer = ownerHasKeyUseWarning[message] || (
	    (ownerHasKeyUseWarning[message] = {})
	  );
	  if (memoizer.hasOwnProperty(useName)) {
	    return;
	  }
	  memoizer[useName] = true;

	  var parentOrOwnerAddendum =
	    ownerName ? (" Check the render method of " + ownerName + ".") :
	    parentName ? (" Check the React.render call using <" + parentName + ">.") :
	    '';

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwnerAddendum = '';
	  if (element &&
	      element._owner &&
	      element._owner !== ReactCurrentOwner.current) {
	    // Name of the component that originally created this child.
	    var childOwnerName = getName(element._owner);

	    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    message + '%s%s See https://fb.me/react-warning-keys for more information.',
	    parentOrOwnerAddendum,
	    childOwnerAddendum
	  ) : null);
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    node._store.validated = true;
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    } else if (typeof node === 'object') {
	      var fragment = ReactFragment.extractIfFragment(node);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          validatePropertyKey(key, fragment[key], parentType);
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        ("production" !== process.env.NODE_ENV ? invariant(
	          typeof propTypes[propName] === 'function',
	          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	          'React.PropTypes.',
	          componentName || 'React class',
	          ReactPropTypeLocationNames[location],
	          propName
	        ) : invariant(typeof propTypes[propName] === 'function'));
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(this);
	        ("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
	      }
	    }
	  }
	}

	var warnedPropsMutations = {};

	/**
	 * Warn about mutating props when setting `propName` on `element`.
	 *
	 * @param {string} propName The string key within props that was set
	 * @param {ReactElement} element
	 */
	function warnForPropsMutation(propName, element) {
	  var type = element.type;
	  var elementName = typeof type === 'string' ? type : type.displayName;
	  var ownerName = element._owner ?
	    element._owner.getPublicInstance().constructor.displayName : null;

	  var warningKey = propName + '|' + elementName + '|' + ownerName;
	  if (warnedPropsMutations.hasOwnProperty(warningKey)) {
	    return;
	  }
	  warnedPropsMutations[warningKey] = true;

	  var elementInfo = '';
	  if (elementName) {
	    elementInfo = ' <' + elementName + ' />';
	  }
	  var ownerInfo = '';
	  if (ownerName) {
	    ownerInfo = ' The element was created by ' + ownerName + '.';
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
	    'correct value when initially creating the element or use ' +
	    'React.cloneElement to make a new element with updated props.%s',
	    propName,
	    elementInfo,
	    ownerInfo
	  ) : null);
	}

	// Inline Object.is polyfill
	function is(a, b) {
	  if (a !== a) {
	    // NaN
	    return b !== b;
	  }
	  if (a === 0 && b === 0) {
	    // +-0
	    return 1 / a === 1 / b;
	  }
	  return a === b;
	}

	/**
	 * Given an element, check if its props have been mutated since element
	 * creation (or the last call to this function). In particular, check if any
	 * new props have been added, which we can't directly catch by defining warning
	 * properties on the props object.
	 *
	 * @param {ReactElement} element
	 */
	function checkAndWarnForMutatedProps(element) {
	  if (!element._store) {
	    // Element was created using `new ReactElement` directly or with
	    // `ReactElement.createElement`; skip mutation checking
	    return;
	  }

	  var originalProps = element._store.originalProps;
	  var props = element.props;

	  for (var propName in props) {
	    if (props.hasOwnProperty(propName)) {
	      if (!originalProps.hasOwnProperty(propName) ||
	          !is(originalProps[propName], props[propName])) {
	        warnForPropsMutation(propName, element);

	        // Copy over the new value so that the two props objects match again
	        originalProps[propName] = props[propName];
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  if (element.type == null) {
	    // This has already warned. Don't throw.
	    return;
	  }
	  // Extract the component class from the element. Converts string types
	  // to a composite class which may have propTypes.
	  // TODO: Validating a string's propTypes is not decoupled from the
	  // rendering target which is problematic.
	  var componentClass = ReactNativeComponent.getComponentClassForElement(
	    element
	  );
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(
	      name,
	      componentClass.propTypes,
	      element.props,
	      ReactPropTypeLocations.prop
	    );
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    ("production" !== process.env.NODE_ENV ? warning(
	      componentClass.getDefaultProps.isReactClassApproved,
	      'getDefaultProps is only used on classic React.createClass ' +
	      'definitions. Use a static property named `defaultProps` instead.'
	    ) : null);
	  }
	}

	var ReactElementValidator = {

	  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

	  createElement: function(type, props, children) {
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    ("production" !== process.env.NODE_ENV ? warning(
	      type != null,
	      'React.createElement: type should not be null or undefined. It should ' +
	        'be a string (for DOM elements) or a ReactClass (for composite ' +
	        'components).'
	    ) : null);

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(
	      null,
	      type
	    );
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(
	          validatedFactory,
	          'type',
	          {
	            enumerable: false,
	            get: function() {
	              ("production" !== process.env.NODE_ENV ? warning(
	                false,
	                'Factory.type is deprecated. Access the class directly ' +
	                'before passing it to createFactory.'
	              ) : null);
	              Object.defineProperty(this, 'type', {
	                value: type
	              });
	              return type;
	            }
	          }
	        );
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }


	    return validatedFactory;
	  },

	  cloneElement: function(element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(6);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if ("production" !== process.env.NODE_ENV) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function(componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function(componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  },
	  // Temporary hack since we expect DOM refs to behave like composites,
	  // for this release.
	  injectAutoWrapper: function(wrapperFactory) {
	    autoGenerateWrapperClass = wrapperFactory;
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    genericComponentClass,
	    'There is no registered component for the tag %s',
	    element.type
	  ) : invariant(genericComponentClass));
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (!this.wrapperInitData) {
	      this.wrapperInitData = [];
	    } else {
	      this.wrapperInitData.length = 0;
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function() {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} args... Arguments to pass to the method (optional).
	   *                           Helps prevent need to bind in many cases.
	   * @return Return value from `method`.
	   */
	  perform: function(method, scope, a, b, c, d, e, f) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !this.isInTransaction(),
	      'Transaction.perform(...): Cannot initialize a transaction when there ' +
	      'is already an outstanding transaction.'
	    ) : invariant(!this.isInTransaction()));
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {
	          }
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ?
	          wrapper.initialize.call(this) :
	          null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {
	          }
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function(startIndex) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isInTransaction(),
	      'Transaction.closeAll(): Cannot close transaction when none are open.'
	    ) : invariant(this.isInTransaction()));
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {
	          }
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occured.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(22);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactElement = __webpack_require__(11);
	var ReactErrorUtils = __webpack_require__(38);
	var ReactInstanceMap = __webpack_require__(25);
	var ReactLifeCycle = __webpack_require__(24);
	var ReactPropTypeLocations = __webpack_require__(33);
	var ReactPropTypeLocationNames = __webpack_require__(34);
	var ReactUpdateQueue = __webpack_require__(23);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);
	var keyMirror = __webpack_require__(6);
	var keyOf = __webpack_require__(39);
	var warning = __webpack_require__(15);

	var MIXINS_KEY = keyOf({mixins: null});

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,



	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,



	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function(Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function(Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function(Constructor, childContextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        childContextTypes,
	        ReactPropTypeLocations.childContext
	      );
	    }
	    Constructor.childContextTypes = assign(
	      {},
	      Constructor.childContextTypes,
	      childContextTypes
	    );
	  },
	  contextTypes: function(Constructor, contextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        contextTypes,
	        ReactPropTypeLocations.context
	      );
	    }
	    Constructor.contextTypes = assign(
	      {},
	      Constructor.contextTypes,
	      contextTypes
	    );
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function(Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(
	        Constructor.getDefaultProps,
	        getDefaultProps
	      );
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function(Constructor, propTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        propTypes,
	        ReactPropTypeLocations.prop
	      );
	    }
	    Constructor.propTypes = assign(
	      {},
	      Constructor.propTypes,
	      propTypes
	    );
	  },
	  statics: function(Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  }
	};

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof typeDef[propName] === 'function',
	        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	        'React.PropTypes.',
	        Constructor.displayName || 'ReactClass',
	        ReactPropTypeLocationNames[location],
	        propName
	      ) : null);
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
	    ReactClassInterface[name] :
	    null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.OVERRIDE_BASE,
	      'ReactClassInterface: You are attempting to override ' +
	      '`%s` from your class specification. Ensure that your method names ' +
	      'do not overlap with React methods.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.DEFINE_MANY ||
	      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
	      'ReactClassInterface: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be due ' +
	      'to a mixin.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
	    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec !== 'function',
	    'ReactClass: You\'re attempting to ' +
	    'use a component class as a mixin. Instead, just use a regular object.'
	  ) : invariant(typeof spec !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactElement.isValidElement(spec),
	    'ReactClass: You\'re attempting to ' +
	    'use a component as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactElement.isValidElement(spec)));

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod =
	        ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var markedDontBind = property && property.__reactDontBind;
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind =
	        isFunction &&
	        !isReactClassMethod &&
	        !isAlreadyDefined &&
	        !markedDontBind;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride
	          ("production" !== process.env.NODE_ENV ? invariant(
	            isReactClassMethod && (
	              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	            ),
	            'ReactClass: Unexpected spec policy %s for key %s ' +
	            'when mixing in component specs.',
	            specPolicy,
	            name
	          ) : invariant(isReactClassMethod && (
	            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	          )));

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if ("production" !== process.env.NODE_ENV) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isReserved,
	      'ReactClass: You are attempting to define a reserved ' +
	      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	      'as an instance property instead; it will still be accessible on the ' +
	      'constructor.',
	      name
	    ) : invariant(!isReserved));

	    var isInherited = name in Constructor;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isInherited,
	      'ReactClass: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be ' +
	      'due to a mixin.',
	      name
	    ) : invariant(!isInherited));
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    one && two && typeof one === 'object' && typeof two === 'object',
	    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        one[key] === undefined,
	        'mergeIntoWithNoDuplicateKeys(): ' +
	        'Tried to merge two objects with the same key: `%s`. This conflict ' +
	        'may be due to a mixin; in particular, this may be caused by two ' +
	        'getInitialState() or getDefaultProps() methods returning objects ' +
	        'with clashing keys.',
	        key
	      ) : invariant(one[key] === undefined));
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if ("production" !== process.env.NODE_ENV) {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): React component methods may only be bound to the ' +
	          'component instance. See %s',
	          componentName
	        ) : null);
	      } else if (!args.length) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): You are binding a component method to the component. ' +
	          'React does this for you automatically in a high-performance ' +
	          'way, so you can safely remove this call. See %s',
	          componentName
	        ) : null);
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(
	        component,
	        ReactErrorUtils.guard(
	          method,
	          component.constructor.displayName + '.' + autoBindKey
	        )
	      );
	    }
	  }
	}

	var typeDeprecationDescriptor = {
	  enumerable: false,
	  get: function() {
	    var displayName = this.displayName || this.name || 'Component';
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      '%s.type is deprecated. Use %s directly to access the class.',
	      displayName,
	      displayName
	    ) : null);
	    Object.defineProperty(this, 'type', {
	      value: this
	    });
	    return this;
	  }
	};

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function(newState, callback) {
	    ReactUpdateQueue.enqueueReplaceState(this, newState);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function() {
	    if ("production" !== process.env.NODE_ENV) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          owner._warnedAboutRefsInRender,
	          '%s is accessing isMounted inside its render() function. ' +
	          'render() should be a pure function of props and state. It should ' +
	          'never access something that requires stale data from the previous ' +
	          'render, such as refs. Move this logic to componentDidMount and ' +
	          'componentDidUpdate instead.',
	          owner.getName() || 'A component'
	        ) : null);
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(this);
	    return (
	      internalInstance &&
	      internalInstance !== ReactLifeCycle.currentlyMountingInstance
	    );
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function(partialProps, callback) {
	    ReactUpdateQueue.enqueueSetProps(this, partialProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function(newProps, callback) {
	    ReactUpdateQueue.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function() {};
	assign(
	  ReactClassComponent.prototype,
	  ReactComponent.prototype,
	  ReactClassMixin
	);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function(spec) {
	    var Constructor = function(props, context) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	          'JSX instead. See: https://fb.me/react-legacyfactory'
	        ) : null);
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if ("production" !== process.env.NODE_ENV) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' &&
	            this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(
	      mixSpecIntoComponent.bind(null, Constructor)
	    );

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    ) : invariant(Constructor.prototype.render));

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        spec.displayName || 'A component'
	      ) : null);
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    // Legacy hook
	    Constructor.type = Constructor;
	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	"use strict";

	var ReactErrorUtils = {
	  /**
	   * Creates a guarded version of a function. This is supposed to make debugging
	   * of event handlers easier. To aid debugging with the browser's debugger,
	   * this currently simply returns the original function.
	   *
	   * @param {function} func Function to be executed
	   * @param {string} name The name of the guard
	   * @return {function}
	   */
	  guard: function(func, name) {
	    return func;
	  }
	};

	module.exports = ReactErrorUtils;


/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without loosing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};


	module.exports = keyOf;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactElementValidator = __webpack_require__(32);

	var mapObject = __webpack_require__(41);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if ("production" !== process.env.NODE_ENV) {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOM = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOM;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 41 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMPropertyOperations = __webpack_require__(43);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(47);
	var ReactDOMComponent = __webpack_require__(87);

	var assign = __webpack_require__(13);
	var escapeTextContentForBrowser = __webpack_require__(46);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function(props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function(text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    var escapedText = escapeTextContentForBrowser(this._stringText);

	    if (transaction.renderToStaticMarkup) {
	      // Normally we'd wrap this in a `span` for the reasons stated above, but
	      // since this is a situation where React won't take over (static pages),
	      // we can simply return the text as it is.
	      return escapedText;
	    }

	    return (
	      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
	        escapedText +
	      '</span>'
	    );
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function(nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        ReactDOMComponent.BackendIDOperations.updateTextContentByID(
	          this._rootNodeID,
	          nextStringText
	        );
	      }
	    }
	  },

	  unmountComponent: function() {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(44);

	var quoteAttributeValueForBrowser = __webpack_require__(45);
	var warning = __webpack_require__(15);

	function shouldIgnoreValue(name, value) {
	  return value == null ||
	    (DOMProperty.hasBooleanValue[name] && !value) ||
	    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
	    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
	    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
	}

	if ("production" !== process.env.NODE_ENV) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
	        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = (
	      DOMProperty.isCustomAttribute(lowerCasedName) ?
	        lowerCasedName :
	      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
	        DOMProperty.getPossibleStandardName[lowerCasedName] :
	        null
	    );

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    ("production" !== process.env.NODE_ENV ? warning(
	      standardName == null,
	      'Unknown DOM property %s. Did you mean %s?',
	      name,
	      standardName
	    ) : null);

	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function(id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
	      quoteAttributeValueForBrowser(id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function(name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      if (shouldIgnoreValue(name, value)) {
	        return '';
	      }
	      var attributeName = DOMProperty.getAttributeName[name];
	      if (DOMProperty.hasBooleanValue[name] ||
	          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
	        return attributeName;
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function(node, name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(name, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== ('' + value)) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        node.removeAttribute(name);
	      } else {
	        node.setAttribute(name, '' + value);
	      }
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function(node, name) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        node.removeAttribute(DOMProperty.getAttributeName[name]);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        var defaultValue = DOMProperty.getDefaultValueForProperty(
	          node.nodeName,
	          propName
	        );
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  }

	};

	module.exports = DOMPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	/*jslint bitwise: true */

	'use strict';

	var invariant = __webpack_require__(7);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function(domPropertyConfig) {
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(
	        domPropertyConfig.isCustomAttribute
	      );
	    }

	    for (var propName in Properties) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.isStandardName.hasOwnProperty(propName),
	        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
	        '\'%s\' which has already been injected. You may be accidentally ' +
	        'injecting the same DOM property config twice, or you may be ' +
	        'injecting two configs that have conflicting property names.',
	        propName
	      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

	      DOMProperty.isStandardName[propName] = true;

	      var lowerCased = propName.toLowerCase();
	      DOMProperty.getPossibleStandardName[lowerCased] = propName;

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        DOMProperty.getPossibleStandardName[attributeName] = propName;
	        DOMProperty.getAttributeName[propName] = attributeName;
	      } else {
	        DOMProperty.getAttributeName[propName] = lowerCased;
	      }

	      DOMProperty.getPropertyName[propName] =
	        DOMPropertyNames.hasOwnProperty(propName) ?
	          DOMPropertyNames[propName] :
	          propName;

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
	      } else {
	        DOMProperty.getMutationMethod[propName] = null;
	      }

	      var propConfig = Properties[propName];
	      DOMProperty.mustUseAttribute[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
	      DOMProperty.mustUseProperty[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
	      DOMProperty.hasSideEffects[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
	      DOMProperty.hasBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
	      DOMProperty.hasNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
	      DOMProperty.hasPositiveNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
	      DOMProperty.hasOverloadedBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.mustUseAttribute[propName] ||
	          !DOMProperty.mustUseProperty[propName],
	        'DOMProperty: Cannot require using both attribute and property: %s',
	        propName
	      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
	        !DOMProperty.mustUseProperty[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        DOMProperty.mustUseProperty[propName] ||
	          !DOMProperty.hasSideEffects[propName],
	        'DOMProperty: Properties that have side effects must use property: %s',
	        propName
	      ) : invariant(DOMProperty.mustUseProperty[propName] ||
	        !DOMProperty.hasSideEffects[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !!DOMProperty.hasBooleanValue[propName] +
	          !!DOMProperty.hasNumericValue[propName] +
	          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
	        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
	        'numeric value, but not a combination: %s',
	        propName
	      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
	        !!DOMProperty.hasNumericValue[propName] +
	        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Checks whether a property name is a standard property.
	   * @type {Object}
	   */
	  isStandardName: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties.
	   * @type {Object}
	   */
	  getPossibleStandardName: {},

	  /**
	   * Mapping from normalized names to attribute names that differ. Attribute
	   * names are used when rendering markup or with `*Attribute()`.
	   * @type {Object}
	   */
	  getAttributeName: {},

	  /**
	   * Mapping from normalized names to properties on DOM node instances.
	   * (This includes properties that mutate due to external factors.)
	   * @type {Object}
	   */
	  getPropertyName: {},

	  /**
	   * Mapping from normalized names to mutation methods. This will only exist if
	   * mutation cannot be set simply by the property or `setAttribute()`.
	   * @type {Object}
	   */
	  getMutationMethod: {},

	  /**
	   * Whether the property must be accessed and mutated as an object property.
	   * @type {Object}
	   */
	  mustUseAttribute: {},

	  /**
	   * Whether the property must be accessed and mutated using `*Attribute()`.
	   * (This includes anything that fails `<propName> in <element>`.)
	   * @type {Object}
	   */
	  mustUseProperty: {},

	  /**
	   * Whether or not setting a value causes side effects such as triggering
	   * resources to be loaded or text selection changes. We must ensure that
	   * the value is only set if it has changed.
	   * @type {Object}
	   */
	  hasSideEffects: {},

	  /**
	   * Whether the property should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasBooleanValue: {},

	  /**
	   * Whether the property must be numeric or parse as a
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasNumericValue: {},

	  /**
	   * Whether the property must be positive numeric or parse as a positive
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasPositiveNumericValue: {},

	  /**
	   * Whether the property can be used as a flag as well as with a value. Removed
	   * when strictly equal to false; present without a value when strictly equal
	   * to true; present with a value otherwise.
	   * @type {Object}
	   */
	  hasOverloadedBooleanValue: {},

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(46);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;


/***/ },
/* 46 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	/*jslint evil: true */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(48);
	var ReactMount = __webpack_require__(67);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates:
	    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID:
	    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	/*jslint evil: true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(49);
	var DOMChildrenOperations = __webpack_require__(58);
	var DOMPropertyOperations = __webpack_require__(43);
	var ReactMount = __webpack_require__(67);
	var ReactPerf = __webpack_require__(28);

	var invariant = __webpack_require__(7);
	var setInnerHTML = __webpack_require__(66);

	/**
	 * Errors for properties that should not be updated with `updatePropertyById()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML:
	    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes. This is made injectable via
	 * `ReactDOMComponent.BackendIDOperations`.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Updates a DOM node to remove a property. This should only be used to remove
	   * DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A property name to remove, see `DOMProperty`.
	   * @internal
	   */
	  deletePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	    DOMPropertyOperations.deleteValueForProperty(node, name, value);
	  },

	  /**
	   * Updates a DOM node with new style values. If a value is specified as '',
	   * the corresponding style property will be unset.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {object} styles Mapping from styles to values.
	   * @internal
	   */
	  updateStylesByID: function(id, styles) {
	    var node = ReactMount.getNode(id);
	    CSSPropertyOperations.setValueForStyles(node, styles);
	  },

	  /**
	   * Updates a DOM node's innerHTML.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} html An HTML string.
	   * @internal
	   */
	  updateInnerHTMLByID: function(id, html) {
	    var node = ReactMount.getNode(id);
	    setInnerHTML(node, html);
	  },

	  /**
	   * Updates a DOM node's text content set by `props.content`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} content Text content.
	   * @internal
	   */
	  updateTextContentByID: function(id, content) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.updateTextContent(node, content);
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function(updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  updatePropertyByID: 'updatePropertyByID',
	  deletePropertyByID: 'deletePropertyByID',
	  updateStylesByID: 'updateStylesByID',
	  updateInnerHTMLByID: 'updateInnerHTMLByID',
	  updateTextContentByID: 'updateTextContentByID',
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(50);
	var ExecutionEnvironment = __webpack_require__(51);

	var camelizeStyleName = __webpack_require__(52);
	var dangerousStyleValue = __webpack_require__(54);
	var hyphenateStyleName = __webpack_require__(55);
	var memoizeStringOnly = __webpack_require__(57);
	var warning = __webpack_require__(15);

	var processStyleName = memoizeStringOnly(function(styleName) {
	  return hyphenateStyleName(styleName);
	});

	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if ("production" !== process.env.NODE_ENV) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported style property %s. Did you mean %s?',
	      name,
	      camelizeStyleName(name)
	    ) : null);
	  };

	  var warnBadVendoredStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
	      name,
	      name.charAt(0).toUpperCase() + name.slice(1)
	    ) : null);
	  };

	  var warnStyleValueWithSemicolon = function(name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Style property values shouldn\'t contain a semicolon. ' +
	      'Try "%s: %s" instead.',
	      name,
	      value.replace(badStyleValueWithSemicolonPattern, '')
	    ) : null);
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function(name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 50 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  boxFlex: true,
	  boxFlexGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function(prop) {
	  prefixes.forEach(function(prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundImage: true,
	    backgroundPosition: true,
	    backgroundRepeat: true,
	    backgroundColor: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;


/***/ },
/* 51 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	/*jslint evil: true */

	"use strict";

	var canUseDOM = !!(
	  (typeof window !== 'undefined' &&
	  window.document && window.document.createElement)
	);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners:
	    canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	"use strict";

	var camelize = __webpack_require__(53);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;


/***/ },
/* 53 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function(_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(50);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 ||
	      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	"use strict";

	var hyphenate = __webpack_require__(56);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;


/***/ },
/* 56 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;


/***/ },
/* 57 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function(string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(59);
	var ReactMultiChildUpdateTypes = __webpack_require__(64);

	var setTextContent = __webpack_require__(65);
	var invariant = __webpack_require__(7);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	  parentNode.insertBefore(
	    childNode,
	    parentNode.childNodes[index] || null
	  );
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
	          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        ("production" !== process.env.NODE_ENV ? invariant(
	          updatedChild,
	          'processUpdates(): Unable to find child %s of element. This ' +
	          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
	          'browser), usually due to forgetting a <tbody> when using tables, ' +
	          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
	          'in an <svg> parent. Try inspecting the child nodes of the element ' +
	          'with React ID `%s`.',
	          updatedIndex,
	          parentID
	        ) : invariant(updatedChild));

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(
	            update.parentNode,
	            renderedMarkup[update.markupIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(
	            update.parentNode,
	            initialChildren[update.parentID][update.fromIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(
	            update.parentNode,
	            update.textContent
	          );
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	/*jslint evil: true, sub: true */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var createNodesFromMarkup = __webpack_require__(60);
	var emptyFunction = __webpack_require__(16);
	var getMarkupWrap = __webpack_require__(63);
	var invariant = __webpack_require__(7);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function(markupList) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
	      'thread. Make sure `window` and `document` are available globally ' +
	      'before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        markupList[i],
	        'dangerouslyRenderMarkup(...): Missing markup.'
	      ) : invariant(markupList[i]));
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(
	            OPEN_TAG_NAME_EXP,
	            // This index will be parsed back out below.
	            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
	          );
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(
	        markupListByNodeName.join(''),
	        emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute &&
	            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          ("production" !== process.env.NODE_ENV ? invariant(
	            !resultList.hasOwnProperty(resultIndex),
	            'Danger: Assigning to an already-occupied result index.'
	          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;

	        } else if ("production" !== process.env.NODE_ENV) {
	          console.error(
	            'Danger: Discarding unexpected node:',
	            renderNode
	          );
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultListAssignmentCount === resultList.length,
	      'Danger: Did not assign to every index of resultList.'
	    ) : invariant(resultListAssignmentCount === resultList.length));

	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultList.length === markupList.length,
	      'Danger: Expected markup to render %s nodes, but rendered %s.',
	      markupList.length,
	      resultList.length
	    ) : invariant(resultList.length === markupList.length));

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
	      'worker thread. Make sure `window` and `document` are available ' +
	      'globally before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      oldChild.tagName.toLowerCase() !== 'html',
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
	      '<html> node. This is because browser quirks make this unreliable ' +
	      'and/or slow. If you want to render to the root you must use ' +
	      'server rendering. See React.renderToString().'
	    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

	    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*jslint evil: true, sub: true */

	var ExecutionEnvironment = __webpack_require__(51);

	var createArrayFromMixed = __webpack_require__(61);
	var getMarkupWrap = __webpack_require__(63);
	var invariant = __webpack_require__(7);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      handleScript,
	      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
	    ) : invariant(handleScript));
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	var toArray = __webpack_require__(62);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj &&
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    ('length' in obj) &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    (typeof obj.nodeType != 'number') &&
	    (
	      // a real array
	      (// HTMLCollection/NodeList
	      (Array.isArray(obj) ||
	      // arguments
	      ('callee' in obj) || 'item' in obj))
	    )
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	var invariant = __webpack_require__(7);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(obj) &&
	    (typeof obj === 'object' || typeof obj === 'function'),
	    'toArray: Array-like object expected'
	  ) : invariant(!Array.isArray(obj) &&
	  (typeof obj === 'object' || typeof obj === 'function')));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof length === 'number',
	    'toArray: Object needs a length property'
	  ) : invariant(typeof length === 'number'));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    length === 0 ||
	    (length - 1) in obj,
	    'toArray: Object should have keys for indices'
	  ) : invariant(length === 0 ||
	  (length - 1) in obj));

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	var ExecutionEnvironment = __webpack_require__(51);

	var invariant = __webpack_require__(7);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	var shouldWrap = {
	  // Force wrapping for SVG elements because if they get created inside a <div>,
	  // they will be initialized in the wrong namespace (and will not display).
	  'circle': true,
	  'clipPath': true,
	  'defs': true,
	  'ellipse': true,
	  'g': true,
	  'line': true,
	  'linearGradient': true,
	  'path': true,
	  'polygon': true,
	  'polyline': true,
	  'radialGradient': true,
	  'rect': true,
	  'stop': true,
	  'text': true
	};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg>', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap,

	  'circle': svgWrap,
	  'clipPath': svgWrap,
	  'defs': svgWrap,
	  'ellipse': svgWrap,
	  'g': svgWrap,
	  'line': svgWrap,
	  'linearGradient': svgWrap,
	  'path': svgWrap,
	  'polygon': svgWrap,
	  'polyline': svgWrap,
	  'radialGradient': svgWrap,
	  'rect': svgWrap,
	  'stop': svgWrap,
	  'text': svgWrap
	};

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}


	module.exports = getMarkupWrap;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(6);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);
	var escapeTextContentForBrowser = __webpack_require__(46);
	var setInnerHTML = __webpack_require__(66);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function(node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function(node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function(node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function(node, html) {
	    MSApp.execUnsafeLocalFunction(function() {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) ||
	          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        node.innerHTML = '\uFEFF' + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(44);
	var ReactBrowserEventEmitter = __webpack_require__(68);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactElement = __webpack_require__(11);
	var ReactElementValidator = __webpack_require__(32);
	var ReactEmptyComponent = __webpack_require__(76);
	var ReactInstanceHandles = __webpack_require__(19);
	var ReactInstanceMap = __webpack_require__(25);
	var ReactMarkupChecksum = __webpack_require__(77);
	var ReactPerf = __webpack_require__(28);
	var ReactReconciler = __webpack_require__(29);
	var ReactUpdateQueue = __webpack_require__(23);
	var ReactUpdates = __webpack_require__(26);

	var emptyObject = __webpack_require__(14);
	var containsNode = __webpack_require__(79);
	var getReactRootElementInContainer = __webpack_require__(82);
	var instantiateReactComponent = __webpack_require__(83);
	var invariant = __webpack_require__(7);
	var setInnerHTML = __webpack_require__(66);
	var shouldUpdateReactComponent = __webpack_require__(86);
	var warning = __webpack_require__(15);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if ("production" !== process.env.NODE_ENV) {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !isValid(cached, id),
	          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
	          ATTR_NAME, id
	        ) : invariant(!isValid(cached, id)));

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponent.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalGetID(node) === id,
	      'ReactMount: Unexpected modification of `%s`',
	      ATTR_NAME
	    ) : invariant(internalGetID(node) === id));

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(
	    targetID,
	    findDeepestCachedAncestorImpl
	  );

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup) {
	  var markup = ReactReconciler.mountComponent(
	    componentInstance, rootID, transaction, emptyObject
	  );
	  componentInstance._isTopLevel = true;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    shouldReuseMarkup) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  transaction.perform(
	    mountComponentIntoNode,
	    null,
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup
	  );
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function(container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function(
	      prevComponent,
	      nextElement,
	      container,
	      callback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    ReactMount.scrollMonitor(container, function() {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] =
	        getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function(nextComponent, container) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      '_registerComponent(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function(
	    nextElement,
	    container,
	    shouldReuseMarkup
	  ) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      '_renderNewRootComponent(): Render methods should be a pure function ' +
	      'of props and state; triggering nested component updates from ' +
	      'render is not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(
	      componentInstance,
	      container
	    );

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(
	      batchedMountComponentIntoNode,
	      componentInstance,
	      reactRootID,
	      container,
	      shouldReuseMarkup
	    );

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] =
	        getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function(nextElement, container, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactElement.isValidElement(nextElement),
	      'React.render(): Invalid component element.%s',
	      (
	        typeof nextElement === 'string' ?
	          ' Instead of passing an element string, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        typeof nextElement === 'function' ?
	          ' Instead of passing a component class, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        // Check if it quacks like an element
	        nextElement != null && nextElement.props !== undefined ?
	          ' This may be caused by unintentionally loading two independent ' +
	          'copies of React.' :
	          ''
	      )
	    ) : invariant(ReactElement.isValidElement(nextElement)));

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevElement = prevComponent._currentElement;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        return ReactMount._updateRootComponent(
	          prevComponent,
	          nextElement,
	          container,
	          callback
	        ).getPublicInstance();
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup =
	      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

	    if ("production" !== process.env.NODE_ENV) {
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (ReactMount.isRenderedByReact(rootElementSibling)) {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'render(): Target node has markup rendered by React, but there ' +
	              'are unrelated nodes as well. This is most commonly caused by ' +
	              'white-space inserted around server-rendered markup.'
	            ) : null);
	            break;
	          }

	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

	    var component = ReactMount._renderNewRootComponent(
	      nextElement,
	      container,
	      shouldReuseMarkup
	    ).getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into the supplied `container`.
	   *
	   * @param {function} constructor React component constructor.
	   * @param {?object} props Initial props of the component instance.
	   * @param {DOMElement} container DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  constructAndRenderComponent: function(constructor, props, container) {
	    var element = ReactElement.createElement(constructor, props);
	    return ReactMount.render(element, container);
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into a container node identified by supplied `id`.
	   *
	   * @param {function} componentConstructor React component constructor
	   * @param {?object} props Initial props of the component instance.
	   * @param {string} id ID of the DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in the container node.
	   */
	  constructAndRenderComponentByID: function(constructor, props, id) {
	    var domNode = document.getElementById(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      domNode,
	      'Tried to get element with id of "%s" but it is not present on the page.',
	      id
	    ) : invariant(domNode));
	    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      'unmountComponentAtNode(): Render methods should be a pure function of ' +
	      'props and state; triggering nested component updates from render is ' +
	      'not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'unmountComponentAtNode(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      return false;
	    }
	    ReactMount.unmountComponentFromNode(component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if ("production" !== process.env.NODE_ENV) {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Unmounts a component and removes it from the DOM.
	   *
	   * @param {ReactComponent} instance React component instance.
	   * @param {DOMElement} container DOM element to unmount from.
	   * @final
	   * @internal
	   * @see {ReactMount.unmountComponentAtNode}
	   */
	  unmountComponentFromNode: function(instance, container) {
	    ReactReconciler.unmountComponent(instance);

	    if (container.nodeType === DOC_NODE_TYPE) {
	      container = container.documentElement;
	    }

	    // http://jsperf.com/emptying-a-node
	    while (container.lastChild) {
	      container.removeChild(container.lastChild);
	    }
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if ("production" !== process.env.NODE_ENV) {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          // Call internalGetID here because getID calls isValid which calls
	          // findReactContainerForID (this function).
	          internalGetID(rootElement) === reactRootID,
	          'ReactMount: Root element ID differed from reactRootID.'
	        ) : invariant(// Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID));

	        var containerChild = container.firstChild;
	        if (containerChild &&
	            reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'ReactMount: Root element has been removed from its original ' +
	            'container. New container:', rootElement.parentNode
	          ) : null);
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * True if the supplied `node` is rendered by React.
	   *
	   * @param {*} node DOM Element to check.
	   * @return {boolean} True if the DOM Element appears to be rendered by React.
	   * @internal
	   */
	  isRenderedByReact: function(node) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      return false;
	    }
	    var id = ReactMount.getID(node);
	    return id ? id.charAt(0) === SEPARATOR : false;
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function(node) {
	    var current = node;
	    while (current && current.parentNode !== current) {
	      if (ReactMount.isRenderedByReact(current)) {
	        return current;
	      }
	      current = current.parentNode;
	    }
	    return null;
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }

	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'findComponentRoot(..., %s): Unable to find element. This probably ' +
	      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
	      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
	      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
	      'parent. ' +
	      'Try inspecting the child nodes of the element with React ID `%s`.',
	      targetID,
	      ReactMount.getID(ancestorNode)
	    ) : invariant(false));
	  },

	  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'mountComponentIntoNode(...): Target container is not valid.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	        );
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
	          checksum
	        );

	        var diffIndex = firstDifferenceIndex(markup, rootMarkup);
	        var difference = ' (client) ' +
	          markup.substring(diffIndex - 20, diffIndex + 20) +
	          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        ("production" !== process.env.NODE_ENV ? invariant(
	          container.nodeType !== DOC_NODE_TYPE,
	          'You\'re trying to render a component to the document using ' +
	          'server rendering but the checksum was invalid. This usually ' +
	          'means you rendered a different component type or props on ' +
	          'the client from the one on the server, or your render() ' +
	          'methods are impure. React cannot handle this case due to ' +
	          'cross-browser quirks by rendering at the document root. You ' +
	          'should look for environment dependent code in your components ' +
	          'and ensure the props are the same client and server side:\n%s',
	          difference
	        ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'React attempted to reuse markup in a container but the ' +
	            'checksum was invalid. This generally means that you are ' +
	            'using server rendering and the markup generated on the ' +
	            'server was not what the client was expecting. React injected ' +
	            'new markup to compensate which works but you have lost many ' +
	            'of the benefits of server rendering. Instead, figure out ' +
	            'why the markup being generated is different on the client ' +
	            'or server:\n%s',
	            difference
	          ) : null);
	        }
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container.nodeType !== DOC_NODE_TYPE,
	      'You\'re trying to render a component to the document but ' +
	        'you didn\'t use server rendering. We can\'t do this ' +
	        'without using server rendering due to cross-browser quirks. ' +
	        'See React.renderToString() for server rendering.'
	    ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	    setInnerHTML(container, markup);
	  },

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPluginHub = __webpack_require__(69);
	var EventPluginRegistry = __webpack_require__(70);
	var ReactEventEmitterMixin = __webpack_require__(73);
	var ViewportMetrics = __webpack_require__(74);

	var assign = __webpack_require__(13);
	var isEventSupported = __webpack_require__(75);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topBlur: 'blur',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topScroll: 'scroll',
	  topSelectionChange: 'selectionchange',
	  topTextInput: 'textInput',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(
	        ReactBrowserEventEmitter.handleTopLevel
	      );
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function() {
	    return !!(
	      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
	    );
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.
	      registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0, l = dependencies.length; i < l; i++) {
	      var dependency = dependencies[i];
	      if (!(
	            (isListening.hasOwnProperty(dependency) && isListening[dependency])
	          )) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'wheel',
	              mountAt
	            );
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'mousewheel',
	              mountAt
	            );
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'DOMMouseScroll',
	              mountAt
	            );
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              mountAt
	            );
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
	            );
	          }
	        } else if (dependency === topLevelTypes.topFocus ||
	            dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topFocus,
	              'focus',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topBlur,
	              'blur',
	              mountAt
	            );
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topFocus,
	              'focusin',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topBlur,
	              'focusout',
	              mountAt
	            );
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	            dependency,
	            topEventMapping[dependency],
	            mountAt
	          );
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function() {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	module.exports = ReactBrowserEventEmitter;


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(70);
	var EventPluginUtils = __webpack_require__(4);

	var accumulateInto = __webpack_require__(71);
	var forEachAccumulated = __webpack_require__(72);
	var invariant = __webpack_require__(7);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function(event) {
	  if (event) {
	    var executeDispatch = EventPluginUtils.executeDispatch;
	    // Plugins can provide custom behavior when dispatching events.
	    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
	    if (PluginModule && PluginModule.executeDispatch) {
	      executeDispatch = PluginModule.executeDispatch;
	    }
	    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid =
	    InstanceHandle &&
	    InstanceHandle.traverseTwoPhase &&
	    InstanceHandle.traverseEnterLeave;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    valid,
	    'InstanceHandle not injected before use!'
	  ) : invariant(valid));
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function() {
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function(id, registrationName, listener) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !listener || typeof listener === 'function',
	      'Expected %s listener to be a function, instead got type %s',
	      registrationName, typeof listener
	    ) : invariant(!listener || typeof listener === 'function'));

	    var bankForRegistrationName =
	      listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function(id) {
	    for (var registrationName in listenerBank) {
	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0, l = plugins.length; i < l; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(
	          topLevelType,
	          topLevelTarget,
	          topLevelTargetID,
	          nativeEvent
	        );
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function() {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !eventQueue,
	      'processEventQueue(): Additional events were enqueued while processing ' +
	      'an event queue. Support for this has not yet been implemented.'
	    ) : invariant(!eventQueue));
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function() {
	    listenerBank = {};
	  },

	  __getListenerBank: function() {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      pluginIndex > -1,
	      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
	      'the plugin ordering, `%s`.',
	      pluginName
	    ) : invariant(pluginIndex > -1));
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      PluginModule.extractEvents,
	      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
	      'method, but `%s` does not.',
	      pluginName
	    ) : invariant(PluginModule.extractEvents));
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        publishEventForPlugin(
	          publishedEvents[eventName],
	          PluginModule,
	          eventName
	        ),
	        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
	        eventName,
	        pluginName
	      ) : invariant(publishEventForPlugin(
	        publishedEvents[eventName],
	        PluginModule,
	        eventName
	      )));
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'event name, `%s`.',
	    eventName
	  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(
	          phasedRegistrationName,
	          PluginModule,
	          eventName
	        );
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(
	      dispatchConfig.registrationName,
	      PluginModule,
	      eventName
	    );
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.registrationNameModules[registrationName],
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'registration name, `%s`.',
	    registrationName
	  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] =
	    PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function(InjectedEventPluginOrder) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !EventPluginOrder,
	      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
	      'once. You are likely trying to load more than one copy of React.'
	    ) : invariant(!EventPluginOrder));
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) ||
	          namesToPlugins[pluginName] !== PluginModule) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !namesToPlugins[pluginName],
	          'EventPluginRegistry: Cannot inject two different event plugins ' +
	          'using the same name, `%s`.',
	          pluginName
	        ) : invariant(!namesToPlugins[pluginName]));
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[
	        dispatchConfig.registrationName
	      ] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[
	        dispatchConfig.phasedRegistrationNames[phase]
	      ];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    next != null,
	    'accumulateInto(...): Accumulated items must not be null or undefined.'
	  ) : invariant(next != null));
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 72 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(69);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue();
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events = EventPluginHub.extractEvents(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent
	    );

	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;


/***/ },
/* 74 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function(scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature =
	    document.implementation &&
	    document.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM ||
	      capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactInstanceMap = __webpack_require__(25);

	var invariant = __webpack_require__(7);

	var component;
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function(emptyComponent) {
	    component = ReactElement.createFactory(emptyComponent);
	  }
	};

	var ReactEmptyComponentType = function() {};
	ReactEmptyComponentType.prototype.componentDidMount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Make sure we run these methods in the correct order, we shouldn't
	  // need this check. We're going to assume if we're here it means we ran
	  // componentWillUnmount already so there is no internal instance (it gets
	  // removed as part of the unmounting process).
	  if (!internalInstance) {
	    return;
	  }
	  registerNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.componentWillUnmount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Get rid of this check. See TODO in componentDidMount.
	  if (!internalInstance) {
	    return;
	  }
	  deregisterNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.render = function() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    component,
	    'Trying to return null from a render, but no null placeholder component ' +
	    'was injected.'
	  ) : invariant(component));
	  return component();
	};

	var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponent = {
	  emptyElement: emptyElement,
	  injection: ReactEmptyComponentInjection,
	  isNullComponentID: isNullComponentID
	};

	module.exports = ReactEmptyComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(78);

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function(markup) {
	    var checksum = adler32(markup);
	    return markup.replace(
	      '>',
	      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
	    );
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function(markup, element) {
	    var existingChecksum = element.getAttribute(
	      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	    );
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;


/***/ },
/* 78 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	/* jslint bitwise:true */

	'use strict';

	var MOD = 65521;

	// This is a clean-room implementation of adler32 designed for detecting
	// if markup is not what we expect it to be. It does not need to be
	// cryptographically strong, only reasonably good at detecting if markup
	// generated on the server is different than that on the client.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  for (var i = 0; i < data.length; i++) {
	    a = (a + data.charCodeAt(i)) % MOD;
	    b = (b + a) % MOD;
	  }
	  return a | (b << 16);
	}

	module.exports = adler32;


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	var isTextNode = __webpack_require__(80);

	/*jslint bitwise:true */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if (outerNode.contains) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	var isNode = __webpack_require__(81);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;


/***/ },
/* 81 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (
	    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
	    typeof object.nodeType === 'number' &&
	    typeof object.nodeName === 'string'))
	  ));
	}

	module.exports = isNode;


/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getReactRootElementInContainer
	 */

	'use strict';

	var DOC_NODE_TYPE = 9;

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 *                                           a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	module.exports = getReactRootElementInContainer;


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(84);
	var ReactEmptyComponent = __webpack_require__(76);
	var ReactNativeComponent = __webpack_require__(35);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function() { };
	assign(
	  ReactCompositeComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin,
	  {
	    _instantiateReactComponent: instantiateReactComponent
	  }
	);

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return (
	    typeof type === 'function' &&
	    typeof type.prototype !== 'undefined' &&
	    typeof type.prototype.mountComponent === 'function' &&
	    typeof type.prototype.receiveComponent === 'function'
	  );
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {*} parentCompositeType The composite type that resolved this.
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, parentCompositeType) {
	  var instance;

	  if (node === null || node === false) {
	    node = ReactEmptyComponent.emptyElement;
	  }

	  if (typeof node === 'object') {
	    var element = node;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        element && (typeof element.type === 'function' ||
	                    typeof element.type === 'string'),
	        'Only functions or strings can be mounted as React components.'
	      ) : null);
	    }

	    // Special case string values
	    if (parentCompositeType === element.type &&
	        typeof element.type === 'string') {
	      // Avoid recursion if the wrapper renders itself.
	      instance = ReactNativeComponent.createInternalComponent(element);
	      // All native components are currently wrapped in a composite so we're
	      // safe to assume that this is what we should instantiate.
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // represenations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'Encountered invalid React node of type %s',
	      typeof node
	    ) : invariant(false));
	  }

	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof instance.construct === 'function' &&
	      typeof instance.mountComponent === 'function' &&
	      typeof instance.receiveComponent === 'function' &&
	      typeof instance.unmountComponent === 'function',
	      'Only React Components can be mounted.'
	    ) : null);
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if ("production" !== process.env.NODE_ENV) {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if ("production" !== process.env.NODE_ENV) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(85);
	var ReactContext = __webpack_require__(12);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactElement = __webpack_require__(11);
	var ReactElementValidator = __webpack_require__(32);
	var ReactInstanceMap = __webpack_require__(25);
	var ReactLifeCycle = __webpack_require__(24);
	var ReactNativeComponent = __webpack_require__(35);
	var ReactPerf = __webpack_require__(28);
	var ReactPropTypeLocations = __webpack_require__(33);
	var ReactPropTypeLocationNames = __webpack_require__(34);
	var ReactReconciler = __webpack_require__(29);
	var ReactUpdates = __webpack_require__(26);

	var assign = __webpack_require__(13);
	var emptyObject = __webpack_require__(14);
	var invariant = __webpack_require__(7);
	var shouldUpdateReactComponent = __webpack_require__(86);
	var warning = __webpack_require__(15);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function(element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._isTopLevel = false;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(this._currentElement._context);

	    var Component = ReactNativeComponent.getComponentClassForElement(
	      this._currentElement
	    );

	    // Initialize the public class
	    var inst = new Component(publicProps, publicContext);

	    if ("production" !== process.env.NODE_ENV) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      ("production" !== process.env.NODE_ENV ? warning(
	        inst.render != null,
	        '%s(...): No `render` method found on the returned component ' +
	        'instance: you may have forgotten to define `render` in your ' +
	        'component or you may have accidentally tried to render an element ' +
	        'whose type is a function that isn\'t a React component.',
	        Component.displayName || Component.name || 'Component'
	      ) : null);
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if ("production" !== process.env.NODE_ENV) {
	      this._warnIfContextsDiffer(this._currentElement._context, context);
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getInitialState ||
	        inst.getInitialState.isReactClassApproved,
	        'getInitialState was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Did you mean to define a state property instead?',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getDefaultProps ||
	        inst.getDefaultProps.isReactClassApproved,
	        'getDefaultProps was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Use a static property to define defaultProps instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.propTypes,
	        'propTypes was defined as an instance property on %s. Use a static ' +
	        'property to define propTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.contextTypes,
	        'contextTypes was defined as an instance property on %s. Use a ' +
	        'static property to define contextTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof inst.componentShouldUpdate !== 'function',
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        (this.getName() || 'A component')
	      ) : null);
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof initialState === 'object' && !Array.isArray(initialState),
	      '%s.state: must be set to an object or null',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var childContext;
	    var renderedElement;

	    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
	    ReactLifeCycle.currentlyMountingInstance = this;
	    try {
	      if (inst.componentWillMount) {
	        inst.componentWillMount();
	        // When mounting, calls to `setState` by `componentWillMount` will set
	        // `this._pendingStateQueue` without triggering a re-render.
	        if (this._pendingStateQueue) {
	          inst.state = this._processPendingState(inst.props, inst.context);
	        }
	      }

	      childContext = this._getValidatedChildContext(context);
	      renderedElement = this._renderValidatedComponent(childContext);
	    } finally {
	      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
	    }

	    this._renderedComponent = this._instantiateReactComponent(
	      renderedElement,
	      this._currentElement.type // The wrapping type
	    );

	    var markup = ReactReconciler.mountComponent(
	      this._renderedComponent,
	      rootID,
	      transaction,
	      this._mergeChildContext(context, childContext)
	    );
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function() {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
	      ReactLifeCycle.currentlyUnmountingInstance = this;
	      try {
	        inst.componentWillUnmount();
	      } finally {
	        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
	      }
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;

	    // Reset pending fields
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Schedule a partial update to the props. Only used for internal testing.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @internal
	   */
	  _setPropsInternal: function(partialProps, callback) {
	    // This is a deoptimized path. We optimize for always having an element.
	    // This creates an extra internal element.
	    var element = this._pendingElement || this._currentElement;
	    this._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      assign({}, element.props, partialProps)
	    );
	    ReactUpdates.enqueueUpdate(this, callback);
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function(context) {
	    var maskedContext = null;
	    // This really should be getting the component class for the element,
	    // but we know that we're not going to need it for built-ins.
	    if (typeof this._currentElement.type === 'string') {
	      return emptyObject;
	    }
	    var contextTypes = this._currentElement.type.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function(context) {
	    var maskedContext = this._maskContext(context);
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.contextTypes) {
	        this._checkPropTypes(
	          Component.contextTypes,
	          maskedContext,
	          ReactPropTypeLocations.context
	        );
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _getValidatedChildContext: function(currentContext) {
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof inst.constructor.childContextTypes === 'object',
	        '%s.getChildContext(): childContextTypes must be defined in order to ' +
	        'use getChildContext().',
	        this.getName() || 'ReactCompositeComponent'
	      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          inst.constructor.childContextTypes,
	          childContext,
	          ReactPropTypeLocations.childContext
	        );
	      }
	      for (var name in childContext) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          name in inst.constructor.childContextTypes,
	          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
	          this.getName() || 'ReactCompositeComponent',
	          name
	        ) : invariant(name in inst.constructor.childContextTypes));
	      }
	      return childContext;
	    }
	    return null;
	  },

	  _mergeChildContext: function(currentContext, childContext) {
	    if (childContext) {
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function(newProps) {
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.propTypes) {
	        this._checkPropTypes(
	          Component.propTypes,
	          newProps,
	          ReactPropTypeLocations.prop
	        );
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          ("production" !== process.env.NODE_ENV ? invariant(
	            typeof propTypes[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually ' +
	            'from React.PropTypes.',
	            componentName || 'React class',
	            ReactPropTypeLocationNames[location],
	            propName
	          ) : invariant(typeof propTypes[propName] === 'function'));
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // React.render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Composite propType: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          } else {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Context Types: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function(nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(
	      transaction,
	      prevElement,
	      nextElement,
	      prevContext,
	      nextContext
	    );
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(
	        this,
	        this._pendingElement || this._currentElement,
	        transaction,
	        this._context
	      );
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      if ("production" !== process.env.NODE_ENV) {
	        ReactElementValidator.checkAndWarnForMutatedProps(
	          this._currentElement
	        );
	      }

	      this.updateComponent(
	        transaction,
	        this._currentElement,
	        this._currentElement,
	        this._context,
	        this._context
	      );
	    }
	  },

	  /**
	   * Compare two contexts, warning if they are different
	   * TODO: Remove this check when owner-context is removed
	   */
	   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
	    ownerBasedContext = this._maskContext(ownerBasedContext);
	    parentBasedContext = this._maskContext(parentBasedContext);
	    var parentKeys = Object.keys(parentBasedContext).sort();
	    var displayName = this.getName() || 'ReactCompositeComponent';
	    for (var i = 0; i < parentKeys.length; i++) {
	      var key = parentKeys[i];
	      ("production" !== process.env.NODE_ENV ? warning(
	        ownerBasedContext[key] === parentBasedContext[key],
	        'owner-based and parent-based contexts differ '  +
	        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
	        '(see: http://fb.me/react-context-by-parent)',
	        ownerBasedContext[key],
	        parentBasedContext[key],
	        key,
	        displayName
	      ) : null);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(
	    transaction,
	    prevParentElement,
	    nextParentElement,
	    prevUnmaskedContext,
	    nextUnmaskedContext
	  ) {
	    var inst = this._instance;

	    var nextContext = inst.context;
	    var nextProps = inst.props;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement !== nextParentElement) {
	      nextContext = this._processContext(nextParentElement._context);
	      nextProps = this._processProps(nextParentElement.props);

	      if ("production" !== process.env.NODE_ENV) {
	        if (nextUnmaskedContext != null) {
	          this._warnIfContextsDiffer(
	            nextParentElement._context,
	            nextUnmaskedContext
	          );
	        }
	      }

	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate =
	      this._pendingForceUpdate ||
	      !inst.shouldComponentUpdate ||
	      inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof shouldUpdate !== 'undefined',
	        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
	        'boolean value. Make sure to return true or false.',
	        this.getName() || 'ReactCompositeComponent'
	      ) : null);
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(
	        nextParentElement,
	        nextProps,
	        nextState,
	        nextContext,
	        transaction,
	        nextUnmaskedContext
	      );
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function(props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(
	        nextState,
	        typeof partial === 'function' ?
	          partial.call(inst, nextState, props, context) :
	          partial
	      );
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function(
	    nextElement,
	    nextProps,
	    nextState,
	    nextContext,
	    transaction,
	    unmaskedContext
	  ) {
	    var inst = this._instance;

	    var prevProps = inst.props;
	    var prevState = inst.state;
	    var prevContext = inst.context;

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (inst.componentDidUpdate) {
	      transaction.getReactMountReady().enqueue(
	        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
	        inst
	      );
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function(transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var childContext = this._getValidatedChildContext();
	    var nextRenderedElement = this._renderValidatedComponent(childContext);
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(
	        prevComponentInstance,
	        nextRenderedElement,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(
	        nextRenderedElement,
	        this._currentElement.type
	      );
	      var nextMarkup = ReactReconciler.mountComponent(
	        this._renderedComponent,
	        thisID,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(
	      prevComponentID,
	      nextMarkup
	    );
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function() {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if ("production" !== process.env.NODE_ENV) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' &&
	          inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function(childContext) {
	    var renderedComponent;
	    var previousContext = ReactContext.current;
	    ReactContext.current = this._mergeChildContext(
	      this._currentElement._context,
	      childContext
	    );
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent =
	        this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactContext.current = previousContext;
	      ReactCurrentOwner.current = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      // TODO: An `isValidNode` function would probably be more appropriate
	      renderedComponent === null || renderedComponent === false ||
	      ReactElement.isValidElement(renderedComponent),
	      '%s.render(): A valid ReactComponent must be returned. You may have ' +
	        'returned undefined, an array or some other invalid object.',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false ||
	    ReactElement.isValidElement(renderedComponent)));
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function(ref, component) {
	    var inst = this.getPublicInstance();
	    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
	    refs[ref] = component.getPublicInstance();
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function(ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function() {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return (
	      type.displayName || (constructor && constructor.displayName) ||
	      type.name || (constructor && constructor.name) ||
	      null
	    );
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by React.render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function() {
	    return this._instance;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(
	  ReactCompositeComponentMixin,
	  'ReactCompositeComponent',
	  {
	    mountComponent: 'mountComponent',
	    updateComponent: 'updateComponent',
	    _renderValidatedComponent: '_renderValidatedComponent'
	  }
	);

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function(environment) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !injected,
	        'ReactCompositeComponent: injectEnvironment() can only be called once.'
	      ) : invariant(!injected));
	      ReactComponentEnvironment.unmountIDFromEnvironment =
	        environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID =
	        environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates =
	        environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var warning = __webpack_require__(15);

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  if (prevElement != null && nextElement != null) {
	    var prevType = typeof prevElement;
	    var nextType = typeof nextElement;
	    if (prevType === 'string' || prevType === 'number') {
	      return (nextType === 'string' || nextType === 'number');
	    } else {
	      if (nextType === 'object' &&
	          prevElement.type === nextElement.type &&
	          prevElement.key === nextElement.key) {
	        var ownersMatch = prevElement._owner === nextElement._owner;
	        var prevName = null;
	        var nextName = null;
	        var nextDisplayName = null;
	        if ("production" !== process.env.NODE_ENV) {
	          if (!ownersMatch) {
	            if (prevElement._owner != null &&
	                prevElement._owner.getPublicInstance() != null &&
	                prevElement._owner.getPublicInstance().constructor != null) {
	              prevName =
	                prevElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement._owner != null &&
	                nextElement._owner.getPublicInstance() != null &&
	                nextElement._owner.getPublicInstance().constructor != null) {
	              nextName =
	                nextElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement.type != null &&
	                nextElement.type.displayName != null) {
	              nextDisplayName = nextElement.type.displayName;
	            }
	            if (nextElement.type != null && typeof nextElement.type === 'string') {
	              nextDisplayName = nextElement.type;
	            }
	            if (typeof nextElement.type !== 'string' ||
	                nextElement.type === 'input' ||
	                nextElement.type === 'textarea') {
	              if ((prevElement._owner != null &&
	                  prevElement._owner._isOwnerNecessary === false) ||
	                  (nextElement._owner != null &&
	                  nextElement._owner._isOwnerNecessary === false)) {
	                if (prevElement._owner != null) {
	                  prevElement._owner._isOwnerNecessary = true;
	                }
	                if (nextElement._owner != null) {
	                  nextElement._owner._isOwnerNecessary = true;
	                }
	                ("production" !== process.env.NODE_ENV ? warning(
	                  false,
	                  '<%s /> is being rendered by both %s and %s using the same ' +
	                  'key (%s) in the same place. Currently, this means that ' +
	                  'they don\'t preserve state. This behavior should be very ' +
	                  'rare so we\'re considering deprecating it. Please contact ' +
	                  'the React team and explain your use case so that we can ' +
	                  'take that into consideration.',
	                  nextDisplayName || 'Unknown Component',
	                  prevName || '[Unknown]',
	                  nextName || '[Unknown]',
	                  prevElement.key
	                ) : null);
	              }
	            }
	          }
	        }
	        return ownersMatch;
	      }
	    }
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(49);
	var DOMProperty = __webpack_require__(44);
	var DOMPropertyOperations = __webpack_require__(43);
	var ReactBrowserEventEmitter = __webpack_require__(68);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(47);
	var ReactMount = __webpack_require__(67);
	var ReactMultiChild = __webpack_require__(88);
	var ReactPerf = __webpack_require__(28);

	var assign = __webpack_require__(13);
	var escapeTextContentForBrowser = __webpack_require__(46);
	var invariant = __webpack_require__(7);
	var isEventSupported = __webpack_require__(75);
	var keyOf = __webpack_require__(39);
	var warning = __webpack_require__(15);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = {'string': true, 'number': true};

	var STYLE = keyOf({style: null});

	var ELEMENT_NODE_TYPE = 1;

	/**
	 * Optionally injectable operations for mutating the DOM
	 */
	var BackendIDOperations = null;

	/**
	 * @param {?object} props
	 */
	function assertValidProps(props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (props.dangerouslySetInnerHTML != null) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.children == null,
	      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
	    ) : invariant(props.children == null));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof props.dangerouslySetInnerHTML === 'object' &&
	      '__html' in props.dangerouslySetInnerHTML,
	      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
	      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
	      'for more information.'
	    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
	    '__html' in props.dangerouslySetInnerHTML));
	  }
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      props.innerHTML == null,
	      'Directly setting property `innerHTML` is not permitted. ' +
	      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
	    ) : null);
	    ("production" !== process.env.NODE_ENV ? warning(
	      !props.contentEditable || props.children == null,
	      'A component is `contentEditable` and contains `children` managed by ' +
	      'React. It is now your responsibility to guarantee that none of ' +
	      'those nodes are unexpectedly modified or duplicated. This is ' +
	      'probably not intentional.'
	    ) : null);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.style == null || typeof props.style === 'object',
	    'The `style` prop expects a mapping from style properties to values, ' +
	    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
	    'using JSX.'
	  ) : invariant(props.style == null || typeof props.style === 'object'));
	}

	function putListener(id, registrationName, listener, transaction) {
	  if ("production" !== process.env.NODE_ENV) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    ("production" !== process.env.NODE_ENV ? warning(
	      registrationName !== 'onScroll' || isEventSupported('scroll', true),
	      'This browser doesn\'t support the `onScroll` event'
	    ) : null);
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
	      container.ownerDocument :
	      container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getPutListenerQueue().enqueuePutListener(
	    id,
	    registrationName,
	    listener
	  );
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};

	// We accept any tag to be rendered but since this gets injected into abitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
	    validatedTagCache[tag] = true;
	  }
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag;
	  this._renderedChildren = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function(element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} The computed markup.
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    assertValidProps(this._currentElement.props);
	    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
	    return (
	      this._createOpenTagMarkupAndPutListeners(transaction) +
	      this._createContentMarkup(transaction, context) +
	      closeTag
	    );
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function(transaction) {
	    var props = this._currentElement.props;
	    var ret = '<' + this._tag;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, propValue, transaction);
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup =
	          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret + '>';
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID + '>';
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function(transaction, context) {
	    var prefix = '';
	    if (this._tag === 'listing' ||
	        this._tag === 'pre' ||
	        this._tag === 'textarea') {
	      // Add an initial newline because browsers ignore the first newline in
	      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
	      prefix = '\n';
	    }

	    var props = this._currentElement.props;

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        return prefix + innerHTML.__html;
	      }
	    } else {
	      var contentToUse =
	        CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        return prefix + escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(
	          childrenToUse,
	          transaction,
	          context
	        );
	        return prefix + mountImages.join('');
	      }
	    }
	    return prefix;
	  },

	  receiveComponent: function(nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(transaction, prevElement, nextElement, context) {
	    assertValidProps(this._currentElement.props);
	    this._updateDOMProperties(prevElement.props, transaction);
	    this._updateDOMChildren(prevElement.props, transaction, context);
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMProperties: function(lastProps, transaction) {
	    var nextProps = this._currentElement.props;
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) ||
	         !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        deleteListener(this._rootNodeID, propKey);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.deletePropertyByID(
	          this._rootNodeID,
	          propKey
	        );
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ?
	        this._previousStyleCopy :
	        lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) &&
	                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) &&
	                lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, nextProp, transaction);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.updatePropertyByID(
	          this._rootNodeID,
	          propKey,
	          nextProp
	        );
	      }
	    }
	    if (styleUpdates) {
	      BackendIDOperations.updateStylesByID(
	        this._rootNodeID,
	        styleUpdates
	      );
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMChildren: function(lastProps, transaction, context) {
	    var nextProps = this._currentElement.props;

	    var lastContent =
	      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent =
	      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml =
	      lastProps.dangerouslySetInnerHTML &&
	      lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml =
	      nextProps.dangerouslySetInnerHTML &&
	      nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        BackendIDOperations.updateInnerHTMLByID(
	          this._rootNodeID,
	          nextHtml
	        );
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function() {
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(
	  ReactDOMComponent.prototype,
	  ReactDOMComponent.Mixin,
	  ReactMultiChild.Mixin
	);

	ReactDOMComponent.injection = {
	  injectIDOperations: function(IDOperations) {
	    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
	  }
	};

	module.exports = ReactDOMComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(85);
	var ReactMultiChildUpdateTypes = __webpack_require__(64);

	var ReactReconciler = __webpack_require__(29);
	var ReactChildReconciler = __webpack_require__(89);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    textContent: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    textContent: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(
	      updateQueue,
	      markupQueue
	    );
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function(nestedChildren, transaction, context) {
	      var children = ReactChildReconciler.instantiateChildren(
	        nestedChildren, transaction, context
	      );
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(
	            child,
	            rootID,
	            transaction,
	            context
	          );
	          child._mountIndex = index;
	          mountImages.push(mountImage);
	          index++;
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function(nextNestedChildren, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildren, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }

	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function(nextNestedChildren, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = ReactChildReconciler.updateChildren(
	        prevChildren, nextNestedChildren, transaction, context
	      );
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChildByName(prevChild, name);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(
	            nextChild, name, nextIndex, transaction, context
	          );
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) &&
	            !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChildByName(prevChildren[name], name);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function() {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function(child, mountImage) {
	      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function(
	      child,
	      name,
	      index,
	      transaction,
	      context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(
	        child,
	        rootID,
	        transaction,
	        context
	      );
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child by name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @param {string} name Name of the child in `this._renderedChildren`.
	     * @private
	     */
	    _unmountChildByName: function(child, name) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(29);

	var flattenChildren = __webpack_require__(90);
	var instantiateReactComponent = __webpack_require__(83);
	var shouldUpdateReactComponent = __webpack_require__(86);

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {

	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function(nestedChildNodes, transaction, context) {
	    var children = flattenChildren(nestedChildNodes);
	    for (var name in children) {
	      if (children.hasOwnProperty(name)) {
	        var child = children[name];
	        // The rendered children must be turned into instances as they're
	        // mounted.
	        var childInstance = instantiateReactComponent(child, null);
	        children[name] = childInstance;
	      }
	    }
	    return children;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextNestedChildNodes Nested child maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function(
	    prevChildren,
	    nextNestedChildNodes,
	    transaction,
	    context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    var nextChildren = flattenChildren(nextNestedChildNodes);
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(
	          prevChild, nextElement, transaction, context
	        );
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(
	          nextElement,
	          null
	        );
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) &&
	          !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function(renderedChildren) {
	    for (var name in renderedChildren) {
	      var renderedChild = renderedChildren[name];
	      ReactReconciler.unmountComponent(renderedChild);
	    }
	  }

	};

	module.exports = ReactChildReconciler;


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(18);
	var warning = __webpack_require__(15);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = !result.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'flattenChildren(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(92);
	var ChangeEventPlugin = __webpack_require__(100);
	var ClientReactRootIndex = __webpack_require__(102);
	var DefaultEventPluginOrder = __webpack_require__(103);
	var EnterLeaveEventPlugin = __webpack_require__(104);
	var ExecutionEnvironment = __webpack_require__(51);
	var HTMLDOMPropertyConfig = __webpack_require__(108);
	var MobileSafariClickEventPlugin = __webpack_require__(109);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(47);
	var ReactDefaultBatchingStrategy = __webpack_require__(112);
	var ReactDOMComponent = __webpack_require__(87);
	var ReactDOMButton = __webpack_require__(113);
	var ReactDOMForm = __webpack_require__(116);
	var ReactDOMImg = __webpack_require__(118);
	var ReactDOMIDOperations = __webpack_require__(48);
	var ReactDOMIframe = __webpack_require__(119);
	var ReactDOMInput = __webpack_require__(120);
	var ReactDOMOption = __webpack_require__(123);
	var ReactDOMSelect = __webpack_require__(124);
	var ReactDOMTextarea = __webpack_require__(125);
	var ReactDOMTextComponent = __webpack_require__(42);
	var ReactElement = __webpack_require__(11);
	var ReactEventListener = __webpack_require__(126);
	var ReactInjection = __webpack_require__(129);
	var ReactInstanceHandles = __webpack_require__(19);
	var ReactMount = __webpack_require__(67);
	var ReactReconcileTransaction = __webpack_require__(130);
	var SelectEventPlugin = __webpack_require__(136);
	var ServerReactRootIndex = __webpack_require__(138);
	var SimpleEventPlugin = __webpack_require__(139);
	var SVGDOMPropertyConfig = __webpack_require__(148);

	var createFullPageComponent = __webpack_require__(149);

	function autoGenerateWrapperClass(type) {
	  return ReactClass.createClass({
	    tagName: type.toUpperCase(),
	    render: function() {
	      return new ReactElement(
	        type,
	        null,
	        null,
	        null,
	        null,
	        this.props
	      );
	    }
	  });
	}

	function inject() {
	  ReactInjection.EventEmitter.injectReactEventListener(
	    ReactEventListener
	  );

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(
	    ReactDOMComponent
	  );

	  ReactInjection.NativeComponent.injectTextComponentClass(
	    ReactDOMTextComponent
	  );

	  ReactInjection.NativeComponent.injectAutoWrapper(
	    autoGenerateWrapperClass
	  );

	  // This needs to happen before createFullPageComponent() otherwise the mixin
	  // won't be included.
	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.NativeComponent.injectComponentClasses({
	    'button': ReactDOMButton,
	    'form': ReactDOMForm,
	    'iframe': ReactDOMIframe,
	    'img': ReactDOMImg,
	    'input': ReactDOMInput,
	    'option': ReactDOMOption,
	    'select': ReactDOMSelect,
	    'textarea': ReactDOMTextarea,

	    'html': createFullPageComponent('html'),
	    'head': createFullPageComponent('head'),
	    'body': createFullPageComponent('body')
	  });

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(
	    ReactReconcileTransaction
	  );
	  ReactInjection.Updates.injectBatchingStrategy(
	    ReactDefaultBatchingStrategy
	  );

	  ReactInjection.RootIndex.injectCreateReactRootIndex(
	    ExecutionEnvironment.canUseDOM ?
	      ClientReactRootIndex.createReactRootIndex :
	      ServerReactRootIndex.createReactRootIndex
	  );

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

	  if ("production" !== process.env.NODE_ENV) {
	    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
	    if ((/[?&]react_perf\b/).test(url)) {
	      var ReactDefaultPerf = __webpack_require__(150);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPropagators = __webpack_require__(93);
	var ExecutionEnvironment = __webpack_require__(51);
	var FallbackCompositionState = __webpack_require__(94);
	var SyntheticCompositionEvent = __webpack_require__(96);
	var SyntheticInputEvent = __webpack_require__(99);

	var keyOf = __webpack_require__(39);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'CompositionEvent' in window
	);

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'TextEvent' in window &&
	  !documentMode &&
	  !isPresto()
	);

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = (
	  ExecutionEnvironment.canUseDOM &&
	  (
	    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
	  )
	);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (
	    typeof opera === 'object' &&
	    typeof opera.version === 'function' &&
	    parseInt(opera.version(), 10) <= 12
	  );
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBeforeInput: null}),
	      captured: keyOf({onBeforeInputCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topTextInput,
	      topLevelTypes.topPaste
	    ]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionEnd: null}),
	      captured: keyOf({onCompositionEndCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionStart: null}),
	      captured: keyOf({onCompositionStartCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionStart,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionUpdate: null}),
	      captured: keyOf({onCompositionUpdateCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionUpdate,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (
	    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	    !(nativeEvent.ctrlKey && nativeEvent.altKey)
	  );
	}


	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return (
	    topLevelType === topLevelTypes.topKeyDown &&
	    nativeEvent.keyCode === START_KEYCODE
	  );
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return (nativeEvent.keyCode !== START_KEYCODE);
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(
	    eventType,
	    topLevelTargetID,
	    nativeEvent
	  );

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (
	      topLevelType === topLevelTypes.topCompositionEnd ||
	      isFallbackCompositionEnd(topLevelType, nativeEvent)
	    ) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(
	    eventTypes.beforeInput,
	    topLevelTargetID,
	    nativeEvent
	  );

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID,
	    nativeEvent
	  ) {
	    return [
	      extractCompositionEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      ),
	      extractBeforeInputEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      )
	    ];
	  }
	};

	module.exports = BeforeInputEventPlugin;


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPluginHub = __webpack_require__(69);

	var accumulateInto = __webpack_require__(71);
	var forEachAccumulated = __webpack_require__(72);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName =
	    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (!domID) {
	      throw new Error('Dispatching id must not be null');
	    }
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners =
	      accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We can not perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
	      event.dispatchMarker,
	      accumulateDirectionalDispatches,
	      event
	    );
	  }
	}


	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners =
	        accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
	    fromID,
	    toID,
	    accumulateDispatches,
	    leave,
	    enter
	  );
	}


	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}



	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);

	var assign = __webpack_require__(13);
	var getTextContentAccessor = __webpack_require__(95);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function() {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function() {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ?
	      'textContent' :
	      'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(97);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticCompositionEvent,
	  CompositionEventInterface
	);

	module.exports = SyntheticCompositionEvent;


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);

	var assign = __webpack_require__(13);
	var emptyFunction = __webpack_require__(16);
	var getEventTarget = __webpack_require__(98);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: getEventTarget,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ?
	    nativeEvent.defaultPrevented :
	    nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function() {
	    var event = this.nativeEvent;
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function(Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

	module.exports = SyntheticEvent;


/***/ },
/* 98 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(97);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticInputEvent,
	  InputEventInterface
	);

	module.exports = SyntheticInputEvent;


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPluginHub = __webpack_require__(69);
	var EventPropagators = __webpack_require__(93);
	var ExecutionEnvironment = __webpack_require__(51);
	var ReactUpdates = __webpack_require__(26);
	var SyntheticEvent = __webpack_require__(97);

	var isEventSupported = __webpack_require__(75);
	var isTextInputElement = __webpack_require__(101);
	var keyOf = __webpack_require__(39);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onChange: null}),
	      captured: keyOf({onChangeCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topChange,
	      topLevelTypes.topClick,
	      topLevelTypes.topFocus,
	      topLevelTypes.topInput,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  return (
	    elem.nodeName === 'SELECT' ||
	    (elem.nodeName === 'INPUT' && elem.type === 'file')
	  );
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (
	    (!('documentMode' in document) || document.documentMode > 8)
	  );
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(
	    eventTypes.change,
	    activeElementID,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue();
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}


	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (
	    (!('documentMode' in document) || document.documentMode > 9)
	  );
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp =  {
	  get: function() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(
	    target.constructor.prototype,
	    'value'
	  );

	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange ||
	      topLevelType === topLevelTypes.topKeyUp ||
	      topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}


	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return (
	    elem.nodeName === 'INPUT' &&
	    (elem.type === 'checkbox' || elem.type === 'radio')
	  );
	}

	function getTargetIDForClickEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(
	          eventTypes.change,
	          targetID,
	          nativeEvent
	        );
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	    }
	  }

	};

	module.exports = ChangeEventPlugin;


/***/ },
/* 101 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  return elem && (
	    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
	  );
	}

	module.exports = isTextInputElement;


/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function() {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(39);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [
	  keyOf({ResponderEventPlugin: null}),
	  keyOf({SimpleEventPlugin: null}),
	  keyOf({TapEventPlugin: null}),
	  keyOf({EnterLeaveEventPlugin: null}),
	  keyOf({ChangeEventPlugin: null}),
	  keyOf({SelectEventPlugin: null}),
	  keyOf({BeforeInputEventPlugin: null}),
	  keyOf({AnalyticsEventPlugin: null}),
	  keyOf({MobileSafariClickEventPlugin: null})
	];

	module.exports = DefaultEventPluginOrder;


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPropagators = __webpack_require__(93);
	var SyntheticMouseEvent = __webpack_require__(105);

	var ReactMount = __webpack_require__(67);
	var keyOf = __webpack_require__(39);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({onMouseEnter: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  },
	  mouseLeave: {
	    registrationName: keyOf({onMouseLeave: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topMouseOver &&
	        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut &&
	        topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from, to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      to =
	        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
	        win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromID = from ? ReactMount.getID(from) : '';
	    var toID = to ? ReactMount.getID(to) : '';

	    var leave = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseLeave,
	      fromID,
	      nativeEvent
	    );
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseEnter,
	      toID,
	      nativeEvent
	    );
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(106);
	var ViewportMetrics = __webpack_require__(74);

	var getEventModifierState = __webpack_require__(107);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function(event) {
	    return event.relatedTarget || (
	      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
	    );
	  },
	  // "Proprietary" Interface.
	  pageX: function(event) {
	    return 'pageX' in event ?
	      event.pageX :
	      event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function(event) {
	    return 'pageY' in event ?
	      event.pageY :
	      event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(97);

	var getEventTarget = __webpack_require__(98);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function(event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function(event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;


/***/ },
/* 107 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  /*jshint validthis:true */
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(44);
	var ExecutionEnvironment = __webpack_require__(51);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE =
	  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE =
	  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = (
	    implementation &&
	    implementation.hasFeature &&
	    implementation.hasFeature(
	      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
	      '1.1'
	    )
	  );
	}


	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(
	    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
	  ),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusMixin
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: null,
	    autoCorrect: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // property is supported for OpenGraph in meta tags.
	    property: null,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule MobileSafariClickEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);

	var emptyFunction = __webpack_require__(16);

	var topLevelTypes = EventConstants.topLevelTypes;

	/**
	 * Mobile Safari does not fire properly bubble click events on non-interactive
	 * elements, which means delegated click listeners do not fire. The workaround
	 * for this bug involves attaching an empty click listener on the target node.
	 *
	 * This particular plugin works around the bug by attaching an empty click
	 * listener on `touchstart` (which does fire on every element).
	 */
	var MobileSafariClickEventPlugin = {

	  eventTypes: null,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topTouchStart) {
	      var target = nativeEvent.target;
	      if (target && !target.onclick) {
	        target.onclick = emptyFunction;
	      }
	    }
	  }

	};

	module.exports = MobileSafariClickEventPlugin;


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var findDOMNode = __webpack_require__(111);

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function() {
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(17);
	var ReactInstanceMap = __webpack_require__(25);
	var ReactMount = __webpack_require__(67);

	var invariant = __webpack_require__(7);
	var isNode = __webpack_require__(81);
	var warning = __webpack_require__(15);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if ("production" !== process.env.NODE_ENV) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        owner._warnedAboutRefsInRender,
	        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
	        'render() should be a pure function of props and state. It should ' +
	        'never access something that requires stale data from the previous ' +
	        'render, such as refs. Move this logic to componentDidMount and ' +
	        'componentDidUpdate instead.',
	        owner.getName() || 'A component'
	      ) : null);
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (isNode(componentOrElement)) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    componentOrElement.render == null ||
	    typeof componentOrElement.render !== 'function',
	    'Component (with keys: %s) contains `render` method ' +
	    'but is not mounted in the DOM',
	    Object.keys(componentOrElement)
	  ) : invariant(componentOrElement.render == null ||
	  typeof componentOrElement.render !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    false,
	    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
	    Object.keys(componentOrElement)
	  ) : invariant(false));
	}

	module.exports = findDOMNode;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(26);
	var Transaction = __webpack_require__(36);

	var assign = __webpack_require__(13);
	var emptyFunction = __webpack_require__(16);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(
	  ReactDefaultBatchingStrategyTransaction.prototype,
	  Transaction.Mixin,
	  {
	    getTransactionWrappers: function() {
	      return TRANSACTION_WRAPPERS;
	    }
	  }
	);

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function(callback, a, b, c, d) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d);
	    } else {
	      transaction.perform(callback, null, a, b, c, d);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(114);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var keyMirror = __webpack_require__(6);

	var button = ReactElement.createFactory('button');

	var mouseListenerNames = keyMirror({
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	});

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = ReactClass.createClass({
	  displayName: 'ReactDOMButton',
	  tagName: 'BUTTON',

	  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

	  render: function() {
	    var props = {};

	    // Copy the props; except the mouse listeners if we're disabled
	    for (var key in this.props) {
	      if (this.props.hasOwnProperty(key) &&
	          (!this.props.disabled || !mouseListenerNames[key])) {
	        props[key] = this.props[key];
	      }
	    }

	    return button(props, this.props.children);
	  }

	});

	module.exports = ReactDOMButton;


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusMixin
	 * @typechecks static-only
	 */

	'use strict';

	var focusNode = __webpack_require__(115);

	var AutoFocusMixin = {
	  componentDidMount: function() {
	    if (this.props.autoFocus) {
	      focusNode(this.getDOMNode());
	    }
	  }
	};

	module.exports = AutoFocusMixin;


/***/ },
/* 115 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	"use strict";

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch(e) {
	  }
	}

	module.exports = focusNode;


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMForm
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var LocalEventTrapMixin = __webpack_require__(117);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var form = ReactElement.createFactory('form');

	/**
	 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
	 * to capture it on the <form> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <form> a
	 * composite component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMForm = ReactClass.createClass({
	  displayName: 'ReactDOMForm',
	  tagName: 'FORM',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
	    // `jshint` fails to parse JSX so in order for linting to work in the open
	    // source repo, we need to just use `ReactDOM.form`.
	    return form(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
	  }
	});

	module.exports = ReactDOMForm;


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LocalEventTrapMixin
	 */

	'use strict';

	var ReactBrowserEventEmitter = __webpack_require__(68);

	var accumulateInto = __webpack_require__(71);
	var forEachAccumulated = __webpack_require__(72);
	var invariant = __webpack_require__(7);

	function remove(event) {
	  event.remove();
	}

	var LocalEventTrapMixin = {
	  trapBubbledEvent:function(topLevelType, handlerBaseName) {
	    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
	    // If a component renders to null or if another component fatals and causes
	    // the state of the tree to be corrupted, `node` here can be null.
	    var node = this.getDOMNode();
	    ("production" !== process.env.NODE_ENV ? invariant(
	      node,
	      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
	    ) : invariant(node));
	    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      node
	    );
	    this._localEventListeners =
	      accumulateInto(this._localEventListeners, listener);
	  },

	  // trapCapturedEvent would look nearly identical. We don't implement that
	  // method because it isn't currently needed.

	  componentWillUnmount:function() {
	    if (this._localEventListeners) {
	      forEachAccumulated(this._localEventListeners, remove);
	    }
	  }
	};

	module.exports = LocalEventTrapMixin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMImg
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var LocalEventTrapMixin = __webpack_require__(117);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var img = ReactElement.createFactory('img');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <img> element itself. There are lots of hacks we could do
	 * to accomplish this, but the most reliable is to make <img> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMImg = ReactClass.createClass({
	  displayName: 'ReactDOMImg',
	  tagName: 'IMG',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return img(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
	  }
	});

	module.exports = ReactDOMImg;


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIframe
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var LocalEventTrapMixin = __webpack_require__(117);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var iframe = ReactElement.createFactory('iframe');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <iframe> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <iframe> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMIframe = ReactClass.createClass({
	  displayName: 'ReactDOMIframe',
	  tagName: 'IFRAME',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return iframe(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	  }
	});

	module.exports = ReactDOMIframe;


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(114);
	var DOMPropertyOperations = __webpack_require__(43);
	var LinkedValueUtils = __webpack_require__(121);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);
	var ReactMount = __webpack_require__(67);
	var ReactUpdates = __webpack_require__(26);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);

	var input = ReactElement.createFactory('input');

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = ReactClass.createClass({
	  displayName: 'ReactDOMInput',
	  tagName: 'INPUT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    return {
	      initialChecked: this.props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.defaultChecked = null;
	    props.defaultValue = null;

	    var value = LinkedValueUtils.getValue(this);
	    props.value = value != null ? value : this.state.initialValue;

	    var checked = LinkedValueUtils.getChecked(this);
	    props.checked = checked != null ? checked : this.state.initialChecked;

	    props.onChange = this._handleChange;

	    return input(props, this.props.children);
	  },

	  componentDidMount: function() {
	    var id = ReactMount.getID(this.getDOMNode());
	    instancesByReactID[id] = this;
	  },

	  componentWillUnmount: function() {
	    var rootNode = this.getDOMNode();
	    var id = ReactMount.getID(rootNode);
	    delete instancesByReactID[id];
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var rootNode = this.getDOMNode();
	    if (this.props.checked != null) {
	      DOMPropertyOperations.setValueForProperty(
	        rootNode,
	        'checked',
	        this.props.checked || false
	      );
	    }

	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    // Here we use asap to wait until all updates have propagated, which
	    // is important when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    ReactUpdates.asap(forceUpdateIfMounted, this);

	    var name = this.props.name;
	    if (this.props.type === 'radio' && name != null) {
	      var rootNode = this.getDOMNode();
	      var queryRoot = rootNode;

	      while (queryRoot.parentNode) {
	        queryRoot = queryRoot.parentNode;
	      }

	      // If `rootNode.form` was non-null, then we could try `form.elements`,
	      // but that sometimes behaves strangely in IE8. We could also try using
	      // `form.getElementsByName`, but that will only return direct children
	      // and won't include inputs that use the HTML5 `form=` attribute. Since
	      // the input might not even be in a form, let's just use the global
	      // `querySelectorAll` to ensure we don't miss anything.
	      var group = queryRoot.querySelectorAll(
	        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
	        var otherNode = group[i];
	        if (otherNode === rootNode ||
	            otherNode.form !== rootNode.form) {
	          continue;
	        }
	        var otherID = ReactMount.getID(otherNode);
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherID,
	          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
	          'same `name` is not supported.'
	        ) : invariant(otherID));
	        var otherInstance = instancesByReactID[otherID];
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherInstance,
	          'ReactDOMInput: Unknown radio button ID %s.',
	          otherID
	        ) : invariant(otherInstance));
	        // If this is a controlled radio button group, forcing the input that
	        // was previously checked to update will cause it to be come re-checked
	        // as appropriate.
	        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	      }
	    }

	    return returnValue;
	  }

	});

	module.exports = ReactDOMInput;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(122);

	var invariant = __webpack_require__(7);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(input) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checkedLink == null || input.props.valueLink == null,
	    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
	    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
	  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
	}
	function _assertValueLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.value == null && input.props.onChange == null,
	    'Cannot provide a valueLink and a value or onChange event. If you want ' +
	    'to use value or onChange, you probably don\'t want to use valueLink.'
	  ) : invariant(input.props.value == null && input.props.onChange == null));
	}

	function _assertCheckedLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checked == null && input.props.onChange == null,
	    'Cannot provide a checkedLink and a checked property or onChange event. ' +
	    'If you want to use checked or onChange, you probably don\'t want to ' +
	    'use checkedLink'
	  ) : invariant(input.props.checked == null && input.props.onChange == null));
	}

	/**
	 * @param {SyntheticEvent} e change event to handle
	 */
	function _handleLinkedValueChange(e) {
	  /*jshint validthis:true */
	  this.props.valueLink.requestChange(e.target.value);
	}

	/**
	  * @param {SyntheticEvent} e change event to handle
	  */
	function _handleLinkedCheckChange(e) {
	  /*jshint validthis:true */
	  this.props.checkedLink.requestChange(e.target.checked);
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  Mixin: {
	    propTypes: {
	      value: function(props, propName, componentName) {
	        if (!props[propName] ||
	            hasReadOnlyValue[props.type] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `value` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultValue`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      checked: function(props, propName, componentName) {
	        if (!props[propName] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `checked` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultChecked`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      onChange: ReactPropTypes.func
	    }
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return input.props.valueLink.value;
	    }
	    return input.props.value;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function(input) {
	    if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return input.props.checkedLink.value;
	    }
	    return input.props.checked;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {function} change callback either from onChange prop or link.
	   */
	  getOnChange: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return _handleLinkedValueChange;
	    } else if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return _handleLinkedCheckChange;
	    }
	    return input.props.onChange;
	  }
	};

	module.exports = LinkedValueUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactFragment = __webpack_require__(10);
	var ReactPropTypeLocationNames = __webpack_require__(34);

	var emptyFunction = __webpack_require__(16);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var elementTypeChecker = createElementTypeChecker();
	var nodeTypeChecker = createNodeChecker();

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: elementTypeChecker,
	  instanceOf: createInstanceTypeChecker,
	  node: nodeTypeChecker,
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location) {
	    componentName = componentName || ANONYMOUS;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error(
	          ("Required " + locationName + " `" + propName + "` was not specified in ") +
	          ("`" + componentName + "`.")
	        );
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
	        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
	      );
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactElement.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
	      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
	      );
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  function validate(props, propName, componentName, location) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	      ("`" + componentName + "`.")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactNode.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
	        ("supplied to `" + componentName + "`, expected `object`.")
	      );
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	      propValue = ReactFragment.extractIfFragment(propValue);
	      for (var k in propValue) {
	        if (!isNode(propValue[k])) {
	          return false;
	        }
	      }
	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	module.exports = ReactPropTypes;


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var warning = __webpack_require__(15);

	var option = ReactElement.createFactory('option');

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = ReactClass.createClass({
	  displayName: 'ReactDOMOption',
	  tagName: 'OPTION',

	  mixins: [ReactBrowserComponentMixin],

	  componentWillMount: function() {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        this.props.selected == null,
	        'Use the `defaultValue` or `value` props on <select> instead of ' +
	        'setting `selected` on <option>.'
	      ) : null);
	    }
	  },

	  render: function() {
	    return option(this.props, this.props.children);
	  }

	});

	module.exports = ReactDOMOption;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(114);
	var LinkedValueUtils = __webpack_require__(121);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);
	var ReactUpdates = __webpack_require__(26);

	var assign = __webpack_require__(13);

	var select = ReactElement.createFactory('select');

	function updateOptionsIfPendingUpdateAndMounted() {
	  /*jshint validthis:true */
	  if (this._pendingUpdate) {
	    this._pendingUpdate = false;
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null && this.isMounted()) {
	      updateOptions(this, value);
	    }
	  }
	}

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function selectValueType(props, propName, componentName) {
	  if (props[propName] == null) {
	    return null;
	  }
	  if (props.multiple) {
	    if (!Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
	        ("`multiple` is true.")
	      );
	    }
	  } else {
	    if (Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
	        ("value if `multiple` is false.")
	      );
	    }
	  }
	}

	/**
	 * @param {ReactComponent} component Instance of ReactDOMSelect
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(component, propValue) {
	  var selectedValue, i, l;
	  var options = component.getDOMNode().options;

	  if (component.props.multiple) {
	    selectedValue = {};
	    for (i = 0, l = propValue.length; i < l; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0, l = options.length; i < l; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0, l = options.length; i < l; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = ReactClass.createClass({
	  displayName: 'ReactDOMSelect',
	  tagName: 'SELECT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  propTypes: {
	    defaultValue: selectValueType,
	    value: selectValueType
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.onChange = this._handleChange;
	    props.value = null;

	    return select(props, this.props.children);
	  },

	  componentWillMount: function() {
	    this._pendingUpdate = false;
	  },

	  componentDidMount: function() {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      updateOptions(this, value);
	    } else if (this.props.defaultValue != null) {
	      updateOptions(this, this.props.defaultValue);
	    }
	  },

	  componentDidUpdate: function(prevProps) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      this._pendingUpdate = false;
	      updateOptions(this, value);
	    } else if (!prevProps.multiple !== !this.props.multiple) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (this.props.defaultValue != null) {
	        updateOptions(this, this.props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(this, this.props.multiple ? [] : '');
	      }
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }

	    this._pendingUpdate = true;
	    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMSelect;


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(114);
	var DOMPropertyOperations = __webpack_require__(43);
	var LinkedValueUtils = __webpack_require__(121);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);
	var ReactUpdates = __webpack_require__(26);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);

	var warning = __webpack_require__(15);

	var textarea = ReactElement.createFactory('textarea');

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = ReactClass.createClass({
	  displayName: 'ReactDOMTextarea',
	  tagName: 'TEXTAREA',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = this.props.children;
	    if (children != null) {
	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'Use the `defaultValue` or `value` props instead of setting ' +
	          'children on <textarea>.'
	        ) : null);
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        defaultValue == null,
	        'If you supply `defaultValue` on a <textarea>, do not pass children.'
	      ) : invariant(defaultValue == null));
	      if (Array.isArray(children)) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          children.length <= 1,
	          '<textarea> can only have at most one child.'
	        ) : invariant(children.length <= 1));
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(this);
	    return {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue)
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.dangerouslySetInnerHTML == null,
	      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
	    ) : invariant(props.dangerouslySetInnerHTML == null));

	    props.defaultValue = null;
	    props.value = null;
	    props.onChange = this._handleChange;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    return textarea(props, this.state.initialValue);
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      var rootNode = this.getDOMNode();
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    ReactUpdates.asap(forceUpdateIfMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMTextarea;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(127);
	var ExecutionEnvironment = __webpack_require__(51);
	var PooledClass = __webpack_require__(9);
	var ReactInstanceHandles = __webpack_require__(19);
	var ReactMount = __webpack_require__(67);
	var ReactUpdates = __webpack_require__(26);

	var assign = __webpack_require__(13);
	var getEventTarget = __webpack_require__(98);
	var getUnboundedScrollPosition = __webpack_require__(128);

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(
	  TopLevelCallbackBookKeeping,
	  PooledClass.twoArgumentPooler
	);

	function handleTopLevelImpl(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(
	    getEventTarget(bookKeeping.nativeEvent)
	  ) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(
	      bookKeeping.topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      bookKeeping.nativeEvent
	    );
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function() {
	    return ReactEventListener._enabled;
	  },


	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  monitorScrollValue: function(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
	      topLevelType,
	      nativeEvent
	    );
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(16);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function(target, eventType, callback) {
	    if (!target.addEventListener) {
	      if ("production" !== process.env.NODE_ENV) {
	        console.error(
	          'Attempted to listen to events during the capture phase on a ' +
	          'browser that does not support the capture phase. Your application ' +
	          'will not receive some events.'
	        );
	      }
	      return {
	        remove: emptyFunction
	      };
	    } else {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    }
	  },

	  registerDefault: function() {}
	};

	module.exports = EventListener;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	"use strict";

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(44);
	var EventPluginHub = __webpack_require__(69);
	var ReactComponentEnvironment = __webpack_require__(85);
	var ReactClass = __webpack_require__(37);
	var ReactEmptyComponent = __webpack_require__(76);
	var ReactBrowserEventEmitter = __webpack_require__(68);
	var ReactNativeComponent = __webpack_require__(35);
	var ReactDOMComponent = __webpack_require__(87);
	var ReactPerf = __webpack_require__(28);
	var ReactRootIndex = __webpack_require__(20);
	var ReactUpdates = __webpack_require__(26);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMComponent: ReactDOMComponent.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(27);
	var PooledClass = __webpack_require__(9);
	var ReactBrowserEventEmitter = __webpack_require__(68);
	var ReactInputSelection = __webpack_require__(131);
	var ReactPutListenerQueue = __webpack_require__(135);
	var Transaction = __webpack_require__(36);

	var assign = __webpack_require__(13);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
	   *   restores the previous value.
	   */
	  close: function(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function() {
	    this.reactMountReady.notifyAll();
	  }
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: function() {
	    this.putListenerQueue.putListeners();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  SELECTION_RESTORATION,
	  EVENT_SUPPRESSION,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction() {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap proceedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(132);

	var containsNode = __webpack_require__(79);
	var focusNode = __webpack_require__(115);
	var getActiveElement = __webpack_require__(134);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function(elem) {
	    return elem && (
	      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
	      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
	    );
	  },

	  getSelectionInformation: function() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange:
	          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
	          ReactInputSelection.getSelection(focusedElem) :
	          null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem &&
	        isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(
	          priorFocusedElem,
	          priorSelectionRange
	        );
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function(input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || {start: 0, end: 0};
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var getNodeForCharacterOffset = __webpack_require__(133);
	var getTextContentAccessor = __webpack_require__(95);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(
	    selection.anchorNode,
	    selection.anchorOffset,
	    selection.focusNode,
	    selection.focusOffset
	  );

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(
	    tempRange.startContainer,
	    tempRange.startOffset,
	    tempRange.endContainer,
	    tempRange.endOffset
	  );

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ?
	            start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = (
	  ExecutionEnvironment.canUseDOM &&
	  'selection' in document &&
	  !('getSelection' in window)
	);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;


/***/ },
/* 133 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;


/***/ },
/* 134 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document body is not yet defined.
	 */
	function getActiveElement() /*?DOMElement*/ {
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPutListenerQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);
	var ReactBrowserEventEmitter = __webpack_require__(68);

	var assign = __webpack_require__(13);

	function ReactPutListenerQueue() {
	  this.listenersToPut = [];
	}

	assign(ReactPutListenerQueue.prototype, {
	  enqueuePutListener: function(rootNodeID, propKey, propValue) {
	    this.listenersToPut.push({
	      rootNodeID: rootNodeID,
	      propKey: propKey,
	      propValue: propValue
	    });
	  },

	  putListeners: function() {
	    for (var i = 0; i < this.listenersToPut.length; i++) {
	      var listenerToPut = this.listenersToPut[i];
	      ReactBrowserEventEmitter.putListener(
	        listenerToPut.rootNodeID,
	        listenerToPut.propKey,
	        listenerToPut.propValue
	      );
	    }
	  },

	  reset: function() {
	    this.listenersToPut.length = 0;
	  },

	  destructor: function() {
	    this.reset();
	  }
	});

	PooledClass.addPoolingTo(ReactPutListenerQueue);

	module.exports = ReactPutListenerQueue;


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPropagators = __webpack_require__(93);
	var ReactInputSelection = __webpack_require__(131);
	var SyntheticEvent = __webpack_require__(97);

	var getActiveElement = __webpack_require__(134);
	var isTextInputElement = __webpack_require__(101);
	var keyOf = __webpack_require__(39);
	var shallowEqual = __webpack_require__(137);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSelect: null}),
	      captured: keyOf({onSelectCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topContextMenu,
	      topLevelTypes.topFocus,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topMouseDown,
	      topLevelTypes.topMouseUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @param {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node &&
	      ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown ||
	      activeElement == null ||
	      activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(
	      eventTypes.select,
	      activeElementID,
	      nativeEvent
	    );

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) ||
	            topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't).
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      case topLevelTypes.topSelectionChange:
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent);
	    }
	  }
	};

	module.exports = SelectEventPlugin;


/***/ },
/* 137 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 */

	'use strict';

	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) &&
	        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B's keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = shallowEqual;


/***/ },
/* 138 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPluginUtils = __webpack_require__(4);
	var EventPropagators = __webpack_require__(93);
	var SyntheticClipboardEvent = __webpack_require__(140);
	var SyntheticEvent = __webpack_require__(97);
	var SyntheticFocusEvent = __webpack_require__(141);
	var SyntheticKeyboardEvent = __webpack_require__(142);
	var SyntheticMouseEvent = __webpack_require__(105);
	var SyntheticDragEvent = __webpack_require__(145);
	var SyntheticTouchEvent = __webpack_require__(146);
	var SyntheticUIEvent = __webpack_require__(106);
	var SyntheticWheelEvent = __webpack_require__(147);

	var getEventCharCode = __webpack_require__(143);

	var invariant = __webpack_require__(7);
	var keyOf = __webpack_require__(39);
	var warning = __webpack_require__(15);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBlur: true}),
	      captured: keyOf({onBlurCapture: true})
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onClick: true}),
	      captured: keyOf({onClickCapture: true})
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onContextMenu: true}),
	      captured: keyOf({onContextMenuCapture: true})
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCopy: true}),
	      captured: keyOf({onCopyCapture: true})
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCut: true}),
	      captured: keyOf({onCutCapture: true})
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDoubleClick: true}),
	      captured: keyOf({onDoubleClickCapture: true})
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrag: true}),
	      captured: keyOf({onDragCapture: true})
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnd: true}),
	      captured: keyOf({onDragEndCapture: true})
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnter: true}),
	      captured: keyOf({onDragEnterCapture: true})
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragExit: true}),
	      captured: keyOf({onDragExitCapture: true})
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragLeave: true}),
	      captured: keyOf({onDragLeaveCapture: true})
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragOver: true}),
	      captured: keyOf({onDragOverCapture: true})
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragStart: true}),
	      captured: keyOf({onDragStartCapture: true})
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrop: true}),
	      captured: keyOf({onDropCapture: true})
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onFocus: true}),
	      captured: keyOf({onFocusCapture: true})
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onInput: true}),
	      captured: keyOf({onInputCapture: true})
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyDown: true}),
	      captured: keyOf({onKeyDownCapture: true})
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyPress: true}),
	      captured: keyOf({onKeyPressCapture: true})
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyUp: true}),
	      captured: keyOf({onKeyUpCapture: true})
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onLoad: true}),
	      captured: keyOf({onLoadCapture: true})
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onError: true}),
	      captured: keyOf({onErrorCapture: true})
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseDown: true}),
	      captured: keyOf({onMouseDownCapture: true})
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseMove: true}),
	      captured: keyOf({onMouseMoveCapture: true})
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOut: true}),
	      captured: keyOf({onMouseOutCapture: true})
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOver: true}),
	      captured: keyOf({onMouseOverCapture: true})
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseUp: true}),
	      captured: keyOf({onMouseUpCapture: true})
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onPaste: true}),
	      captured: keyOf({onPasteCapture: true})
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onReset: true}),
	      captured: keyOf({onResetCapture: true})
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScroll: true}),
	      captured: keyOf({onScrollCapture: true})
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSubmit: true}),
	      captured: keyOf({onSubmitCapture: true})
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchCancel: true}),
	      captured: keyOf({onTouchCancelCapture: true})
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchEnd: true}),
	      captured: keyOf({onTouchEndCapture: true})
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchMove: true}),
	      captured: keyOf({onTouchMoveCapture: true})
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchStart: true}),
	      captured: keyOf({onTouchStartCapture: true})
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onWheel: true}),
	      captured: keyOf({onWheelCapture: true})
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topBlur:        eventTypes.blur,
	  topClick:       eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy:        eventTypes.copy,
	  topCut:         eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag:        eventTypes.drag,
	  topDragEnd:     eventTypes.dragEnd,
	  topDragEnter:   eventTypes.dragEnter,
	  topDragExit:    eventTypes.dragExit,
	  topDragLeave:   eventTypes.dragLeave,
	  topDragOver:    eventTypes.dragOver,
	  topDragStart:   eventTypes.dragStart,
	  topDrop:        eventTypes.drop,
	  topError:       eventTypes.error,
	  topFocus:       eventTypes.focus,
	  topInput:       eventTypes.input,
	  topKeyDown:     eventTypes.keyDown,
	  topKeyPress:    eventTypes.keyPress,
	  topKeyUp:       eventTypes.keyUp,
	  topLoad:        eventTypes.load,
	  topMouseDown:   eventTypes.mouseDown,
	  topMouseMove:   eventTypes.mouseMove,
	  topMouseOut:    eventTypes.mouseOut,
	  topMouseOver:   eventTypes.mouseOver,
	  topMouseUp:     eventTypes.mouseUp,
	  topPaste:       eventTypes.paste,
	  topReset:       eventTypes.reset,
	  topScroll:      eventTypes.scroll,
	  topSubmit:      eventTypes.submit,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd:    eventTypes.touchEnd,
	  topTouchMove:   eventTypes.touchMove,
	  topTouchStart:  eventTypes.touchStart,
	  topWheel:       eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * Same as the default implementation, except cancels the event when return
	   * value is false. This behavior will be disabled in a future release.
	   *
	   * @param {object} Event to be dispatched.
	   * @param {function} Application-level callback.
	   * @param {string} domID DOM ID to pass to the callback.
	   */
	  executeDispatch: function(event, listener, domID) {
	    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof returnValue !== 'boolean',
	      'Returning `false` from an event handler is deprecated and will be ' +
	      'ignored in a future release. Instead, manually call ' +
	      'e.stopPropagation() or e.preventDefault(), as appropriate.'
	    ) : null);

	    if (returnValue === false) {
	      event.stopPropagation();
	      event.preventDefault();
	    }
	  },

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topError:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSubmit:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      EventConstructor,
	      'SimpleEventPlugin: Unhandled event type, `%s`.',
	      topLevelType
	    ) : invariant(EventConstructor));
	    var event = EventConstructor.getPooled(
	      dispatchConfig,
	      topLevelTargetID,
	      nativeEvent
	    );
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }

	};

	module.exports = SimpleEventPlugin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(97);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function(event) {
	    return (
	      'clipboardData' in event ?
	        event.clipboardData :
	        window.clipboardData
	    );
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(106);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(106);

	var getEventCharCode = __webpack_require__(143);
	var getEventKey = __webpack_require__(144);
	var getEventModifierState = __webpack_require__(107);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;


/***/ },
/* 143 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(143);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(105);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(106);

	var getEventModifierState = __webpack_require__(107);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(105);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function(event) {
	    return (
	      'deltaX' in event ? event.deltaX :
	      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
	    );
	  },
	  deltaY: function(event) {
	    return (
	      'deltaY' in event ? event.deltaY :
	      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	      'wheelDeltaY' in event ? -event.wheelDeltaY :
	      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	      'wheelDelta' in event ? -event.wheelDelta : 0
	    );
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(44);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox'
	  }
	};

	module.exports = SVGDOMPropertyConfig;


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createFullPageComponent
	 * @typechecks
	 */

	'use strict';

	// Defeat circular references by requiring this directly.
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var invariant = __webpack_require__(7);

	/**
	 * Create a component that will throw an exception when unmounted.
	 *
	 * Components like <html> <head> and <body> can't be removed or added
	 * easily in a cross-browser way, however it's valuable to be able to
	 * take advantage of React's reconciliation for styling and <title>
	 * management. So we just document it and throw in dangerous cases.
	 *
	 * @param {string} tag The tag to wrap
	 * @return {function} convenience constructor of new component
	 */
	function createFullPageComponent(tag) {
	  var elementFactory = ReactElement.createFactory(tag);

	  var FullPageComponent = ReactClass.createClass({
	    tagName: tag.toUpperCase(),
	    displayName: 'ReactFullPageComponent' + tag,

	    componentWillUnmount: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        false,
	        '%s tried to unmount. Because of cross-browser quirks it is ' +
	        'impossible to unmount some top-level components (eg <html>, <head>, ' +
	        'and <body>) reliably and efficiently. To fix this, have a single ' +
	        'top-level component that never unmounts render these elements.',
	        this.constructor.displayName
	      ) : invariant(false));
	    },

	    render: function() {
	      return elementFactory(this.props);
	    }
	  });

	  return FullPageComponent;
	}

	module.exports = createFullPageComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(44);
	var ReactDefaultPerfAnalysis = __webpack_require__(151);
	var ReactMount = __webpack_require__(67);
	var ReactPerf = __webpack_require__(28);

	var performanceNow = __webpack_require__(152);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function() {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function() {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  getMeasurementsSummaryMap: function(measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
	      measurements,
	      true
	    );
	    return summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  printDOM: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function(item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result['type'] = item.type;
	      result['args'] = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  _recordWrite: function(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes =
	      ReactDefaultPerf
	        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
	        .writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function(moduleName, fnName, func) {
	    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' ||
	          fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' ||
	          moduleName === 'ReactDOMIDOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function(update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(
	              update.parentID,
	              update.type,
	              totalTime,
	              writeArgs
	            );
	          });
	        } else {
	          // basic format
	          ReactDefaultPerf._recordWrite(
	            args[0],
	            fnName,
	            totalTime,
	            Array.prototype.slice.call(args, 1)
	          );
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (
	        (// TODO: receiveComponent()?
	        (fnName === 'mountComponent' ||
	        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

	        if (typeof this._currentElement.type === 'string') {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ?
	          args[0] :
	          this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ?
	            this._currentElement._owner.getName() :
	            '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	var assign = __webpack_require__(13);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  TEXT_CONTENT: 'set textContent',
	  'updatePropertyByID': 'update attribute',
	  'deletePropertyByID': 'delete attribute',
	  'updateStylesByID': 'update styles',
	  'updateInnerHTMLByID': 'set innerHTML',
	  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var id;

	    for (id in measurement.writes) {
	      measurement.writes[id].forEach(function(write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    }
	  }
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	var performance = __webpack_require__(153);

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (!performance || !performance.now) {
	  performance = Date;
	}

	var performanceNow = performance.now.bind(performance);

	module.exports = performanceNow;


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(51);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance =
	    window.performance ||
	    window.msPerformance ||
	    window.webkitPerformance;
	}

	module.exports = performance || {};


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactInstanceHandles = __webpack_require__(19);
	var ReactMarkupChecksum = __webpack_require__(77);
	var ReactServerRenderingTransaction =
	  __webpack_require__(155);

	var emptyObject = __webpack_require__(14);
	var instantiateReactComponent = __webpack_require__(83);
	var invariant = __webpack_require__(7);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToString(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup =
	        componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToStaticMarkup(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);
	var CallbackQueue = __webpack_require__(27);
	var ReactPutListenerQueue = __webpack_require__(135);
	var Transaction = __webpack_require__(36);

	var assign = __webpack_require__(13);
	var emptyFunction = __webpack_require__(16);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap proceedures.
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(
	  ReactServerRenderingTransaction.prototype,
	  Transaction.Mixin,
	  Mixin
	);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(11);

	var invariant = __webpack_require__(7);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(children),
	    'onlyChild must be passed a children with exactly one child.'
	  ) : invariant(ReactElement.isValidElement(children)));
	  return children;
	}

	module.exports = onlyChild;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	  AppBar: __webpack_require__(158),
	  AppCanvas: __webpack_require__(202),
	  Avatar: __webpack_require__(203),
	  BeforeAfterWrapper: __webpack_require__(204),
	  Card: __webpack_require__(205),
	  CardActions: __webpack_require__(210),
	  CardExpandable: __webpack_require__(206),
	  CardHeader: __webpack_require__(211),
	  CardMedia: __webpack_require__(218),
	  CardText: __webpack_require__(219),
	  CardTitle: __webpack_require__(220),
	  Checkbox: __webpack_require__(221),
	  CircularProgress: __webpack_require__(228),
	  ClearFix: __webpack_require__(225),
	  DatePicker: __webpack_require__(229),
	  DatePickerDialog: __webpack_require__(231),
	  Dialog: __webpack_require__(246),
	  DropDownIcon: __webpack_require__(252),
	  DropDownMenu: __webpack_require__(260),
	  EnhancedButton: __webpack_require__(187),
	  FlatButton: __webpack_require__(247),
	  FloatingActionButton: __webpack_require__(262),
	  FontIcon: __webpack_require__(197),
	  IconButton: __webpack_require__(184),
	  IconMenu: __webpack_require__(263),
	  LeftNav: __webpack_require__(267),
	  LinearProgress: __webpack_require__(268),
	  List: __webpack_require__(266),
	  ListDivider: __webpack_require__(269),
	  ListItem: __webpack_require__(270),
	  Menu: __webpack_require__(254),
	  MenuItem: __webpack_require__(256),
	  Mixins: __webpack_require__(273),
	  Overlay: __webpack_require__(249),
	  Paper: __webpack_require__(201),
	  RadioButton: __webpack_require__(275),
	  RadioButtonGroup: __webpack_require__(278),
	  RaisedButton: __webpack_require__(279),
	  RefreshIndicator: __webpack_require__(280),
	  Ripples: __webpack_require__(281),
	  SelectField: __webpack_require__(282),
	  Slider: __webpack_require__(283),
	  SvgIcon: __webpack_require__(200),
	  Icons: {
	    NavigationMenu: __webpack_require__(199),
	    NavigationChevronLeft: __webpack_require__(241),
	    NavigationChevronRight: __webpack_require__(242)
	  },
	  Styles: __webpack_require__(212),
	  Snackbar: __webpack_require__(285),
	  Tab: __webpack_require__(286),
	  Tabs: __webpack_require__(287),
	  Table: __webpack_require__(290),
	  TableBody: __webpack_require__(291),
	  TableFooter: __webpack_require__(293),
	  TableHeader: __webpack_require__(294),
	  TableHeaderColumn: __webpack_require__(295),
	  TableRow: __webpack_require__(296),
	  TableRowColumn: __webpack_require__(292),
	  Theme: __webpack_require__(297),
	  Toggle: __webpack_require__(257),
	  TimePicker: __webpack_require__(298),
	  TextField: __webpack_require__(250),
	  Toolbar: __webpack_require__(239),
	  ToolbarGroup: __webpack_require__(240),
	  ToolbarSeparator: __webpack_require__(308),
	  ToolbarTitle: __webpack_require__(309),
	  Tooltip: __webpack_require__(198),
	  Utils: __webpack_require__(310)
	};

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Typography = __webpack_require__(182);
	var IconButton = __webpack_require__(184);
	var NavigationMenu = __webpack_require__(199);
	var Paper = __webpack_require__(201);

	var AppBar = React.createClass({
	  displayName: 'AppBar',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    onLeftIconButtonTouchTap: React.PropTypes.func,
	    onRightIconButtonTouchTap: React.PropTypes.func,
	    showMenuIconButton: React.PropTypes.bool,
	    style: React.PropTypes.object,
	    iconClassNameLeft: React.PropTypes.string,
	    iconClassNameRight: React.PropTypes.string,
	    iconElementLeft: React.PropTypes.element,
	    iconElementRight: React.PropTypes.element,
	    iconStyleRight: React.PropTypes.object,
	    title: React.PropTypes.node,
	    zDepth: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      showMenuIconButton: true,
	      title: '',
	      zDepth: 1
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    if (process.env.NODE_ENV !== 'production') {
	      if (this.props.iconElementLeft && this.props.iconClassNameLeft) {
	        console.warn('Properties iconClassNameLeft and iconElementLeft cannot be simultaneously ' + 'defined. Please use one or the other.');
	      }

	      if (this.props.iconElementRight && this.props.iconClassNameRight) {
	        console.warn('Properties iconClassNameRight and iconElementRight cannot be simultaneously ' + 'defined. Please use one or the other.');
	      }
	    }
	  },

	  getStyles: function getStyles() {
	    var spacing = this.context.muiTheme.spacing;
	    var themeVariables = this.context.muiTheme.component.appBar;
	    var iconButtonSize = this.context.muiTheme.component.button.iconButtonSize;
	    var flatButtonSize = 36;
	    var styles = {
	      root: {
	        zIndex: 5,
	        width: '100%',
	        display: '-webkit-box; display: -webkit-flex; display: flex',
	        minHeight: themeVariables.height,
	        backgroundColor: themeVariables.color,
	        paddingLeft: spacing.desktopGutter,
	        paddingRight: spacing.desktopGutter
	      },
	      title: {
	        whiteSpace: 'nowrap',
	        overflow: 'hidden',
	        textOverflow: 'ellipsis',
	        margin: 0,
	        paddingTop: 0,
	        letterSpacing: 0,
	        fontSize: 24,
	        fontWeight: Typography.fontWeightNormal,
	        color: themeVariables.textColor,
	        lineHeight: themeVariables.height + 'px'
	      },
	      mainElement: {
	        boxFlex: 1,
	        flex: '1'
	      },
	      iconButton: {
	        style: {
	          marginTop: (themeVariables.height - iconButtonSize) / 2,
	          marginRight: 8,
	          marginLeft: -16
	        },
	        iconStyle: {
	          fill: themeVariables.textColor,
	          color: themeVariables.textColor
	        }
	      },
	      flatButton: {
	        color: themeVariables.textColor,
	        backgroundColor: 'transparent',
	        marginTop: (iconButtonSize - flatButtonSize) / 2 + 2
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var props = this.props;
	    var menuElementLeft = undefined;
	    var menuElementRight = undefined;
	    var styles = this.getStyles();
	    var title = props.title;
	    var iconRightStyle = this.mergeAndPrefix(styles.iconButton.style, {
	      marginRight: -16,
	      marginLeft: 'auto'
	    }, props.iconStyleRight);
	    var titleElement = undefined;

	    if (title) {
	      // If the title is a string, wrap in an h1 tag.
	      // If not, just use it as a node.
	      titleElement = typeof title === 'string' || title instanceof String ? React.createElement(
	        'h1',
	        { style: this.mergeAndPrefix(styles.title, styles.mainElement) },
	        title
	      ) : React.createElement(
	        'div',
	        { style: this.mergeAndPrefix(styles.mainElement) },
	        title
	      );
	    }

	    if (props.showMenuIconButton) {
	      var iconElementLeft = props.iconElementLeft;

	      if (iconElementLeft) {
	        switch (iconElementLeft.type.displayName) {
	          case 'IconButton':
	            iconElementLeft = React.cloneElement(iconElementLeft, {
	              iconStyle: this.mergeAndPrefix(styles.iconButton.iconStyle)
	            });
	            break;
	        }

	        menuElementLeft = React.createElement(
	          'div',
	          { style: styles.iconButton.style },
	          iconElementLeft
	        );
	      } else {
	        var child = props.iconClassNameLeft ? '' : React.createElement(NavigationMenu, { style: this.mergeAndPrefix(styles.iconButton.iconStyle) });
	        menuElementLeft = React.createElement(
	          IconButton,
	          {
	            style: this.mergeAndPrefix(styles.iconButton.style),
	            iconStyle: this.mergeAndPrefix(styles.iconButton.iconStyle),
	            iconClassName: props.iconClassNameLeft,
	            onTouchTap: this._onLeftIconButtonTouchTap },
	          child
	        );
	      }
	    }

	    if (props.iconElementRight) {
	      var iconElementRight = props.iconElementRight;

	      switch (iconElementRight.type.displayName) {
	        case 'IconButton':
	          iconElementRight = React.cloneElement(iconElementRight, {
	            iconStyle: this.mergeAndPrefix(styles.iconButton.iconStyle)
	          });
	          break;

	        case 'FlatButton':
	          iconElementRight = React.cloneElement(iconElementRight, {
	            style: this.mergeStyles(styles.flatButton, iconElementRight.props.style)
	          });
	          break;
	      }

	      menuElementRight = React.createElement(
	        'div',
	        { style: iconRightStyle },
	        iconElementRight
	      );
	    } else if (props.iconClassNameRight) {
	      menuElementRight = React.createElement(IconButton, {
	        style: iconRightStyle,
	        iconStyle: this.mergeAndPrefix(styles.iconButton.iconStyle),
	        iconClassName: props.iconClassNameRight,
	        onTouchTap: this._onRightIconButtonTouchTap });
	    }

	    return React.createElement(
	      Paper,
	      {
	        rounded: false,
	        className: props.className,
	        style: this.mergeAndPrefix(styles.root, props.style),
	        zDepth: props.zDepth },
	      menuElementLeft,
	      titleElement,
	      menuElementRight,
	      props.children
	    );
	  },

	  _onLeftIconButtonTouchTap: function _onLeftIconButtonTouchTap(event) {
	    if (this.props.onLeftIconButtonTouchTap) {
	      this.props.onLeftIconButtonTouchTap(event);
	    }
	  },

	  _onRightIconButtonTouchTap: function _onRightIconButtonTouchTap(event) {
	    if (this.props.onRightIconButtonTouchTap) {
	      this.props.onRightIconButtonTouchTap(event);
	    }
	  }

	});

	module.exports = AppBar;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var ImmutabilityHelper = __webpack_require__(160);
	var Styles = __webpack_require__(179);

	// This mixin isn't necessary and will be removed in v0.11

	/**
	 *	@params:
	 *	styles = Current styles.
	 *  props = New style properties that will override the current style.
	 */
	module.exports = {

	  propTypes: {
	    style: React.PropTypes.object
	  },

	  //Moved this function to ImmutabilityHelper.merge
	  mergeStyles: function mergeStyles() {
	    return ImmutabilityHelper.merge.apply(this, arguments);
	  },

	  //Moved this function to /utils/styles.js
	  mergeAndPrefix: function mergeAndPrefix() {
	    return Styles.mergeAndPrefix.apply(this, arguments);
	  }
	};

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var update = React.addons.update;

	function mergeSingle(objA, objB) {
	  if (!objA) return objB;
	  if (!objB) return objA;
	  return update(objA, { $merge: objB });
	}

	module.exports = {

	  merge: function merge() {
	    var args = Array.prototype.slice.call(arguments, 0);
	    var base = args[0];

	    for (var i = 1; i < args.length; i++) {
	      if (args[i]) {
	        base = mergeSingle(base, args[i]);
	      }
	    }
	    return base;
	  },

	  mergeItem: function mergeItem(obj, key, newValueObject) {
	    var command = {};
	    command[key] = { $merge: newValueObject };
	    return update(obj, command);
	  },

	  push: function push(array, obj) {
	    var newObj = Array.isArray(obj) ? obj : [obj];
	    return update(array, { $push: newObj });
	  },

	  shift: function shift(array) {
	    return update(array, { $splice: [[0, 1]] });
	  }

	};

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(162);


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactWithAddons
	 */

	/**
	 * This module exists purely in the open source project, and is meant as a way
	 * to create a separate standalone build of React. This build has "addons", or
	 * functionality we've built and think might be useful but doesn't have a good
	 * place to live inside React core.
	 */

	'use strict';

	var LinkedStateMixin = __webpack_require__(163);
	var React = __webpack_require__(2);
	var ReactComponentWithPureRenderMixin =
	  __webpack_require__(166);
	var ReactCSSTransitionGroup = __webpack_require__(167);
	var ReactFragment = __webpack_require__(10);
	var ReactTransitionGroup = __webpack_require__(168);
	var ReactUpdates = __webpack_require__(26);

	var cx = __webpack_require__(176);
	var cloneWithProps = __webpack_require__(170);
	var update = __webpack_require__(177);

	React.addons = {
	  CSSTransitionGroup: ReactCSSTransitionGroup,
	  LinkedStateMixin: LinkedStateMixin,
	  PureRenderMixin: ReactComponentWithPureRenderMixin,
	  TransitionGroup: ReactTransitionGroup,

	  batchedUpdates: ReactUpdates.batchedUpdates,
	  classSet: cx,
	  cloneWithProps: cloneWithProps,
	  createFragment: ReactFragment.create,
	  update: update
	};

	if ("production" !== process.env.NODE_ENV) {
	  React.addons.Perf = __webpack_require__(150);
	  React.addons.TestUtils = __webpack_require__(178);
	}

	module.exports = React;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedStateMixin
	 * @typechecks static-only
	 */

	'use strict';

	var ReactLink = __webpack_require__(164);
	var ReactStateSetters = __webpack_require__(165);

	/**
	 * A simple mixin around ReactLink.forState().
	 */
	var LinkedStateMixin = {
	  /**
	   * Create a ReactLink that's linked to part of this component's state. The
	   * ReactLink will have the current value of this.state[key] and will call
	   * setState() when a change is requested.
	   *
	   * @param {string} key state key to update. Note: you may want to use keyOf()
	   * if you're using Google Closure Compiler advanced mode.
	   * @return {ReactLink} ReactLink instance linking to the state.
	   */
	  linkState: function(key) {
	    return new ReactLink(
	      this.state[key],
	      ReactStateSetters.createStateKeySetter(this, key)
	    );
	  }
	};

	module.exports = LinkedStateMixin;


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLink
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactLink encapsulates a common pattern in which a component wants to modify
	 * a prop received from its parent. ReactLink allows the parent to pass down a
	 * value coupled with a callback that, when invoked, expresses an intent to
	 * modify that value. For example:
	 *
	 * React.createClass({
	 *   getInitialState: function() {
	 *     return {value: ''};
	 *   },
	 *   render: function() {
	 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
	 *     return <input valueLink={valueLink} />;
	 *   },
	 *   this._handleValueChange: function(newValue) {
	 *     this.setState({value: newValue});
	 *   }
	 * });
	 *
	 * We have provided some sugary mixins to make the creation and
	 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
	 */

	var React = __webpack_require__(2);

	/**
	 * @param {*} value current value of the link
	 * @param {function} requestChange callback to request a change
	 */
	function ReactLink(value, requestChange) {
	  this.value = value;
	  this.requestChange = requestChange;
	}

	/**
	 * Creates a PropType that enforces the ReactLink API and optionally checks the
	 * type of the value being passed inside the link. Example:
	 *
	 * MyComponent.propTypes = {
	 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
	 * }
	 */
	function createLinkTypeChecker(linkType) {
	  var shapes = {
	    value: typeof linkType === 'undefined' ?
	      React.PropTypes.any.isRequired :
	      linkType.isRequired,
	    requestChange: React.PropTypes.func.isRequired
	  };
	  return React.PropTypes.shape(shapes);
	}

	ReactLink.PropTypes = {
	  link: createLinkTypeChecker
	};

	module.exports = ReactLink;


/***/ },
/* 165 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactStateSetters
	 */

	'use strict';

	var ReactStateSetters = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(component, funcReturningState) {
	    return function(a, b, c, d, e, f) {
	      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
	      if (partialState) {
	        component.setState(partialState);
	      }
	    };
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(component, key) {
	    // Memoize the setters.
	    var cache = component.__keySetters || (component.__keySetters = {});
	    return cache[key] || (cache[key] = createStateKeySetter(component, key));
	  }
	};

	function createStateKeySetter(component, key) {
	  // Partial state is allocated outside of the function closure so it can be
	  // reused with every call, avoiding memory allocation when this function
	  // is called.
	  var partialState = {};
	  return function stateKeySetter(value) {
	    partialState[key] = value;
	    component.setState(partialState);
	  };
	}

	ReactStateSetters.Mixin = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateSetter(function(xValue) {
	   *     return {x: xValue};
	   *   })(1);
	   *
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(funcReturningState) {
	    return ReactStateSetters.createStateSetter(this, funcReturningState);
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateKeySetter('x')(1);
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(key) {
	    return ReactStateSetters.createStateKeySetter(this, key);
	  }
	};

	module.exports = ReactStateSetters;


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactComponentWithPureRenderMixin
	*/

	'use strict';

	var shallowEqual = __webpack_require__(137);

	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this Mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function(nextProps, nextState) {
	    return !shallowEqual(this.props, nextProps) ||
	           !shallowEqual(this.state, nextState);
	  }
	};

	module.exports = ReactComponentWithPureRenderMixin;


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroup
	 */

	'use strict';

	var React = __webpack_require__(2);

	var assign = __webpack_require__(13);

	var ReactTransitionGroup = React.createFactory(
	  __webpack_require__(168)
	);
	var ReactCSSTransitionGroupChild = React.createFactory(
	  __webpack_require__(173)
	);

	var ReactCSSTransitionGroup = React.createClass({
	  displayName: 'ReactCSSTransitionGroup',

	  propTypes: {
	    transitionName: React.PropTypes.string.isRequired,
	    transitionAppear: React.PropTypes.bool,
	    transitionEnter: React.PropTypes.bool,
	    transitionLeave: React.PropTypes.bool
	  },

	  getDefaultProps: function() {
	    return {
	      transitionAppear: false,
	      transitionEnter: true,
	      transitionLeave: true
	    };
	  },

	  _wrapChild: function(child) {
	    // We need to provide this childFactory so that
	    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	    // leave while it is leaving.
	    return ReactCSSTransitionGroupChild(
	      {
	        name: this.props.transitionName,
	        appear: this.props.transitionAppear,
	        enter: this.props.transitionEnter,
	        leave: this.props.transitionLeave
	      },
	      child
	    );
	  },

	  render: function() {
	    return (
	      ReactTransitionGroup(
	        assign({}, this.props, {childFactory: this._wrapChild})
	      )
	    );
	  }
	});

	module.exports = ReactCSSTransitionGroup;


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionGroup
	 */

	'use strict';

	var React = __webpack_require__(2);
	var ReactTransitionChildMapping = __webpack_require__(169);

	var assign = __webpack_require__(13);
	var cloneWithProps = __webpack_require__(170);
	var emptyFunction = __webpack_require__(16);

	var ReactTransitionGroup = React.createClass({
	  displayName: 'ReactTransitionGroup',

	  propTypes: {
	    component: React.PropTypes.any,
	    childFactory: React.PropTypes.func
	  },

	  getDefaultProps: function() {
	    return {
	      component: 'span',
	      childFactory: emptyFunction.thatReturnsArgument
	    };
	  },

	  getInitialState: function() {
	    return {
	      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
	    };
	  },

	  componentWillMount: function() {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  },

	  componentDidMount: function() {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key);
	      }
	    }
	  },

	  componentWillReceiveProps: function(nextProps) {
	    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(
	      nextProps.children
	    );
	    var prevChildMapping = this.state.children;

	    this.setState({
	      children: ReactTransitionChildMapping.mergeChildMappings(
	        prevChildMapping,
	        nextChildMapping
	      )
	    });

	    var key;

	    for (key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }

	    for (key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
	      if (prevChildMapping[key] && !hasNext &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToLeave.push(key);
	      }
	    }

	    // If we want to someday check for reordering, we could do it here.
	  },

	  componentDidUpdate: function() {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);

	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  },

	  performAppear: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillAppear) {
	      component.componentWillAppear(
	        this._handleDoneAppearing.bind(this, key)
	      );
	    } else {
	      this._handleDoneAppearing(key);
	    }
	  },

	  _handleDoneAppearing: function(key) {
	    var component = this.refs[key];
	    if (component.componentDidAppear) {
	      component.componentDidAppear();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully appeared. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performEnter: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillEnter) {
	      component.componentWillEnter(
	        this._handleDoneEntering.bind(this, key)
	      );
	    } else {
	      this._handleDoneEntering(key);
	    }
	  },

	  _handleDoneEntering: function(key) {
	    var component = this.refs[key];
	    if (component.componentDidEnter) {
	      component.componentDidEnter();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully entered. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performLeave: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];
	    if (component.componentWillLeave) {
	      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
	    } else {
	      // Note that this is somewhat dangerous b/c it calls setState()
	      // again, effectively mutating the component before all the work
	      // is done.
	      this._handleDoneLeaving(key);
	    }
	  },

	  _handleDoneLeaving: function(key) {
	    var component = this.refs[key];

	    if (component.componentDidLeave) {
	      component.componentDidLeave();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	      // This entered again before it fully left. Add it again.
	      this.performEnter(key);
	    } else {
	      var newChildren = assign({}, this.state.children);
	      delete newChildren[key];
	      this.setState({children: newChildren});
	    }
	  },

	  render: function() {
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];
	    for (var key in this.state.children) {
	      var child = this.state.children[key];
	      if (child) {
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(cloneWithProps(
	          this.props.childFactory(child),
	          {ref: key, key: key}
	        ));
	      }
	    }
	    return React.createElement(
	      this.props.component,
	      this.props,
	      childrenToRender
	    );
	  }
	});

	module.exports = ReactTransitionGroup;


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactTransitionChildMapping
	 */

	'use strict';

	var ReactChildren = __webpack_require__(8);
	var ReactFragment = __webpack_require__(10);

	var ReactTransitionChildMapping = {
	  /**
	   * Given `this.props.children`, return an object mapping key to child. Just
	   * simple syntactic sugar around ReactChildren.map().
	   *
	   * @param {*} children `this.props.children`
	   * @return {object} Mapping of key to child
	   */
	  getChildMapping: function(children) {
	    if (!children) {
	      return children;
	    }
	    return ReactFragment.extract(ReactChildren.map(children, function(child) {
	      return child;
	    }));
	  },

	  /**
	   * When you're adding or removing children some may be added or removed in the
	   * same render pass. We want to show *both* since we want to simultaneously
	   * animate elements in and out. This function takes a previous set of keys
	   * and a new set of keys and merges them with its best guess of the correct
	   * ordering. In the future we may expose some of the utilities in
	   * ReactMultiChild to make this easy, but for now React itself does not
	   * directly have this concept of the union of prevChildren and nextChildren
	   * so we implement it here.
	   *
	   * @param {object} prev prev children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @param {object} next next children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @return {object} a key set that contains all keys in `prev` and all keys
	   * in `next` in a reasonable order.
	   */
	  mergeChildMappings: function(prev, next) {
	    prev = prev || {};
	    next = next || {};

	    function getValueForKey(key) {
	      if (next.hasOwnProperty(key)) {
	        return next[key];
	      } else {
	        return prev[key];
	      }
	    }

	    // For each key of `next`, the list of keys to insert before that key in
	    // the combined list
	    var nextKeysPending = {};

	    var pendingKeys = [];
	    for (var prevKey in prev) {
	      if (next.hasOwnProperty(prevKey)) {
	        if (pendingKeys.length) {
	          nextKeysPending[prevKey] = pendingKeys;
	          pendingKeys = [];
	        }
	      } else {
	        pendingKeys.push(prevKey);
	      }
	    }

	    var i;
	    var childMapping = {};
	    for (var nextKey in next) {
	      if (nextKeysPending.hasOwnProperty(nextKey)) {
	        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	          var pendingNextKey = nextKeysPending[nextKey][i];
	          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(
	            pendingNextKey
	          );
	        }
	      }
	      childMapping[nextKey] = getValueForKey(nextKey);
	    }

	    // Finally, add the keys which didn't appear before any key in `next`
	    for (i = 0; i < pendingKeys.length; i++) {
	      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	    }

	    return childMapping;
	  }
	};

	module.exports = ReactTransitionChildMapping;


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule cloneWithProps
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactPropTransferer = __webpack_require__(171);

	var keyOf = __webpack_require__(39);
	var warning = __webpack_require__(15);

	var CHILDREN_PROP = keyOf({children: null});

	/**
	 * Sometimes you want to change the props of a child passed to you. Usually
	 * this is to add a CSS class.
	 *
	 * @param {ReactElement} child child element you'd like to clone
	 * @param {object} props props you'd like to modify. className and style will be
	 * merged automatically.
	 * @return {ReactElement} a clone of child with props merged in.
	 */
	function cloneWithProps(child, props) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      !child.ref,
	      'You are calling cloneWithProps() on a child with a ref. This is ' +
	      'dangerous because you\'re creating a new child which will not be ' +
	      'added as a ref to its parent.'
	    ) : null);
	  }

	  var newProps = ReactPropTransferer.mergeProps(props, child.props);

	  // Use `child.props.children` if it is provided.
	  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&
	      child.props.hasOwnProperty(CHILDREN_PROP)) {
	    newProps.children = child.props.children;
	  }

	  // The current API doesn't retain _owner and _context, which is why this
	  // doesn't use ReactElement.cloneAndReplaceProps.
	  return ReactElement.createElement(child.type, newProps);
	}

	module.exports = cloneWithProps;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTransferer
	 */

	'use strict';

	var assign = __webpack_require__(13);
	var emptyFunction = __webpack_require__(16);
	var joinClasses = __webpack_require__(172);

	/**
	 * Creates a transfer strategy that will merge prop values using the supplied
	 * `mergeStrategy`. If a prop was previously unset, this just sets it.
	 *
	 * @param {function} mergeStrategy
	 * @return {function}
	 */
	function createTransferStrategy(mergeStrategy) {
	  return function(props, key, value) {
	    if (!props.hasOwnProperty(key)) {
	      props[key] = value;
	    } else {
	      props[key] = mergeStrategy(props[key], value);
	    }
	  };
	}

	var transferStrategyMerge = createTransferStrategy(function(a, b) {
	  // `merge` overrides the first object's (`props[key]` above) keys using the
	  // second object's (`value`) keys. An object's style's existing `propA` would
	  // get overridden. Flip the order here.
	  return assign({}, b, a);
	});

	/**
	 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
	 * NOTE: if you add any more exceptions to this list you should be sure to
	 * update `cloneWithProps()` accordingly.
	 */
	var TransferStrategies = {
	  /**
	   * Never transfer `children`.
	   */
	  children: emptyFunction,
	  /**
	   * Transfer the `className` prop by merging them.
	   */
	  className: createTransferStrategy(joinClasses),
	  /**
	   * Transfer the `style` prop (which is an object) by merging them.
	   */
	  style: transferStrategyMerge
	};

	/**
	 * Mutates the first argument by transferring the properties from the second
	 * argument.
	 *
	 * @param {object} props
	 * @param {object} newProps
	 * @return {object}
	 */
	function transferInto(props, newProps) {
	  for (var thisKey in newProps) {
	    if (!newProps.hasOwnProperty(thisKey)) {
	      continue;
	    }

	    var transferStrategy = TransferStrategies[thisKey];

	    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
	      transferStrategy(props, thisKey, newProps[thisKey]);
	    } else if (!props.hasOwnProperty(thisKey)) {
	      props[thisKey] = newProps[thisKey];
	    }
	  }
	  return props;
	}

	/**
	 * ReactPropTransferer are capable of transferring props to another component
	 * using a `transferPropsTo` method.
	 *
	 * @class ReactPropTransferer
	 */
	var ReactPropTransferer = {

	  /**
	   * Merge two props objects using TransferStrategies.
	   *
	   * @param {object} oldProps original props (they take precedence)
	   * @param {object} newProps new props to merge in
	   * @return {object} a new object containing both sets of props merged.
	   */
	  mergeProps: function(oldProps, newProps) {
	    return transferInto(assign({}, oldProps), newProps);
	  }

	};

	module.exports = ReactPropTransferer;


/***/ },
/* 172 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule joinClasses
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Combines multiple className strings into one.
	 * http://jsperf.com/joinclasses-args-vs-array
	 *
	 * @param {...?string} classes
	 * @return {string}
	 */
	function joinClasses(className/*, ... */) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      if (nextClass) {
	        className = (className ? className + ' ' : '') + nextClass;
	      }
	    }
	  }
	  return className;
	}

	module.exports = joinClasses;


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroupChild
	 */

	'use strict';

	var React = __webpack_require__(2);

	var CSSCore = __webpack_require__(174);
	var ReactTransitionEvents = __webpack_require__(175);

	var onlyChild = __webpack_require__(156);
	var warning = __webpack_require__(15);

	// We don't remove the element from the DOM until we receive an animationend or
	// transitionend event. If the user screws up and forgets to add an animation
	// their node will be stuck in the DOM forever, so we detect if an animation
	// does not start and if it doesn't, we just call the end listener immediately.
	var TICK = 17;
	var NO_EVENT_TIMEOUT = 5000;

	var noEventListener = null;


	if ("production" !== process.env.NODE_ENV) {
	  noEventListener = function() {
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'transition(): tried to perform an animation without ' +
	      'an animationend or transitionend event after timeout (' +
	      '%sms). You should either disable this ' +
	      'transition in JS or add a CSS animation/transition.',
	      NO_EVENT_TIMEOUT
	    ) : null);
	  };
	}

	var ReactCSSTransitionGroupChild = React.createClass({
	  displayName: 'ReactCSSTransitionGroupChild',

	  transition: function(animationType, finishCallback) {
	    var node = this.getDOMNode();
	    var className = this.props.name + '-' + animationType;
	    var activeClassName = className + '-active';
	    var noEventTimeout = null;

	    var endListener = function(e) {
	      if (e && e.target !== node) {
	        return;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        clearTimeout(noEventTimeout);
	      }

	      CSSCore.removeClass(node, className);
	      CSSCore.removeClass(node, activeClassName);

	      ReactTransitionEvents.removeEndEventListener(node, endListener);

	      // Usually this optional callback is used for informing an owner of
	      // a leave animation and telling it to remove the child.
	      if (finishCallback) {
	        finishCallback();
	      }
	    };

	    ReactTransitionEvents.addEndEventListener(node, endListener);

	    CSSCore.addClass(node, className);

	    // Need to do this to actually trigger a transition.
	    this.queueClass(activeClassName);

	    if ("production" !== process.env.NODE_ENV) {
	      noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);
	    }
	  },

	  queueClass: function(className) {
	    this.classNameQueue.push(className);

	    if (!this.timeout) {
	      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
	    }
	  },

	  flushClassNameQueue: function() {
	    if (this.isMounted()) {
	      this.classNameQueue.forEach(
	        CSSCore.addClass.bind(CSSCore, this.getDOMNode())
	      );
	    }
	    this.classNameQueue.length = 0;
	    this.timeout = null;
	  },

	  componentWillMount: function() {
	    this.classNameQueue = [];
	  },

	  componentWillUnmount: function() {
	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	  },

	  componentWillAppear: function(done) {
	    if (this.props.appear) {
	      this.transition('appear', done);
	    } else {
	      done();
	    }
	  },

	  componentWillEnter: function(done) {
	    if (this.props.enter) {
	      this.transition('enter', done);
	    } else {
	      done();
	    }
	  },

	  componentWillLeave: function(done) {
	    if (this.props.leave) {
	      this.transition('leave', done);
	    } else {
	      done();
	    }
	  },

	  render: function() {
	    return onlyChild(this.props.children);
	  }
	});

	module.exports = ReactCSSTransitionGroupChild;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSCore
	 * @typechecks
	 */

	var invariant = __webpack_require__(7);

	/**
	 * The CSSCore module specifies the API (and implements most of the methods)
	 * that should be used when dealing with the display of elements (via their
	 * CSS classes and visibility on screen. It is an API focused on mutating the
	 * display and not reading it as no logical state should be encoded in the
	 * display of elements.
	 */

	var CSSCore = {

	  /**
	   * Adds the class passed in to the element if it doesn't already have it.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  addClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.addClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));

	    if (className) {
	      if (element.classList) {
	        element.classList.add(className);
	      } else if (!CSSCore.hasClass(element, className)) {
	        element.className = element.className + ' ' + className;
	      }
	    }
	    return element;
	  },

	  /**
	   * Removes the class passed in from the element
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  removeClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.removeClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));

	    if (className) {
	      if (element.classList) {
	        element.classList.remove(className);
	      } else if (CSSCore.hasClass(element, className)) {
	        element.className = element.className
	          .replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1')
	          .replace(/\s+/g, ' ') // multiple spaces to one
	          .replace(/^\s*|\s*$/g, ''); // trim the ends
	      }
	    }
	    return element;
	  },

	  /**
	   * Helper to add or remove a class from an element based on a condition.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @param {*} bool condition to whether to add or remove the class
	   * @return {DOMElement} the element passed in
	   */
	  conditionClass: function(element, className, bool) {
	    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
	  },

	  /**
	   * Tests whether the element has the class specified.
	   *
	   * @param {DOMNode|DOMWindow} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {boolean} true if the element has the class, false if not
	   */
	  hasClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSS.hasClass takes only a single class name.'
	    ) : invariant(!/\s/.test(className)));
	    if (element.classList) {
	      return !!className && element.classList.contains(className);
	    }
	    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
	  }

	};

	module.exports = CSSCore;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionEvents
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	/**
	 * EVENT_NAME_MAP is used to determine which event fired when a
	 * transition/animation ends, based on the style property used to
	 * define that event.
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    'transition': 'transitionend',
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'mozTransitionEnd',
	    'OTransition': 'oTransitionEnd',
	    'msTransition': 'MSTransitionEnd'
	  },

	  animationend: {
	    'animation': 'animationend',
	    'WebkitAnimation': 'webkitAnimationEnd',
	    'MozAnimation': 'mozAnimationEnd',
	    'OAnimation': 'oAnimationEnd',
	    'msAnimation': 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are useable, and if not remove them
	  // from the map
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    var baseEvents = EVENT_NAME_MAP[baseEventName];
	    for (var styleName in baseEvents) {
	      if (styleName in style) {
	        endEvents.push(baseEvents[styleName]);
	        break;
	      }
	    }
	  }
	}

	if (ExecutionEnvironment.canUseDOM) {
	  detectEvents();
	}

	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var ReactTransitionEvents = {
	  addEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },

	  removeEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	module.exports = ReactTransitionEvents;


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule cx
	 */

	/**
	 * This function is used to mark string literals representing CSS class names
	 * so that they can be transformed statically. This allows for modularization
	 * and minification of CSS class names.
	 *
	 * In static_upstream, this function is actually implemented, but it should
	 * eventually be replaced with something more descriptive, and the transform
	 * that is used in the main stack should be ported for use elsewhere.
	 *
	 * @param string|object className to modularize, or an object of key/values.
	 *                      In the object case, the values are conditions that
	 *                      determine if the className keys should be included.
	 * @param [string ...]  Variable list of classNames in the string case.
	 * @return string       Renderable space-separated CSS className.
	 */

	'use strict';
	var warning = __webpack_require__(15);

	var warned = false;

	function cx(classNames) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      warned,
	      'React.addons.classSet will be deprecated in a future version. See ' +
	      'http://fb.me/react-addons-classset'
	    ) : null);
	    warned = true;
	  }

	  if (typeof classNames == 'object') {
	    return Object.keys(classNames).filter(function(className) {
	      return classNames[className];
	    }).join(' ');
	  } else {
	    return Array.prototype.join.call(arguments, ' ');
	  }
	}

	module.exports = cx;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule update
	 */

	 /* global hasOwnProperty:true */

	'use strict';

	var assign = __webpack_require__(13);
	var keyOf = __webpack_require__(39);
	var invariant = __webpack_require__(7);
	var hasOwnProperty = {}.hasOwnProperty;

	function shallowCopy(x) {
	  if (Array.isArray(x)) {
	    return x.concat();
	  } else if (x && typeof x === 'object') {
	    return assign(new x.constructor(), x);
	  } else {
	    return x;
	  }
	}

	var COMMAND_PUSH = keyOf({$push: null});
	var COMMAND_UNSHIFT = keyOf({$unshift: null});
	var COMMAND_SPLICE = keyOf({$splice: null});
	var COMMAND_SET = keyOf({$set: null});
	var COMMAND_MERGE = keyOf({$merge: null});
	var COMMAND_APPLY = keyOf({$apply: null});

	var ALL_COMMANDS_LIST = [
	  COMMAND_PUSH,
	  COMMAND_UNSHIFT,
	  COMMAND_SPLICE,
	  COMMAND_SET,
	  COMMAND_MERGE,
	  COMMAND_APPLY
	];

	var ALL_COMMANDS_SET = {};

	ALL_COMMANDS_LIST.forEach(function(command) {
	  ALL_COMMANDS_SET[command] = true;
	});

	function invariantArrayCase(value, spec, command) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(value),
	    'update(): expected target of %s to be an array; got %s.',
	    command,
	    value
	  ) : invariant(Array.isArray(value)));
	  var specValue = spec[command];
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(specValue),
	    'update(): expected spec of %s to be an array; got %s. ' +
	    'Did you forget to wrap your parameter in an array?',
	    command,
	    specValue
	  ) : invariant(Array.isArray(specValue)));
	}

	function update(value, spec) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec === 'object',
	    'update(): You provided a key path to update() that did not contain one ' +
	    'of %s. Did you forget to include {%s: ...}?',
	    ALL_COMMANDS_LIST.join(', '),
	    COMMAND_SET
	  ) : invariant(typeof spec === 'object'));

	  if (hasOwnProperty.call(spec, COMMAND_SET)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Object.keys(spec).length === 1,
	      'Cannot have more than one key in an object with %s',
	      COMMAND_SET
	    ) : invariant(Object.keys(spec).length === 1));

	    return spec[COMMAND_SET];
	  }

	  var nextValue = shallowCopy(value);

	  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
	    var mergeObj = spec[COMMAND_MERGE];
	    ("production" !== process.env.NODE_ENV ? invariant(
	      mergeObj && typeof mergeObj === 'object',
	      'update(): %s expects a spec of type \'object\'; got %s',
	      COMMAND_MERGE,
	      mergeObj
	    ) : invariant(mergeObj && typeof mergeObj === 'object'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      nextValue && typeof nextValue === 'object',
	      'update(): %s expects a target of type \'object\'; got %s',
	      COMMAND_MERGE,
	      nextValue
	    ) : invariant(nextValue && typeof nextValue === 'object'));
	    assign(nextValue, spec[COMMAND_MERGE]);
	  }

	  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
	    invariantArrayCase(value, spec, COMMAND_PUSH);
	    spec[COMMAND_PUSH].forEach(function(item) {
	      nextValue.push(item);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
	    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
	    spec[COMMAND_UNSHIFT].forEach(function(item) {
	      nextValue.unshift(item);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(value),
	      'Expected %s target to be an array; got %s',
	      COMMAND_SPLICE,
	      value
	    ) : invariant(Array.isArray(value)));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(spec[COMMAND_SPLICE]),
	      'update(): expected spec of %s to be an array of arrays; got %s. ' +
	      'Did you forget to wrap your parameters in an array?',
	      COMMAND_SPLICE,
	      spec[COMMAND_SPLICE]
	    ) : invariant(Array.isArray(spec[COMMAND_SPLICE])));
	    spec[COMMAND_SPLICE].forEach(function(args) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        Array.isArray(args),
	        'update(): expected spec of %s to be an array of arrays; got %s. ' +
	        'Did you forget to wrap your parameters in an array?',
	        COMMAND_SPLICE,
	        spec[COMMAND_SPLICE]
	      ) : invariant(Array.isArray(args)));
	      nextValue.splice.apply(nextValue, args);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof spec[COMMAND_APPLY] === 'function',
	      'update(): expected spec of %s to be a function; got %s.',
	      COMMAND_APPLY,
	      spec[COMMAND_APPLY]
	    ) : invariant(typeof spec[COMMAND_APPLY] === 'function'));
	    nextValue = spec[COMMAND_APPLY](nextValue);
	  }

	  for (var k in spec) {
	    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
	      nextValue[k] = update(value[k], spec[k]);
	    }
	  }

	  return nextValue;
	}

	module.exports = update;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTestUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPluginHub = __webpack_require__(69);
	var EventPropagators = __webpack_require__(93);
	var React = __webpack_require__(2);
	var ReactElement = __webpack_require__(11);
	var ReactEmptyComponent = __webpack_require__(76);
	var ReactBrowserEventEmitter = __webpack_require__(68);
	var ReactCompositeComponent = __webpack_require__(84);
	var ReactInstanceHandles = __webpack_require__(19);
	var ReactInstanceMap = __webpack_require__(25);
	var ReactMount = __webpack_require__(67);
	var ReactUpdates = __webpack_require__(26);
	var SyntheticEvent = __webpack_require__(97);

	var assign = __webpack_require__(13);
	var emptyObject = __webpack_require__(14);

	var topLevelTypes = EventConstants.topLevelTypes;

	function Event(suffix) {}

	/**
	 * @class ReactTestUtils
	 */

	/**
	 * Todo: Support the entire DOM.scry query syntax. For now, these simple
	 * utilities will suffice for testing purposes.
	 * @lends ReactTestUtils
	 */
	var ReactTestUtils = {
	  renderIntoDocument: function(instance) {
	    var div = document.createElement('div');
	    // None of our tests actually require attaching the container to the
	    // DOM, and doing so creates a mess that we rely on test isolation to
	    // clean up, so we're going to stop honoring the name of this method
	    // (and probably rename it eventually) if no problems arise.
	    // document.documentElement.appendChild(div);
	    return React.render(instance, div);
	  },

	  isElement: function(element) {
	    return ReactElement.isValidElement(element);
	  },

	  isElementOfType: function(inst, convenienceConstructor) {
	    return (
	      ReactElement.isValidElement(inst) &&
	      inst.type === convenienceConstructor
	    );
	  },

	  isDOMComponent: function(inst) {
	    // TODO: Fix this heuristic. It's just here because composites can currently
	    // pretend to be DOM components.
	    return !!(inst && inst.tagName && inst.getDOMNode);
	  },

	  isDOMComponentElement: function(inst) {
	    return !!(inst &&
	              ReactElement.isValidElement(inst) &&
	              !!inst.tagName);
	  },

	  isCompositeComponent: function(inst) {
	    return typeof inst.render === 'function' &&
	           typeof inst.setState === 'function';
	  },

	  isCompositeComponentWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponent(inst) &&
	             (inst.constructor === type));
	  },

	  isCompositeComponentElement: function(inst) {
	    if (!ReactElement.isValidElement(inst)) {
	      return false;
	    }
	    // We check the prototype of the type that will get mounted, not the
	    // instance itself. This is a future proof way of duck typing.
	    var prototype = inst.type.prototype;
	    return (
	      typeof prototype.render === 'function' &&
	      typeof prototype.setState === 'function'
	    );
	  },

	  isCompositeComponentElementWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&
	             (inst.constructor === type));
	  },

	  getRenderedChildOfCompositeComponent: function(inst) {
	    if (!ReactTestUtils.isCompositeComponent(inst)) {
	      return null;
	    }
	    var internalInstance = ReactInstanceMap.get(inst);
	    return internalInstance._renderedComponent.getPublicInstance();
	  },

	  findAllInRenderedTree: function(inst, test) {
	    if (!inst) {
	      return [];
	    }
	    var ret = test(inst) ? [inst] : [];
	    if (ReactTestUtils.isDOMComponent(inst)) {
	      var internalInstance = ReactInstanceMap.get(inst);
	      var renderedChildren = internalInstance
	        ._renderedComponent
	        ._renderedChildren;
	      var key;
	      for (key in renderedChildren) {
	        if (!renderedChildren.hasOwnProperty(key)) {
	          continue;
	        }
	        if (!renderedChildren[key].getPublicInstance) {
	          continue;
	        }
	        ret = ret.concat(
	          ReactTestUtils.findAllInRenderedTree(
	            renderedChildren[key].getPublicInstance(),
	            test
	          )
	        );
	      }
	    } else if (ReactTestUtils.isCompositeComponent(inst)) {
	      ret = ret.concat(
	        ReactTestUtils.findAllInRenderedTree(
	          ReactTestUtils.getRenderedChildOfCompositeComponent(inst),
	          test
	        )
	      );
	    }
	    return ret;
	  },

	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the class name matching `className`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithClass: function(root, className) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      var instClassName = inst.props.className;
	      return ReactTestUtils.isDOMComponent(inst) && (
	        (instClassName && (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1)
	      );
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithClass: function(root, className) {
	    var all =
	      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match ' +
	        '(found: ' + all.length + ') for class:' + className
	      );
	    }
	    return all[0];
	  },


	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the tag name matching `tagName`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithTag: function(root, tagName) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isDOMComponent(inst) &&
	            inst.tagName === tagName.toUpperCase();
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithTag: function(root, tagName) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match for tag:' + tagName);
	    }
	    return all[0];
	  },


	  /**
	   * Finds all instances of components with type equal to `componentType`.
	   * @return an array of all the matches.
	   */
	  scryRenderedComponentsWithType: function(root, componentType) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isCompositeComponentWithType(
	        inst,
	        componentType
	      );
	    });
	  },

	  /**
	   * Same as `scryRenderedComponentsWithType` but expects there to be one result
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactComponent} The one match.
	   */
	  findRenderedComponentWithType: function(root, componentType) {
	    var all = ReactTestUtils.scryRenderedComponentsWithType(
	      root,
	      componentType
	    );
	    if (all.length !== 1) {
	      throw new Error(
	        'Did not find exactly one match for componentType:' + componentType
	      );
	    }
	    return all[0];
	  },

	  /**
	   * Pass a mocked component module to this method to augment it with
	   * useful methods that allow it to be used as a dummy React component.
	   * Instead of rendering as usual, the component will become a simple
	   * <div> containing any provided children.
	   *
	   * @param {object} module the mock function object exported from a
	   *                        module that defines the component to be mocked
	   * @param {?string} mockTagName optional dummy root tag name to return
	   *                              from render method (overrides
	   *                              module.mockTagName if provided)
	   * @return {object} the ReactTestUtils object (for chaining)
	   */
	  mockComponent: function(module, mockTagName) {
	    mockTagName = mockTagName || module.mockTagName || "div";

	    module.prototype.render.mockImplementation(function() {
	      return React.createElement(
	        mockTagName,
	        null,
	        this.props.children
	      );
	    });

	    return this;
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on an `Element` node.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`
	   * @param {!Element} node The dom to simulate an event occurring on.
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {
	    fakeNativeEvent.target = node;
	    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(
	      topLevelType,
	      fakeNativeEvent
	    );
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on the `ReactDOMComponent` `comp`.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.
	   * @param comp {!ReactDOMComponent}
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnDOMComponent: function(
	      topLevelType,
	      comp,
	      fakeNativeEvent) {
	    ReactTestUtils.simulateNativeEventOnNode(
	      topLevelType,
	      comp.getDOMNode(),
	      fakeNativeEvent
	    );
	  },

	  nativeTouchData: function(x, y) {
	    return {
	      touches: [
	        {pageX: x, pageY: y}
	      ]
	    };
	  },

	  createRenderer: function() {
	    return new ReactShallowRenderer();
	  },

	  Simulate: null,
	  SimulateNative: {}
	};

	/**
	 * @class ReactShallowRenderer
	 */
	var ReactShallowRenderer = function() {
	  this._instance = null;
	};

	ReactShallowRenderer.prototype.getRenderOutput = function() {
	  return (
	    (this._instance && this._instance._renderedComponent &&
	     this._instance._renderedComponent._renderedOutput)
	    || null
	  );
	};

	var NoopInternalComponent = function(element) {
	  this._renderedOutput = element;
	  this._currentElement = element === null || element === false ?
	    ReactEmptyComponent.emptyElement :
	    element;
	};

	NoopInternalComponent.prototype = {

	  mountComponent: function() {
	  },

	  receiveComponent: function(element) {
	    this._renderedOutput = element;
	    this._currentElement = element === null || element === false ?
	      ReactEmptyComponent.emptyElement :
	      element;
	  },

	  unmountComponent: function() {
	  }

	};

	var ShallowComponentWrapper = function() { };
	assign(
	  ShallowComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin, {
	    _instantiateReactComponent: function(element) {
	      return new NoopInternalComponent(element);
	    },
	    _replaceNodeWithMarkupByID: function() {},
	    _renderValidatedComponent:
	      ReactCompositeComponent.Mixin.
	        _renderValidatedComponentWithoutOwnerOrContext
	  }
	);

	ReactShallowRenderer.prototype.render = function(element, context) {
	  if (!context) {
	    context = emptyObject;
	  }
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  this._render(element, transaction, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	};

	ReactShallowRenderer.prototype.unmount = function() {
	  if (this._instance) {
	    this._instance.unmountComponent();
	  }
	};

	ReactShallowRenderer.prototype._render = function(element, transaction, context) {
	  if (!this._instance) {
	    var rootID = ReactInstanceHandles.createReactRootID();
	    var instance = new ShallowComponentWrapper(element.type);
	    instance.construct(element);

	    instance.mountComponent(rootID, transaction, context);

	    this._instance = instance;
	  } else {
	    this._instance.receiveComponent(element, transaction, context);
	  }
	};

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
	 * - ... (All keys from event plugin `eventTypes` objects)
	 */
	function makeSimulator(eventType) {
	  return function(domComponentOrNode, eventData) {
	    var node;
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      node = domComponentOrNode.getDOMNode();
	    } else if (domComponentOrNode.tagName) {
	      node = domComponentOrNode;
	    }

	    var fakeNativeEvent = new Event();
	    fakeNativeEvent.target = node;
	    // We don't use SyntheticEvent.getPooled in order to not have to worry about
	    // properly destroying any properties assigned from `eventData` upon release
	    var event = new SyntheticEvent(
	      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],
	      ReactMount.getID(node),
	      fakeNativeEvent
	    );
	    assign(event, eventData);
	    EventPropagators.accumulateTwoPhaseDispatches(event);

	    ReactUpdates.batchedUpdates(function() {
	      EventPluginHub.enqueueEvents(event);
	      EventPluginHub.processEventQueue();
	    });
	  };
	}

	function buildSimulators() {
	  ReactTestUtils.Simulate = {};

	  var eventType;
	  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {
	    /**
	     * @param {!Element || ReactDOMComponent} domComponentOrNode
	     * @param {?object} eventData Fake event data to use in SyntheticEvent.
	     */
	    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
	  }
	}

	// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
	var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
	EventPluginHub.injection.injectEventPluginOrder = function() {
	  oldInjectEventPluginOrder.apply(this, arguments);
	  buildSimulators();
	};
	var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
	EventPluginHub.injection.injectEventPluginsByName = function() {
	  oldInjectEventPlugins.apply(this, arguments);
	  buildSimulators();
	};

	buildSimulators();

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
	 * - ... (All keys from `EventConstants.topLevelTypes`)
	 *
	 * Note: Top level event types are a subset of the entire set of handler types
	 * (which include a broader set of "synthetic" events). For example, onDragDone
	 * is a synthetic event. Except when testing an event plugin or React's event
	 * handling code specifically, you probably want to use ReactTestUtils.Simulate
	 * to dispatch synthetic events.
	 */

	function makeNativeSimulator(eventType) {
	  return function(domComponentOrNode, nativeEventData) {
	    var fakeNativeEvent = new Event(eventType);
	    assign(fakeNativeEvent, nativeEventData);
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      ReactTestUtils.simulateNativeEventOnDOMComponent(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    } else if (!!domComponentOrNode.tagName) {
	      // Will allow on actual dom nodes.
	      ReactTestUtils.simulateNativeEventOnNode(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    }
	  };
	}

	var eventType;
	for (eventType in topLevelTypes) {
	  // Event type is stored as 'topClick' - we transform that to 'click'
	  var convenienceName = eventType.indexOf('top') === 0 ?
	    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
	  /**
	   * @param {!Element || ReactDOMComponent} domComponentOrNode
	   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
	   */
	  ReactTestUtils.SimulateNative[convenienceName] =
	    makeNativeSimulator(eventType);
	}

	module.exports = ReactTestUtils;


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var AutoPrefix = __webpack_require__(180);
	var ImmutabilityHelper = __webpack_require__(160);

	module.exports = {

	  mergeAndPrefix: function mergeAndPrefix() {
	    var mergedStyles = ImmutabilityHelper.merge.apply(this, arguments);
	    return AutoPrefix.all(mergedStyles);
	  }

	};

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isBrowser = typeof window !== 'undefined';
	var Modernizr = isBrowser ? __webpack_require__(181) : undefined;

	//Keep track of already prefixed keys so we can skip Modernizr prefixing
	var prefixedKeys = {};

	module.exports = {

	  all: function all(styles) {
	    var prefixedStyle = {};
	    for (var key in styles) {
	      prefixedStyle[this.single(key)] = styles[key];
	    }
	    return prefixedStyle;
	  },

	  set: function set(style, key, value) {
	    style[this.single(key)] = value;
	  },

	  single: function single(key) {

	    //If a browser doesn't exist, we can't prefix with Modernizr so
	    //just return the key
	    if (!isBrowser) return key;

	    //Check if we've prefixed this key before, just return it
	    if (prefixedKeys.hasOwnProperty(key)) return prefixedKeys[key];

	    //Key hasn't been prefixed yet, prefix with Modernizr
	    var prefKey = Modernizr.prefixed(key);

	    // Windows 7 Firefox has an issue with the implementation of Modernizr.prefixed
	    // and is capturing 'false' as the CSS property name instead of the non-prefixed version.
	    if (prefKey === false) return key;

	    //Save the key off for the future and return the prefixed key
	    prefixedKeys[key] = prefKey;
	    return prefKey;
	  },

	  singleHyphened: function singleHyphened(key) {
	    var str = this.single(key);

	    return !str ? key : str.replace(/([A-Z])/g, function (str, m1) {
	      return '-' + m1.toLowerCase();
	    }).replace(/^ms-/, '-ms-');
	  }

	};

/***/ },
/* 181 */
/***/ function(module, exports) {

	/* Modernizr 2.8.3 (Custom Build) | MIT & BSD
	 * Build: http://modernizr.com/download/#-borderradius-boxshadow-opacity-csstransforms-csstransforms3d-csstransitions-prefixed-teststyles-testprop-testallprops-prefixes-domprefixes
	 */

	'use strict';

	module.exports = (function (window, document, undefined) {

	    var version = '2.8.3',
	        Modernizr = {},
	        docElement = document.documentElement,
	        mod = 'modernizr',
	        modElem = document.createElement(mod),
	        mStyle = modElem.style,
	        prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),
	        omPrefixes = 'Webkit Moz O ms',
	        cssomPrefixes = omPrefixes.split(' '),
	        domPrefixes = omPrefixes.toLowerCase().split(' '),
	        tests = {},
	        classes = [],
	        slice = classes.slice,
	        featureName = undefined,
	        injectElementWithStyles = function injectElementWithStyles(rule, callback, nodes, testnames) {

	        var style = undefined,
	            ret = undefined,
	            node = undefined,
	            docOverflow = undefined,
	            div = document.createElement('div'),
	            body = document.body,
	            fakeBody = body || document.createElement('body');

	        if (parseInt(nodes, 10)) {
	            while (nodes--) {
	                node = document.createElement('div');
	                node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
	                div.appendChild(node);
	            }
	        }

	        style = ['&#173;', '<style id="s', mod, '">', rule, '</style>'].join('');
	        div.id = mod;
	        (body ? div : fakeBody).innerHTML += style;
	        fakeBody.appendChild(div);
	        if (!body) {
	            fakeBody.style.background = '';
	            fakeBody.style.overflow = 'hidden';
	            docOverflow = docElement.style.overflow;
	            docElement.style.overflow = 'hidden';
	            docElement.appendChild(fakeBody);
	        }

	        ret = callback(div, rule);
	        if (!body) {
	            fakeBody.parentNode.removeChild(fakeBody);
	            docElement.style.overflow = docOverflow;
	        } else {
	            div.parentNode.removeChild(div);
	        }

	        return !!ret;
	    },
	        _hasOwnProperty = ({}).hasOwnProperty,
	        hasOwnProp = undefined;

	    function is(obj, type) {
	        return typeof obj === type;
	    }

	    if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {
	        hasOwnProp = function (object, property) {
	            return _hasOwnProperty.call(object, property);
	        };
	    } else {
	        hasOwnProp = function (object, property) {
	            return property in object && is(object.constructor.prototype[property], 'undefined');
	        };
	    }

	    if (!Function.prototype.bind) {
	        Function.prototype.bind = function bind(that) {

	            var target = this;

	            if (typeof target != "function") {
	                throw new TypeError();
	            }

	            var args = slice.call(arguments, 1),
	                bound = function bound() {

	                if (this instanceof bound) {

	                    var F = function F() {};
	                    F.prototype = target.prototype;
	                    var _self = new F();

	                    var result = target.apply(_self, args.concat(slice.call(arguments)));
	                    if (Object(result) === result) {
	                        return result;
	                    }
	                    return _self;
	                } else {

	                    return target.apply(that, args.concat(slice.call(arguments)));
	                }
	            };

	            return bound;
	        };
	    }

	    function setCss(str) {
	        mStyle.cssText = str;
	    }

	    function setCssAll(str1, str2) {
	        return setCss(prefixes.join(str1 + ';') + (str2 || ''));
	    }

	    function contains(str, substr) {
	        return !! ~('' + str).indexOf(substr);
	    }

	    function testProps(props, prefixed) {
	        for (var i in props) {
	            var prop = props[i];
	            if (!contains(prop, "-") && mStyle[prop] !== undefined) {
	                return prefixed == 'pfx' ? prop : true;
	            }
	        }
	        return false;
	    }

	    function testDOMProps(props, obj, elem) {
	        for (var i in props) {
	            var item = obj[props[i]];
	            if (item !== undefined) {

	                if (elem === false) return props[i];

	                if (is(item, 'function')) {
	                    return item.bind(elem || obj);
	                }

	                return item;
	            }
	        }
	        return false;
	    }

	    function testPropsAll(prop, prefixed, elem) {

	        var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),
	            props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');

	        if (is(prefixed, "string") || is(prefixed, "undefined")) {
	            return testProps(props, prefixed);
	        } else {
	            props = (prop + ' ' + domPrefixes.join(ucProp + ' ') + ucProp).split(' ');
	            return testDOMProps(props, prefixed, elem);
	        }
	    }

	    tests.borderradius = function () {
	        return testPropsAll('borderRadius');
	    };

	    tests.boxshadow = function () {
	        return testPropsAll('boxShadow');
	    };

	    tests.opacity = function () {
	        setCssAll('opacity:.55');

	        return (/^0.55$/.test(mStyle.opacity)
	        );
	    };
	    tests.csstransforms = function () {
	        return !!testPropsAll('transform');
	    };

	    tests.csstransforms3d = function () {

	        var ret = !!testPropsAll('perspective');

	        if (ret && 'webkitPerspective' in docElement.style) {

	            injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function (node) {
	                ret = node.offsetLeft === 9 && node.offsetHeight === 3;
	            });
	        }
	        return ret;
	    };

	    tests.csstransitions = function () {
	        return testPropsAll('transition');
	    };

	    for (var feature in tests) {
	        if (hasOwnProp(tests, feature)) {
	            featureName = feature.toLowerCase();
	            Modernizr[featureName] = tests[feature]();

	            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);
	        }
	    }

	    Modernizr.addTest = function (feature, test) {
	        if (typeof feature == 'object') {
	            for (var key in feature) {
	                if (hasOwnProp(feature, key)) {
	                    Modernizr.addTest(key, feature[key]);
	                }
	            }
	        } else {

	            feature = feature.toLowerCase();

	            if (Modernizr[feature] !== undefined) {
	                return Modernizr;
	            }

	            test = typeof test == 'function' ? test() : test;

	            if (typeof enableClasses !== "undefined" && enableClasses) {
	                docElement.className += ' ' + (test ? '' : 'no-') + feature;
	            }
	            Modernizr[feature] = test;
	        }

	        return Modernizr;
	    };

	    setCss('');

	    Modernizr._version = version;

	    Modernizr._prefixes = prefixes;
	    Modernizr._domPrefixes = domPrefixes;
	    Modernizr._cssomPrefixes = cssomPrefixes;

	    Modernizr.testProp = function (prop) {
	        return testProps([prop]);
	    };

	    Modernizr.testAllProps = testPropsAll;

	    Modernizr.testStyles = injectElementWithStyles;
	    Modernizr.prefixed = function (prop, obj, elem) {
	        if (!obj) {
	            return testPropsAll(prop, 'pfx');
	        } else {
	            return testPropsAll(prop, obj, elem);
	        }
	    };

	    return Modernizr;
	})(window, window.document);

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var Colors = __webpack_require__(183);

	var Typography = function Typography() {
	  _classCallCheck(this, Typography);

	  // text colors
	  this.textFullBlack = Colors.fullBlack;
	  this.textDarkBlack = Colors.darkBlack;
	  this.textLightBlack = Colors.lightBlack;
	  this.textMinBlack = Colors.minBlack;
	  this.textFullWhite = Colors.fullWhite;
	  this.textDarkWhite = Colors.darkWhite;
	  this.textLightWhite = Colors.lightWhite;

	  // font weight
	  this.fontWeightLight = 300;
	  this.fontWeightNormal = 400;
	  this.fontWeightMedium = 500;

	  this.fontStyleButtonFontSize = 14;
	};

	module.exports = new Typography();

/***/ },
/* 183 */
/***/ function(module, exports) {

	// To include this file in your project:
	// let mui = require('mui');
	// let Colors = mui.Styles.Colors;

	'use strict';

	module.exports = {

	  red50: '#ffebee',
	  red100: '#ffcdd2',
	  red200: '#ef9a9a',
	  red300: '#e57373',
	  red400: '#ef5350',
	  red500: '#f44336',
	  red600: '#e53935',
	  red700: '#d32f2f',
	  red800: '#c62828',
	  red900: '#b71c1c',
	  redA100: '#ff8a80',
	  redA200: '#ff5252',
	  redA400: '#ff1744',
	  redA700: '#d50000',

	  pink50: '#fce4ec',
	  pink100: '#f8bbd0',
	  pink200: '#f48fb1',
	  pink300: '#f06292',
	  pink400: '#ec407a',
	  pink500: '#e91e63',
	  pink600: '#d81b60',
	  pink700: '#c2185b',
	  pink800: '#ad1457',
	  pink900: '#880e4f',
	  pinkA100: '#ff80ab',
	  pinkA200: '#ff4081',
	  pinkA400: '#f50057',
	  pinkA700: '#c51162',

	  purple50: '#f3e5f5',
	  purple100: '#e1bee7',
	  purple200: '#ce93d8',
	  purple300: '#ba68c8',
	  purple400: '#ab47bc',
	  purple500: '#9c27b0',
	  purple600: '#8e24aa',
	  purple700: '#7b1fa2',
	  purple800: '#6a1b9a',
	  purple900: '#4a148c',
	  purpleA100: '#ea80fc',
	  purpleA200: '#e040fb',
	  purpleA400: '#d500f9',
	  purpleA700: '#aa00ff',

	  deepPurple50: '#ede7f6',
	  deepPurple100: '#d1c4e9',
	  deepPurple200: '#b39ddb',
	  deepPurple300: '#9575cd',
	  deepPurple400: '#7e57c2',
	  deepPurple500: '#673ab7',
	  deepPurple600: '#5e35b1',
	  deepPurple700: '#512da8',
	  deepPurple800: '#4527a0',
	  deepPurple900: '#311b92',
	  deepPurpleA100: '#b388ff',
	  deepPurpleA200: '#7c4dff',
	  deepPurpleA400: '#651fff',
	  deepPurpleA700: '#6200ea',

	  indigo50: '#e8eaf6',
	  indigo100: '#c5cae9',
	  indigo200: '#9fa8da',
	  indigo300: '#7986cb',
	  indigo400: '#5c6bc0',
	  indigo500: '#3f51b5',
	  indigo600: '#3949ab',
	  indigo700: '#303f9f',
	  indigo800: '#283593',
	  indigo900: '#1a237e',
	  indigoA100: '#8c9eff',
	  indigoA200: '#536dfe',
	  indigoA400: '#3d5afe',
	  indigoA700: '#304ffe',

	  blue50: '#e3f2fd',
	  blue100: '#bbdefb',
	  blue200: '#90caf9',
	  blue300: '#64b5f6',
	  blue400: '#42a5f5',
	  blue500: '#2196f3',
	  blue600: '#1e88e5',
	  blue700: '#1976d2',
	  blue800: '#1565c0',
	  blue900: '#0d47a1',
	  blueA100: '#82b1ff',
	  blueA200: '#448aff',
	  blueA400: '#2979ff',
	  blueA700: '#2962ff',

	  lightBlue50: '#e1f5fe',
	  lightBlue100: '#b3e5fc',
	  lightBlue200: '#81d4fa',
	  lightBlue300: '#4fc3f7',
	  lightBlue400: '#29b6f6',
	  lightBlue500: '#03a9f4',
	  lightBlue600: '#039be5',
	  lightBlue700: '#0288d1',
	  lightBlue800: '#0277bd',
	  lightBlue900: '#01579b',
	  lightBlueA100: '#80d8ff',
	  lightBlueA200: '#40c4ff',
	  lightBlueA400: '#00b0ff',
	  lightBlueA700: '#0091ea',

	  cyan50: '#e0f7fa',
	  cyan100: '#b2ebf2',
	  cyan200: '#80deea',
	  cyan300: '#4dd0e1',
	  cyan400: '#26c6da',
	  cyan500: '#00bcd4',
	  cyan600: '#00acc1',
	  cyan700: '#0097a7',
	  cyan800: '#00838f',
	  cyan900: '#006064',
	  cyanA100: '#84ffff',
	  cyanA200: '#18ffff',
	  cyanA400: '#00e5ff',
	  cyanA700: '#00b8d4',

	  teal50: '#e0f2f1',
	  teal100: '#b2dfdb',
	  teal200: '#80cbc4',
	  teal300: '#4db6ac',
	  teal400: '#26a69a',
	  teal500: '#009688',
	  teal600: '#00897b',
	  teal700: '#00796b',
	  teal800: '#00695c',
	  teal900: '#004d40',
	  tealA100: '#a7ffeb',
	  tealA200: '#64ffda',
	  tealA400: '#1de9b6',
	  tealA700: '#00bfa5',

	  green50: '#e8f5e9',
	  green100: '#c8e6c9',
	  green200: '#a5d6a7',
	  green300: '#81c784',
	  green400: '#66bb6a',
	  green500: '#4caf50',
	  green600: '#43a047',
	  green700: '#388e3c',
	  green800: '#2e7d32',
	  green900: '#1b5e20',
	  greenA100: '#b9f6ca',
	  greenA200: '#69f0ae',
	  greenA400: '#00e676',
	  greenA700: '#00c853',

	  lightGreen50: '#f1f8e9',
	  lightGreen100: '#dcedc8',
	  lightGreen200: '#c5e1a5',
	  lightGreen300: '#aed581',
	  lightGreen400: '#9ccc65',
	  lightGreen500: '#8bc34a',
	  lightGreen600: '#7cb342',
	  lightGreen700: '#689f38',
	  lightGreen800: '#558b2f',
	  lightGreen900: '#33691e',
	  lightGreenA100: '#ccff90',
	  lightGreenA200: '#b2ff59',
	  lightGreenA400: '#76ff03',
	  lightGreenA700: '#64dd17',

	  lime50: '#f9fbe7',
	  lime100: '#f0f4c3',
	  lime200: '#e6ee9c',
	  lime300: '#dce775',
	  lime400: '#d4e157',
	  lime500: '#cddc39',
	  lime600: '#c0ca33',
	  lime700: '#afb42b',
	  lime800: '#9e9d24',
	  lime900: '#827717',
	  limeA100: '#f4ff81',
	  limeA200: '#eeff41',
	  limeA400: '#c6ff00',
	  limeA700: '#aeea00',

	  yellow50: '#fffde7',
	  yellow100: '#fff9c4',
	  yellow200: '#fff59d',
	  yellow300: '#fff176',
	  yellow400: '#ffee58',
	  yellow500: '#ffeb3b',
	  yellow600: '#fdd835',
	  yellow700: '#fbc02d',
	  yellow800: '#f9a825',
	  yellow900: '#f57f17',
	  yellowA100: '#ffff8d',
	  yellowA200: '#ffff00',
	  yellowA400: '#ffea00',
	  yellowA700: '#ffd600',

	  amber50: '#fff8e1',
	  amber100: '#ffecb3',
	  amber200: '#ffe082',
	  amber300: '#ffd54f',
	  amber400: '#ffca28',
	  amber500: '#ffc107',
	  amber600: '#ffb300',
	  amber700: '#ffa000',
	  amber800: '#ff8f00',
	  amber900: '#ff6f00',
	  amberA100: '#ffe57f',
	  amberA200: '#ffd740',
	  amberA400: '#ffc400',
	  amberA700: '#ffab00',

	  orange50: '#fff3e0',
	  orange100: '#ffe0b2',
	  orange200: '#ffcc80',
	  orange300: '#ffb74d',
	  orange400: '#ffa726',
	  orange500: '#ff9800',
	  orange600: '#fb8c00',
	  orange700: '#f57c00',
	  orange800: '#ef6c00',
	  orange900: '#e65100',
	  orangeA100: '#ffd180',
	  orangeA200: '#ffab40',
	  orangeA400: '#ff9100',
	  orangeA700: '#ff6d00',

	  deepOrange50: '#fbe9e7',
	  deepOrange100: '#ffccbc',
	  deepOrange200: '#ffab91',
	  deepOrange300: '#ff8a65',
	  deepOrange400: '#ff7043',
	  deepOrange500: '#ff5722',
	  deepOrange600: '#f4511e',
	  deepOrange700: '#e64a19',
	  deepOrange800: '#d84315',
	  deepOrange900: '#bf360c',
	  deepOrangeA100: '#ff9e80',
	  deepOrangeA200: '#ff6e40',
	  deepOrangeA400: '#ff3d00',
	  deepOrangeA700: '#dd2c00',

	  brown50: '#efebe9',
	  brown100: '#d7ccc8',
	  brown200: '#bcaaa4',
	  brown300: '#a1887f',
	  brown400: '#8d6e63',
	  brown500: '#795548',
	  brown600: '#6d4c41',
	  brown700: '#5d4037',
	  brown800: '#4e342e',
	  brown900: '#3e2723',

	  blueGrey50: '#eceff1',
	  blueGrey100: '#cfd8dc',
	  blueGrey200: '#b0bec5',
	  blueGrey300: '#90a4ae',
	  blueGrey400: '#78909c',
	  blueGrey500: '#607d8b',
	  blueGrey600: '#546e7a',
	  blueGrey700: '#455a64',
	  blueGrey800: '#37474f',
	  blueGrey900: '#263238',

	  grey50: '#fafafa',
	  grey100: '#f5f5f5',
	  grey200: '#eeeeee',
	  grey300: '#e0e0e0',
	  grey400: '#bdbdbd',
	  grey500: '#9e9e9e',
	  grey600: '#757575',
	  grey700: '#616161',
	  grey800: '#424242',
	  grey900: '#212121',

	  black: '#000000',
	  white: '#ffffff',

	  transparent: 'rgba(0, 0, 0, 0)',
	  fullBlack: 'rgba(0, 0, 0, 1)',
	  darkBlack: 'rgba(0, 0, 0, 0.87)',
	  lightBlack: 'rgba(0, 0, 0, 0.54)',
	  minBlack: 'rgba(0, 0, 0, 0.26)',
	  faintBlack: 'rgba(0, 0, 0, 0.12)',
	  fullWhite: 'rgba(255, 255, 255, 1)',
	  darkWhite: 'rgba(255, 255, 255, 0.87)',
	  lightWhite: 'rgba(255, 255, 255, 0.54)'

	};

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);
	var PropTypes = __webpack_require__(186);
	var EnhancedButton = __webpack_require__(187);
	var FontIcon = __webpack_require__(197);
	var Tooltip = __webpack_require__(198);
	var Children = __webpack_require__(188);

	var IconButton = React.createClass({
	  displayName: 'IconButton',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    className: React.PropTypes.string,
	    disabled: React.PropTypes.bool,
	    iconClassName: React.PropTypes.string,
	    iconStyle: React.PropTypes.object,
	    onBlur: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    onKeyboardFocus: React.PropTypes.func,
	    tooltip: React.PropTypes.string,
	    tooltipStyles: React.PropTypes.object,
	    tooltipPosition: PropTypes.cornersAndCenter,
	    touch: React.PropTypes.bool
	  },

	  getInitialState: function getInitialState() {
	    return {
	      tooltipShown: false
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      iconStyle: {},
	      tooltipPosition: 'bottom-center'
	    };
	  },

	  getStyles: function getStyles() {
	    var spacing = this.context.muiTheme.spacing;
	    var palette = this.context.muiTheme.palette;

	    var styles = {
	      root: {
	        position: 'relative',
	        boxSizing: 'border-box',
	        transition: Transitions.easeOut(),
	        padding: spacing.iconSize / 2,
	        width: spacing.iconSize * 2,
	        height: spacing.iconSize * 2,
	        fontSize: 0
	      },
	      tooltip: {
	        boxSizing: 'border-box'
	      },
	      icon: {
	        color: palette.textColor,
	        fill: palette.textColor
	      },
	      overlay: {
	        position: 'relative',
	        top: 0,
	        width: '100%',
	        height: '100%',
	        background: palette.disabledColor
	      },
	      disabled: {
	        color: palette.disabledColor,
	        fill: palette.disabledColor
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var disabled = _props.disabled;
	    var iconClassName = _props.iconClassName;
	    var tooltip = _props.tooltip;
	    var touch = _props.touch;
	    var iconStyle = _props.iconStyle;

	    var other = _objectWithoutProperties(_props, ['disabled', 'iconClassName', 'tooltip', 'touch', 'iconStyle']);

	    var fonticon = undefined;

	    var styles = this.getStyles();
	    var tooltipPosition = this.props.tooltipPosition.split('-');

	    var tooltipElement = tooltip ? React.createElement(Tooltip, {
	      ref: 'tooltip',
	      label: tooltip,
	      show: this.state.tooltipShown,
	      touch: touch,
	      style: this.mergeStyles(styles.tooltip, this.props.tooltipStyles),
	      verticalPosition: tooltipPosition[0],
	      horizontalPosition: tooltipPosition[1] }) : null;

	    if (iconClassName) {
	      var iconHoverColor = iconStyle.iconHoverColor;

	      var iconStyleFontIcon = _objectWithoutProperties(iconStyle, ['iconHoverColor']);

	      fonticon = React.createElement(
	        FontIcon,
	        {
	          className: iconClassName,
	          hoverColor: disabled ? null : iconHoverColor,
	          style: this.mergeStyles(styles.icon, disabled ? styles.disabled : {}, iconStyleFontIcon) },
	        this.props.children
	      );
	    }

	    var childrenStyle = disabled ? this.mergeStyles(iconStyle, styles.disabled) : iconStyle;

	    return React.createElement(
	      EnhancedButton,
	      _extends({}, other, {
	        ref: 'button',
	        centerRipple: true,
	        disabled: disabled,
	        style: this.mergeStyles(styles.root, this.props.style),
	        onBlur: this._handleBlur,
	        onFocus: this._handleFocus,
	        onMouseLeave: this._handleMouseLeave,
	        onMouseEnter: this._handleMouseEnter,
	        onKeyboardFocus: this._handleKeyboardFocus }),
	      tooltipElement,
	      fonticon,
	      Children.extend(this.props.children, {
	        style: childrenStyle
	      })
	    );
	  },

	  setKeyboardFocus: function setKeyboardFocus() {
	    this.refs.button.setKeyboardFocus();
	  },

	  _showTooltip: function _showTooltip() {
	    if (!this.props.disabled && this.props.tooltip) {
	      this.setState({ tooltipShown: true });
	    }
	  },

	  _hideTooltip: function _hideTooltip() {
	    if (this.props.tooltip) this.setState({ tooltipShown: false });
	  },

	  _handleBlur: function _handleBlur(e) {
	    this._hideTooltip();
	    if (this.props.onBlur) this.props.onBlur(e);
	  },

	  _handleFocus: function _handleFocus(e) {
	    this._showTooltip();
	    if (this.props.onFocus) this.props.onFocus(e);
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    if (!this.refs.button.isKeyboardFocused()) this._hideTooltip();
	    if (this.props.onMouseLeave) this.props.onMouseLeave(e);
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    this._showTooltip();
	    if (this.props.onMouseEnter) this.props.onMouseEnter(e);
	  },

	  _handleKeyboardFocus: function _handleKeyboardFocus(e, keyboardFocused) {
	    if (keyboardFocused && !this.props.disabled) {
	      this._showTooltip();
	      if (this.props.onFocus) this.props.onFocus(e);
	    } else if (!this.state.hovered) {
	      this._hideTooltip();
	      if (this.props.onBlur) this.props.onBlur(e);
	    }

	    if (this.props.onKeyboardFocus) this.props.onKeyboardFocus(e, keyboardFocused);
	  }

	});

	module.exports = IconButton;

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var AutoPrefix = __webpack_require__(180);

	module.exports = {

	  easeOutFunction: 'cubic-bezier(0.23, 1, 0.32, 1)',
	  easeInOutFunction: 'cubic-bezier(0.445, 0.05, 0.55, 0.95)',

	  easeOut: function easeOut(duration, property, delay, easeFunction) {

	    easeFunction = easeFunction || this.easeOutFunction;

	    if (property && Object.prototype.toString.call(property) === '[object Array]') {

	      var transitions = '';
	      for (var i = 0; i < property.length; i++) {
	        if (transitions) transitions += ',';
	        transitions += this.create(duration, property[i], delay, easeFunction);
	      }
	      return transitions;
	    } else {
	      return this.create(duration, property, delay, easeFunction);
	    }
	  },

	  create: function create(duration, property, delay, easeFunction) {
	    duration = duration || '450ms';
	    property = property || 'all';
	    delay = delay || '0ms';
	    easeFunction = easeFunction || "linear";

	    return AutoPrefix.singleHyphened(property) + ' ' + duration + ' ' + easeFunction + ' ' + delay;
	  }
	};

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);

	module.exports = {

	  corners: React.PropTypes.oneOf(['bottom-left', 'bottom-right', 'top-left', 'top-right']),

	  cornersAndCenter: React.PropTypes.oneOf(['bottom-center', 'bottom-left', 'bottom-right', 'top-center', 'top-left', 'top-right']),

	  stringOrNumber: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),

	  zDepth: React.PropTypes.oneOf([0, 1, 2, 3, 4, 5])

	};

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var StylePropable = __webpack_require__(159);
	var Colors = __webpack_require__(183);
	var Children = __webpack_require__(188);
	var Events = __webpack_require__(189);
	var KeyCode = __webpack_require__(190);
	var FocusRipple = __webpack_require__(191);
	var TouchRipple = __webpack_require__(194);

	var styleInjected = false;
	var listening = false;
	var tabPressed = false;

	function injectStyle() {
	  if (!styleInjected) {
	    // Remove inner padding and border in Firefox 4+.
	    var style = document.createElement("style");
	    style.innerHTML = '\n      button::-moz-focus-inner,\n      input::-moz-focus-inner {\n        border: 0;\n        padding: 0;\n      }\n    ';

	    document.body.appendChild(style);
	    styleInjected = true;
	  }
	}

	function listenForTabPresses() {
	  if (!listening) {
	    Events.on(window, 'keydown', function (e) {
	      tabPressed = e.keyCode === KeyCode.TAB;
	    });
	    listening = true;
	  }
	}

	var EnhancedButton = React.createClass({
	  displayName: 'EnhancedButton',

	  mixins: [PureRenderMixin, StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    centerRipple: React.PropTypes.bool,
	    containerElement: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element]),
	    disabled: React.PropTypes.bool,
	    disableFocusRipple: React.PropTypes.bool,
	    disableKeyboardFocus: React.PropTypes.bool,
	    disableTouchRipple: React.PropTypes.bool,
	    keyboardFocused: React.PropTypes.bool,
	    linkButton: React.PropTypes.bool,
	    focusRippleColor: React.PropTypes.string,
	    touchRippleColor: React.PropTypes.string,
	    focusRippleOpacity: React.PropTypes.number,
	    touchRippleOpacity: React.PropTypes.number,
	    onBlur: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    onKeyboardFocus: React.PropTypes.func,
	    onKeyDown: React.PropTypes.func,
	    onKeyUp: React.PropTypes.func,
	    onTouchTap: React.PropTypes.func,
	    tabIndex: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      containerElement: 'button',
	      onBlur: function onBlur() {},
	      onFocus: function onFocus() {},
	      onKeyboardFocus: function onKeyboardFocus() {},
	      onKeyDown: function onKeyDown() {},
	      onKeyUp: function onKeyUp() {},
	      onTouchTap: function onTouchTap() {},
	      tabIndex: 0,
	      type: 'button'
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      isKeyboardFocused: !this.props.disabled && this.props.keyboardFocused && !this.props.disableKeyboardFocus
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if ((nextProps.disabled || nextProps.disableKeyboardFocus) && this.state.isKeyboardFocused) {
	      this.setState({ isKeyboardFocused: false });
	      if (nextProps.onKeyboardFocus) {
	        nextProps.onKeyboardFocus(null, false);
	      }
	    }
	  },

	  componentDidMount: function componentDidMount() {
	    injectStyle();
	    listenForTabPresses();
	  },

	  render: function render() {
	    var _props = this.props;
	    var centerRipple = _props.centerRipple;
	    var children = _props.children;
	    var containerElement = _props.containerElement;
	    var disabled = _props.disabled;
	    var disableFocusRipple = _props.disableFocusRipple;
	    var disableKeyboardFocus = _props.disableKeyboardFocus;
	    var disableTouchRipple = _props.disableTouchRipple;
	    var focusRippleColor = _props.focusRippleColor;
	    var focusRippleOpacity = _props.focusRippleOpacity;
	    var linkButton = _props.linkButton;
	    var touchRippleColor = _props.touchRippleColor;
	    var touchRippleOpacity = _props.touchRippleOpacity;
	    var onBlur = _props.onBlur;
	    var onFocus = _props.onFocus;
	    var onKeyUp = _props.onKeyUp;
	    var onKeyDown = _props.onKeyDown;
	    var onTouchTap = _props.onTouchTap;
	    var style = _props.style;
	    var tabIndex = _props.tabIndex;
	    var type = _props.type;

	    var other = _objectWithoutProperties(_props, ['centerRipple', 'children', 'containerElement', 'disabled', 'disableFocusRipple', 'disableKeyboardFocus', 'disableTouchRipple', 'focusRippleColor', 'focusRippleOpacity', 'linkButton', 'touchRippleColor', 'touchRippleOpacity', 'onBlur', 'onFocus', 'onKeyUp', 'onKeyDown', 'onTouchTap', 'style', 'tabIndex', 'type']);

	    var mergedStyles = this.mergeAndPrefix({
	      border: 10,
	      background: 'none',
	      boxSizing: 'border-box',
	      display: 'inline-block',
	      font: 'inherit',
	      fontFamily: this.context.muiTheme.contentFontFamily,
	      tapHighlightColor: Colors.transparent,
	      appearance: linkButton ? null : 'button',
	      cursor: disabled ? 'default' : 'pointer',
	      textDecoration: 'none',
	      outline: 'none'
	    }, style);

	    if (disabled && linkButton) {
	      return React.createElement(
	        'span',
	        _extends({}, other, {
	          style: mergedStyles }),
	        children
	      );
	    }

	    var buttonProps = _extends({}, other, {
	      style: mergedStyles,
	      disabled: disabled,
	      onBlur: this._handleBlur,
	      onFocus: this._handleFocus,
	      onTouchTap: this._handleTouchTap,
	      onKeyUp: this._handleKeyUp,
	      onKeyDown: this._handleKeyDown,
	      tabIndex: tabIndex,
	      type: type
	    });
	    var buttonChildren = this._createButtonChildren();

	    return React.isValidElement(containerElement) ? React.cloneElement(containerElement, buttonProps, buttonChildren) : React.createElement(linkButton ? 'a' : containerElement, buttonProps, buttonChildren);
	  },

	  isKeyboardFocused: function isKeyboardFocused() {
	    return this.state.isKeyboardFocused;
	  },

	  removeKeyboardFocus: function removeKeyboardFocus(e) {
	    if (this.state.isKeyboardFocused) {
	      this.setState({ isKeyboardFocused: false });
	      this.props.onKeyboardFocus(e, false);
	    }
	  },

	  setKeyboardFocus: function setKeyboardFocus(e) {
	    if (!this.state.isKeyboardFocused) {
	      this.setState({ isKeyboardFocused: true });
	      this.props.onKeyboardFocus(e, true);
	    }
	  },

	  _cancelFocusTimeout: function _cancelFocusTimeout() {
	    if (this._focusTimeout) {
	      clearTimeout(this._focusTimeout);
	      this._focusTimeout = null;
	    }
	  },

	  _createButtonChildren: function _createButtonChildren() {
	    var _props2 = this.props;
	    var centerRipple = _props2.centerRipple;
	    var children = _props2.children;
	    var disabled = _props2.disabled;
	    var disableFocusRipple = _props2.disableFocusRipple;
	    var disableKeyboardFocus = _props2.disableKeyboardFocus;
	    var disableTouchRipple = _props2.disableTouchRipple;
	    var focusRippleColor = _props2.focusRippleColor;
	    var focusRippleOpacity = _props2.focusRippleOpacity;
	    var touchRippleColor = _props2.touchRippleColor;
	    var touchRippleOpacity = _props2.touchRippleOpacity;
	    var isKeyboardFocused = this.state.isKeyboardFocused;

	    //Focus Ripple
	    var focusRipple = isKeyboardFocused && !disabled && !disableFocusRipple && !disableKeyboardFocus ? React.createElement(FocusRipple, {
	      color: focusRippleColor,
	      opacity: focusRippleOpacity,
	      show: isKeyboardFocused
	    }) : undefined;

	    //Touch Ripple
	    var touchRipple = !disabled && !disableTouchRipple ? React.createElement(
	      TouchRipple,
	      {
	        centerRipple: centerRipple,
	        color: touchRippleColor,
	        opacity: touchRippleOpacity },
	      children
	    ) : undefined;

	    return Children.create({
	      focusRipple: focusRipple,
	      touchRipple: touchRipple,
	      children: touchRipple ? undefined : children
	    });
	  },

	  _handleKeyDown: function _handleKeyDown(e) {
	    if (!this.props.disabled && !this.props.disableKeyboardFocus) {
	      if (e.keyCode === KeyCode.ENTER && this.state.isKeyboardFocused) {
	        this._handleTouchTap(e);
	      }
	    }
	    this.props.onKeyDown(e);
	  },

	  _handleKeyUp: function _handleKeyUp(e) {
	    if (!this.props.disabled && e.keyCode === KeyCode.SPACE && this.state.isKeyboardFocused) {
	      this._handleTouchTap(e);
	    }
	    this.props.onKeyUp(e);
	  },

	  _handleBlur: function _handleBlur(e) {
	    this._cancelFocusTimeout();
	    this.removeKeyboardFocus(e);
	    this.props.onBlur(e);
	  },

	  _handleFocus: function _handleFocus(e) {
	    var _this = this;

	    if (!this.props.disabled && !this.props.disableKeyboardFocus) {
	      //setTimeout is needed because the focus event fires first
	      //Wait so that we can capture if this was a keyboard focus
	      //or touch focus
	      this._focusTimeout = setTimeout(function () {
	        if (tabPressed) {
	          _this.setKeyboardFocus(e);
	        }
	      }, 150);

	      this.props.onFocus(e);
	    }
	  },

	  _handleTouchTap: function _handleTouchTap(e) {
	    this._cancelFocusTimeout();
	    if (!this.props.disabled) {
	      tabPressed = false;
	      this.removeKeyboardFocus(e);
	      this.props.onTouchTap(e);
	    }
	  }

	});

	module.exports = EnhancedButton;

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var createFragment = React.addons.createFragment;

	module.exports = {

	  create: function create(fragments) {
	    var newFragments = {};
	    var validChildrenCount = 0;
	    var firstKey = undefined;

	    //Only create non-empty key fragments
	    for (var key in fragments) {
	      var currentChild = fragments[key];

	      if (currentChild) {
	        if (validChildrenCount === 0) firstKey = key;
	        newFragments[key] = currentChild;
	        validChildrenCount++;
	      }
	    }

	    if (validChildrenCount === 0) return undefined;
	    if (validChildrenCount === 1) return newFragments[firstKey];
	    return createFragment(newFragments);
	  },

	  extend: function extend(children, extendedProps, extendedChildren) {

	    return React.isValidElement(children) ? React.Children.map(children, function (child) {

	      var newProps = typeof extendedProps === 'function' ? extendedProps(child) : extendedProps;

	      var newChildren = typeof extendedChildren === 'function' ? extendedChildren(child) : extendedChildren ? extendedChildren : child.props.children;

	      return React.cloneElement(child, newProps, newChildren);
	    }) : children;
	  }

	};

/***/ },
/* 189 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {

	  once: function once(el, type, callback) {
	    var typeArray = type.split(' ');
	    var recursiveFunction = function recursiveFunction(e) {
	      e.target.removeEventListener(e.type, recursiveFunction);
	      return callback(e);
	    };

	    for (var i = typeArray.length - 1; i >= 0; i--) {
	      this.on(el, typeArray[i], recursiveFunction);
	    }
	  },

	  on: function on(el, type, callback) {
	    if (el.addEventListener) {
	      el.addEventListener(type, callback);
	    } else {
	      // IE8+ Support
	      el.attachEvent('on' + type, function () {
	        callback.call(el);
	      });
	    }
	  },

	  off: function off(el, type, callback) {
	    if (el.removeEventListener) {
	      el.removeEventListener(type, callback);
	    } else {
	      // IE8+ Support
	      el.detachEvent('on' + type, callback);
	    }
	  },

	  isKeyboard: function isKeyboard(e) {
	    return ['keydown', 'keypress', 'keyup'].indexOf(e.type) !== -1;
	  }
	};

/***/ },
/* 190 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {
	  DOWN: 40,
	  ESC: 27,
	  ENTER: 13,
	  LEFT: 37,
	  RIGHT: 39,
	  SPACE: 32,
	  TAB: 9,
	  UP: 38
	};

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var StylePropable = __webpack_require__(159);
	var AutoPrefix = __webpack_require__(180);
	var Colors = __webpack_require__(183);
	var Transitions = __webpack_require__(185);
	var ScaleInTransitionGroup = __webpack_require__(192);

	var pulsateDuration = 750;

	var FocusRipple = React.createClass({
	  displayName: 'FocusRipple',

	  mixins: [PureRenderMixin, StylePropable],

	  propTypes: {
	    color: React.PropTypes.string,
	    innerStyle: React.PropTypes.object,
	    opacity: React.PropTypes.number,
	    show: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      color: Colors.darkBlack
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    if (this.props.show) {
	      this._setRippleSize();
	      this._pulsate();
	    }
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this.props.show) {
	      this._setRippleSize();
	      this._pulsate();
	    } else {
	      if (this._timeout) clearTimeout(this._timeout);
	    }
	  },

	  render: function render() {
	    var _props = this.props;
	    var show = _props.show;
	    var style = _props.style;

	    var mergedRootStyles = this.mergeStyles({
	      height: '100%',
	      width: '100%',
	      position: 'absolute',
	      top: 0,
	      left: 0
	    }, style);

	    var ripple = show ? this._getRippleElement(this.props) : null;

	    return React.createElement(
	      ScaleInTransitionGroup,
	      {
	        maxScale: 0.85,
	        style: mergedRootStyles },
	      ripple
	    );
	  },

	  _getRippleElement: function _getRippleElement(props) {
	    var color = props.color;
	    var innerStyle = props.innerStyle;
	    var opacity = props.opacity;

	    var innerStyles = this.mergeAndPrefix({
	      position: 'absolute',
	      height: '100%',
	      width: '100%',
	      borderRadius: '50%',
	      opacity: opacity ? opacity : 0.16,
	      backgroundColor: color,
	      transition: Transitions.easeOut(pulsateDuration + 'ms', 'transform', null, Transitions.easeInOutFunction)
	    }, innerStyle);

	    return React.createElement('div', { ref: 'innerCircle', style: innerStyles });
	  },

	  _pulsate: function _pulsate() {
	    if (!this.isMounted()) return;

	    var innerCircle = React.findDOMNode(this.refs.innerCircle);
	    if (!innerCircle) return;

	    var startScale = 'scale(1)';
	    var endScale = 'scale(0.85)';
	    var currentScale = innerCircle.style[AutoPrefix.single('transform')];
	    var nextScale = undefined;

	    currentScale = currentScale || startScale;
	    nextScale = currentScale === startScale ? endScale : startScale;

	    innerCircle.style[AutoPrefix.single('transform')] = nextScale;
	    this._timeout = setTimeout(this._pulsate, pulsateDuration);
	  },

	  _setRippleSize: function _setRippleSize() {
	    var el = React.findDOMNode(this.refs.innerCircle);
	    var height = el.offsetHeight;
	    var width = el.offsetWidth;
	    var size = Math.max(height, width);

	    var oldTop = 0;
	    // For browsers that don't support endsWith()
	    if (el.style.top.indexOf('px', el.style.top.length - 2) !== -1) {
	      oldTop = parseInt(el.style.top);
	    }
	    el.style.height = size + 'px';
	    el.style.top = height / 2 - size / 2 + oldTop + 'px';
	  }

	});

	module.exports = FocusRipple;

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var ReactTransitionGroup = React.addons.TransitionGroup;
	var StylePropable = __webpack_require__(159);
	var ScaleInChild = __webpack_require__(193);

	var ScaleIn = React.createClass({
	  displayName: 'ScaleIn',

	  mixins: [PureRenderMixin, StylePropable],

	  propTypes: {
	    childStyle: React.PropTypes.object,
	    enterDelay: React.PropTypes.number,
	    maxScale: React.PropTypes.number,
	    minScale: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      enterDelay: 0
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var childStyle = _props.childStyle;
	    var enterDelay = _props.enterDelay;
	    var maxScale = _props.maxScale;
	    var minScale = _props.minScale;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['children', 'childStyle', 'enterDelay', 'maxScale', 'minScale', 'style']);

	    var mergedRootStyles = this.mergeAndPrefix({
	      position: 'relative',
	      overflow: 'hidden',
	      height: '100%'
	    }, style);

	    var newChildren = React.Children.map(children, function (child) {
	      return React.createElement(
	        ScaleInChild,
	        {
	          key: child.key,
	          enterDelay: enterDelay,
	          maxScale: maxScale,
	          minScale: minScale,
	          style: childStyle },
	        child
	      );
	    });

	    return React.createElement(
	      ReactTransitionGroup,
	      _extends({}, other, {
	        style: mergedRootStyles,
	        component: 'div' }),
	      newChildren
	    );
	  }

	});

	module.exports = ScaleIn;

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var StylePropable = __webpack_require__(159);
	var AutoPrefix = __webpack_require__(180);
	var Transitions = __webpack_require__(185);

	var ScaleInChild = React.createClass({
	  displayName: 'ScaleInChild',

	  mixins: [PureRenderMixin, StylePropable],

	  propTypes: {
	    enterDelay: React.PropTypes.number,
	    maxScale: React.PropTypes.number,
	    minScale: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      enterDelay: 0,
	      maxScale: 1,
	      minScale: 0
	    };
	  },

	  componentWillAppear: function componentWillAppear(callback) {
	    this._initializeAnimation(callback);
	  },

	  componentWillEnter: function componentWillEnter(callback) {
	    this._initializeAnimation(callback);
	  },

	  componentDidAppear: function componentDidAppear() {
	    this._animate();
	  },

	  componentDidEnter: function componentDidEnter() {
	    this._animate();
	  },

	  componentWillLeave: function componentWillLeave(callback) {
	    var _this = this;

	    var style = React.findDOMNode(this).style;

	    style.opacity = '0';
	    AutoPrefix.set(style, 'transform', 'scale(' + this.props.minScale + ')');

	    setTimeout((function () {
	      if (_this.isMounted()) callback();
	    }).bind(this), 450);
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var enterDelay = _props.enterDelay;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['children', 'enterDelay', 'style']);

	    var mergedRootStyles = this.mergeAndPrefix({
	      position: 'absolute',
	      height: '100%',
	      width: '100%',
	      top: 0,
	      left: 0,
	      transition: Transitions.easeOut(null, ['transform', 'opacity'])
	    }, style);

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: mergedRootStyles }),
	      children
	    );
	  },

	  _animate: function _animate() {
	    var style = React.findDOMNode(this).style;

	    style.opacity = '1';
	    AutoPrefix.set(style, 'transform', 'scale(' + this.props.maxScale + ')');
	  },

	  _initializeAnimation: function _initializeAnimation(callback) {
	    var _this2 = this;

	    var style = React.findDOMNode(this).style;

	    style.opacity = '0';
	    AutoPrefix.set(style, 'transform', 'scale(0)');

	    setTimeout((function () {
	      if (_this2.isMounted()) callback();
	    }).bind(this), this.props.enterDelay);
	  }

	});

	module.exports = ScaleInChild;

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var ReactTransitionGroup = React.addons.TransitionGroup;
	var StylePropable = __webpack_require__(159);
	var Dom = __webpack_require__(195);
	var ImmutabilityHelper = __webpack_require__(160);
	var CircleRipple = __webpack_require__(196);

	var TouchRipple = React.createClass({
	  displayName: 'TouchRipple',

	  mixins: [PureRenderMixin, StylePropable],

	  propTypes: {
	    centerRipple: React.PropTypes.bool,
	    color: React.PropTypes.string,
	    opacity: React.PropTypes.number
	  },

	  getInitialState: function getInitialState() {
	    return {
	      //This prop allows us to only render the ReactTransitionGroup
	      //on the first click of the component, making the inital
	      //render faster
	      hasRipples: false,
	      nextKey: 0,
	      ripples: []
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var style = _props.style;
	    var _state = this.state;
	    var hasRipples = _state.hasRipples;
	    var ripples = _state.ripples;

	    var rippleGroup = undefined;
	    if (hasRipples) {
	      var mergedStyles = this.mergeAndPrefix({
	        height: '100%',
	        width: '100%',
	        position: 'absolute',
	        top: 0,
	        left: 0,
	        overflow: 'hidden'
	      }, style);

	      rippleGroup = React.createElement(
	        ReactTransitionGroup,
	        { style: mergedStyles },
	        ripples
	      );
	    }

	    return React.createElement(
	      'div',
	      {
	        onMouseUp: this._handleMouseUp,
	        onMouseDown: this._handleMouseDown,
	        onMouseLeave: this._handleMouseLeave,
	        onTouchStart: this._handleTouchStart,
	        onTouchEnd: this._handleTouchEnd },
	      rippleGroup,
	      children
	    );
	  },

	  start: function start(e, isRippleTouchGenerated) {
	    var ripples = this.state.ripples;

	    //Do nothing if we're starting a click-event-generated ripple
	    //while having touch-generated ripples
	    if (!isRippleTouchGenerated) {
	      for (var i = 0; i < ripples.length; i++) {
	        if (ripples[i].props.touchGenerated) return;
	      }
	    }

	    //Add a ripple to the ripples array
	    ripples = ImmutabilityHelper.push(ripples, React.createElement(CircleRipple, {
	      key: this.state.nextKey,
	      style: !this.props.centerRipple ? this._getRippleStyle(e) : {},
	      color: this.props.color,
	      opacity: this.props.opacity,
	      touchGenerated: isRippleTouchGenerated }));

	    this.setState({
	      hasRipples: true,
	      nextKey: this.state.nextKey + 1,
	      ripples: ripples
	    });
	  },

	  end: function end() {
	    var currentRipples = this.state.ripples;
	    this.setState({
	      ripples: ImmutabilityHelper.shift(currentRipples)
	    });
	  },

	  _handleMouseDown: function _handleMouseDown(e) {
	    //only listen to left clicks
	    if (e.button === 0) this.start(e, false);
	  },

	  _handleMouseUp: function _handleMouseUp() {
	    this.end();
	  },

	  _handleMouseLeave: function _handleMouseLeave() {
	    this.end();
	  },

	  _handleTouchStart: function _handleTouchStart(e) {
	    this.start(e, true);
	  },

	  _handleTouchEnd: function _handleTouchEnd() {
	    this.end();
	  },

	  _getRippleStyle: function _getRippleStyle(e) {
	    var style = {};
	    var el = React.findDOMNode(this);
	    var elHeight = el.offsetHeight;
	    var elWidth = el.offsetWidth;
	    var offset = Dom.offset(el);
	    var isTouchEvent = e.touches && e.touches.length;
	    var pageX = isTouchEvent ? e.touches[0].pageX : e.pageX;
	    var pageY = isTouchEvent ? e.touches[0].pageY : e.pageY;
	    var pointerX = pageX - offset.left;
	    var pointerY = pageY - offset.top;
	    var topLeftDiag = this._calcDiag(pointerX, pointerY);
	    var topRightDiag = this._calcDiag(elWidth - pointerX, pointerY);
	    var botRightDiag = this._calcDiag(elWidth - pointerX, elHeight - pointerY);
	    var botLeftDiag = this._calcDiag(pointerX, elHeight - pointerY);
	    var rippleRadius = Math.max(topLeftDiag, topRightDiag, botRightDiag, botLeftDiag);
	    var rippleSize = rippleRadius * 2;
	    var left = pointerX - rippleRadius;
	    var top = pointerY - rippleRadius;

	    style.height = rippleSize + 'px';
	    style.width = rippleSize + 'px';
	    style.top = top + 'px';
	    style.left = left + 'px';

	    return style;
	  },

	  _calcDiag: function _calcDiag(a, b) {
	    return Math.sqrt(a * a + b * b);
	  }

	});

	module.exports = TouchRipple;

/***/ },
/* 195 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {

	  isDescendant: function isDescendant(parent, child) {
	    var node = child.parentNode;

	    while (node !== null) {
	      if (node === parent) return true;
	      node = node.parentNode;
	    }

	    return false;
	  },

	  offset: function offset(el) {
	    var rect = el.getBoundingClientRect();
	    return {
	      top: rect.top + document.body.scrollTop,
	      left: rect.left + document.body.scrollLeft
	    };
	  },

	  getStyleAttributeAsNumber: function getStyleAttributeAsNumber(el, attr) {
	    var attrStyle = el.style[attr];
	    var attrNum = 0;
	    if (attrStyle && attrStyle.length) {
	      attrNum = parseInt(attrStyle);
	    }

	    return attrNum;
	  },

	  addClass: function addClass(el, className) {
	    if (el.classList) el.classList.add(className);else el.className += ' ' + className;
	  },

	  removeClass: function removeClass(el, className) {
	    if (el.classList) el.classList.remove(className);else el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
	  },

	  hasClass: function hasClass(el, className) {
	    if (el.classList) return el.classList.contains(className);else return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);
	  },

	  toggleClass: function toggleClass(el, className) {
	    if (this.hasClass(el, className)) this.removeClass(el, className);else this.addClass(el, className);
	  },

	  forceRedraw: function forceRedraw(el) {
	    var originalDisplay = el.style.display;

	    el.style.display = 'none';
	    el.style.display = originalDisplay;
	  },

	  withoutTransition: function withoutTransition(el, callback) {
	    var originalTransition = el.style.transition;

	    //turn off transition
	    el.style.transition = null;

	    callback();

	    //force a redraw
	    this.forceRedraw(el);

	    //put the transition back
	    el.style.transition = originalTransition;
	  }

	};

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var StylePropable = __webpack_require__(159);
	var AutoPrefix = __webpack_require__(180);
	var Transitions = __webpack_require__(185);
	var Colors = __webpack_require__(183);

	var CircleRipple = React.createClass({
	  displayName: 'CircleRipple',

	  mixins: [PureRenderMixin, StylePropable],

	  propTypes: {
	    color: React.PropTypes.string,
	    opacity: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      color: Colors.darkBlack,
	      opacity: 0.16
	    };
	  },

	  componentWillAppear: function componentWillAppear(callback) {
	    this._initializeAnimation(callback);
	  },

	  componentWillEnter: function componentWillEnter(callback) {
	    this._initializeAnimation(callback);
	  },

	  componentDidAppear: function componentDidAppear() {
	    this._animate();
	  },

	  componentDidEnter: function componentDidEnter() {
	    this._animate();
	  },

	  componentWillLeave: function componentWillLeave(callback) {
	    var _this = this;

	    var style = React.findDOMNode(this).style;
	    style.opacity = 0;
	    setTimeout((function () {
	      if (_this.isMounted()) callback();
	    }).bind(this), 2000);
	  },

	  render: function render() {
	    var _props = this.props;
	    var color = _props.color;
	    var opacity = _props.opacity;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['color', 'opacity', 'style']);

	    var mergedStyles = this.mergeAndPrefix({
	      position: 'absolute',
	      top: 0,
	      left: 0,
	      height: '100%',
	      width: '100%',
	      borderRadius: '50%',
	      backgroundColor: color
	    }, style);

	    return React.createElement('div', _extends({}, other, { style: mergedStyles }));
	  },

	  _animate: function _animate() {
	    var style = React.findDOMNode(this).style;
	    var transitionValue = Transitions.easeOut('2s', 'opacity') + ',' + Transitions.easeOut('1s', 'transform');
	    AutoPrefix.set(style, 'transition', transitionValue);
	    AutoPrefix.set(style, 'transform', 'scale(1)');
	  },

	  _initializeAnimation: function _initializeAnimation(callback) {
	    var _this2 = this;

	    var style = React.findDOMNode(this).style;
	    style.opacity = this.props.opacity;
	    AutoPrefix.set(style, 'transform', 'scale(0)');
	    setTimeout((function () {
	      if (_this2.isMounted()) callback();
	    }).bind(this), 0);
	  }

	});

	module.exports = CircleRipple;

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);

	var FontIcon = React.createClass({
	  displayName: 'FontIcon',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    color: React.PropTypes.string,
	    hoverColor: React.PropTypes.string,
	    onMouseLeave: React.PropTypes.func,
	    onMouseEnter: React.PropTypes.func
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hovered: false
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var color = _props.color;
	    var hoverColor = _props.hoverColor;
	    var onMouseLeave = _props.onMouseLeave;
	    var onMouseEnter = _props.onMouseEnter;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['color', 'hoverColor', 'onMouseLeave', 'onMouseEnter', 'style']);

	    var spacing = this.context.muiTheme.spacing;
	    var offColor = color ? color : style && style.color ? style.color : this.context.muiTheme.palette.textColor;
	    var onColor = hoverColor ? hoverColor : offColor;

	    var mergedStyles = this.mergeAndPrefix({
	      position: 'relative',
	      fontSize: spacing.iconSize,
	      display: 'inline-block',
	      userSelect: 'none',
	      transition: Transitions.easeOut()
	    }, style, {
	      color: this.state.hovered ? onColor : offColor
	    });

	    return React.createElement('span', _extends({}, other, {
	      onMouseLeave: this._handleMouseLeave,
	      onMouseEnter: this._handleMouseEnter,
	      style: mergedStyles }));
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    // hover is needed only when a hoverColor is defined
	    if (this.props.hoverColor !== undefined) this.setState({ hovered: false });
	    if (this.props.onMouseLeave) {
	      this.props.onMouseLeave(e);
	    }
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    // hover is needed only when a hoverColor is defined
	    if (this.props.hoverColor !== undefined) this.setState({ hovered: true });
	    if (this.props.onMouseEnter) {
	      this.props.onMouseEnter(e);
	    }
	  }
	});

	module.exports = FontIcon;

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);
	var Colors = __webpack_require__(183);

	var Tooltip = React.createClass({
	  displayName: 'Tooltip',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    className: React.PropTypes.string,
	    label: React.PropTypes.string.isRequired,
	    show: React.PropTypes.bool,
	    touch: React.PropTypes.bool,
	    verticalPosition: React.PropTypes.oneOf(['top', 'bottom']),
	    horizontalPosition: React.PropTypes.oneOf(['left', 'right', 'center'])
	  },

	  componentDidMount: function componentDidMount() {
	    this._setRippleSize();
	    this._setTooltipPosition();
	  },

	  componentWillReceiveProps: function componentWillReceiveProps() {
	    this._setTooltipPosition();
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this._setRippleSize();
	  },

	  getInitialState: function getInitialState() {
	    return {
	      offsetWidth: null
	    };
	  },

	  getStyles: function getStyles() {
	    var verticalPosition = this.props.verticalPosition;
	    var horizontalPosition = this.props.horizontalPosition;
	    var touchMarginOffset = this.props.touch ? 10 : 0;
	    var touchOffsetTop = this.props.touch ? -20 : -10;
	    var offset = verticalPosition === 'bottom' ? 14 + touchMarginOffset : -14 - touchMarginOffset;

	    var styles = {
	      root: {
	        position: 'absolute',
	        fontFamily: this.context.muiTheme.contentFontFamily,
	        fontSize: '10px',
	        lineHeight: '22px',
	        padding: '0 8px',
	        color: Colors.white,
	        overflow: 'hidden',
	        top: -10000,
	        borderRadius: 2,
	        userSelect: 'none',
	        opacity: 0,
	        right: horizontalPosition === 'left' ? 12 : null,
	        left: horizontalPosition === 'center' ? (this.state.offsetWidth - 48) / 2 * -1 : null,
	        transition: Transitions.easeOut('0ms', 'top', '450ms') + ',' + Transitions.easeOut('450ms', 'transform', '0ms') + ',' + Transitions.easeOut('450ms', 'opacity', '0ms')
	      },
	      label: {
	        position: 'relative',
	        whiteSpace: 'nowrap'
	      },
	      ripple: {
	        position: 'absolute',
	        left: horizontalPosition === 'center' ? '50%' : horizontalPosition === 'left' ? '100%' : '0%',
	        top: verticalPosition === 'bottom' ? 0 : '100%',
	        transform: 'translate(-50%, -50%)',
	        borderRadius: '50%',
	        backgroundColor: 'transparent',
	        transition: Transitions.easeOut('0ms', 'width', '450ms') + ',' + Transitions.easeOut('0ms', 'height', '450ms') + ',' + Transitions.easeOut('450ms', 'backgroundColor', '0ms')
	      },
	      rootWhenShown: {
	        top: verticalPosition === 'top' ? touchOffsetTop : 36,
	        opacity: 0.9,
	        transform: 'translate3d(0px, ' + offset + 'px, 0px)',
	        transition: Transitions.easeOut('0ms', 'top', '0ms') + ',' + Transitions.easeOut('450ms', 'transform', '0ms') + ',' + Transitions.easeOut('450ms', 'opacity', '0ms')
	      },
	      rootWhenTouched: {
	        fontSize: '14px',
	        lineHeight: '32px',
	        padding: '0 16px'
	      },
	      rippleWhenShown: {
	        backgroundColor: Colors.grey700,
	        transition: Transitions.easeOut('450ms', 'width', '0ms') + ',' + Transitions.easeOut('450ms', 'height', '0ms') + ',' + Transitions.easeOut('450ms', 'backgroundColor', '0ms')
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var label = _props.label;

	    var other = _objectWithoutProperties(_props, ['label']);

	    var styles = this.getStyles();
	    return React.createElement(
	      'div',
	      _extends({}, other, {
	        style: this.mergeAndPrefix(styles.root, this.props.show && styles.rootWhenShown, this.props.touch && styles.rootWhenTouched, this.props.style) }),
	      React.createElement('div', {
	        ref: 'ripple',
	        style: this.mergeAndPrefix(styles.ripple, this.props.show && styles.rippleWhenShown) }),
	      React.createElement(
	        'span',
	        { style: this.mergeAndPrefix(styles.label) },
	        this.props.label
	      )
	    );
	  },

	  _setRippleSize: function _setRippleSize() {
	    var ripple = React.findDOMNode(this.refs.ripple);
	    var tooltip = window.getComputedStyle(React.findDOMNode(this));
	    var tooltipWidth = parseInt(tooltip.getPropertyValue("width"), 10) / (this.props.horizontalPosition === 'center' ? 2 : 1);
	    var tooltipHeight = parseInt(tooltip.getPropertyValue("height"), 10);

	    var rippleDiameter = Math.ceil(Math.sqrt(Math.pow(tooltipHeight, 2) + Math.pow(tooltipWidth, 2)) * 2);
	    if (this.props.show) {
	      ripple.style.height = rippleDiameter + 'px';
	      ripple.style.width = rippleDiameter + 'px';
	    } else {
	      ripple.style.width = '0px';
	      ripple.style.height = '0px';
	    }
	  },

	  _setTooltipPosition: function _setTooltipPosition() {
	    var tooltip = React.findDOMNode(this);
	    this.setState({ offsetWidth: tooltip.offsetWidth });
	  }

	});

	module.exports = Tooltip;

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(200);

	var NavigationMenu = React.createClass({
	  displayName: 'NavigationMenu',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z' })
	    );
	  }

	});

	module.exports = NavigationMenu;

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);

	var SvgIcon = React.createClass({
	  displayName: 'SvgIcon',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    color: React.PropTypes.string,
	    hoverColor: React.PropTypes.string,
	    onMouseEnter: React.PropTypes.func,
	    onMouseLeave: React.PropTypes.func,
	    viewBox: React.PropTypes.string
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hovered: false
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onMouseEnter: function onMouseEnter() {},
	      onMouseLeave: function onMouseLeave() {},
	      viewBox: '0 0 24 24'
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var color = _props.color;
	    var hoverColor = _props.hoverColor;
	    var onMouseEnter = _props.onMouseEnter;
	    var onMouseLeave = _props.onMouseLeave;
	    var style = _props.style;
	    var viewBox = _props.viewBox;

	    var other = _objectWithoutProperties(_props, ['children', 'color', 'hoverColor', 'onMouseEnter', 'onMouseLeave', 'style', 'viewBox']);

	    var offColor = color ? color : style && style.fill ? style.fill : this.context.muiTheme.palette.textColor;
	    var onColor = hoverColor ? hoverColor : offColor;

	    var mergedStyles = this.mergeAndPrefix({
	      display: 'inline-block',
	      height: 24,
	      width: 24,
	      userSelect: 'none',
	      transition: Transitions.easeOut()
	    }, style, {
	      // Make sure our fill color overrides fill provided in props.style
	      fill: this.state.hovered ? onColor : offColor
	    });

	    var events = hoverColor ? {
	      onMouseEnter: this._handleMouseEnter,
	      onMouseLeave: this._handleMouseLeave
	    } : {};

	    return React.createElement(
	      'svg',
	      _extends({}, other, events, {
	        style: mergedStyles,
	        viewBox: viewBox }),
	      children
	    );
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    this.setState({ hovered: false });
	    this.props.onMouseLeave(e);
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    this.setState({ hovered: true });
	    this.props.onMouseEnter(e);
	  }
	});

	module.exports = SvgIcon;

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var StylePropable = __webpack_require__(159);
	var PropTypes = __webpack_require__(186);
	var Transitions = __webpack_require__(185);

	var Paper = React.createClass({
	  displayName: 'Paper',

	  mixins: [PureRenderMixin, StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    circle: React.PropTypes.bool,
	    rounded: React.PropTypes.bool,
	    transitionEnabled: React.PropTypes.bool,
	    zDepth: PropTypes.zDepth
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      circle: false,
	      rounded: true,
	      transitionEnabled: true,
	      zDepth: 1
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var circle = _props.circle;
	    var rounded = _props.rounded;
	    var style = _props.style;
	    var transitionEnabled = _props.transitionEnabled;
	    var zDepth = _props.zDepth;

	    var other = _objectWithoutProperties(_props, ['children', 'circle', 'rounded', 'style', 'transitionEnabled', 'zDepth']);

	    var styles = {
	      backgroundColor: this.context.muiTheme.component.paper.backgroundColor,
	      transition: transitionEnabled && Transitions.easeOut(),
	      boxSizing: 'border-box',
	      fontFamily: this.context.muiTheme.contentFontFamily,
	      WebkitTapHighlightColor: 'rgba(0,0,0,0)',
	      boxShadow: this._getZDepthShadows(zDepth),
	      borderRadius: circle ? '50%' : rounded ? '2px' : '0px'
	    };

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: this.mergeAndPrefix(styles, style) }),
	      children
	    );
	  },

	  _getZDepthShadows: function _getZDepthShadows(zDepth) {
	    var shadows = [null, '0 1px 6px rgba(0, 0, 0, 0.12), 0 1px 4px rgba(0, 0, 0, 0.24)', '0 3px 10px rgba(0, 0, 0, 0.16), 0 3px 10px rgba(0, 0, 0, 0.23)', '0 10px 30px rgba(0, 0, 0, 0.19), 0 6px 10px rgba(0, 0, 0, 0.23)', '0 14px 45px rgba(0, 0, 0, 0.25), 0 10px 18px rgba(0, 0, 0, 0.22)', '0 19px 60px rgba(0, 0, 0, 0.30), 0 15px 20px rgba(0, 0, 0, 0.22)'];

	    return shadows[zDepth];
	  }

	});

	module.exports = Paper;

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);

	var AppCanvas = React.createClass({
	  displayName: 'AppCanvas',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  render: function render() {
	    var _this = this;

	    var styles = {
	      height: '100%',
	      backgroundColor: this.context.muiTheme.palette.canvasColor,
	      WebkitFontSmoothing: 'antialiased'
	    };

	    var newChildren = React.Children.map(this.props.children, function (currentChild) {
	      if (!currentChild) {
	        // If undefined, skip it
	        return null;
	      }

	      switch (currentChild.type.displayName) {
	        case 'AppBar':
	          return React.cloneElement(currentChild, {
	            style: _this.mergeStyles({
	              position: 'fixed'
	            }, currentChild.props.style)
	          });
	        default:
	          return currentChild;
	      }
	    }, this);

	    return React.createElement(
	      'div',
	      { style: styles },
	      newChildren
	    );
	  }

	});

	module.exports = AppCanvas;

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(161);
	var StylePropable = __webpack_require__(159);
	var Colors = __webpack_require__(183);

	var Avatar = React.createClass({
	  displayName: 'Avatar',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    backgroundColor: React.PropTypes.string,
	    color: React.PropTypes.string,
	    icon: React.PropTypes.element,
	    size: React.PropTypes.number,
	    src: React.PropTypes.string,
	    style: React.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      backgroundColor: Colors.grey400,
	      color: Colors.white,
	      size: 40
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var backgroundColor = _props.backgroundColor;
	    var color = _props.color;
	    var icon = _props.icon;
	    var size = _props.size;
	    var src = _props.src;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['backgroundColor', 'color', 'icon', 'size', 'src', 'style']);

	    var styles = {
	      root: {
	        height: size,
	        width: size,
	        userSelect: 'none',
	        borderRadius: '50%',
	        display: 'inline-block'
	      }
	    };

	    if (src) {
	      var borderColor = this.context.muiTheme.component.avatar.borderColor;

	      if (borderColor) {
	        styles.root = this.mergeStyles(styles.root, {
	          height: size - 2,
	          width: size - 2,
	          border: 'solid 1px ' + borderColor
	        });
	      }

	      return React.createElement('img', _extends({}, other, { src: src, style: this.mergeAndPrefix(styles.root, style) }));
	    } else {
	      styles.root = this.mergeStyles(styles.root, {
	        backgroundColor: backgroundColor,
	        textAlign: 'center',
	        lineHeight: size + 'px',
	        fontSize: size / 2 + 4,
	        color: color
	      });

	      var styleIcon = {
	        margin: 8
	      };

	      var iconElement = icon ? React.cloneElement(icon, {
	        color: color,
	        style: this.mergeStyles(styleIcon, icon.props.style)
	      }) : null;

	      return React.createElement(
	        'div',
	        _extends({}, other, { style: this.mergeAndPrefix(styles.root, style) }),
	        iconElement,
	        this.props.children
	      );
	    }
	  }
	});

	module.exports = Avatar;

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var AutoPrefix = __webpack_require__(180);

	/**
	 *  BeforeAfterWrapper
	 *    An alternative for the ::before and ::after css pseudo-elements for
	 *    components whose styles are defined in javascript instead of css.
	 *
	 *  Usage: For the element that we want to apply before and after elements to,
	 *    wrap its children with BeforeAfterWrapper. For example:
	 *
	 *                                            <Paper>
	 *  <Paper>                                     <div> // See notice
	 *    <BeforeAfterWrapper>        renders         <div/> // before element
	 *      [children of paper]       ------>         [children of paper]
	 *    </BeforeAfterWrapper>                       <div/> // after element
	 *  </Paper>                                    </div>
	 *                                            </Paper>
	 *
	 *  Notice: Notice that this div bundles together our elements. If the element
	 *    that we want to apply before and after elements is a HTML tag (i.e. a
	 *    div, p, or button tag), we can avoid this extra nesting by passing using
	 *    the BeforeAfterWrapper in place of said tag like so:
	 *
	 *  <p>
	 *    <BeforeAfterWrapper>   do this instead   <BeforeAfterWrapper elementType='p'>
	 *      [children of p]          ------>         [children of p]
	 *    </BeforeAfterWrapper>                    </BeforeAfterWrapper>
	 *  </p>
	 *
	 *  BeforeAfterWrapper features spread functionality. This means that we can
	 *  pass HTML tag properties directly into the BeforeAfterWrapper tag.
	 *
	 *  When using BeforeAfterWrapper, ensure that the parent of the beforeElement
	 *  and afterElement have a defined style position.
	 */

	var BeforeAfterWrapper = React.createClass({
	  displayName: 'BeforeAfterWrapper',

	  mixins: [StylePropable],

	  propTypes: {
	    beforeStyle: React.PropTypes.object,
	    afterStyle: React.PropTypes.object,
	    beforeElementType: React.PropTypes.string,
	    afterElementType: React.PropTypes.string,
	    elementType: React.PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      beforeElementType: 'div',
	      afterElementType: 'div',
	      elementType: 'div'
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var beforeStyle = _props.beforeStyle;
	    var afterStyle = _props.afterStyle;
	    var beforeElementType = _props.beforeElementType;
	    var afterElementType = _props.afterElementType;
	    var elementType = _props.elementType;

	    var other = _objectWithoutProperties(_props, ['beforeStyle', 'afterStyle', 'beforeElementType', 'afterElementType', 'elementType']);

	    var beforeElement = undefined,
	        afterElement = undefined;

	    beforeStyle = AutoPrefix.all({ boxSizing: 'border-box' });
	    afterStyle = AutoPrefix.all({ boxSizing: 'border-box' });

	    if (this.props.beforeStyle) beforeElement = React.createElement(this.props.beforeElementType, {
	      style: this.mergeAndPrefix(beforeStyle, this.props.beforeStyle),
	      key: "::before"
	    });
	    if (this.props.afterStyle) afterElement = React.createElement(this.props.afterElementType, {
	      style: this.mergeAndPrefix(afterStyle, this.props.afterStyle),
	      key: "::after"
	    });

	    var children = [beforeElement, this.props.children, afterElement];

	    var props = other;
	    props.style = this.props.style;

	    return React.createElement(this.props.elementType, props, children);
	  }

	});

	module.exports = BeforeAfterWrapper;

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var Paper = __webpack_require__(201);
	var StylePropable = __webpack_require__(159);
	var CardExpandable = __webpack_require__(206);

	var Card = React.createClass({
	  displayName: 'Card',

	  mixins: [StylePropable],

	  getInitialState: function getInitialState() {
	    return { expanded: this.props.initiallyExpanded ? true : false };
	  },

	  propTypes: {
	    style: React.PropTypes.object,
	    expandable: React.PropTypes.bool,
	    initiallyExpanded: React.PropTypes.bool,
	    onExpandChange: React.PropTypes.func
	  },

	  _onExpandable: function _onExpandable(value) {
	    this.setState({ expanded: value });
	    if (this.props.onExpandChange) this.props.onExpandChange(value);
	  },

	  render: function render() {
	    var _this = this;

	    var lastElement = undefined;
	    var newChildren = React.Children.map(this.props.children, function (currentChild) {
	      if (!currentChild) {
	        return null;
	      }
	      if (_this.state.expanded === false && currentChild.props.expandable === true) return;
	      if (currentChild.props.showExpandableButton === true) {
	        lastElement = React.cloneElement(currentChild, {}, currentChild.props.children, React.createElement(CardExpandable, { expanded: _this.state.expanded, onExpanding: _this._onExpandable }));
	      } else {
	        lastElement = currentChild;
	      }
	      return lastElement;
	    }, this);

	    // If the last element is text or a title we should add
	    // 8px padding to the bottom of the card
	    var addBottomPadding = lastElement && (lastElement.type.displayName === "CardText" || lastElement.type.displayName === "CardTitle");
	    var _props = this.props;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['style']);

	    var mergedStyles = this.mergeAndPrefix({
	      overflow: 'hidden',
	      zIndex: 1
	    }, style);

	    return React.createElement(
	      Paper,
	      _extends({}, other, { style: mergedStyles }),
	      React.createElement(
	        'div',
	        { style: { paddingBottom: addBottomPadding ? 8 : 0 } },
	        newChildren
	      )
	    );
	  }
	});

	module.exports = Card;

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var Extend = __webpack_require__(207);
	var OpenIcon = __webpack_require__(208);
	var CloseIcon = __webpack_require__(209);
	var IconButton = __webpack_require__(184);
	var StylePropable = __webpack_require__(159);

	var CardExpandable = React.createClass({
	  displayName: 'CardExpandable',

	  mixins: [StylePropable],

	  getStyles: function getStyles() {
	    var contextProps = this.getContextProps();

	    var directionStyle = contextProps.isRtl ? {
	      left: 4
	    } : {
	      right: 4
	    };

	    return {
	      root: Extend({
	        top: 0,
	        bottom: 0,
	        margin: 'auto',
	        position: 'absolute'
	      }, directionStyle)
	    };
	  },

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    onExpanding: React.PropTypes.func.isRequired,
	    expanded: React.PropTypes.bool
	  },

	  getContextProps: function getContextProps() {
	    var theme = this.context.muiTheme;

	    return {
	      isRtl: theme.isRtl
	    };
	  },

	  _onExpanding: function _onExpanding() {
	    if (this.props.expanded === true) this.props.onExpanding(false);else this.props.onExpanding(true);
	  },

	  render: function render() {
	    var styles = this.getStyles();

	    var expandable = undefined;
	    if (this.props.expanded === true) expandable = React.createElement(OpenIcon, null);else expandable = React.createElement(CloseIcon, null);

	    var mergedStyles = this.mergeAndPrefix(styles.root, this.props.style);

	    var expandableBtn = React.createElement(
	      IconButton,
	      {
	        style: mergedStyles,
	        onClick: this._onExpanding },
	      expandable
	    );

	    return expandableBtn;
	  }
	});

	module.exports = CardExpandable;

/***/ },
/* 207 */
/***/ function(module, exports) {

	'use strict';

	function isObject(obj) {
	  return typeof obj === 'object' && obj !== null;
	}

	/**
	*  A recursive merge between two objects.
	*
	*  @param base     - the object whose properties are to be overwritten. It
	*                    should be either the root level or some nested level.
	*  @param override - an object containing properties to be overwritten. It
	*                    should have the same structure as the object object.
	*/
	var extend = function extend(base, override) {

	  var mergedObject = {};

	  //Loop through each key in the base object
	  Object.keys(base).forEach(function (key) {

	    var baseProp = base[key];
	    var overrideProp = undefined;

	    if (isObject(override)) overrideProp = override[key];

	    //Recursive call extend if the prop is another object, else just copy it over
	    mergedObject[key] = isObject(baseProp) && !Array.isArray(baseProp) ? extend(baseProp, overrideProp) : baseProp;
	  });

	  //Loop through each override key and override the props in the
	  //base object
	  if (isObject(override)) {

	    Object.keys(override).forEach(function (overrideKey) {

	      var overrideProp = override[overrideKey];

	      //Only copy over props that are not objects
	      if (!isObject(overrideProp) || Array.isArray(overrideProp)) {
	        mergedObject[overrideKey] = overrideProp;
	      }
	    });
	  }

	  return mergedObject;
	};

	module.exports = extend;

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(200);

	var HardwareKeyboardArrowUp = React.createClass({
	  displayName: 'HardwareKeyboardArrowUp',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z' })
	    );
	  }

	});

	module.exports = HardwareKeyboardArrowUp;

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(200);

	var HardwareKeyboardArrowDown = React.createClass({
	  displayName: 'HardwareKeyboardArrowDown',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z' })
	    );
	  }

	});

	module.exports = HardwareKeyboardArrowDown;

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);

	var CardActions = React.createClass({
	  displayName: 'CardActions',

	  mixins: [StylePropable],

	  getStyles: function getStyles() {
	    return {
	      root: {
	        padding: 8,
	        position: 'relative'
	      }
	    };
	  },

	  propTypes: {
	    expandable: React.PropTypes.bool,
	    showExpandableButton: React.PropTypes.bool
	  },

	  render: function render() {
	    var styles = this.getStyles();

	    var children = React.Children.map(this.props.children, function (child) {
	      return React.cloneElement(child, {
	        style: { marginRight: 8 }
	      });
	    });

	    var mergedStyles = this.mergeAndPrefix(styles.root, this.props.style);

	    return React.createElement(
	      'div',
	      _extends({}, this.props, { style: mergedStyles }),
	      children
	    );
	  }
	});

	module.exports = CardActions;

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var Styles = __webpack_require__(212);
	var Avatar = __webpack_require__(203);
	var StylePropable = __webpack_require__(159);

	var CardHeader = React.createClass({
	  displayName: 'CardHeader',

	  mixins: [StylePropable],

	  propTypes: {
	    title: React.PropTypes.string,
	    titleColor: React.PropTypes.string,
	    titleStyle: React.PropTypes.object,
	    subtitle: React.PropTypes.string,
	    subtitleColor: React.PropTypes.string,
	    subtitleStyle: React.PropTypes.object,
	    textStyle: React.PropTypes.object,
	    expandable: React.PropTypes.bool,
	    showExpandableButton: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      titleColor: Styles.Colors.darkBlack,
	      subtitleColor: Styles.Colors.lightBlack
	    };
	  },

	  getStyles: function getStyles() {
	    return {
	      root: {
	        height: 72,
	        padding: 16,
	        fontWeight: Styles.Typography.fontWeightMedium,
	        boxSizing: 'border-box',
	        position: 'relative'
	      },
	      text: {
	        display: 'inline-block',
	        verticalAlign: 'top'
	      },
	      avatar: {
	        marginRight: 16
	      },
	      title: {
	        color: this.props.titleColor,
	        display: 'block',
	        fontSize: 15
	      },
	      subtitle: {
	        color: this.props.subtitleColor,
	        display: 'block',
	        fontSize: 14
	      }
	    };
	  },

	  render: function render() {
	    var styles = this.getStyles();
	    var rootStyle = this.mergeAndPrefix(styles.root, this.props.style);
	    var textStyle = this.mergeAndPrefix(styles.text, this.props.textStyle);
	    var titleStyle = this.mergeAndPrefix(styles.title, this.props.titleStyle);
	    var subtitleStyle = this.mergeAndPrefix(styles.subtitle, this.props.subtitleStyle);

	    var avatar = this.props.avatar;
	    if (React.isValidElement(this.props.avatar)) {
	      var avatarMergedStyle = this.mergeStyles(styles.avatar, avatar.props.style);
	      avatar = React.cloneElement(avatar, { style: avatarMergedStyle });
	    } else avatar = React.createElement(Avatar, { src: this.props.avatar, style: styles.avatar });

	    return React.createElement(
	      'div',
	      _extends({}, this.props, { style: rootStyle }),
	      avatar,
	      React.createElement(
	        'div',
	        { style: textStyle },
	        React.createElement(
	          'span',
	          { style: titleStyle },
	          this.props.title
	        ),
	        React.createElement(
	          'span',
	          { style: subtitleStyle },
	          this.props.subtitle
	        )
	      ),
	      this.props.children
	    );
	  }
	});

	module.exports = CardHeader;

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	  AutoPrefix: __webpack_require__(180),
	  Colors: __webpack_require__(183),
	  Spacing: __webpack_require__(213),
	  ThemeManager: __webpack_require__(214),
	  Transitions: __webpack_require__(185),
	  Typography: __webpack_require__(182)
	};

/***/ },
/* 213 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {
	  iconSize: 24,

	  desktopGutter: 24,
	  desktopGutterMore: 32,
	  desktopGutterLess: 16,
	  desktopGutterMini: 8,
	  desktopKeylineIncrement: 64,
	  desktopDropDownMenuItemHeight: 32,
	  desktopDropDownMenuFontSize: 15,
	  desktopLeftNavMenuItemHeight: 48,
	  desktopSubheaderHeight: 48,
	  desktopToolbarHeight: 56
	};

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Extend = __webpack_require__(207);

	var Types = {
	  LIGHT: __webpack_require__(215),
	  DARK: __webpack_require__(217)
	};

	var ThemeManager = function ThemeManager() {
	  return {

	    //In most cases, theme variables remain static thoughout the life of an
	    //app. If you plan on mutating theme variables after the theme has been
	    //intialized, set static to false. This will allow components to update
	    //when theme variables change. For more information see issue #1176
	    'static': true,

	    types: Types,
	    template: Types.LIGHT,

	    spacing: Types.LIGHT.spacing,
	    contentFontFamily: 'Roboto, sans-serif',

	    palette: Types.LIGHT.getPalette(),
	    component: Types.LIGHT.getComponentThemes(Types.LIGHT.getPalette()),

	    getCurrentTheme: function getCurrentTheme() {
	      return this;
	    },

	    // Component gets updated to reflect palette changes.
	    setTheme: function setTheme(newTheme) {
	      this.setSpacing(newTheme.spacing);
	      this.setContentFontFamily(newTheme.contentFontFamily);
	      this.setPalette(newTheme.getPalette());
	      this.setComponentThemes(newTheme.getComponentThemes(newTheme.getPalette()));
	    },

	    setSpacing: function setSpacing(newSpacing) {
	      this.spacing = Extend(this.spacing, newSpacing);
	      this.component = Extend(this.component, this.template.getComponentThemes(this.palette, this.spacing));
	    },

	    setContentFontFamily: function setContentFontFamily(newContentFontFamily) {
	      if (typeof newContentFontFamily !== "undefined" && newContentFontFamily !== null) {
	        this.contentFontFamily = newContentFontFamily;
	        this.component = Extend(this.component, this.template.getComponentThemes(this.palette, this.spacing));
	      }
	    },

	    setPalette: function setPalette(newPalette) {
	      this.palette = Extend(this.palette, newPalette);
	      this.component = Extend(this.component, this.template.getComponentThemes(this.palette));
	    },

	    setComponentThemes: function setComponentThemes(overrides) {
	      this.component = Extend(this.component, overrides);
	    },

	    setIsRtl: function setIsRtl(isRtl) {
	      this.isRtl = !!isRtl;
	    }
	  };
	};

	module.exports = ThemeManager;

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Colors = __webpack_require__(183);
	var Spacing = __webpack_require__(213);
	var ColorManipulator = __webpack_require__(216);

	/**
	 *  Light Theme is the default theme used in material-ui. It is guaranteed to
	 *  have all theme variables needed for every component. Variables not defined
	 *  in a custom theme will default to these values.
	 */

	var LightTheme = {
	  spacing: Spacing,
	  contentFontFamily: 'Roboto, sans-serif',
	  getPalette: function getPalette() {
	    return {
	      primary1Color: Colors.cyan500,
	      primary2Color: Colors.cyan700,
	      primary3Color: Colors.cyan100,
	      accent1Color: Colors.pinkA200,
	      accent2Color: Colors.pinkA400,
	      accent3Color: Colors.pinkA100,
	      textColor: Colors.darkBlack,
	      canvasColor: Colors.white,
	      borderColor: Colors.grey300,
	      disabledColor: ColorManipulator.fade(Colors.darkBlack, 0.3)
	    };
	  },
	  getComponentThemes: function getComponentThemes(palette, spacing) {
	    spacing = spacing || Spacing;
	    var obj = {
	      appBar: {
	        color: palette.primary1Color,
	        textColor: Colors.darkWhite,
	        height: spacing.desktopKeylineIncrement
	      },
	      avatar: {
	        borderColor: 'rgba(0, 0, 0, 0.08)'
	      },
	      button: {
	        height: 36,
	        minWidth: 88,
	        iconButtonSize: spacing.iconSize * 2
	      },
	      checkbox: {
	        boxColor: palette.textColor,
	        checkedColor: palette.primary1Color,
	        requiredColor: palette.primary1Color,
	        disabledColor: palette.disabledColor,
	        labelColor: palette.textColor,
	        labelDisabledColor: palette.disabledColor
	      },
	      datePicker: {
	        color: palette.primary1Color,
	        textColor: Colors.white,
	        calendarTextColor: palette.textColor,
	        selectColor: palette.primary2Color,
	        selectTextColor: Colors.white
	      },
	      dropDownMenu: {
	        accentColor: palette.borderColor
	      },
	      flatButton: {
	        color: palette.canvasColor,
	        textColor: palette.textColor,
	        primaryTextColor: palette.accent1Color,
	        secondaryTextColor: palette.primary1Color
	      },
	      floatingActionButton: {
	        buttonSize: 56,
	        miniSize: 40,
	        color: palette.accent1Color,
	        iconColor: Colors.white,
	        secondaryColor: palette.primary1Color,
	        secondaryIconColor: Colors.white
	      },
	      inkBar: {
	        backgroundColor: palette.accent1Color
	      },
	      leftNav: {
	        width: spacing.desktopKeylineIncrement * 4,
	        color: Colors.white
	      },
	      listItem: {
	        nestedLevelDepth: 18
	      },
	      menu: {
	        backgroundColor: Colors.white,
	        containerBackgroundColor: Colors.white
	      },
	      menuItem: {
	        dataHeight: 32,
	        height: 48,
	        hoverColor: 'rgba(0, 0, 0, .035)',
	        padding: spacing.desktopGutter,
	        selectedTextColor: palette.accent1Color
	      },
	      menuSubheader: {
	        padding: spacing.desktopGutter,
	        borderColor: palette.borderColor,
	        textColor: palette.primary1Color
	      },
	      paper: {
	        backgroundColor: Colors.white
	      },
	      radioButton: {
	        borderColor: palette.textColor,
	        backgroundColor: Colors.white,
	        checkedColor: palette.primary1Color,
	        requiredColor: palette.primary1Color,
	        disabledColor: palette.disabledColor,
	        size: 24,
	        labelColor: palette.textColor,
	        labelDisabledColor: palette.disabledColor
	      },
	      raisedButton: {
	        color: Colors.white,
	        textColor: palette.textColor,
	        primaryColor: palette.accent1Color,
	        primaryTextColor: Colors.white,
	        secondaryColor: palette.primary1Color,
	        secondaryTextColor: Colors.white
	      },
	      refreshIndicator: {
	        strokeColor: Colors.grey300,
	        loadingStrokeColor: palette.primary1Color
	      },
	      slider: {
	        trackSize: 2,
	        trackColor: Colors.minBlack,
	        trackColorSelected: Colors.grey500,
	        handleSize: 12,
	        handleSizeDisabled: 8,
	        handleSizeActive: 18,
	        handleColorZero: Colors.grey400,
	        handleFillColor: Colors.white,
	        selectionColor: palette.primary3Color,
	        rippleColor: palette.primary1Color
	      },
	      snackbar: {
	        textColor: Colors.white,
	        backgroundColor: '#323232',
	        actionColor: palette.accent1Color
	      },
	      table: {
	        backgroundColor: Colors.white
	      },
	      tableHeader: {
	        borderColor: palette.borderColor
	      },
	      tableHeaderColumn: {
	        textColor: Colors.lightBlack,
	        height: 56,
	        spacing: 24
	      },
	      tableFooter: {
	        borderColor: palette.borderColor,
	        textColor: Colors.lightBlack
	      },
	      tableRow: {
	        hoverColor: Colors.grey200,
	        stripeColor: ColorManipulator.lighten(palette.primary1Color, 0.55),
	        selectedColor: Colors.grey300,
	        textColor: Colors.darkBlack,
	        borderColor: palette.borderColor
	      },
	      tableRowColumn: {
	        height: 48,
	        spacing: 24
	      },
	      timePicker: {
	        color: Colors.white,
	        textColor: Colors.grey600,
	        accentColor: palette.primary1Color,
	        clockColor: Colors.black,
	        selectColor: palette.primary2Color,
	        selectTextColor: Colors.white
	      },
	      toggle: {
	        thumbOnColor: palette.primary1Color,
	        thumbOffColor: Colors.grey50,
	        thumbDisabledColor: Colors.grey400,
	        thumbRequiredColor: palette.primary1Color,
	        trackOnColor: ColorManipulator.fade(palette.primary1Color, 0.5),
	        trackOffColor: Colors.minBlack,
	        trackDisabledColor: Colors.faintBlack,
	        labelColor: palette.textColor,
	        labelDisabledColor: palette.disabledColor
	      },
	      toolbar: {
	        backgroundColor: ColorManipulator.darken('#eeeeee', 0.05),
	        height: 56,
	        titleFontSize: 20,
	        iconColor: 'rgba(0, 0, 0, .40)',
	        separatorColor: 'rgba(0, 0, 0, .175)',
	        menuHoverColor: 'rgba(0, 0, 0, .10)'
	      },
	      tabs: {
	        backgroundColor: palette.primary1Color
	      },
	      textField: {
	        textColor: palette.textColor,
	        hintColor: palette.disabledColor,
	        floatingLabelColor: palette.textColor,
	        disabledTextColor: palette.disabledColor,
	        errorColor: Colors.red500,
	        focusColor: palette.primary1Color,
	        backgroundColor: 'transparent',
	        borderColor: palette.borderColor
	      }
	    };

	    // Properties based on previous properties
	    obj.flatButton.disabledTextColor = ColorManipulator.fade(obj.flatButton.textColor, 0.3);
	    obj.floatingActionButton.disabledColor = ColorManipulator.darken(Colors.white, 0.1);
	    obj.floatingActionButton.disabledTextColor = ColorManipulator.fade(palette.textColor, 0.3);
	    obj.raisedButton.disabledColor = ColorManipulator.darken(obj.raisedButton.color, 0.1);
	    obj.raisedButton.disabledTextColor = ColorManipulator.fade(obj.raisedButton.textColor, 0.3);
	    obj.toggle.trackRequiredColor = ColorManipulator.fade(obj.toggle.thumbRequiredColor, 0.5);

	    return obj;
	  }
	};

	module.exports = LightTheme;

/***/ },
/* 216 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {

	  /**
	   * The relative brightness of any point in a colorspace, normalized to 0 for
	   * darkest black and 1 for lightest white. RGB colors only. Does not take
	   * into account alpha values.
	   *
	   * TODO:
	   * - Take into account alpha values.
	   * - Identify why there are minor discrepancies for some use cases
	   *   (i.e. #F0F & #FFF). Note that these cases rarely occur.
	   *
	   * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
	   */
	  _luminance: function _luminance(color) {
	    color = this._decomposeColor(color);

	    if (color.type.indexOf('rgb') > -1) {
	      var rgb = color.values.map(function (val) {
	        val /= 255; // normalized
	        return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
	      });

	      return 0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2];
	    } else {
	      var message = 'Calculating the relative luminance is not available for ' + 'HSL and HSLA.';
	      console.error(message);
	      return -1;
	    }
	  },

	  /**
	   * @params:
	   * additionalValue = An extra value that has been calculated but not included
	   *                   with the original color object, such as an alpha value.
	   */
	  _convertColorToString: function _convertColorToString(color, additonalValue) {
	    var str = color.type + '(' + parseInt(color.values[0]) + ',' + parseInt(color.values[1]) + ',' + parseInt(color.values[2]);

	    if (additonalValue !== undefined) {
	      str += ',' + additonalValue + ')';
	    } else if (color.values.length === 4) {
	      str += ',' + color.values[3] + ')';
	    } else {
	      str += ')';
	    }

	    return str;
	  },

	  // Converts a color from hex format to rgb format.
	  _convertHexToRGB: function _convertHexToRGB(color) {
	    if (color.length === 4) {
	      var extendedColor = '#';
	      for (var i = 1; i < color.length; i++) {
	        extendedColor += color.charAt(i) + color.charAt(i);
	      }
	      color = extendedColor;
	    }

	    var values = {
	      r: parseInt(color.substr(1, 2), 16),
	      g: parseInt(color.substr(3, 2), 16),
	      b: parseInt(color.substr(5, 2), 16)
	    };

	    return 'rgb(' + values.r + ',' + values.g + ',' + values.b + ')';
	  },

	  // Returns the type and values of a color of any given type.
	  _decomposeColor: function _decomposeColor(color) {
	    if (color.charAt(0) === '#') {
	      return this._decomposeColor(this._convertHexToRGB(color));
	    }

	    var marker = color.indexOf('(');
	    var type = color.substring(0, marker);
	    var values = color.substring(marker + 1, color.length - 1).split(',');

	    return { type: type, values: values };
	  },

	  // Set the absolute transparency of a color.
	  // Any existing alpha values are overwritten.
	  fade: function fade(color, amount) {
	    color = this._decomposeColor(color);
	    if (color.type === 'rgb' || color.type === 'hsl') color.type += 'a';
	    return this._convertColorToString(color, amount);
	  },

	  // Desaturates rgb and sets opacity to 0.15
	  lighten: function lighten(color, amount) {
	    color = this._decomposeColor(color);

	    if (color.type.indexOf('hsl') > -1) {
	      color.values[2] += amount;
	      return this._decomposeColor(this._convertColorToString(color));
	    } else if (color.type.indexOf('rgb') > -1) {
	      for (var i = 0; i < 3; i++) {
	        color.values[i] *= 1 + amount;
	        if (color.values[i] > 255) color.values[i] = 255;
	      }
	    }

	    if (color.type.indexOf('a') <= -1) color.type += 'a';

	    return this._convertColorToString(color, '0.15');
	  },

	  darken: function darken(color, amount) {
	    color = this._decomposeColor(color);

	    if (color.type.indexOf('hsl') > -1) {
	      color.values[2] += amount;
	      return this._decomposeColor(this._convertColorToString(color));
	    } else if (color.type.indexOf('rgb') > -1) {
	      for (var i = 0; i < 3; i++) {
	        color.values[i] *= 1 - amount;
	        if (color.values[i] < 0) color.values[i] = 0;
	      }
	    }

	    return this._convertColorToString(color);
	  },

	  // Calculates the contrast ratio between two colors.
	  //
	  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
	  contrastRatio: function contrastRatio(background, foreground) {
	    var lumA = this._luminance(background);
	    var lumB = this._luminance(foreground);

	    if (lumA >= lumB) {
	      return ((lumA + 0.05) / (lumB + 0.05)).toFixed(2);
	    } else {
	      return ((lumB + 0.05) / (lumA + 0.05)).toFixed(2);
	    }
	  },

	  /**
	   * Determines how readable a color combination is based on its level.
	   * Levels are defined from @LeaVerou:
	   * https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/contrast-ratio.js
	   */
	  contrastRatioLevel: function contrastRatioLevel(background, foreground) {
	    var levels = {
	      'fail': {
	        range: [0, 3],
	        color: 'hsl(0, 100%, 40%)'
	      },
	      'aa-large': {
	        range: [3, 4.5],
	        color: 'hsl(40, 100%, 45%)'
	      },
	      'aa': {
	        range: [4.5, 7],
	        color: 'hsl(80, 60%, 45%)'
	      },
	      'aaa': {
	        range: [7, 22],
	        color: 'hsl(95, 60%, 41%)'
	      }
	    };

	    var ratio = this.contrastRatio(background, foreground);

	    for (var level in levels) {
	      var range = levels[level].range;
	      if (ratio >= range[0] && ratio <= range[1]) return level;
	    }
	  }
	};

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Colors = __webpack_require__(183);
	var ColorManipulator = __webpack_require__(216);

	var DarkTheme = {
	  getPalette: function getPalette() {
	    return {
	      textColor: Colors.fullWhite,
	      canvasColor: '#303030',
	      borderColor: ColorManipulator.fade(Colors.fullWhite, 0.3), //Colors.grey300
	      disabledColor: ColorManipulator.fade(Colors.fullWhite, 0.3),
	      primary1Color: Colors.teal200
	    };
	  },
	  getComponentThemes: function getComponentThemes(palette) {
	    var cardColor = Colors.grey800;
	    return {
	      avatar: {
	        borderColor: 'rgba(0, 0, 0, 0.5)'
	      },
	      floatingActionButton: {
	        disabledColor: ColorManipulator.fade(palette.textColor, 0.12)
	      },
	      leftNav: {
	        color: cardColor
	      },
	      menu: {
	        backgroundColor: cardColor,
	        containerBackgroundColor: cardColor
	      },
	      menuItem: {
	        hoverColor: 'rgba(255, 255, 255, .03)'
	      },
	      menuSubheader: {
	        borderColor: 'rgba(255, 255, 255, 0.3)'
	      },
	      paper: {
	        backgroundColor: cardColor
	      },
	      raisedButton: {
	        color: Colors.grey500
	      },
	      toggle: {
	        thumbOnColor: Colors.cyan200,
	        thumbOffColor: Colors.grey400,
	        thumbDisabledColor: Colors.grey800,
	        thumbRequiredColor: Colors.cyan200,
	        trackOnColor: ColorManipulator.fade(Colors.cyan200, 0.5),
	        trackOffColor: 'rgba(255, 255, 255, 0.3)',
	        trackDisabledColor: 'rgba(255, 255, 255, 0.1)'
	      },
	      refreshIndicator: {
	        strokeColor: Colors.grey700,
	        loadingStrokeColor: Colors.teal300
	      },
	      slider: {
	        trackColor: Colors.minBlack,
	        handleColorZero: cardColor,
	        handleFillColor: cardColor,
	        selectionColor: Colors.cyan200
	      }
	    };
	  }
	};

	module.exports = DarkTheme;

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var Styles = __webpack_require__(212);
	var StylePropable = __webpack_require__(159);

	var CardMedia = React.createClass({
	  displayName: 'CardMedia',

	  mixins: [StylePropable],

	  propTypes: {
	    overlay: React.PropTypes.node,
	    style: React.PropTypes.object,
	    overlayStyle: React.PropTypes.object,
	    overlayContainerStyle: React.PropTypes.object,
	    overlayContentStyle: React.PropTypes.object,
	    mediaStyle: React.PropTypes.object,
	    expandable: React.PropTypes.bool
	  },

	  getStyles: function getStyles() {
	    return {
	      root: {
	        position: 'relative'
	      },
	      overlayContainer: {
	        position: 'absolute',
	        top: 0,
	        bottom: 0,
	        right: 0,
	        left: 0
	      },
	      overlay: {
	        height: '100%',
	        position: 'relative'
	      },
	      overlayContent: {
	        position: 'absolute',
	        bottom: 0,
	        right: 0,
	        left: 0,
	        paddingTop: 8,
	        background: Styles.Colors.lightBlack
	      },
	      media: {},
	      mediaChild: {
	        verticalAlign: 'top',
	        maxWidth: '100%',
	        minWidth: '100%'
	      }
	    };
	  },

	  render: function render() {
	    var _this = this;

	    var styles = this.getStyles();
	    var rootStyle = this.mergeAndPrefix(styles.root, this.props.style);
	    var mediaStyle = this.mergeAndPrefix(styles.media, this.props.mediaStyle);
	    var overlayContainerStyle = this.mergeAndPrefix(styles.overlayContainer, this.props.overlayContainerStyle);
	    var overlayContentStyle = this.mergeAndPrefix(styles.overlayContent, this.props.overlayContentStyle);
	    var overlayStyle = this.mergeAndPrefix(styles.overlay, this.props.overlayStyle);

	    var children = React.Children.map(this.props.children, function (child) {
	      return React.cloneElement(child, { style: _this.mergeAndPrefix(styles.mediaChild, child.props.style) });
	    });

	    var overlayChildren = React.Children.map(this.props.overlay, function (child) {
	      if (child.type.displayName === 'CardHeader' || child.type.displayName === 'CardTitle') {
	        return React.cloneElement(child, {
	          titleColor: Styles.Colors.darkWhite,
	          subtitleColor: Styles.Colors.lightWhite
	        });
	      } else if (child.type.displayName === 'CardText') {
	        return React.cloneElement(child, {
	          color: Styles.Colors.darkWhite
	        });
	      } else {
	        return child;
	      }
	    });

	    return React.createElement(
	      'div',
	      _extends({}, this.props, { style: rootStyle }),
	      React.createElement(
	        'div',
	        { style: mediaStyle },
	        children
	      ),
	      this.props.overlay ? React.createElement(
	        'div',
	        { style: overlayContainerStyle },
	        React.createElement(
	          'div',
	          { style: overlayStyle },
	          React.createElement(
	            'div',
	            { style: overlayContentStyle },
	            overlayChildren
	          )
	        )
	      ) : ''
	    );
	  }
	});

	module.exports = CardMedia;

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var Styles = __webpack_require__(212);
	var StylePropable = __webpack_require__(159);

	var CardText = React.createClass({
	  displayName: 'CardText',

	  mixins: [StylePropable],

	  propTypes: {
	    color: React.PropTypes.string,
	    style: React.PropTypes.object,
	    expandable: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      color: Styles.Colors.ck
	    };
	  },

	  getStyles: function getStyles() {
	    return {
	      root: {
	        padding: 16,
	        fontSize: '14px',
	        color: this.props.color
	      }
	    };
	  },

	  render: function render() {
	    var styles = this.getStyles();
	    var rootStyle = this.mergeAndPrefix(styles.root, this.props.style);

	    return React.createElement(
	      'div',
	      _extends({}, this.props, { style: rootStyle }),
	      this.props.children
	    );
	  }
	});

	module.exports = CardText;

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var Styles = __webpack_require__(212);
	var StylePropable = __webpack_require__(159);

	var CardTitle = React.createClass({
	  displayName: 'CardTitle',

	  mixins: [StylePropable],

	  propTypes: {
	    title: React.PropTypes.string,
	    titleColor: React.PropTypes.string,
	    titleStyle: React.PropTypes.object,
	    subtitle: React.PropTypes.string,
	    subtitleColor: React.PropTypes.string,
	    subtitleStyle: React.PropTypes.object,
	    expandable: React.PropTypes.bool,
	    showExpandableButton: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      titleColor: Styles.Colors.darkBlack,
	      subtitleColor: Styles.Colors.lightBlack
	    };
	  },

	  getStyles: function getStyles() {
	    return {
	      root: {
	        padding: 16,
	        position: 'relative'
	      },
	      title: {
	        fontSize: 24,
	        color: this.props.titleColor,
	        display: 'block',
	        lineHeight: '36px'
	      },
	      subtitle: {
	        fontSize: 14,
	        color: this.props.subtitleColor,
	        display: 'block'
	      }
	    };
	  },

	  render: function render() {
	    var styles = this.getStyles();
	    var rootStyle = this.mergeAndPrefix(styles.root, this.props.style);
	    var titleStyle = this.mergeAndPrefix(styles.title, this.props.titleStyle);
	    var subtitleStyle = this.mergeAndPrefix(styles.subtitle, this.props.subtitleStyle);

	    return React.createElement(
	      'div',
	      _extends({}, this.props, { style: rootStyle }),
	      React.createElement(
	        'span',
	        { style: titleStyle },
	        this.props.title
	      ),
	      React.createElement(
	        'span',
	        { style: subtitleStyle },
	        this.props.subtitle
	      ),
	      this.props.children
	    );
	  }
	});

	module.exports = CardTitle;

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var EnhancedSwitch = __webpack_require__(222);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);
	var CheckboxOutline = __webpack_require__(226);
	var CheckboxChecked = __webpack_require__(227);

	var Checkbox = React.createClass({
	  displayName: 'Checkbox',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    checked: React.PropTypes.bool,
	    checkedIcon: React.PropTypes.element,
	    defaultChecked: React.PropTypes.bool,
	    iconStyle: React.PropTypes.object,
	    labelStyle: React.PropTypes.object,
	    onCheck: React.PropTypes.func,
	    unCheckedIcon: React.PropTypes.element
	  },

	  getInitialState: function getInitialState() {
	    return {
	      switched: this.props.checked || this.props.defaultChecked || this.props.valueLink && this.props.valueLink.value || false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.checkbox;
	  },

	  getStyles: function getStyles() {
	    var checkboxSize = 24;
	    var styles = {
	      icon: {
	        height: checkboxSize,
	        width: checkboxSize
	      },
	      check: {
	        position: 'absolute',
	        opacity: 0,
	        transform: 'scale(0)',
	        transitionOrigin: '50% 50%',
	        transition: Transitions.easeOut('450ms', 'opacity', '0ms') + ', ' + Transitions.easeOut('0ms', 'transform', '450ms'),
	        fill: this.getTheme().checkedColor
	      },
	      box: {
	        position: 'absolute',
	        opacity: 1,
	        fill: this.getTheme().boxColor,
	        transition: Transitions.easeOut('2s', null, '200ms')
	      },
	      checkWhenSwitched: {
	        opacity: 1,
	        transform: 'scale(1)',
	        transition: Transitions.easeOut('0ms', 'opacity', '0ms') + ', ' + Transitions.easeOut('800ms', 'transform', '0ms')
	      },
	      boxWhenSwitched: {
	        transition: Transitions.easeOut('100ms', null, '0ms'),
	        fill: this.getTheme().checkedColor
	      },
	      checkWhenDisabled: {
	        fill: this.getTheme().disabledColor
	      },
	      boxWhenDisabled: {
	        fill: this.getTheme().disabledColor
	      },
	      label: {
	        color: this.props.disabled ? this.getTheme().labelDisabledColor : this.getTheme().labelColor
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var iconStyle = _props.iconStyle;
	    var onCheck = _props.onCheck;
	    var checkedIcon = _props.checkedIcon;
	    var unCheckedIcon = _props.unCheckedIcon;

	    var other = _objectWithoutProperties(_props, ['iconStyle', 'onCheck', 'checkedIcon', 'unCheckedIcon']);

	    var styles = this.getStyles();
	    var boxStyles = this.mergeAndPrefix(styles.box, this.state.switched && styles.boxWhenSwitched, iconStyle, this.props.disabled && styles.boxWhenDisabled);
	    var checkStyles = this.mergeAndPrefix(styles.check, this.state.switched && styles.checkWhenSwitched, iconStyle, this.props.disabled && styles.checkWhenDisabled);

	    var checkedElement = checkedIcon ? React.cloneElement(checkedIcon, {
	      style: this.mergeAndPrefix(checkStyles, checkedIcon.props.style)
	    }) : React.createElement(CheckboxChecked, {
	      style: checkStyles
	    });

	    var unCheckedElement = unCheckedIcon ? React.cloneElement(unCheckedIcon, {
	      style: this.mergeAndPrefix(boxStyles, unCheckedIcon.props.style)
	    }) : React.createElement(CheckboxOutline, {
	      style: boxStyles
	    });

	    var checkboxElement = React.createElement(
	      'div',
	      null,
	      unCheckedElement,
	      checkedElement
	    );

	    var rippleColor = this.state.switched ? checkStyles.fill : boxStyles.fill;
	    var mergedIconStyle = this.mergeAndPrefix(styles.icon, iconStyle);

	    var labelStyle = this.mergeAndPrefix(styles.label, this.props.labelStyle);

	    var enhancedSwitchProps = {
	      ref: "enhancedSwitch",
	      inputType: "checkbox",
	      switched: this.state.switched,
	      switchElement: checkboxElement,
	      rippleColor: rippleColor,
	      iconStyle: mergedIconStyle,
	      onSwitch: this._handleCheck,
	      labelStyle: labelStyle,
	      onParentShouldUpdate: this._handleStateChange,
	      defaultSwitched: this.props.defaultChecked,
	      labelPosition: this.props.labelPosition ? this.props.labelPosition : "right"
	    };

	    return React.createElement(EnhancedSwitch, _extends({}, other, enhancedSwitchProps));
	  },

	  isChecked: function isChecked() {
	    return this.refs.enhancedSwitch.isSwitched();
	  },

	  setChecked: function setChecked(newCheckedValue) {
	    this.refs.enhancedSwitch.setSwitched(newCheckedValue);
	  },

	  _handleCheck: function _handleCheck(e, isInputChecked) {
	    if (this.props.onCheck) this.props.onCheck(e, isInputChecked);
	  },

	  _handleStateChange: function _handleStateChange(newSwitched) {
	    this.setState({ switched: newSwitched });
	  }

	});

	module.exports = Checkbox;

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var KeyCode = __webpack_require__(190);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);
	var UniqueId = __webpack_require__(223);
	var WindowListenable = __webpack_require__(224);
	var ClearFix = __webpack_require__(225);
	var FocusRipple = __webpack_require__(191);
	var TouchRipple = __webpack_require__(194);
	var Paper = __webpack_require__(201);

	var EnhancedSwitch = React.createClass({
	  displayName: 'EnhancedSwitch',

	  mixins: [WindowListenable, StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    id: React.PropTypes.string,
	    inputType: React.PropTypes.string.isRequired,
	    switchElement: React.PropTypes.element.isRequired,
	    onParentShouldUpdate: React.PropTypes.func.isRequired,
	    switched: React.PropTypes.bool.isRequired,
	    rippleStyle: React.PropTypes.object,
	    rippleColor: React.PropTypes.string,
	    iconStyle: React.PropTypes.object,
	    thumbStyle: React.PropTypes.object,
	    trackStyle: React.PropTypes.object,
	    labelStyle: React.PropTypes.object,
	    name: React.PropTypes.string,
	    value: React.PropTypes.string,
	    label: React.PropTypes.string,
	    onSwitch: React.PropTypes.func,
	    required: React.PropTypes.bool,
	    disabled: React.PropTypes.bool,
	    defaultSwitched: React.PropTypes.bool,
	    labelPosition: React.PropTypes.oneOf(['left', 'right']),
	    disableFocusRipple: React.PropTypes.bool,
	    disableTouchRipple: React.PropTypes.bool
	  },

	  windowListeners: {
	    keydown: '_handleWindowKeydown',
	    keyup: '_handleWindowKeyup'
	  },

	  getInitialState: function getInitialState() {
	    return {
	      isKeyboardFocused: false,
	      parentWidth: 100
	    };
	  },

	  getEvenWidth: function getEvenWidth() {
	    return parseInt(window.getComputedStyle(React.findDOMNode(this.refs.root)).getPropertyValue('width'), 10);
	  },

	  componentDidMount: function componentDidMount() {
	    var inputNode = React.findDOMNode(this.refs.checkbox);
	    if (!this.props.switched || inputNode.checked !== this.props.switched) {
	      this.props.onParentShouldUpdate(inputNode.checked);
	    }

	    window.addEventListener("resize", this._handleResize);

	    this._handleResize();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    window.removeEventListener("resize", this._handleResize);
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var hasCheckedLinkProp = nextProps.hasOwnProperty('checkedLink');
	    var hasCheckedProp = nextProps.hasOwnProperty('checked');
	    var hasToggledProp = nextProps.hasOwnProperty('toggled');
	    var hasNewDefaultProp = nextProps.hasOwnProperty('defaultSwitched') && nextProps.defaultSwitched !== this.props.defaultSwitched;
	    var newState = {};

	    if (hasCheckedProp) {
	      newState.switched = nextProps.checked;
	    } else if (hasToggledProp) {
	      newState.switched = nextProps.toggled;
	    } else if (hasCheckedLinkProp) {
	      newState.switched = nextProps.checkedLink.value;
	    } else if (hasNewDefaultProp) {
	      newState.switched = nextProps.defaultSwitched;
	    }

	    if (newState.switched !== undefined && newState.switched !== this.props.switched) {
	      this.props.onParentShouldUpdate(newState.switched);
	    }
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.palette;
	  },

	  getStyles: function getStyles() {
	    var spacing = this.context.muiTheme.spacing;
	    var switchWidth = 60 - spacing.desktopGutterLess;
	    var labelWidth = 'calc(100% - 60px)';
	    var styles = {
	      root: {
	        position: 'relative',
	        cursor: this.props.disabled ? 'default' : 'pointer',
	        overflow: 'visible',
	        display: 'table',
	        height: 'auto',
	        width: '100%'
	      },
	      input: {
	        position: 'absolute',
	        cursor: this.props.disabled ? 'default' : 'pointer',
	        pointerEvents: 'all',
	        opacity: 0,
	        width: '100%',
	        height: '100%',
	        zIndex: 2,
	        left: 0,
	        boxSizing: 'border-box',
	        padding: 0,
	        margin: 0
	      },
	      controls: {
	        width: '100%',
	        height: '100%'
	      },
	      label: {
	        float: 'left',
	        position: 'relative',
	        display: 'block',
	        width: labelWidth,
	        lineHeight: '24px',
	        color: this.getTheme().textColor
	      },
	      wrap: {
	        transition: Transitions.easeOut(),
	        float: 'left',
	        position: 'relative',
	        display: 'block',
	        width: switchWidth,
	        marginRight: this.props.labelPosition === 'right' ? spacing.desktopGutterLess : 0,
	        marginLeft: this.props.labelPosition === 'left' ? spacing.desktopGutterLess : 0
	      },
	      ripple: {
	        height: '200%',
	        width: '200%',
	        top: -12,
	        left: -12
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var type = _props.type;
	    var name = _props.name;
	    var value = _props.value;
	    var label = _props.label;
	    var onSwitch = _props.onSwitch;
	    var defaultSwitched = _props.defaultSwitched;
	    var onBlur = _props.onBlur;
	    var onFocus = _props.onFocus;
	    var onMouseUp = _props.onMouseUp;
	    var onMouseDown = _props.onMouseDown;
	    var onMouseLeave = _props.onMouseLeave;
	    var onTouchStart = _props.onTouchStart;
	    var onTouchEnd = _props.onTouchEnd;
	    var disableTouchRipple = _props.disableTouchRipple;
	    var disableFocusRipple = _props.disableFocusRipple;
	    var className = _props.className;

	    var other = _objectWithoutProperties(_props, ['type', 'name', 'value', 'label', 'onSwitch', 'defaultSwitched', 'onBlur', 'onFocus', 'onMouseUp', 'onMouseDown', 'onMouseLeave', 'onTouchStart', 'onTouchEnd', 'disableTouchRipple', 'disableFocusRipple', 'className']);

	    var styles = this.getStyles();
	    var wrapStyles = this.mergeAndPrefix(styles.wrap, this.props.iconStyle);
	    var rippleStyle = this.mergeAndPrefix(styles.ripple, this.props.rippleStyle);
	    var rippleColor = this.props.hasOwnProperty('rippleColor') ? this.props.rippleColor : this.getTheme().primary1Color;

	    if (this.props.thumbStyle) {
	      wrapStyles.marginLeft /= 2;
	      wrapStyles.marginRight /= 2;
	    }

	    var inputId = this.props.id || UniqueId.generate();

	    var labelStyle = this.mergeAndPrefix(styles.label, this.props.labelStyle);
	    var labelElement = this.props.label ? React.createElement(
	      'label',
	      { style: labelStyle, htmlFor: inputId },
	      this.props.label
	    ) : null;

	    var inputProps = {
	      ref: "checkbox",
	      type: this.props.inputType,
	      style: this.mergeAndPrefix(styles.input),
	      name: this.props.name,
	      value: this.props.value,
	      defaultChecked: this.props.defaultSwitched,
	      onBlur: this._handleBlur,
	      onFocus: this._handleFocus
	    };

	    var hideTouchRipple = this.props.disabled || disableTouchRipple;

	    if (!hideTouchRipple) {
	      inputProps.onMouseUp = this._handleMouseUp;
	      inputProps.onMouseDown = this._handleMouseDown;
	      inputProps.onMouseLeave = this._handleMouseLeave;
	      inputProps.onTouchStart = this._handleTouchStart;
	      inputProps.onTouchEnd = this._handleTouchEnd;
	    }

	    if (!this.props.hasOwnProperty('checkedLink')) {
	      inputProps.onChange = this._handleChange;
	    }

	    var inputElement = React.createElement('input', _extends({}, other, inputProps));

	    var touchRipple = React.createElement(TouchRipple, {
	      ref: 'touchRipple',
	      key: 'touchRipple',
	      style: rippleStyle,
	      color: rippleColor,
	      centerRipple: true });

	    var focusRipple = React.createElement(FocusRipple, {
	      key: 'focusRipple',
	      innerStyle: rippleStyle,
	      color: rippleColor,
	      show: this.state.isKeyboardFocused });

	    var ripples = [hideTouchRipple ? null : touchRipple, this.props.disabled || disableFocusRipple ? null : focusRipple];

	    // If toggle component (indicated by whether the style includes thumb) manually lay out
	    // elements in order to nest ripple elements
	    var switchElement = !this.props.thumbStyle ? React.createElement(
	      'div',
	      { style: wrapStyles },
	      this.props.switchElement,
	      ripples
	    ) : React.createElement(
	      'div',
	      { style: wrapStyles },
	      React.createElement('div', { style: this.props.trackStyle }),
	      React.createElement(
	        Paper,
	        { style: this.props.thumbStyle, zDepth: 1, circle: true },
	        ' ',
	        ripples,
	        ' '
	      )
	    );

	    var labelPositionExist = this.props.labelPosition;

	    // Position is left if not defined or invalid.
	    var elementsInOrder = labelPositionExist && this.props.labelPosition.toUpperCase() === "RIGHT" ? React.createElement(
	      ClearFix,
	      { style: this.mergeAndPrefix(styles.controls) },
	      switchElement,
	      labelElement
	    ) : React.createElement(
	      ClearFix,
	      { style: this.mergeAndPrefix(styles.controls) },
	      labelElement,
	      switchElement
	    );

	    return React.createElement(
	      'div',
	      { ref: 'root', className: className, style: this.mergeAndPrefix(styles.root, this.props.style) },
	      inputElement,
	      elementsInOrder
	    );
	  },

	  isSwitched: function isSwitched() {
	    return React.findDOMNode(this.refs.checkbox).checked;
	  },

	  // no callback here because there is no event
	  setSwitched: function setSwitched(newSwitchedValue) {
	    if (!this.props.hasOwnProperty('checked') || this.props.checked === false) {
	      this.props.onParentShouldUpdate(newSwitchedValue);
	      React.findDOMNode(this.refs.checkbox).checked = newSwitchedValue;
	    } else if (process.env.NODE_ENV !== 'production') {
	      var message = 'Cannot call set method while checked is defined as a property.';
	      console.error(message);
	    }
	  },

	  getValue: function getValue() {
	    return React.findDOMNode(this.refs.checkbox).value;
	  },

	  isKeyboardFocused: function isKeyboardFocused() {
	    return this.state.isKeyboardFocused;
	  },

	  _handleChange: function _handleChange(e) {
	    this._tabPressed = false;
	    this.setState({
	      isKeyboardFocused: false
	    });

	    var isInputChecked = React.findDOMNode(this.refs.checkbox).checked;

	    if (!this.props.hasOwnProperty('checked')) {
	      this.props.onParentShouldUpdate(isInputChecked);
	    }
	    if (this.props.onSwitch) {
	      this.props.onSwitch(e, isInputChecked);
	    }
	  },

	  // Checkbox inputs only use SPACE to change their state. Using ENTER will
	  // update the ui but not the input.
	  _handleWindowKeydown: function _handleWindowKeydown(e) {
	    if (e.keyCode === KeyCode.TAB) {
	      this._tabPressed = true;
	    }
	    if (e.keyCode === KeyCode.SPACE && this.state.isKeyboardFocused) {
	      this._handleChange(e);
	    }
	  },

	  _handleWindowKeyup: function _handleWindowKeyup(e) {
	    if (e.keyCode === KeyCode.SPACE && this.state.isKeyboardFocused) {
	      this._handleChange(e);
	    }
	  },

	  /**
	   * Because both the ripples and the checkbox input cannot share pointer
	   * events, the checkbox input takes control of pointer events and calls
	   * ripple animations manually.
	   */
	  _handleMouseDown: function _handleMouseDown(e) {
	    //only listen to left clicks
	    if (e.button === 0) {
	      this.refs.touchRipple.start(e);
	    }
	  },

	  _handleMouseUp: function _handleMouseUp() {
	    this.refs.touchRipple.end();
	  },

	  _handleMouseLeave: function _handleMouseLeave() {
	    this.refs.touchRipple.end();
	  },

	  _handleTouchStart: function _handleTouchStart(e) {
	    this.refs.touchRipple.start(e);
	  },

	  _handleTouchEnd: function _handleTouchEnd() {
	    this.refs.touchRipple.end();
	  },

	  _handleBlur: function _handleBlur(e) {
	    this.setState({
	      isKeyboardFocused: false
	    });

	    if (this.props.onBlur) {
	      this.props.onBlur(e);
	    }
	  },

	  _handleFocus: function _handleFocus(e) {
	    var _this = this;

	    //setTimeout is needed becuase the focus event fires first
	    //Wait so that we can capture if this was a keyboard focus
	    //or touch focus
	    setTimeout(function () {
	      if (_this._tabPressed) {
	        _this.setState({
	          isKeyboardFocused: true
	        });
	      }
	    }, 150);

	    if (this.props.onFocus) {
	      this.props.onFocus(e);
	    }
	  },

	  _handleResize: function _handleResize() {
	    this.setState({ parentWidth: this.getEvenWidth() });
	  }

	});

	module.exports = EnhancedSwitch;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 223 */
/***/ function(module, exports) {

	"use strict";

	var index = 0;

	module.exports = {
	  generate: function generate() {
	    return "mui-id-" + index++;
	  }
	};

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Events = __webpack_require__(189);

	module.exports = {

	  componentDidMount: function componentDidMount() {
	    var listeners = this.windowListeners;

	    for (var eventName in listeners) {
	      var callbackName = listeners[eventName];
	      Events.on(window, eventName, this[callbackName]);
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    var listeners = this.windowListeners;

	    for (var eventName in listeners) {
	      var callbackName = listeners[eventName];
	      Events.off(window, eventName, this[callbackName]);
	    }
	  }

	};

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var BeforeAfterWrapper = __webpack_require__(204);

	var ClearFix = React.createClass({
	  displayName: 'ClearFix',

	  render: function render() {
	    var _props = this.props;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['style']);

	    var before = function before() {
	      return {
	        content: "' '",
	        display: 'table'
	      };
	    };

	    var after = before();
	    after.clear = 'both';

	    return React.createElement(
	      BeforeAfterWrapper,
	      _extends({}, other, {
	        beforeStyle: before(),
	        afterStyle: after,
	        style: this.props.style }),
	      this.props.children
	    );
	  }
	});

	module.exports = ClearFix;

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(200);

	var ToggleCheckBoxOutlineBlank = React.createClass({
	  displayName: 'ToggleCheckBoxOutlineBlank',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z' })
	    );
	  }

	});

	module.exports = ToggleCheckBoxOutlineBlank;

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(200);

	var ToggleCheckBox = React.createClass({
	  displayName: 'ToggleCheckBox',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z' })
	    );
	  }

	});

	module.exports = ToggleCheckBox;

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var AutoPrefix = __webpack_require__(180);
	var Transitions = __webpack_require__(185);

	var CircularProgress = React.createClass({
	  displayName: 'CircularProgress',

	  mixins: [StylePropable],

	  propTypes: {
	    mode: React.PropTypes.oneOf(["determinate", "indeterminate"]),
	    value: React.PropTypes.number,
	    min: React.PropTypes.number,
	    max: React.PropTypes.number,
	    size: React.PropTypes.number,
	    color: React.PropTypes.string,
	    innerStyle: React.PropTypes.object
	  },

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  _getRelativeValue: function _getRelativeValue() {
	    var value = this.props.value;
	    var min = this.props.min;
	    var max = this.props.max;

	    var clampedValue = Math.min(Math.max(min, value), max);
	    var rangeValue = max - min;
	    var relValue = Math.round(clampedValue / rangeValue * 10000) / 10000;
	    return relValue * 100;
	  },

	  componentDidMount: function componentDidMount() {
	    var wrapper = React.findDOMNode(this.refs.wrapper);
	    var path = React.findDOMNode(this.refs.path);

	    this._scalePath(path);
	    this._rotateWrapper(wrapper);
	  },

	  _scalePath: function _scalePath(path, step) {
	    step = step || 0;
	    step %= 3;

	    setTimeout(this._scalePath.bind(this, path, step + 1), step ? 750 : 250);

	    if (!this.isMounted()) return;
	    if (this.props.mode !== "indeterminate") return;

	    if (step === 0) {
	      path.style.strokeDasharray = "1, 200";
	      path.style.strokeDashoffset = 0;
	      path.style.transitionDuration = "0ms";
	    } else if (step === 1) {
	      path.style.strokeDasharray = "89, 200";
	      path.style.strokeDashoffset = -35;
	      path.style.transitionDuration = "750ms";
	    } else {
	      path.style.strokeDasharray = "89,200";
	      path.style.strokeDashoffset = -124;
	      path.style.transitionDuration = "850ms";
	    }
	  },

	  _rotateWrapper: function _rotateWrapper(wrapper) {
	    setTimeout(this._rotateWrapper.bind(this, wrapper), 10050);

	    if (!this.isMounted()) return;
	    if (this.props.mode !== "indeterminate") return;

	    AutoPrefix.set(wrapper.style, "transform", null);
	    AutoPrefix.set(wrapper.style, "transform", "rotate(0deg)");
	    wrapper.style.transitionDuration = "0ms";

	    setTimeout(function () {
	      AutoPrefix.set(wrapper.style, "transform", "rotate(1800deg)");
	      wrapper.style.transitionDuration = "10s";
	      //wrapper.style.webkitTransitionTimingFunction = "linear";
	      AutoPrefix.set(wrapper.style, "transitionTimingFunction", "linear");
	    }, 50);
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      mode: "indeterminate",
	      value: 0,
	      min: 0,
	      max: 100,
	      size: 1
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.palette;
	  },

	  getStyles: function getStyles(zoom) {
	    zoom *= 1.4;
	    var size = "50px";

	    var margin = Math.round((50 * zoom - 50) / 2);

	    if (margin < 0) margin = 0;

	    var styles = {
	      root: {
	        position: "relative",
	        margin: margin + "px",
	        display: "inline-block",
	        width: size,
	        height: size
	      },
	      wrapper: {
	        width: size,
	        height: size,
	        margin: "5px",
	        display: "inline-block",
	        transition: Transitions.create("transform", "20s", null, "linear")
	      },
	      svg: {
	        height: size,
	        position: "relative",
	        transform: "scale(" + zoom + ")",
	        width: size
	      },
	      path: {
	        strokeDasharray: "89,200",
	        strokeDashoffset: 0,
	        stroke: this.props.color || this.getTheme().primary1Color,
	        strokeLinecap: "round",
	        transition: Transitions.create("all", "1.5s", null, "ease-in-out")
	      }
	    };

	    AutoPrefix.set(styles.wrapper, "transitionTimingFunction", "linear");

	    if (this.props.mode === "determinate") {
	      var relVal = this._getRelativeValue();
	      styles.path.transition = Transitions.create("all", "0.3s", null, "linear");
	      styles.path.strokeDasharray = Math.round(relVal * 1.25) + ",200";
	    }

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var style = _props.style;
	    var innerStyle = _props.innerStyle;
	    var size = _props.size;

	    var other = _objectWithoutProperties(_props, ['style', 'innerStyle', 'size']);

	    var styles = this.getStyles(size || 1);

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: this.mergeAndPrefix(styles.root, style) }),
	      React.createElement(
	        'div',
	        { ref: 'wrapper', style: this.mergeAndPrefix(styles.wrapper, innerStyle) },
	        React.createElement(
	          'svg',
	          { style: this.mergeAndPrefix(styles.svg) },
	          React.createElement('circle', { ref: 'path', style: this.mergeAndPrefix(styles.path), cx: '25', cy: '25',
	            r: '20', fill: 'none', strokeWidth: '2.5', strokeMiterlimit: '10' })
	        )
	      )
	    );
	  }
	});

	module.exports = CircularProgress;

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var WindowListenable = __webpack_require__(224);
	var DateTime = __webpack_require__(230);
	var DatePickerDialog = __webpack_require__(231);
	var TextField = __webpack_require__(250);

	var DatePicker = React.createClass({
	  displayName: 'DatePicker',

	  mixins: [StylePropable, WindowListenable],

	  propTypes: {
	    autoOk: React.PropTypes.bool,
	    defaultDate: React.PropTypes.object,
	    formatDate: React.PropTypes.func,
	    hideToolbarYearChange: React.PropTypes.bool,
	    maxDate: React.PropTypes.object,
	    minDate: React.PropTypes.object,
	    mode: React.PropTypes.oneOf(['portrait', 'landscape', 'inline']),
	    onDismiss: React.PropTypes.func,
	    onChange: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    onShow: React.PropTypes.func,
	    onTouchTap: React.PropTypes.func,
	    shouldDisableDate: React.PropTypes.func,
	    showYearSelector: React.PropTypes.bool,
	    style: React.PropTypes.object,
	    textFieldStyle: React.PropTypes.object
	  },

	  windowListeners: {
	    keyup: '_handleWindowKeyUp'
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      formatDate: DateTime.format,
	      autoOk: false,
	      showYearSelector: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      date: this._isControlled() ? this._getControlledDate() : this.props.defaultDate,
	      dialogDate: new Date()
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (this._isControlled()) {
	      var newDate = this._getControlledDate(nextProps);
	      if (!DateTime.isEqualDate(this.state.date, newDate)) {
	        this.setState({
	          date: newDate
	        });
	      }
	    }
	  },

	  render: function render() {
	    var _props = this.props;
	    var autoOk = _props.autoOk;
	    var defaultDate = _props.defaultDate;
	    var formatDate = _props.formatDate;
	    var maxDate = _props.maxDate;
	    var minDate = _props.minDate;
	    var mode = _props.mode;
	    var onDismiss = _props.onDismiss;
	    var onFocus = _props.onFocus;
	    var onShow = _props.onShow;
	    var onTouchTap = _props.onTouchTap;
	    var showYearSelector = _props.showYearSelector;
	    var style = _props.style;
	    var textFieldStyle = _props.textFieldStyle;
	    var valueLink = _props.valueLink;

	    var other = _objectWithoutProperties(_props, ['autoOk', 'defaultDate', 'formatDate', 'maxDate', 'minDate', 'mode', 'onDismiss', 'onFocus', 'onShow', 'onTouchTap', 'showYearSelector', 'style', 'textFieldStyle', 'valueLink']);

	    return React.createElement(
	      'div',
	      { style: style },
	      React.createElement(TextField, _extends({}, other, {
	        style: textFieldStyle,
	        ref: 'input',
	        value: this.state.date ? formatDate(this.state.date) : undefined,
	        onFocus: this._handleInputFocus,
	        onTouchTap: this._handleInputTouchTap })),
	      React.createElement(DatePickerDialog, {
	        ref: 'dialogWindow',
	        mode: mode,
	        initialDate: this.state.dialogDate,
	        onAccept: this._handleDialogAccept,
	        onShow: onShow,
	        onDismiss: this._handleDialogDismiss,
	        minDate: minDate,
	        maxDate: maxDate,
	        autoOk: autoOk,
	        showYearSelector: showYearSelector,
	        shouldDisableDate: this.props.shouldDisableDate,
	        hideToolbarYearChange: this.props.hideToolbarYearChange })
	    );
	  },

	  getDate: function getDate() {
	    return this.state.date;
	  },

	  setDate: function setDate(d) {
	    if (process.env.NODE_ENV !== 'production' && this._isControlled()) {
	      console.error('Cannot call DatePicker.setDate when value or valueLink is defined as a property.');
	    }
	    this.setState({
	      date: d
	    });
	  },

	  /**
	   * Open the date-picker dialog programmatically from a parent.
	   */
	  openDialog: function openDialog() {
	    this.setState({
	      dialogDate: this.getDate()
	    }, this.refs.dialogWindow.show);
	  },

	  /**
	   * Alias for `openDialog()` for an api consistent with TextField.
	   */
	  focus: function focus() {
	    this.openDialog();
	  },

	  _handleDialogAccept: function _handleDialogAccept(d) {
	    if (!this._isControlled()) {
	      this.setDate(d);
	    }
	    if (this.props.onChange) this.props.onChange(null, d);
	    if (this.props.valueLink) this.props.valueLink.requestChange(d);
	  },

	  _handleDialogDismiss: function _handleDialogDismiss() {
	    if (this.props.onDismiss) this.props.onDismiss();
	  },

	  _handleInputFocus: function _handleInputFocus(e) {
	    e.target.blur();
	    if (this.props.onFocus) this.props.onFocus(e);
	  },

	  _handleInputTouchTap: function _handleInputTouchTap(e) {
	    this.openDialog();
	    if (this.props.onTouchTap) this.props.onTouchTap(e);
	  },

	  _handleWindowKeyUp: function _handleWindowKeyUp() {
	    //TO DO: open the dialog if input has focus
	  },

	  _isControlled: function _isControlled() {
	    return this.props.hasOwnProperty('value') || this.props.hasOwnProperty('valueLink');
	  },

	  _getControlledDate: function _getControlledDate() {
	    var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];

	    if (DateTime.isDateObject(props.value)) {
	      return props.value;
	    } else if (props.valueLink && DateTime.isDateObject(props.valueLink.value)) {
	      return props.valueLink.value;
	    }
	  }

	});

	module.exports = DatePicker;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 230 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {

	  addDays: function addDays(d, days) {
	    var newDate = this.clone(d);
	    newDate.setDate(d.getDate() + days);
	    return newDate;
	  },

	  addMonths: function addMonths(d, months) {
	    var newDate = this.clone(d);
	    newDate.setMonth(d.getMonth() + months);
	    return newDate;
	  },

	  addYears: function addYears(d, years) {
	    var newDate = this.clone(d);
	    newDate.setFullYear(d.getFullYear() + years);
	    return newDate;
	  },

	  clone: function clone(d) {
	    return new Date(d.getTime());
	  },

	  cloneAsDate: function cloneAsDate(d) {
	    var clonedDate = this.clone(d);
	    clonedDate.setHours(0, 0, 0, 0);
	    return clonedDate;
	  },

	  getDaysInMonth: function getDaysInMonth(d) {
	    var resultDate = this.getFirstDayOfMonth(d);

	    resultDate.setMonth(resultDate.getMonth() + 1);
	    resultDate.setDate(resultDate.getDate() - 1);

	    return resultDate.getDate();
	  },

	  getFirstDayOfMonth: function getFirstDayOfMonth(d) {
	    return new Date(d.getFullYear(), d.getMonth(), 1);
	  },

	  getFullMonth: function getFullMonth(d) {
	    var month = d.getMonth();
	    switch (month) {
	      case 0:
	        return 'January';
	      case 1:
	        return 'February';
	      case 2:
	        return 'March';
	      case 3:
	        return 'April';
	      case 4:
	        return 'May';
	      case 5:
	        return 'June';
	      case 6:
	        return 'July';
	      case 7:
	        return 'August';
	      case 8:
	        return 'September';
	      case 9:
	        return 'October';
	      case 10:
	        return 'November';
	      case 11:
	        return 'December';
	    }
	  },

	  getShortMonth: function getShortMonth(d) {
	    var month = d.getMonth();
	    switch (month) {
	      case 0:
	        return 'Jan';
	      case 1:
	        return 'Feb';
	      case 2:
	        return 'Mar';
	      case 3:
	        return 'Apr';
	      case 4:
	        return 'May';
	      case 5:
	        return 'Jun';
	      case 6:
	        return 'Jul';
	      case 7:
	        return 'Aug';
	      case 8:
	        return 'Sep';
	      case 9:
	        return 'Oct';
	      case 10:
	        return 'Nov';
	      case 11:
	        return 'Dec';
	    }
	  },

	  getDayOfWeek: function getDayOfWeek(d) {
	    var dow = d.getDay();
	    switch (dow) {
	      case 0:
	        return 'Sun';
	      case 1:
	        return 'Mon';
	      case 2:
	        return 'Tue';
	      case 3:
	        return 'Wed';
	      case 4:
	        return 'Thu';
	      case 5:
	        return 'Fri';
	      case 6:
	        return 'Sat';
	    }
	  },

	  getWeekArray: function getWeekArray(d) {
	    var dayArray = [];
	    var daysInMonth = this.getDaysInMonth(d);
	    var daysInWeek = undefined;
	    var emptyDays = undefined;
	    var firstDayOfWeek = undefined;
	    var week = undefined;
	    var weekArray = [];

	    for (var i = 1; i <= daysInMonth; i++) {
	      dayArray.push(new Date(d.getFullYear(), d.getMonth(), i));
	    }

	    while (dayArray.length) {
	      firstDayOfWeek = dayArray[0].getDay();
	      daysInWeek = 7 - firstDayOfWeek;
	      emptyDays = 7 - daysInWeek;
	      week = dayArray.splice(0, daysInWeek);

	      for (var i = 0; i < emptyDays; i++) {
	        week.unshift(null);
	      }

	      weekArray.push(week);
	    }

	    return weekArray;
	  },

	  format: function format(date) {
	    var m = date.getMonth() + 1;
	    var d = date.getDate();
	    var y = date.getFullYear();
	    return m + '/' + d + '/' + y;
	  },

	  isEqualDate: function isEqualDate(d1, d2) {
	    return d1 && d2 && d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();
	  },

	  isBeforeDate: function isBeforeDate(d1, d2) {
	    var date1 = this.cloneAsDate(d1);
	    var date2 = this.cloneAsDate(d2);

	    return date1.getTime() < date2.getTime();
	  },

	  isAfterDate: function isAfterDate(d1, d2) {
	    var date1 = this.cloneAsDate(d1);
	    var date2 = this.cloneAsDate(d2);

	    return date1.getTime() > date2.getTime();
	  },

	  isBetweenDates: function isBetweenDates(dateToCheck, startDate, endDate) {
	    return !this.isBeforeDate(dateToCheck, startDate) && !this.isAfterDate(dateToCheck, endDate);
	  },

	  isDateObject: function isDateObject(d) {
	    return d instanceof Date;
	  },

	  monthDiff: function monthDiff(d1, d2) {
	    var m = undefined;
	    m = (d1.getFullYear() - d2.getFullYear()) * 12;
	    m += d1.getMonth();
	    m -= d2.getMonth();
	    return m;
	  },

	  yearDiff: function yearDiff(d1, d2) {
	    return ~ ~(this.monthDiff(d1, d2) / 12);
	  }

	};

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var WindowListenable = __webpack_require__(224);
	var CssEvent = __webpack_require__(232);
	var KeyCode = __webpack_require__(190);
	var Calendar = __webpack_require__(233);
	var Dialog = __webpack_require__(246);
	var FlatButton = __webpack_require__(247);

	var DatePickerDialog = React.createClass({
	  displayName: 'DatePickerDialog',

	  mixins: [StylePropable, WindowListenable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    disableYearSelection: React.PropTypes.bool,
	    initialDate: React.PropTypes.object,
	    maxDate: React.PropTypes.object,
	    minDate: React.PropTypes.object,
	    onAccept: React.PropTypes.func,
	    onClickAway: React.PropTypes.func,
	    onDismiss: React.PropTypes.func,
	    onShow: React.PropTypes.func,
	    shouldDisableDate: React.PropTypes.func,
	    showYearSelector: React.PropTypes.bool
	  },

	  windowListeners: {
	    keyup: '_handleWindowKeyUp'
	  },

	  getInitialState: function getInitialState() {
	    return {
	      isCalendarActive: false,
	      showMonthDayPicker: true
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var initialDate = _props.initialDate;
	    var onAccept = _props.onAccept;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['initialDate', 'onAccept', 'style']);

	    var styles = {
	      root: {
	        color: this.context.muiTheme.component.datePicker.calendarTextColor,
	        fontSize: 14
	      },

	      dialogContent: {
	        width: this.props.mode === 'landscape' ? 480 : 320
	      },

	      dialogBodyContent: {
	        padding: 0
	      },

	      actions: {
	        marginRight: 8
	      }
	    };

	    var actions = [React.createElement(FlatButton, {
	      key: 0,
	      label: 'Cancel',
	      secondary: true,
	      style: styles.actions,
	      onTouchTap: this._handleCancelTouchTap })];

	    if (!this.props.autoOk) {
	      actions.push(React.createElement(FlatButton, {
	        key: 1,
	        label: 'OK',
	        secondary: true,
	        disabled: this.refs.calendar !== undefined && this.refs.calendar.isSelectedDateDisabled(),
	        style: styles.actions,
	        onTouchTap: this._handleOKTouchTap }));
	    }

	    return React.createElement(
	      Dialog,
	      _extends({}, other, {
	        ref: 'dialog',
	        style: styles.root,
	        contentStyle: styles.dialogContent,
	        bodyStyle: styles.dialogBodyContent,
	        actions: actions,
	        onDismiss: this._handleDialogDismiss,
	        onShow: this._handleDialogShow,
	        onClickAway: this._handleDialogClickAway,
	        repositionOnUpdate: false }),
	      React.createElement(Calendar, {
	        ref: 'calendar',
	        onDayTouchTap: this._onDayTouchTap,
	        initialDate: this.props.initialDate,
	        isActive: this.state.isCalendarActive,
	        minDate: this.props.minDate,
	        maxDate: this.props.maxDate,
	        shouldDisableDate: this.props.shouldDisableDate,
	        shouldShowMonthDayPickerFirst: this.state.showMonthDayPicker,
	        showYearSelector: this.props.showYearSelector,
	        mode: this.props.mode })
	    );
	  },

	  show: function show() {
	    this.refs.dialog.show();
	  },

	  dismiss: function dismiss() {
	    this.refs.dialog.dismiss();
	  },

	  _onDayTouchTap: function _onDayTouchTap() {
	    if (this.props.autoOk) {
	      setTimeout(this._handleOKTouchTap, 300);
	    }
	  },

	  _handleCancelTouchTap: function _handleCancelTouchTap() {
	    this.dismiss();
	  },

	  _handleOKTouchTap: function _handleOKTouchTap() {
	    if (this.props.onAccept && !this.refs.calendar.isSelectedDateDisabled()) {
	      this.props.onAccept(this.refs.calendar.getSelectedDate());
	    }

	    this.dismiss();
	  },

	  _handleDialogShow: function _handleDialogShow() {
	    this.setState({
	      isCalendarActive: true
	    });

	    if (this.props.onShow) this.props.onShow();
	  },

	  _handleDialogDismiss: function _handleDialogDismiss() {
	    var _this = this;

	    CssEvent.onTransitionEnd(this.refs.dialog.getDOMNode(), function () {
	      _this.setState({
	        isCalendarActive: false,
	        showMonthDayPicker: true
	      });
	    });

	    if (this.props.onDismiss) this.props.onDismiss();
	  },

	  _handleDialogClickAway: function _handleDialogClickAway() {
	    var _this2 = this;

	    CssEvent.onTransitionEnd(this.refs.dialog.getDOMNode(), function () {
	      _this2.setState({
	        isCalendarActive: false,
	        showMonthDayPicker: true
	      });
	    });

	    if (this.props.onClickAway) this.props.onClickAway();
	  },

	  _handleWindowKeyUp: function _handleWindowKeyUp(e) {
	    if (this.state.isCalendarActive) {
	      switch (e.keyCode) {
	        case KeyCode.ENTER:
	          this._handleOKTouchTap();
	          break;
	      }
	    }
	  }

	});

	module.exports = DatePickerDialog;

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Events = __webpack_require__(189);

	module.exports = {

	  _testSupportedProps: function _testSupportedProps(props) {
	    var i = undefined,
	        el = document.createElement('div');

	    for (i in props) {
	      if (props.hasOwnProperty(i) && el.style[i] !== undefined) {
	        return props[i];
	      }
	    }
	  },

	  //Returns the correct event name to use
	  transitionEndEventName: function transitionEndEventName() {
	    return this._testSupportedProps({
	      'transition': 'transitionend',
	      'OTransition': 'otransitionend',
	      'MozTransition': 'transitionend',
	      'WebkitTransition': 'webkitTransitionEnd'
	    });
	  },

	  animationEndEventName: function animationEndEventName() {
	    return this._testSupportedProps({
	      'animation': 'animationend',
	      '-o-animation': 'oAnimationEnd',
	      '-moz-animation': 'animationend',
	      '-webkit-animation': 'webkitAnimationEnd'
	    });
	  },

	  onTransitionEnd: function onTransitionEnd(el, callback) {
	    var transitionEnd = this.transitionEndEventName();

	    Events.once(el, transitionEnd, function () {
	      return callback();
	    });
	  },

	  onAnimationEnd: function onAnimationEnd(el, callback) {
	    var animationEnd = this.animationEndEventName();

	    Events.once(el, animationEnd, function () {
	      return callback();
	    });
	  }
	};

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var WindowListenable = __webpack_require__(224);
	var DateTime = __webpack_require__(230);
	var KeyCode = __webpack_require__(190);
	var Transitions = __webpack_require__(185);
	var CalendarMonth = __webpack_require__(234);
	var CalendarYear = __webpack_require__(236);
	var CalendarToolbar = __webpack_require__(238);
	var DateDisplay = __webpack_require__(245);
	var SlideInTransitionGroup = __webpack_require__(243);
	var ClearFix = __webpack_require__(225);

	var Calendar = React.createClass({
	  displayName: 'Calendar',

	  mixins: [StylePropable, WindowListenable],

	  propTypes: {
	    disableYearSelection: React.PropTypes.bool,
	    initialDate: React.PropTypes.object,
	    isActive: React.PropTypes.bool,
	    minDate: React.PropTypes.object,
	    maxDate: React.PropTypes.object,
	    onDayTouchTap: React.PropTypes.func,
	    shouldDisableDate: React.PropTypes.func,
	    shouldShowMonthDayPickerFirst: React.PropTypes.bool
	  },

	  windowListeners: {
	    'keydown': '_handleWindowKeyDown'
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      disableYearSelection: false,
	      initialDate: new Date(),
	      minDate: DateTime.addYears(new Date(), -100),
	      maxDate: DateTime.addYears(new Date(), 100),
	      shouldShowMonthDayPickerFirst: true
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      displayDate: DateTime.getFirstDayOfMonth(this.props.initialDate),
	      displayMonthDay: this.props.shouldShowMonthDayPickerFirst || true,
	      selectedDate: this.props.initialDate,
	      transitionDirection: 'left',
	      transitionEnter: true
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (nextProps.initialDate !== this.props.initialDate) {
	      var d = nextProps.initialDate || new Date();
	      this.setState({
	        displayDate: DateTime.getFirstDayOfMonth(d),
	        selectedDate: d
	      });
	    }

	    if (nextProps.shouldShowMonthDayPickerFirst) {
	      this.setState({ displayMonthDay: nextProps.shouldShowMonthDayPickerFirst });
	    }
	  },

	  render: function render() {
	    var yearCount = DateTime.yearDiff(this.props.maxDate, this.props.minDate) + 1;
	    var weekCount = DateTime.getWeekArray(this.state.displayDate).length;
	    var toolbarInteractions = this._getToolbarInteractions();
	    var isLandscape = this.props.mode === 'landscape';
	    var styles = {
	      root: {
	        fontSize: 12
	      },
	      calendarContainer: {
	        width: isLandscape ? 320 : '100%',
	        height: weekCount === 5 ? 284 : weekCount === 6 ? 324 : 244,
	        float: isLandscape ? 'right' : 'none',
	        transition: Transitions.easeOut('150ms', 'height'),
	        overflow: 'hidden'
	      },
	      yearContainer: {
	        width: 280,
	        overflow: 'hidden',
	        height: yearCount < 6 ? yearCount * 56 + 10 : weekCount === 5 ? 284 : weekCount === 6 ? 324 : 244,
	        float: isLandscape ? 'right' : 'none'
	      },
	      dateDisplay: {
	        width: isLandscape ? 120 : '',
	        height: isLandscape ? weekCount === 5 ? 238 : weekCount === 6 ? 278 : 198 : '100%',
	        float: isLandscape ? 'left' : 'none'
	      },
	      weekTitle: {
	        padding: '0 14px',
	        lineHeight: '12px',
	        opacity: '0.5',
	        height: 12,
	        fontWeight: '500',
	        margin: 0
	      },
	      weekTitleDay: {
	        listStyle: 'none',
	        float: 'left',
	        width: 37,
	        textAlign: 'center',
	        margin: '0 2px'
	      }
	    };

	    if (this.state.displayMonthDay) {
	      styles.yearContainer.display = 'none';
	    } else {
	      styles.calendarContainer.display = 'none';
	    }

	    return React.createElement(
	      ClearFix,
	      { style: this.mergeAndPrefix(styles.root) },
	      React.createElement(DateDisplay, {
	        disableYearSelection: this.props.disableYearSelection,
	        style: styles.dateDisplay,
	        selectedDate: this.state.selectedDate,
	        handleMonthDayClick: this._handleMonthDayClick,
	        handleYearClick: this._handleYearClick,
	        monthDaySelected: this.state.displayMonthDay,
	        mode: this.props.mode,
	        weekCount: weekCount }),
	      React.createElement(
	        'div',
	        { style: styles.calendarContainer },
	        React.createElement(CalendarToolbar, {
	          displayDate: this.state.displayDate,
	          onMonthChange: this._handleMonthChange,
	          prevMonth: toolbarInteractions.prevMonth,
	          nextMonth: toolbarInteractions.nextMonth }),
	        React.createElement(
	          ClearFix,
	          {
	            elementType: 'ul',
	            style: styles.weekTitle },
	          React.createElement(
	            'li',
	            { style: styles.weekTitleDay },
	            'S'
	          ),
	          React.createElement(
	            'li',
	            { style: styles.weekTitleDay },
	            'M'
	          ),
	          React.createElement(
	            'li',
	            { style: styles.weekTitleDay },
	            'T'
	          ),
	          React.createElement(
	            'li',
	            { style: styles.weekTitleDay },
	            'W'
	          ),
	          React.createElement(
	            'li',
	            { style: styles.weekTitleDay },
	            'T'
	          ),
	          React.createElement(
	            'li',
	            { style: styles.weekTitleDay },
	            'F'
	          ),
	          React.createElement(
	            'li',
	            { style: styles.weekTitleDay },
	            'S'
	          )
	        ),
	        React.createElement(
	          SlideInTransitionGroup,
	          {
	            direction: this.state.transitionDirection },
	          React.createElement(CalendarMonth, {
	            key: this.state.displayDate.toDateString(),
	            ref: 'calendar',
	            displayDate: this.state.displayDate,
	            onDayTouchTap: this._handleDayTouchTap,
	            selectedDate: this.state.selectedDate,
	            minDate: this.props.minDate,
	            maxDate: this.props.maxDate,
	            shouldDisableDate: this.props.shouldDisableDate })
	        )
	      ),
	      React.createElement(
	        'div',
	        { style: styles.yearContainer },
	        this._yearSelector()
	      )
	    );
	  },

	  _yearSelector: function _yearSelector() {
	    if (this.props.disableYearSelection) return;

	    return React.createElement(CalendarYear, {
	      key: 'years',
	      displayDate: this.state.displayDate,
	      onYearTouchTap: this._handleYearTouchTap,
	      selectedDate: this.state.selectedDate,
	      minDate: this.props.minDate,
	      maxDate: this.props.maxDate });
	  },

	  getSelectedDate: function getSelectedDate() {
	    return this.state.selectedDate;
	  },

	  isSelectedDateDisabled: function isSelectedDateDisabled() {
	    return this.refs.calendar.isSelectedDateDisabled();
	  },

	  _addSelectedDays: function _addSelectedDays(days) {
	    this._setSelectedDate(DateTime.addDays(this.state.selectedDate, days));
	  },

	  _addSelectedMonths: function _addSelectedMonths(months) {
	    this._setSelectedDate(DateTime.addMonths(this.state.selectedDate, months));
	  },

	  _addSelectedYears: function _addSelectedYears(years) {
	    this._setSelectedDate(DateTime.addYears(this.state.selectedDate, years));
	  },

	  _setDisplayDate: function _setDisplayDate(d, newSelectedDate) {
	    var newDisplayDate = DateTime.getFirstDayOfMonth(d);
	    var direction = newDisplayDate > this.state.displayDate ? 'left' : 'right';

	    if (newDisplayDate !== this.state.displayDate) {
	      this.setState({
	        displayDate: newDisplayDate,
	        transitionDirection: direction,
	        selectedDate: newSelectedDate || this.state.selectedDate
	      });
	    }
	  },

	  _setSelectedDate: function _setSelectedDate(date) {
	    var adjustedDate = date;
	    if (DateTime.isBeforeDate(date, this.props.minDate)) {
	      adjustedDate = this.props.minDate;
	    } else if (DateTime.isAfterDate(date, this.props.maxDate)) {
	      adjustedDate = this.props.maxDate;
	    }

	    var newDisplayDate = DateTime.getFirstDayOfMonth(adjustedDate);
	    if (newDisplayDate !== this.state.displayDate) {
	      this._setDisplayDate(newDisplayDate, adjustedDate);
	    } else {
	      this.setState({
	        selectedDate: adjustedDate
	      });
	    }
	  },

	  _handleDayTouchTap: function _handleDayTouchTap(e, date) {
	    this._setSelectedDate(date);
	    if (this.props.onDayTouchTap) this.props.onDayTouchTap(e, date);
	  },

	  _handleMonthChange: function _handleMonthChange(months) {
	    this.setState({ displayDate: DateTime.addMonths(this.state.displayDate, months) });
	  },

	  _handleYearTouchTap: function _handleYearTouchTap(e, year) {
	    var date = DateTime.clone(this.state.selectedDate);
	    date.setFullYear(year);
	    this._setSelectedDate(date, e);
	  },

	  _getToolbarInteractions: function _getToolbarInteractions() {
	    return {
	      prevMonth: DateTime.monthDiff(this.state.selectedDate, this.props.minDate) > 0,
	      nextMonth: DateTime.monthDiff(this.state.selectedDate, this.props.maxDate) < 0
	    };
	  },

	  _handleMonthDayClick: function _handleMonthDayClick() {
	    this.setState({ displayMonthDay: true });
	  },

	  _handleYearClick: function _handleYearClick() {
	    this.setState({ displayMonthDay: false });
	  },

	  _handleWindowKeyDown: function _handleWindowKeyDown(e) {
	    if (this.props.isActive) {

	      switch (e.keyCode) {
	        case KeyCode.UP:
	          if (e.altKey && e.shiftKey) {
	            this._addSelectedYears(-1);
	          } else if (e.shiftKey) {
	            this._addSelectedMonths(-1);
	          } else {
	            this._addSelectedDays(-7);
	          }
	          break;

	        case KeyCode.DOWN:
	          if (e.altKey && e.shiftKey) {
	            this._addSelectedYears(1);
	          } else if (e.shiftKey) {
	            this._addSelectedMonths(1);
	          } else {
	            this._addSelectedDays(7);
	          }
	          break;

	        case KeyCode.RIGHT:
	          if (e.altKey && e.shiftKey) {
	            this._addSelectedYears(1);
	          } else if (e.shiftKey) {
	            this._addSelectedMonths(1);
	          } else {
	            this._addSelectedDays(1);
	          }
	          break;

	        case KeyCode.LEFT:
	          if (e.altKey && e.shiftKey) {
	            this._addSelectedYears(-1);
	          } else if (e.shiftKey) {
	            this._addSelectedMonths(-1);
	          } else {
	            this._addSelectedDays(-1);
	          }
	          break;
	      }
	    }
	  }

	});

	module.exports = Calendar;

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var DateTime = __webpack_require__(230);
	var DayButton = __webpack_require__(235);
	var ClearFix = __webpack_require__(225);

	var CalendarMonth = React.createClass({
	  displayName: 'CalendarMonth',

	  propTypes: {
	    displayDate: React.PropTypes.object.isRequired,
	    selectedDate: React.PropTypes.object.isRequired,
	    autoOk: React.PropTypes.bool,
	    maxDate: React.PropTypes.object,
	    minDate: React.PropTypes.object,
	    onDayTouchTap: React.PropTypes.func,
	    shouldDisableDate: React.PropTypes.func
	  },

	  render: function render() {
	    var styles = {
	      lineHeight: '32px',
	      textAlign: 'center',
	      padding: '16px 14px 0 14px'
	    };

	    return React.createElement(
	      'div',
	      { style: styles },
	      this._getWeekElements()
	    );
	  },

	  isSelectedDateDisabled: function isSelectedDateDisabled() {
	    return this._selectedDateDisabled;
	  },

	  _getWeekElements: function _getWeekElements() {
	    var _this = this;

	    var weekArray = DateTime.getWeekArray(this.props.displayDate);

	    return weekArray.map(function (week, i) {
	      return React.createElement(
	        ClearFix,
	        { key: i },
	        _this._getDayElements(week, i)
	      );
	    }, this);
	  },

	  _getDayElements: function _getDayElements(week, i) {
	    var _this2 = this;

	    return week.map(function (day, j) {
	      var isSameDate = DateTime.isEqualDate(_this2.props.selectedDate, day);
	      var disabled = _this2._shouldDisableDate(day);
	      var selected = !disabled && isSameDate;

	      if (isSameDate) {
	        if (disabled) {
	          _this2._selectedDateDisabled = true;
	        } else {
	          _this2._selectedDateDisabled = false;
	        }
	      }

	      return React.createElement(DayButton, {
	        key: 'db' + i + j,
	        date: day,
	        onTouchTap: _this2._handleDayTouchTap,
	        selected: selected,
	        disabled: disabled });
	    }, this);
	  },

	  _handleDayTouchTap: function _handleDayTouchTap(e, date) {
	    if (this.props.onDayTouchTap) this.props.onDayTouchTap(e, date);
	  },

	  _shouldDisableDate: function _shouldDisableDate(day) {
	    if (day === null) return false;
	    var disabled = !DateTime.isBetweenDates(day, this.props.minDate, this.props.maxDate);
	    if (!disabled && this.props.shouldDisableDate) disabled = this.props.shouldDisableDate(day);

	    return disabled;
	  }

	});

	module.exports = CalendarMonth;

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Transition = __webpack_require__(185);
	var DateTime = __webpack_require__(230);
	var EnhancedButton = __webpack_require__(187);

	var DayButton = React.createClass({
	  displayName: 'DayButton',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    date: React.PropTypes.object,
	    onTouchTap: React.PropTypes.func,
	    selected: React.PropTypes.bool,
	    disabled: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      selected: false,
	      disabled: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hover: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.datePicker;
	  },

	  render: function render() {
	    var _props = this.props;
	    var date = _props.date;
	    var onTouchTap = _props.onTouchTap;
	    var selected = _props.selected;

	    var other = _objectWithoutProperties(_props, ['date', 'onTouchTap', 'selected']);

	    var styles = {
	      root: {
	        boxSizing: 'border-box',
	        WebkitTapHighlightColor: 'rgba(0,0,0,0)',
	        position: 'relative',
	        float: 'left',
	        width: 41,
	        padding: '4px 2px'
	      },

	      label: {
	        position: 'relative',
	        color: this.context.muiTheme.palette.textColor
	      },

	      buttonState: {
	        position: 'absolute',
	        height: 36,
	        width: 36,
	        top: 2,
	        opacity: 0,
	        borderRadius: '50%',
	        transform: 'scale(0)',
	        transition: Transition.easeOut(),
	        backgroundColor: this.getTheme().selectColor
	      }
	    };

	    if (this.state.hover) {
	      styles.label.color = this.getTheme().selectTextColor;
	      styles.buttonState.opacity = '0.6';
	      styles.buttonState.transform = 'scale(1)';
	    }

	    if (this.props.selected) {
	      styles.label.color = this.getTheme().selectTextColor;
	      styles.buttonState.opacity = 1;
	      styles.buttonState.transform = 'scale(1)';
	    } else if (this.props.disabled) {
	      styles.root.opacity = '0.6';
	    }

	    if (DateTime.isEqualDate(this.props.date, new Date()) && !this.props.selected) {
	      styles.label.color = this.getTheme().color;
	    }

	    return this.props.date ? React.createElement(
	      EnhancedButton,
	      _extends({}, other, {
	        style: styles.root,
	        hoverStyle: styles.hover,
	        disabled: this.props.disabled,
	        disableFocusRipple: true,
	        disableTouchRipple: true,
	        onMouseEnter: this._handleMouseEnter,
	        onMouseLeave: this._handleMouseLeave,
	        onTouchTap: this._handleTouchTap,
	        onKeyboardFocus: this._handleKeyboardFocus }),
	      React.createElement('div', { style: styles.buttonState }),
	      React.createElement(
	        'span',
	        { style: styles.label },
	        this.props.date.getDate()
	      )
	    ) : React.createElement('span', { style: styles.root });
	  },

	  _handleMouseEnter: function _handleMouseEnter() {
	    if (!this.props.disabled) this.setState({ hover: true });
	  },

	  _handleMouseLeave: function _handleMouseLeave() {
	    if (!this.props.disabled) this.setState({ hover: false });
	  },

	  _handleTouchTap: function _handleTouchTap(e) {
	    if (!this.props.disabled && this.props.onTouchTap) this.props.onTouchTap(e, this.props.date);
	  },

	  _handleKeyboardFocus: function _handleKeyboardFocus(e, keyboardFocused) {
	    if (!this.props.disabled && this.props.onKeyboardFocus) this.props.onKeyboardFocus(e, keyboardFocused, this.props.date);
	  }

	});

	module.exports = DayButton;

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Colors = __webpack_require__(183);
	var DateTime = __webpack_require__(230);
	var YearButton = __webpack_require__(237);

	var CalendarYear = React.createClass({
	  displayName: 'CalendarYear',

	  mixins: [StylePropable],

	  propTypes: {
	    displayDate: React.PropTypes.object.isRequired,
	    onYearTouchTap: React.PropTypes.func,
	    selectedDate: React.PropTypes.object.isRequired,
	    minDate: React.PropTypes.object,
	    maxDate: React.PropTypes.object
	  },

	  componentDidMount: function componentDidMount() {
	    this._scrollToSelectedYear();
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this._scrollToSelectedYear();
	  },

	  render: function render() {
	    var years = this._getYears();
	    var styles = {
	      position: 'relative',
	      height: 'inherit',
	      lineHeight: '36px',
	      textAlign: 'center',
	      padding: '8px 14px 0 14px',
	      backgroundColor: Colors.white,
	      overflowX: 'hidden',
	      overflowY: 'scroll'
	    };

	    return React.createElement(
	      'div',
	      { style: styles },
	      years
	    );
	  },

	  _getYears: function _getYears() {
	    var minYear = this.props.minDate.getFullYear();
	    var maxYear = this.props.maxDate.getFullYear();

	    var years = [];
	    var dateCheck = DateTime.clone(this.props.selectedDate);
	    for (var year = minYear; year <= maxYear; year++) {
	      dateCheck.setFullYear(year);
	      if (!DateTime.isBetweenDates(dateCheck, this.props.minDate, this.props.maxDate)) continue;
	      var selected = this.props.selectedDate.getFullYear() === year;
	      var selectedProps = {};
	      if (selected) {
	        selectedProps = { ref: 'selectedYearButton' };
	      }

	      var yearButton = React.createElement(YearButton, _extends({
	        key: 'yb' + year,
	        year: year,
	        onTouchTap: this._handleYearTouchTap,
	        selected: selected
	      }, selectedProps));

	      years.push(yearButton);
	    }

	    return years;
	  },

	  _scrollToSelectedYear: function _scrollToSelectedYear() {
	    if (this.refs.selectedYearButton === undefined) return;

	    var container = this.getDOMNode();
	    var yearButtonNode = this.refs.selectedYearButton.getDOMNode();

	    var containerHeight = container.clientHeight;
	    var yearButtonNodeHeight = yearButtonNode.clientHeight || 32;

	    var scrollYOffset = yearButtonNode.offsetTop + yearButtonNodeHeight / 2 - containerHeight / 2;
	    container.scrollTop = scrollYOffset;
	  },

	  _handleYearTouchTap: function _handleYearTouchTap(e, year) {
	    if (this.props.onYearTouchTap) this.props.onYearTouchTap(e, year);
	  }

	});

	module.exports = CalendarYear;

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var EnhancedButton = __webpack_require__(187);

	var YearButton = React.createClass({
	  displayName: 'YearButton',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    year: React.PropTypes.number,
	    onTouchTap: React.PropTypes.func,
	    selected: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      selected: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hover: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.datePicker;
	  },

	  render: function render() {
	    var _props = this.props;
	    var className = _props.className;
	    var year = _props.year;
	    var onTouchTap = _props.onTouchTap;
	    var selected = _props.selected;

	    var other = _objectWithoutProperties(_props, ['className', 'year', 'onTouchTap', 'selected']);

	    var styles = {
	      root: {
	        boxSizing: 'border-box',
	        WebkitTapHighlightColor: 'rgba(0,0,0,0)',
	        position: 'relative',
	        display: 'block',
	        margin: '0 auto',
	        width: 36,
	        fontSize: 14,
	        padding: '8px 2px'
	      },

	      label: {
	        position: 'relative',
	        top: -1,
	        color: this.context.muiTheme.palette.textColor
	      },

	      buttonState: {
	        position: 'absolute',
	        height: 32,
	        width: 32,
	        opacity: 0,
	        borderRadius: '50%',
	        transform: 'scale(0)',
	        backgroundColor: this.getTheme().selectColor
	      }
	    };

	    if (this.state.hover) {
	      styles.label.color = this.getTheme().selectTextColor;
	      styles.buttonState.opacity = 0.6;
	      styles.buttonState.transform = 'scale(1.5)';
	    }

	    if (selected) {
	      styles.label.color = this.getTheme().selectTextColor;
	      styles.buttonState.opacity = 1;
	      styles.buttonState.transform = 'scale(1.5)';
	    }

	    if (year === new Date().getFullYear()) {
	      styles.root.color = this.getTheme().color;
	    }

	    return React.createElement(
	      EnhancedButton,
	      _extends({}, other, {
	        style: styles.root,
	        disableFocusRipple: true,
	        disableTouchRipple: true,
	        onMouseEnter: this._handleMouseEnter,
	        onMouseLeave: this._handleMouseLeave,
	        onTouchTap: this._handleTouchTap }),
	      React.createElement('div', { style: styles.buttonState }),
	      React.createElement(
	        'span',
	        { style: styles.label },
	        year
	      )
	    );
	  },

	  _handleMouseEnter: function _handleMouseEnter() {
	    this.setState({ hover: true });
	  },

	  _handleMouseLeave: function _handleMouseLeave() {
	    this.setState({ hover: false });
	  },

	  _handleTouchTap: function _handleTouchTap(e) {
	    if (this.props.onTouchTap) this.props.onTouchTap(e, this.props.year);
	  }

	});

	module.exports = YearButton;

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var DateTime = __webpack_require__(230);
	var IconButton = __webpack_require__(184);
	var Toolbar = __webpack_require__(239);
	var ToolbarGroup = __webpack_require__(240);
	var NavigationChevronLeft = __webpack_require__(241);
	var NavigationChevronRight = __webpack_require__(242);
	var SlideInTransitionGroup = __webpack_require__(243);

	var CalendarToolbar = React.createClass({
	  displayName: 'CalendarToolbar',

	  propTypes: {
	    displayDate: React.PropTypes.object.isRequired,
	    nextMonth: React.PropTypes.bool,
	    onMonthChange: React.PropTypes.func,
	    prevMonth: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      nextMonth: true,
	      prevMonth: true
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      transitionDirection: 'up'
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var direction = undefined;

	    if (nextProps.displayDate !== this.props.displayDate) {
	      direction = nextProps.displayDate > this.props.displayDate ? 'up' : 'down';
	      this.setState({
	        transitionDirection: direction
	      });
	    }
	  },

	  _styles: function _styles() {
	    return {
	      root: {
	        position: 'relative',
	        padding: 0,
	        backgroundColor: 'inherit'
	      },

	      title: {
	        position: 'absolute',
	        top: '17px',
	        lineHeight: '14px',
	        fontSize: '14px',
	        height: '14px',
	        width: '100%',
	        fontWeight: '500',
	        textAlign: 'center'
	      }
	    };
	  },

	  render: function render() {
	    var month = DateTime.getFullMonth(this.props.displayDate);
	    var year = this.props.displayDate.getFullYear();
	    var styles = this._styles();

	    return React.createElement(
	      Toolbar,
	      { className: 'mui-date-picker-calendar-toolbar', style: styles.root, noGutter: true },
	      React.createElement(
	        SlideInTransitionGroup,
	        {
	          style: styles.title,
	          direction: this.state.transitionDirection },
	        React.createElement(
	          'div',
	          { key: month + '_' + year },
	          month,
	          ' ',
	          year
	        )
	      ),
	      React.createElement(
	        ToolbarGroup,
	        { key: 0, float: 'left' },
	        React.createElement(
	          IconButton,
	          {
	            style: styles.button,
	            disabled: !this.props.prevMonth,
	            onTouchTap: this._prevMonthTouchTap },
	          React.createElement(NavigationChevronLeft, null)
	        )
	      ),
	      React.createElement(
	        ToolbarGroup,
	        { key: 1, float: 'right' },
	        React.createElement(
	          IconButton,
	          {
	            style: styles.button,
	            disabled: !this.props.nextMonth,
	            onTouchTap: this._nextMonthTouchTap },
	          React.createElement(NavigationChevronRight, null)
	        )
	      )
	    );
	  },

	  _prevMonthTouchTap: function _prevMonthTouchTap() {
	    if (this.props.onMonthChange && this.props.prevMonth) this.props.onMonthChange(-1);
	  },

	  _nextMonthTouchTap: function _nextMonthTouchTap() {
	    if (this.props.onMonthChange && this.props.nextMonth) this.props.onMonthChange(1);
	  }

	});

	module.exports = CalendarToolbar;

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);

	var Toolbar = React.createClass({
	  displayName: 'Toolbar',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    className: React.PropTypes.string,
	    style: React.PropTypes.object
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.toolbar;
	  },

	  getStyles: function getStyles() {
	    return this.mergeAndPrefix({
	      boxSizing: 'border-box',
	      WebkitTapHighlightColor: 'rgba(0,0,0,0)',
	      backgroundColor: this.getTheme().backgroundColor,
	      height: this.getTheme().height,
	      width: '100%',
	      padding: this.props.noGutter ? 0 : '0px ' + this.context.muiTheme.spacing.desktopGutter + 'px'
	    }, this.props.style);
	  },

	  render: function render() {
	    return React.createElement(
	      'div',
	      { className: this.props.className, style: this.getStyles() },
	      this.props.children
	    );
	  }

	});

	module.exports = Toolbar;

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var Colors = __webpack_require__(183);
	var StylePropable = __webpack_require__(159);

	var ToolbarGroup = React.createClass({
	  displayName: 'ToolbarGroup',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    className: React.PropTypes.string,
	    float: React.PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      float: 'left'
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.toolbar;
	  },

	  getSpacing: function getSpacing() {
	    return this.context.muiTheme.spacing.desktopGutter;
	  },

	  getStyles: function getStyles() {
	    var marginHorizontal = this.getSpacing();
	    var marginVertical = (this.getTheme().height - this.context.muiTheme.component.button.height) / 2;
	    var styles = {
	      root: {
	        position: 'relative',
	        float: this.props.float
	      },
	      dropDownMenu: {
	        root: {
	          float: 'left',
	          color: Colors.lightBlack, // removes hover color change, we want to keep it
	          display: 'inline-block',
	          marginRight: this.getSpacing()
	        },
	        controlBg: {
	          backgroundColor: this.getTheme().menuHoverColor,
	          borderRadius: 0
	        },
	        underline: {
	          display: 'none'
	        }
	      },
	      button: {
	        float: 'left',
	        margin: marginVertical + 'px ' + marginHorizontal + 'px',
	        position: 'relative'
	      },
	      icon: {
	        root: {
	          float: 'left',
	          cursor: 'pointer',
	          color: this.getTheme().iconColor,
	          lineHeight: this.getTheme().height + 'px',
	          paddingLeft: this.getSpacing()
	        },
	        hover: {
	          color: Colors.darkBlack
	        }
	      },
	      span: {
	        float: 'left',
	        color: this.getTheme().iconColor,
	        lineHeight: this.getTheme().height + 'px'
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _this = this;

	    var styles = this.getStyles();

	    if (this.props.firstChild) styles.marginLeft = -24;
	    if (this.props.lastChild) styles.marginRight = -24;

	    var newChildren = React.Children.map(this.props.children, function (currentChild) {
	      if (!currentChild) {
	        return null;
	      }
	      switch (currentChild.type.displayName) {
	        case 'DropDownMenu':
	          return React.cloneElement(currentChild, {
	            style: _this.mergeStyles(styles.dropDownMenu.root, currentChild.props.style),
	            styleControlBg: styles.dropDownMenu.controlBg,
	            styleUnderline: styles.dropDownMenu.underline
	          });
	        case 'DropDownIcon':
	          return React.cloneElement(currentChild, {
	            style: _this.mergeStyles({ float: 'left' }, currentChild.props.style),
	            iconStyle: styles.icon.root,
	            onMouseEnter: _this._handleMouseEnterDropDownMenu,
	            onMouseLeave: _this._handleMouseLeaveDropDownMenu
	          });
	        case 'RaisedButton':case 'FlatButton':
	          return React.cloneElement(currentChild, {
	            style: _this.mergeStyles(styles.button, currentChild.props.style)
	          });
	        case 'FontIcon':
	          return React.cloneElement(currentChild, {
	            style: _this.mergeStyles(styles.icon.root, currentChild.props.style),
	            onMouseEnter: _this._handleMouseEnterFontIcon,
	            onMouseLeave: _this._handleMouseLeaveFontIcon
	          });
	        case 'ToolbarSeparator':case 'ToolbarTitle':
	          return React.cloneElement(currentChild, {
	            style: _this.mergeStyles(styles.span, currentChild.props.style)
	          });
	        default:
	          return currentChild;
	      }
	    }, this);

	    return React.createElement(
	      'div',
	      { className: this.props.className, style: this.mergeAndPrefix(styles.root, this.props.style) },
	      newChildren
	    );
	  },

	  _handleMouseEnterDropDownMenu: function _handleMouseEnterDropDownMenu(e) {
	    e.target.style.zIndex = this.getStyles().icon.hover.zIndex;
	    e.target.style.color = this.getStyles().icon.hover.color;
	  },

	  _handleMouseLeaveDropDownMenu: function _handleMouseLeaveDropDownMenu(e) {
	    e.target.style.zIndex = 'auto';
	    e.target.style.color = this.getStyles().icon.root.color;
	  },

	  _handleMouseEnterFontIcon: function _handleMouseEnterFontIcon(e) {
	    e.target.style.zIndex = this.getStyles().icon.hover.zIndex;
	    e.target.style.color = this.getStyles().icon.hover.color;
	  },

	  _handleMouseLeaveFontIcon: function _handleMouseLeaveFontIcon(e) {
	    e.target.style.zIndex = 'auto';
	    e.target.style.color = this.getStyles().icon.root.color;
	  }
	});

	module.exports = ToolbarGroup;

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(200);

	var NavigationChevronLeft = React.createClass({
	  displayName: 'NavigationChevronLeft',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z' })
	    );
	  }

	});

	module.exports = NavigationChevronLeft;

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(200);

	var NavigationChevronRight = React.createClass({
	  displayName: 'NavigationChevronRight',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z' })
	    );
	  }

	});

	module.exports = NavigationChevronRight;

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(161);
	var ReactTransitionGroup = React.addons.TransitionGroup;
	var StylePropable = __webpack_require__(159);
	var SlideInChild = __webpack_require__(244);

	var SlideIn = React.createClass({
	  displayName: 'SlideIn',

	  mixins: [StylePropable],

	  propTypes: {
	    enterDelay: React.PropTypes.number,
	    childStyle: React.PropTypes.object,
	    direction: React.PropTypes.oneOf(['left', 'right', 'up', 'down'])
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      enterDelay: 0,
	      direction: 'left'
	    };
	  },

	  render: function render() {
	    var _this = this;

	    var _props = this.props;
	    var enterDelay = _props.enterDelay;
	    var children = _props.children;
	    var childStyle = _props.childStyle;
	    var direction = _props.direction;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['enterDelay', 'children', 'childStyle', 'direction', 'style']);

	    var mergedRootStyles = this.mergeAndPrefix({
	      position: 'relative',
	      overflow: 'hidden',
	      height: '100%'
	    }, style);

	    var newChildren = React.Children.map(children, function (child) {
	      return React.createElement(
	        SlideInChild,
	        {
	          key: child.key,
	          direction: direction,
	          enterDelay: enterDelay,
	          getLeaveDirection: _this._getLeaveDirection,
	          style: childStyle },
	        child
	      );
	    }, this);

	    return React.createElement(
	      ReactTransitionGroup,
	      _extends({}, other, {
	        style: mergedRootStyles,
	        component: 'div' }),
	      newChildren
	    );
	  },

	  _getLeaveDirection: function _getLeaveDirection() {
	    return this.props.direction;
	  }

	});

	module.exports = SlideIn;

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(161);
	var StylePropable = __webpack_require__(159);
	var AutoPrefix = __webpack_require__(180);
	var Transitions = __webpack_require__(185);

	var SlideInChild = React.createClass({
	  displayName: 'SlideInChild',

	  mixins: [StylePropable],

	  propTypes: {
	    enterDelay: React.PropTypes.number,
	    //This callback is needed bacause
	    //the direction could change when leaving the dom
	    getLeaveDirection: React.PropTypes.func.isRequired
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      enterDelay: 0
	    };
	  },

	  componentWillEnter: function componentWillEnter(callback) {
	    var _this = this;

	    var style = React.findDOMNode(this).style;
	    var x = this.props.direction === 'left' ? '100%' : this.props.direction === 'right' ? '-100%' : '0';
	    var y = this.props.direction === 'up' ? '100%' : this.props.direction === 'down' ? '-100%' : '0';

	    style.opacity = '0';
	    AutoPrefix.set(style, 'transform', 'translate3d(' + x + ',' + y + ',0)');

	    setTimeout((function () {
	      if (_this.isMounted()) callback();
	    }).bind(this), this.props.enterDelay);
	  },

	  componentDidEnter: function componentDidEnter() {
	    var style = React.findDOMNode(this).style;
	    style.opacity = '1';
	    AutoPrefix.set(style, 'transform', 'translate3d(0,0,0)');
	  },

	  componentWillLeave: function componentWillLeave(callback) {
	    var _this2 = this;

	    var style = React.findDOMNode(this).style;
	    var direction = this.props.getLeaveDirection();
	    var x = direction === 'left' ? '-100%' : direction === 'right' ? '100%' : '0';
	    var y = direction === 'up' ? '-100%' : direction === 'down' ? '100%' : '0';

	    style.opacity = '0';
	    AutoPrefix.set(style, 'transform', 'translate3d(' + x + ',' + y + ',0)');

	    setTimeout((function () {
	      if (_this2.isMounted()) callback();
	    }).bind(this), 450);
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var enterDelay = _props.enterDelay;
	    var getLeaveDirection = _props.getLeaveDirection;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['children', 'enterDelay', 'getLeaveDirection', 'style']);

	    var mergedRootStyles = this.mergeAndPrefix({
	      position: 'absolute',
	      height: '100%',
	      width: '100%',
	      top: 0,
	      left: 0,
	      transition: Transitions.easeOut(null, ['transform', 'opacity'])
	    }, style);

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: mergedRootStyles }),
	      children
	    );
	  }

	});

	module.exports = SlideInChild;

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var DateTime = __webpack_require__(230);
	var Transitions = __webpack_require__(185);
	var SlideInTransitionGroup = __webpack_require__(243);

	var DateDisplay = React.createClass({
	  displayName: 'DateDisplay',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    disableYearSelection: React.PropTypes.bool,
	    monthDaySelected: React.PropTypes.bool,
	    selectedDate: React.PropTypes.object.isRequired,
	    weekCount: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      disableYearSelection: false,
	      monthDaySelected: true,
	      weekCount: 4
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      selectedYear: !this.props.monthDaySelected,
	      transitionDirection: 'up'
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var direction = undefined;

	    if (nextProps.selectedDate !== this.props.selectedDate) {
	      direction = nextProps.selectedDate > this.props.selectedDate ? 'up' : 'down';
	      this.setState({
	        transitionDirection: direction
	      });
	    }

	    if (nextProps.monthDaySelected !== undefined) {
	      this.setState({ selectedYear: !nextProps.monthDaySelected });
	    }
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.datePicker;
	  },

	  getStyles: function getStyles() {
	    var theme = this.getTheme();
	    var isLandscape = this.props.mode === 'landscape';

	    var styles = {
	      root: {
	        backgroundColor: theme.selectColor,
	        borderTopLeftRadius: 2,
	        borderTopRightRadius: 2,
	        color: theme.textColor,
	        height: 60,
	        padding: 20
	      },

	      month: {
	        display: isLandscape ? 'block' : undefined,
	        marginLeft: isLandscape ? undefined : 8,
	        marginTop: isLandscape ? 5 : undefined
	      },

	      monthDay: {
	        root: {
	          display: 'inline-block',
	          fontSize: 36,
	          fontWeight: '400',
	          lineHeight: '36px',
	          height: isLandscape ? 76 : 38,
	          opacity: this.state.selectedYear ? 0.7 : 1.0,
	          transition: Transitions.easeOut(),
	          width: '100%'
	        },

	        title: {
	          cursor: !this.state.selectedYear ? 'default' : 'pointer'
	        }
	      },

	      year: {
	        root: {
	          margin: 0,
	          fontSize: 16,
	          fontWeight: '400',
	          lineHeight: '16px',
	          height: 16,
	          opacity: this.state.selectedYear ? 1.0 : 0.7,
	          transition: Transitions.easeOut(),
	          marginBottom: 10
	        },

	        title: {
	          cursor: this.state.selectedYear && !this.props.disableYearSelection ? 'pointer' : 'default'
	        }
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var selectedDate = _props.selectedDate;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['selectedDate', 'style']);

	    var dayOfWeek = DateTime.getDayOfWeek(this.props.selectedDate);
	    var month = DateTime.getShortMonth(this.props.selectedDate);
	    var day = this.props.selectedDate.getDate();
	    var year = this.props.selectedDate.getFullYear();
	    var styles = this.getStyles();

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: this.mergeAndPrefix(styles.root, this.props.style) }),
	      React.createElement(
	        SlideInTransitionGroup,
	        {
	          style: styles.year.root,
	          direction: this.state.transitionDirection },
	        React.createElement(
	          'div',
	          { key: year, style: styles.year.title, onTouchTap: this._handleYearClick },
	          year
	        )
	      ),
	      React.createElement(
	        SlideInTransitionGroup,
	        {
	          style: styles.monthDay.root,
	          direction: this.state.transitionDirection },
	        React.createElement(
	          'div',
	          {
	            key: dayOfWeek + month + day,
	            style: styles.monthDay.title,
	            onTouchTap: this._handleMonthDayClick },
	          React.createElement(
	            'span',
	            null,
	            dayOfWeek,
	            ','
	          ),
	          React.createElement(
	            'span',
	            { style: styles.month },
	            month,
	            ' ',
	            day
	          )
	        )
	      )
	    );
	  },

	  _handleMonthDayClick: function _handleMonthDayClick() {
	    if (this.props.handleMonthDayClick && this.state.selectedYear) {
	      this.props.handleMonthDayClick();
	    }

	    this.setState({ selectedYear: false });
	  },

	  _handleYearClick: function _handleYearClick() {
	    if (this.props.handleYearClick && !this.props.disableYearSelection && !this.state.selectedYear) {
	      this.props.handleYearClick();
	    }

	    if (!this.props.disableYearSelection) {
	      this.setState({ selectedYear: true });
	    }
	  }

	});

	module.exports = DateDisplay;

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(161);
	var WindowListenable = __webpack_require__(224);
	var CssEvent = __webpack_require__(232);
	var KeyCode = __webpack_require__(190);
	var Transitions = __webpack_require__(185);
	var StylePropable = __webpack_require__(159);
	var FlatButton = __webpack_require__(247);
	var Overlay = __webpack_require__(249);
	var Paper = __webpack_require__(201);

	var ReactTransitionGroup = React.addons.TransitionGroup;

	var TransitionItem = React.createClass({
	  displayName: 'TransitionItem',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  getInitialState: function getInitialState() {
	    return {
	      style: {}
	    };
	  },

	  componentWillEnter: function componentWillEnter(callback) {
	    var spacing = this.context.muiTheme.spacing;

	    this.setState({
	      style: {
	        opacity: 1,
	        transform: 'translate3d(0, ' + spacing.desktopKeylineIncrement + 'px, 0)'
	      }
	    });

	    setTimeout(callback, 450); // matches transition duration
	  },

	  componentWillLeave: function componentWillLeave(callback) {
	    var _this = this;

	    this.setState({
	      style: {
	        opacity: 0,
	        transform: 'translate3d(0, 0, 0)'
	      }
	    });

	    setTimeout((function () {
	      if (_this.isMounted()) callback();
	    }).bind(this), 450); // matches transition duration
	  },

	  render: function render() {
	    var _props = this.props;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['style']);

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: this.mergeAndPrefix(this.state.style, style) }),
	      this.props.children
	    );
	  }
	});

	var Dialog = React.createClass({
	  displayName: 'Dialog',

	  mixins: [WindowListenable, StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    actions: React.PropTypes.array,
	    autoDetectWindowHeight: React.PropTypes.bool,
	    autoScrollBodyContent: React.PropTypes.bool,
	    bodyStyle: React.PropTypes.object,
	    contentClassName: React.PropTypes.string,
	    contentStyle: React.PropTypes.object,
	    modal: React.PropTypes.bool,
	    openImmediately: React.PropTypes.bool,
	    onClickAway: React.PropTypes.func,
	    onDismiss: React.PropTypes.func,
	    onShow: React.PropTypes.func,
	    repositionOnUpdate: React.PropTypes.bool,
	    title: React.PropTypes.node
	  },

	  windowListeners: {
	    keyup: '_handleWindowKeyUp',
	    resize: '_positionDialog'
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      autoDetectWindowHeight: false,
	      autoScrollBodyContent: false,
	      actions: [],
	      modal: false,
	      repositionOnUpdate: true
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      open: this.props.openImmediately || false
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    this._positionDialog();
	    if (this.props.openImmediately) {
	      this.refs.dialogOverlay.preventScrolling();
	      this._onShow();
	    }
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this._positionDialog();
	  },

	  getStyles: function getStyles() {
	    var spacing = this.context.muiTheme.spacing;

	    var main = {
	      position: 'fixed',
	      boxSizing: 'border-box',
	      WebkitTapHighlightColor: 'rgba(0,0,0,0)',
	      zIndex: 10,
	      top: 0,
	      left: -10000,
	      width: '100%',
	      height: '100%',
	      transition: Transitions.easeOut('0ms', 'left', '450ms')
	    };

	    var content = {
	      boxSizing: 'border-box',
	      WebkitTapHighlightColor: 'rgba(0,0,0,0)',
	      transition: Transitions.easeOut(),
	      position: 'relative',
	      width: '75%',
	      maxWidth: spacing.desktopKeylineIncrement * 12,
	      margin: '0 auto',
	      zIndex: 10
	    };

	    var body = {
	      padding: spacing.desktopGutter,
	      overflowY: this.props.autoScrollBodyContent ? 'auto' : 'hidden',
	      overflowX: 'hidden'
	    };

	    var gutter = spacing.desktopGutter + 'px ';
	    var title = {
	      margin: 0,
	      padding: gutter + gutter + '0 ' + gutter,
	      color: this.context.muiTheme.palette.textColor,
	      fontSize: 24,
	      lineHeight: '32px',
	      fontWeight: '400'
	    };

	    if (this.state.open) {
	      main = this.mergeAndPrefix(main, {
	        left: 0,
	        transition: Transitions.easeOut('0ms', 'left', '0ms')
	      });
	    }

	    return {
	      main: this.mergeAndPrefix(main, this.props.style),
	      content: this.mergeAndPrefix(content, this.props.contentStyle),
	      paper: {
	        background: this.context.muiTheme.canvasColor
	      },
	      body: this.mergeStyles(body, this.props.bodyStyle),
	      title: this.mergeStyles(title, this.props.titleStyle)
	    };
	  },

	  render: function render() {
	    var styles = this.getStyles();
	    var actions = this._getActionsContainer(this.props.actions);
	    var title = undefined;
	    if (this.props.title) {
	      // If the title is a string, wrap in an h3 tag.
	      // If not, just use it as a node.
	      title = Object.prototype.toString.call(this.props.title) === '[object String]' ? React.createElement(
	        'h3',
	        { style: styles.title },
	        this.props.title
	      ) : this.props.title;
	    }

	    return React.createElement(
	      'div',
	      { ref: 'container', style: styles.main },
	      React.createElement(
	        ReactTransitionGroup,
	        { component: 'div', ref: 'dialogWindow' },
	        this.state.open && React.createElement(
	          TransitionItem,
	          {
	            className: this.props.contentClassName,
	            style: styles.content },
	          React.createElement(
	            Paper,
	            {
	              style: styles.paper,
	              zDepth: 4 },
	            title,
	            React.createElement(
	              'div',
	              { ref: 'dialogContent', style: styles.body },
	              this.props.children
	            ),
	            actions
	          )
	        )
	      ),
	      React.createElement(Overlay, {
	        ref: 'dialogOverlay',
	        show: this.state.open,
	        autoLockScrolling: false,
	        onTouchTap: this._handleOverlayTouchTap })
	    );
	  },

	  isOpen: function isOpen() {
	    return this.state.open;
	  },

	  dismiss: function dismiss() {
	    var _this2 = this;

	    CssEvent.onTransitionEnd(this.getDOMNode(), (function () {
	      _this2.refs.dialogOverlay.allowScrolling();
	    }).bind(this));

	    this.setState({ open: false });
	    this._onDismiss();
	  },

	  show: function show() {
	    this.refs.dialogOverlay.preventScrolling();
	    this.setState({ open: true }, this._onShow);
	  },

	  _getAction: function _getAction(actionJSON, key) {
	    var _this3 = this;

	    var styles = { marginRight: 8 };
	    var props = {
	      key: key,
	      secondary: true,
	      onClick: actionJSON.onClick,
	      onTouchTap: function onTouchTap() {
	        if (actionJSON.onTouchTap) {
	          actionJSON.onTouchTap.call(undefined);
	        }
	        if (!(actionJSON.onClick || actionJSON.onTouchTap)) {
	          _this3.dismiss();
	        }
	      },
	      label: actionJSON.text,
	      style: styles
	    };
	    if (actionJSON.ref) {
	      props.ref = actionJSON.ref;
	      props.keyboardFocused = actionJSON.ref === this.props.actionFocus;
	    }

	    return React.createElement(FlatButton, props);
	  },

	  _getActionsContainer: function _getActionsContainer(actions) {
	    var actionContainer = undefined;
	    var actionObjects = [];
	    var actionStyle = {
	      boxSizing: 'border-box',
	      WebkitTapHighlightColor: 'rgba(0,0,0,0)',
	      padding: 8,
	      marginBottom: 8,
	      width: '100%',
	      textAlign: 'right'
	    };

	    if (actions.length) {
	      for (var i = 0; i < actions.length; i++) {
	        var currentAction = actions[i];

	        //if the current action isn't a react object, create one
	        if (!React.isValidElement(currentAction)) {
	          currentAction = this._getAction(currentAction, i);
	        }

	        actionObjects.push(currentAction);
	      }

	      actionContainer = React.createElement(
	        'div',
	        { style: actionStyle },
	        actionObjects
	      );
	    }

	    return actionContainer;
	  },

	  _positionDialog: function _positionDialog() {
	    if (this.state.open) {
	      var clientHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
	      var container = this.getDOMNode();
	      var dialogWindow = this.refs.dialogWindow.getDOMNode();
	      var dialogContent = this.refs.dialogContent.getDOMNode();
	      var minPaddingTop = 16;

	      //Reset the height in case the window was resized.
	      dialogWindow.style.height = '';
	      dialogContent.style.height = '';

	      var dialogWindowHeight = dialogWindow.offsetHeight;
	      var paddingTop = (clientHeight - dialogWindowHeight) / 2 - 64;
	      if (paddingTop < minPaddingTop) paddingTop = minPaddingTop;

	      //Vertically center the dialog window, but make sure it doesn't
	      //transition to that position.
	      if (this.props.repositionOnUpdate || !container.style.paddingTop) {
	        container.style.paddingTop = paddingTop + 'px';
	      }

	      // Force a height if the dialog is taller than clientHeight
	      if (this.props.autoDetectWindowHeight || this.props.autoScrollBodyContent) {
	        var styles = this.getStyles();
	        var maxDialogContentHeight = clientHeight - 2 * (styles.body.padding + 64);

	        if (this.props.title) maxDialogContentHeight -= dialogContent.previousSibling.offsetHeight;
	        if (this.props.actions) maxDialogContentHeight -= dialogContent.nextSibling.offsetHeight;

	        dialogContent.style.maxHeight = maxDialogContentHeight + 'px';
	      }
	    }
	  },

	  _onShow: function _onShow() {
	    if (this.props.onShow) this.props.onShow();
	  },

	  _onDismiss: function _onDismiss() {
	    if (this.props.onDismiss) this.props.onDismiss();
	  },

	  _handleOverlayTouchTap: function _handleOverlayTouchTap(e) {
	    if (this.props.modal) {
	      e.stopPropagation();
	    } else {
	      this.dismiss();
	      if (this.props.onClickAway) this.props.onClickAway();
	    }
	  },

	  _handleWindowKeyUp: function _handleWindowKeyUp(e) {
	    if (e.keyCode === KeyCode.ESC && !this.props.modal) {
	      this.dismiss();
	    }
	  }

	});

	module.exports = Dialog;

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var Transitions = __webpack_require__(185);
	var Children = __webpack_require__(188);
	var ColorManipulator = __webpack_require__(216);
	var ImmutabilityHelper = __webpack_require__(160);
	var Typography = __webpack_require__(182);
	var EnhancedButton = __webpack_require__(187);
	var FlatButtonLabel = __webpack_require__(248);

	function validateLabel(props, propName, componentName) {
	  if (!props.children && !props.label) {
	    return new Error('Required prop label or children was not ' + 'specified in ' + componentName + '.');
	  }
	}

	var FlatButton = React.createClass({
	  displayName: 'FlatButton',

	  mixins: [PureRenderMixin],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    disabled: React.PropTypes.bool,
	    hoverColor: React.PropTypes.string,
	    label: validateLabel,
	    labelPosition: React.PropTypes.oneOf(['before', 'after']),
	    labelStyle: React.PropTypes.object,
	    onKeyboardFocus: React.PropTypes.func,
	    onMouseEnter: React.PropTypes.func,
	    onMouseLeave: React.PropTypes.func,
	    onTouchStart: React.PropTypes.func,
	    primary: React.PropTypes.bool,
	    rippleColor: React.PropTypes.string,
	    secondary: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      labelStyle: {},
	      labelPosition: 'before',
	      onKeyboardFocus: function onKeyboardFocus() {},
	      onMouseEnter: function onMouseEnter() {},
	      onMouseLeave: function onMouseLeave() {},
	      onTouchStart: function onTouchStart() {}
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hovered: false,
	      isKeyboardFocused: false,
	      touch: false
	    };
	  },

	  getContextProps: function getContextProps() {
	    var theme = this.context.muiTheme;
	    var buttonTheme = theme.component.button;
	    var flatButtonTheme = theme.component.flatButton;

	    return {
	      buttonColor: flatButtonTheme.color,
	      buttonHeight: buttonTheme.height,
	      buttonMinWidth: buttonTheme.minWidth,
	      disabledTextColor: flatButtonTheme.disabledTextColor,
	      primaryTextColor: flatButtonTheme.primaryTextColor,
	      secondaryTextColor: flatButtonTheme.secondaryTextColor,
	      textColor: flatButtonTheme.textColor
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var disabled = _props.disabled;
	    var hoverColor = _props.hoverColor;
	    var label = _props.label;
	    var labelStyle = _props.labelStyle;
	    var labelPosition = _props.labelPosition;
	    var onKeyboardFocus = _props.onKeyboardFocus;
	    var onMouseLeave = _props.onMouseLeave;
	    var onMouseEnter = _props.onMouseEnter;
	    var onTouchStart = _props.onTouchStart;
	    var primary = _props.primary;
	    var rippleColor = _props.rippleColor;
	    var secondary = _props.secondary;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['children', 'disabled', 'hoverColor', 'label', 'labelStyle', 'labelPosition', 'onKeyboardFocus', 'onMouseLeave', 'onMouseEnter', 'onTouchStart', 'primary', 'rippleColor', 'secondary', 'style']);

	    var contextProps = this.getContextProps();

	    var defaultColor = disabled ? contextProps.disabledTextColor : primary ? contextProps.primaryTextColor : secondary ? contextProps.secondaryTextColor : contextProps.textColor;

	    var defaultHoverColor = ColorManipulator.fade(ColorManipulator.lighten(defaultColor, 0.4), 0.15);
	    var defaultRippleColor = ColorManipulator.fade(defaultColor, 0.8);
	    var buttonHoverColor = hoverColor || defaultHoverColor;
	    var buttonRippleColor = rippleColor || defaultRippleColor;
	    var hovered = (this.state.hovered || this.state.isKeyboardFocused) && !disabled;

	    var mergedRootStyles = ImmutabilityHelper.merge({
	      color: defaultColor,
	      transition: Transitions.easeOut(),
	      fontSize: Typography.fontStyleButtonFontSize,
	      letterSpacing: 0,
	      textTransform: 'uppercase',
	      fontWeight: Typography.fontWeightMedium,
	      borderRadius: 2,
	      userSelect: 'none',
	      position: 'relative',
	      overflow: 'hidden',
	      backgroundColor: hovered ? buttonHoverColor : contextProps.buttonColor,
	      lineHeight: contextProps.buttonHeight + 'px',
	      minWidth: contextProps.buttonMinWidth,
	      padding: 0,
	      margin: 0,
	      //This is need so that ripples do not bleed past border radius.
	      //See: http://stackoverflow.com/questions/17298739
	      transform: 'translate3d(0, 0, 0)'
	    }, style);

	    var labelElement = label ? React.createElement(FlatButtonLabel, { label: label, style: labelStyle }) : undefined;
	    // Place label before or after children.
	    var childrenFragment = labelPosition === 'before' ? { labelElement: labelElement, children: children } : { children: children, labelElement: labelElement };
	    var enhancedButtonChildren = Children.create(childrenFragment);

	    return React.createElement(
	      EnhancedButton,
	      _extends({}, other, {
	        disabled: disabled,
	        focusRippleColor: buttonRippleColor,
	        onKeyboardFocus: this._handleKeyboardFocus,
	        onMouseLeave: this._handleMouseLeave,
	        onMouseEnter: this._handleMouseEnter,
	        onTouchStart: this._handleTouchStart,
	        style: mergedRootStyles,
	        touchRippleColor: buttonRippleColor }),
	      enhancedButtonChildren
	    );
	  },

	  _handleKeyboardFocus: function _handleKeyboardFocus(e, isKeyboardFocused) {
	    this.setState({ isKeyboardFocused: isKeyboardFocused });
	    this.props.onKeyboardFocus(e, isKeyboardFocused);
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    //Cancel hover styles for touch devices
	    if (!this.state.touch) this.setState({ hovered: true });
	    this.props.onMouseEnter(e);
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    this.setState({ hovered: false });
	    this.props.onMouseLeave(e);
	  },

	  _handleTouchStart: function _handleTouchStart(e) {
	    this.setState({ touch: true });
	    this.props.onTouchStart(e);
	  }

	});

	module.exports = FlatButton;

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var Styles = __webpack_require__(179);

	var FlatButtonLabel = React.createClass({
	  displayName: 'FlatButtonLabel',

	  mixins: [PureRenderMixin],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    label: React.PropTypes.node,
	    style: React.PropTypes.object
	  },

	  getContextProps: function getContextProps() {
	    var theme = this.context.muiTheme;

	    return {
	      spacingDesktopGutterLess: theme.spacing.desktopGutterLess
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var label = _props.label;
	    var style = _props.style;

	    var contextProps = this.getContextProps();

	    var mergedRootStyles = Styles.mergeAndPrefix({
	      position: 'relative',
	      padding: '0 ' + contextProps.spacingDesktopGutterLess + 'px'
	    }, style);

	    return React.createElement(
	      'span',
	      { style: mergedRootStyles },
	      label
	    );
	  }

	});

	module.exports = FlatButtonLabel;

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);
	var Colors = __webpack_require__(183);

	var Overlay = React.createClass({
	  displayName: 'Overlay',

	  _originalBodyOverflow: '',

	  mixins: [StylePropable],

	  propTypes: {
	    autoLockScrolling: React.PropTypes.bool,
	    show: React.PropTypes.bool,
	    transitionEnabled: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      autoLockScrolling: true,
	      transitionEnabled: true
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    this._originalBodyOverflow = document.getElementsByTagName('body')[0].style.oveflow;
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this.props.autoLockScrolling) {
	      if (this.props.show) {
	        this._preventScrolling();
	      } else {
	        this._allowScrolling();
	      }
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this._allowScrolling();
	  },

	  setOpacity: function setOpacity(opacity) {
	    var overlay = React.findDOMNode(this);
	    overlay.style.opacity = opacity;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        position: 'fixed',
	        height: '100%',
	        width: '100%',
	        zIndex: 9,
	        top: 0,
	        left: '-100%',
	        opacity: 0,
	        backgroundColor: Colors.lightBlack,
	        WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)',

	        // Two ways to promote overlay to its own render layer
	        willChange: 'opacity',
	        transform: 'translateZ(0)',

	        transition: this.props.transitionEnabled && Transitions.easeOut('0ms', 'left', '400ms') + ',' + Transitions.easeOut('400ms', 'opacity')
	      },
	      rootWhenShown: {
	        left: '0',
	        opacity: 1,
	        transition: this.props.transitionEnabled && Transitions.easeOut('0ms', 'left') + ',' + Transitions.easeOut('400ms', 'opacity')
	      }
	    };
	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var show = _props.show;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['show', 'style']);

	    var styles = this.mergeAndPrefix(this.getStyles().root, this.props.style, this.props.show && this.getStyles().rootWhenShown);

	    return React.createElement('div', _extends({}, other, { style: styles }));
	  },

	  preventScrolling: function preventScrolling() {
	    if (!this.props.autoLockScrolling) this._preventScrolling();
	  },

	  allowScrolling: function allowScrolling() {
	    if (!this.props.autoLockScrolling) this._allowScrolling();
	  },

	  _preventScrolling: function _preventScrolling() {
	    var body = document.getElementsByTagName('body')[0];
	    body.style.overflow = 'hidden';
	  },

	  _allowScrolling: function _allowScrolling() {
	    var body = document.getElementsByTagName('body')[0];
	    body.style.overflow = this._originalBodyOverflow || '';
	  }

	});

	module.exports = Overlay;

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var ColorManipulator = __webpack_require__(216);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);
	var UniqueId = __webpack_require__(223);
	var EnhancedTextarea = __webpack_require__(251);

	/**
	 * Check if a value is valid to be displayed inside an input.
	 *
	 * @param The value to check.
	 * @returns True if the string provided is valid, false otherwise.
	 */
	function isValid(value) {
	  return value || value === 0;
	}

	var TextField = React.createClass({
	  displayName: 'TextField',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    errorStyle: React.PropTypes.object,
	    errorText: React.PropTypes.string,
	    floatingLabelStyle: React.PropTypes.object,
	    floatingLabelText: React.PropTypes.string,
	    fullWidth: React.PropTypes.bool,
	    hintText: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element]),
	    id: React.PropTypes.string,
	    inputStyle: React.PropTypes.object,
	    multiLine: React.PropTypes.bool,
	    onBlur: React.PropTypes.func,
	    onChange: React.PropTypes.func,
	    onEnterKeyDown: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    onKeyDown: React.PropTypes.func,
	    rows: React.PropTypes.number,
	    type: React.PropTypes.string,
	    underlineStyle: React.PropTypes.object,
	    underlineFocusStyle: React.PropTypes.object,
	    underlineDisabledStyle: React.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      fullWidth: false,
	      type: 'text',
	      rows: 1
	    };
	  },

	  getContextProps: function getContextProps() {
	    var theme = this.context.muiTheme;

	    return {
	      isRtl: theme.isRtl
	    };
	  },

	  getInitialState: function getInitialState() {
	    var props = this.props.children ? this.props.children.props : this.props;

	    return {
	      errorText: this.props.errorText,
	      hasValue: isValid(props.value) || isValid(props.defaultValue) || props.valueLink && isValid(props.valueLink.value)
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.textField;
	  },

	  componentDidMount: function componentDidMount() {
	    this._uniqueId = UniqueId.generate();
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var newState = {};

	    newState.errorText = nextProps.errorText;
	    if (nextProps.children && nextProps.children.props) {
	      nextProps = nextProps.children.props;
	    }

	    var hasValueLinkProp = nextProps.hasOwnProperty('valueLink');
	    var hasValueProp = nextProps.hasOwnProperty('value');
	    var hasNewDefaultValue = nextProps.defaultValue !== this.props.defaultValue;

	    if (hasValueLinkProp) {
	      newState.hasValue = isValid(nextProps.valueLink.value);
	    } else if (hasValueProp) {
	      newState.hasValue = isValid(nextProps.value);
	    } else if (hasNewDefaultValue) {
	      newState.hasValue = isValid(nextProps.defaultValue);
	    }

	    if (newState) this.setState(newState);
	  },

	  getStyles: function getStyles() {
	    var props = this.props;
	    var theme = this.getTheme();
	    var contextProps = this.getContextProps();

	    var styles = {
	      root: {
	        fontSize: 16,
	        lineHeight: '24px',
	        width: props.fullWidth ? '100%' : 256,
	        height: (props.rows - 1) * 24 + (props.floatingLabelText ? 72 : 48),
	        display: 'inline-block',
	        position: 'relative',
	        fontFamily: this.context.muiTheme.contentFontFamily,
	        transition: Transitions.easeOut('200ms', 'height')
	      },
	      error: {
	        position: 'relative',
	        bottom: 5,
	        fontSize: 12,
	        lineHeight: '12px',
	        color: theme.errorColor,
	        transition: Transitions.easeOut()
	      },
	      hint: {
	        position: 'absolute',
	        lineHeight: '22px',
	        opacity: 1,
	        color: theme.hintColor,
	        transition: Transitions.easeOut(),
	        bottom: 12
	      },
	      input: {
	        tapHighlightColor: 'rgba(0,0,0,0)',
	        padding: 0,
	        position: 'relative',
	        width: '100%',
	        height: '100%',
	        border: 'none',
	        outline: 'none',
	        backgroundColor: theme.backgroundColor,
	        color: props.disabled ? theme.disabledTextColor : theme.textColor,
	        font: 'inherit'
	      },
	      underline: {
	        border: 'none',
	        borderBottom: 'solid 1px ' + theme.borderColor,
	        position: 'absolute',
	        width: '100%',
	        bottom: 8,
	        margin: 0,
	        MozBoxSizing: 'content-box',
	        boxSizing: 'content-box',
	        height: 0
	      },
	      underlineAfter: {
	        position: 'absolute',
	        width: '100%',
	        overflow: 'hidden',
	        userSelect: 'none',
	        cursor: 'default',
	        bottom: 8,
	        borderBottom: 'dotted 2px ' + theme.disabledTextColor
	      },
	      underlineFocus: {
	        borderBottom: 'solid 2px',
	        borderColor: theme.focusColor,
	        transform: 'scaleX(0)',
	        transition: Transitions.easeOut()
	      }
	    };

	    styles.error = this.mergeAndPrefix(styles.error, props.errorStyle);
	    styles.underline = this.mergeAndPrefix(styles.underline, props.underlineStyle);
	    styles.underlineAfter = this.mergeAndPrefix(styles.underlineAfter, props.underlineDisabledStyle);

	    styles.floatingLabel = this.mergeStyles(styles.hint, {
	      lineHeight: '22px',
	      top: 38,
	      bottom: 'none',
	      opacity: 1,
	      transform: 'scale(1) translate3d(0, 0, 0)',
	      transformOrigin: contextProps.isRtl ? 'right top' : 'left top'
	    });

	    styles.textarea = this.mergeStyles(styles.input, {
	      marginTop: props.floatingLabelText ? 36 : 12,
	      marginBottom: props.floatingLabelText ? -36 : -12,
	      boxSizing: 'border-box',
	      font: 'inherit'
	    });

	    styles.focusUnderline = this.mergeStyles(styles.underline, styles.underlineFocus, props.underlineFocusStyle);

	    if (this.state.isFocused) {
	      styles.floatingLabel.color = theme.focusColor;
	      styles.floatingLabel.transform = 'perspective(1px) scale(0.75) translate3d(2px, -28px, 0)';
	      styles.focusUnderline.transform = 'scaleX(1)';
	    }

	    if (this.state.hasValue) {
	      styles.floatingLabel.color = ColorManipulator.fade(props.disabled ? theme.disabledTextColor : theme.floatingLabelColor, 0.5);
	      styles.floatingLabel.transform = 'perspective(1px) scale(0.75) translate3d(2px, -28px, 0)';
	      styles.hint.opacity = 0;
	    }

	    if (props.floatingLabelText) {
	      styles.hint.opacity = 0;
	      styles.input.boxSizing = 'border-box';
	      if (this.state.isFocused && !this.state.hasValue) styles.hint.opacity = 1;
	    }

	    if (props.style && props.style.height) {
	      styles.hint.lineHeight = props.style.height;
	    }

	    if (this.state.errorText && this.state.isFocused) styles.floatingLabel.color = styles.error.color;
	    if (props.floatingLabelText && !props.multiLine) styles.input.paddingTop = 26;

	    if (this.state.errorText) {
	      styles.focusUnderline.borderColor = styles.error.color;
	      styles.focusUnderline.transform = 'scaleX(1)';
	    }

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var className = _props.className;
	    var errorStyle = _props.errorStyle;
	    var errorText = _props.errorText;
	    var floatingLabelText = _props.floatingLabelText;
	    var fullWidth = _props.fullWidth;
	    var hintText = _props.hintText;
	    var id = _props.id;
	    var multiLine = _props.multiLine;
	    var onBlur = _props.onBlur;
	    var onChange = _props.onChange;
	    var onFocus = _props.onFocus;
	    var type = _props.type;
	    var rows = _props.rows;

	    var other = _objectWithoutProperties(_props, ['className', 'errorStyle', 'errorText', 'floatingLabelText', 'fullWidth', 'hintText', 'id', 'multiLine', 'onBlur', 'onChange', 'onFocus', 'type', 'rows']);

	    var styles = this.getStyles();

	    var inputId = id || this._uniqueId;

	    var errorTextElement = this.state.errorText ? React.createElement(
	      'div',
	      { style: styles.error },
	      this.state.errorText
	    ) : null;

	    var hintTextElement = hintText ? React.createElement(
	      'div',
	      { style: this.mergeAndPrefix(styles.hint) },
	      hintText
	    ) : null;

	    var floatingLabelTextElement = floatingLabelText ? React.createElement(
	      'label',
	      {
	        style: this.mergeAndPrefix(styles.floatingLabel, this.props.floatingLabelStyle),
	        htmlFor: inputId },
	      floatingLabelText
	    ) : null;

	    var inputProps = undefined;
	    var inputElement = undefined;

	    inputProps = {
	      id: inputId,
	      ref: this._getRef(),
	      style: this.mergeAndPrefix(styles.input, this.props.inputStyle),
	      onBlur: this._handleInputBlur,
	      onFocus: this._handleInputFocus,
	      disabled: this.props.disabled,
	      onKeyDown: this._handleInputKeyDown
	    };

	    if (!this.props.hasOwnProperty('valueLink')) {
	      inputProps.onChange = this._handleInputChange;
	    }
	    if (this.props.children) {
	      inputElement = React.cloneElement(this.props.children, _extends({}, inputProps, this.props.children.props));
	    } else {
	      inputElement = multiLine ? React.createElement(EnhancedTextarea, _extends({}, other, inputProps, {
	        rows: rows,
	        onHeightChange: this._handleTextAreaHeightChange,
	        textareaStyle: this.mergeAndPrefix(styles.textarea) })) : React.createElement('input', _extends({}, other, inputProps, {
	        type: type }));
	    }

	    var underlineElement = this.props.disabled ? React.createElement('div', { style: this.mergeAndPrefix(styles.underlineAfter) }) : React.createElement('hr', { style: this.mergeAndPrefix(styles.underline) });
	    var focusUnderlineElement = React.createElement('hr', { style: this.mergeAndPrefix(styles.focusUnderline) });

	    return React.createElement(
	      'div',
	      { className: className, style: this.mergeAndPrefix(styles.root, this.props.style) },
	      floatingLabelTextElement,
	      hintTextElement,
	      inputElement,
	      underlineElement,
	      focusUnderlineElement,
	      errorTextElement
	    );
	  },

	  blur: function blur() {
	    if (this.isMounted()) this._getInputNode().blur();
	  },

	  clearValue: function clearValue() {
	    this.setValue('');
	  },

	  focus: function focus() {
	    if (this.isMounted()) this._getInputNode().focus();
	  },

	  getValue: function getValue() {
	    return this.isMounted() ? this._getInputNode().value : undefined;
	  },

	  setErrorText: function setErrorText(newErrorText) {
	    if (process.env.NODE_ENV !== 'production' && this.props.hasOwnProperty('errorText')) {
	      console.error('Cannot call TextField.setErrorText when errorText is defined as a property.');
	    } else if (this.isMounted()) {
	      this.setState({ errorText: newErrorText });
	    }
	  },

	  setValue: function setValue(newValue) {
	    if (process.env.NODE_ENV !== 'production' && this._isControlled()) {
	      console.error('Cannot call TextField.setValue when value or valueLink is defined as a property.');
	    } else if (this.isMounted()) {
	      if (this.props.multiLine) {
	        this.refs[this._getRef()].setValue(newValue);
	      } else {
	        this._getInputNode().value = newValue;
	      }

	      this.setState({ hasValue: isValid(newValue) });
	    }
	  },

	  _getRef: function _getRef() {
	    return this.props.ref ? this.props.ref : 'input';
	  },

	  _getInputNode: function _getInputNode() {
	    return this.props.children || this.props.multiLine ? this.refs[this._getRef()].getInputNode() : React.findDOMNode(this.refs[this._getRef()]);
	  },

	  _handleInputBlur: function _handleInputBlur(e) {
	    this.setState({ isFocused: false });
	    if (this.props.onBlur) this.props.onBlur(e);
	  },

	  _handleInputChange: function _handleInputChange(e) {
	    this.setState({ hasValue: isValid(e.target.value) });
	    if (this.props.onChange) this.props.onChange(e);
	  },

	  _handleInputFocus: function _handleInputFocus(e) {
	    if (this.props.disabled) return;
	    this.setState({ isFocused: true });
	    if (this.props.onFocus) this.props.onFocus(e);
	  },

	  _handleInputKeyDown: function _handleInputKeyDown(e) {
	    if (e.keyCode === 13 && this.props.onEnterKeyDown) this.props.onEnterKeyDown(e);
	    if (this.props.onKeyDown) this.props.onKeyDown(e);
	  },

	  _handleTextAreaHeightChange: function _handleTextAreaHeightChange(e, height) {
	    var newHeight = height + 24;
	    if (this.props.floatingLabelText) newHeight += 24;
	    React.findDOMNode(this).style.height = newHeight + 'px';
	  },

	  _isControlled: function _isControlled() {
	    return this.props.hasOwnProperty('value') || this.props.hasOwnProperty('valueLink');
	  }

	});

	module.exports = TextField;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var AutoPrefix = __webpack_require__(180);

	var EnhancedTextarea = React.createClass({
	  displayName: 'EnhancedTextarea',

	  mixins: [StylePropable],

	  propTypes: {
	    onChange: React.PropTypes.func,
	    onHeightChange: React.PropTypes.func,
	    textareaStyle: React.PropTypes.object,
	    rows: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      rows: 1
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      height: this.props.rows * 24
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    this._syncHeightWithShadow();
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        width: '100%',
	        resize: 'none',
	        overflow: 'hidden',
	        font: 'inherit',
	        padding: 0
	      }
	    };
	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var onChange = _props.onChange;
	    var onHeightChange = _props.onHeightChange;
	    var rows = _props.rows;
	    var style = _props.style;
	    var textareaStyle = _props.textareaStyle;
	    var valueLink = _props.valueLink;

	    var other = _objectWithoutProperties(_props, ['onChange', 'onHeightChange', 'rows', 'style', 'textareaStyle', 'valueLink']);

	    var styles = this.getStyles().root;

	    var textAreaStyles = {
	      width: '100%',
	      resize: 'none',
	      overflow: 'hidden',
	      font: 'inherit',
	      padding: 0
	    };

	    var inputStyles = this.mergeAndPrefix(styles, {
	      height: this.state.height + 'px'
	    });

	    inputStyles = this.mergeAndPrefix(inputStyles, textareaStyle);

	    // Overflow also needed to here to remove the extra row
	    // added to textareas in Firefox.
	    var shadowStyles = this.mergeAndPrefix(textAreaStyles, {
	      position: 'absolute',
	      opacity: 0
	    });

	    if (this.props.hasOwnProperty('valueLink')) {
	      other.value = this.props.valueLink.value;
	    }
	    if (this.props.disabled) {
	      style.cursor = 'default';
	    }

	    return React.createElement(
	      'div',
	      { style: this.props.style },
	      React.createElement('textarea', {
	        ref: 'shadow',
	        style: AutoPrefix.all(shadowStyles),
	        tabIndex: '-1',
	        rows: this.props.rows,
	        defaultValue: this.props.defaultValue,
	        readOnly: true,
	        value: this.props.value,
	        valueLink: this.props.valueLink }),
	      React.createElement('textarea', _extends({}, other, {
	        ref: 'input',
	        rows: this.props.rows,
	        style: AutoPrefix.all(inputStyles),
	        onChange: this._handleChange }))
	    );
	  },

	  getInputNode: function getInputNode() {
	    return React.findDOMNode(this.refs.input);
	  },

	  setValue: function setValue(value) {
	    this.getInputNode().value = value;
	    this._syncHeightWithShadow(value);
	  },

	  _syncHeightWithShadow: function _syncHeightWithShadow(newValue, e) {
	    var shadow = React.findDOMNode(this.refs.shadow);
	    var currentHeight = this.state.height;
	    var newHeight = undefined;

	    if (newValue !== undefined) {
	      shadow.value = newValue;
	    }
	    newHeight = shadow.scrollHeight;

	    if (currentHeight !== newHeight) {
	      this.setState({ height: newHeight });
	      if (this.props.onHeightChange) {
	        this.props.onHeightChange(e, newHeight);
	      }
	    }
	  },

	  _handleChange: function _handleChange(e) {
	    this._syncHeightWithShadow(e.target.value);

	    if (this.props.hasOwnProperty('valueLink')) {
	      this.props.valueLink.requestChange(e.target.value);
	    }

	    if (this.props.onChange) {
	      this.props.onChange(e);
	    }
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (nextProps.value !== this.props.value) {
	      this._syncHeightWithShadow(nextProps.value);
	    }
	  }
	});

	module.exports = EnhancedTextarea;

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);
	var ClickAwayable = __webpack_require__(253);
	var FontIcon = __webpack_require__(197);
	var Menu = __webpack_require__(254);

	var DropDownIcon = React.createClass({
	  displayName: 'DropDownIcon',

	  mixins: [StylePropable, ClickAwayable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    onChange: React.PropTypes.func,
	    menuItems: React.PropTypes.array.isRequired,
	    closeOnMenuItemTouchTap: React.PropTypes.bool,
	    iconStyle: React.PropTypes.object,
	    iconClassName: React.PropTypes.string,
	    iconLigature: React.PropTypes.string
	  },

	  getInitialState: function getInitialState() {
	    return {
	      open: false
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      closeOnMenuItemTouchTap: true
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    // This component can be deprecated once ./menu/menu has been deprecated.
	    // if (process.env.NODE_ENV !== 'production') {
	    //   console.warn('DropDownIcon has been deprecated. Use IconMenu instead.');
	    // }
	  },

	  componentClickAway: function componentClickAway() {
	    this.setState({ open: false });
	  },

	  getStyles: function getStyles() {
	    var spacing = this.context.muiTheme.spacing;
	    var iconWidth = 48;
	    var styles = {
	      root: {
	        display: 'inline-block',
	        width: iconWidth + 'px !important',
	        position: 'relative',
	        height: spacing.desktopToolbarHeight,
	        fontSize: spacing.desktopDropDownMenuFontSize,
	        cursor: 'pointer'
	      },
	      menu: {
	        transition: Transitions.easeOut(),
	        right: '-14px !important',
	        top: '9px !important',
	        opacity: this.state.open ? 1 : 0
	      },
	      menuItem: { // similair to drop down menu's menu item styles
	        paddingRight: spacing.iconSize + spacing.desktopGutterLess * 2,
	        height: spacing.desktopDropDownMenuItemHeight,
	        lineHeight: spacing.desktopDropDownMenuItemHeight + 'px'
	      }
	    };
	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var style = _props.style;
	    var children = _props.children;
	    var menuItems = _props.menuItems;
	    var closeOnMenuItemTouchTap = _props.closeOnMenuItemTouchTap;
	    var iconStyle = _props.iconStyle;
	    var iconClassName = _props.iconClassName;

	    var other = _objectWithoutProperties(_props, ['style', 'children', 'menuItems', 'closeOnMenuItemTouchTap', 'iconStyle', 'iconClassName']);

	    var styles = this.getStyles();

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: this.mergeAndPrefix(styles.root, this.props.style) }),
	      React.createElement(
	        'div',
	        { onTouchTap: this._onControlClick },
	        React.createElement(
	          FontIcon,
	          {
	            className: iconClassName,
	            style: iconStyle },
	          this.props.iconLigature
	        ),
	        this.props.children
	      ),
	      React.createElement(Menu, {
	        ref: 'menuItems',
	        style: this.mergeAndPrefix(styles.menu),
	        menuItems: menuItems,
	        menuItemStyle: styles.menuItem,
	        hideable: true,
	        visible: this.state.open,
	        onItemTap: this._onMenuItemClick })
	    );
	  },

	  _onControlClick: function _onControlClick() {
	    this.setState({ open: !this.state.open });
	  },

	  _onMenuItemClick: function _onMenuItemClick(e, key, payload) {
	    if (this.props.onChange) this.props.onChange(e, key, payload);

	    if (this.props.closeOnMenuItemTouchTap) {
	      this.setState({ open: false });
	    }
	  }
	});

	module.exports = DropDownIcon;

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var Events = __webpack_require__(189);
	var Dom = __webpack_require__(195);

	module.exports = {

	  //When the component mounts, listen to click events and check if we need to
	  //Call the componentClickAway function.
	  componentDidMount: function componentDidMount() {
	    if (!this.manuallyBindClickAway) this._bindClickAway();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this._unbindClickAway();
	  },

	  _checkClickAway: function _checkClickAway(event) {
	    var el = React.findDOMNode(this);

	    // Check if the target is inside the current component
	    if (event.target !== el && !Dom.isDescendant(el, event.target) && document.documentElement.contains(event.target)) {
	      if (this.componentClickAway) this.componentClickAway();
	    }
	  },

	  _bindClickAway: function _bindClickAway() {
	    // On touch-enabled devices, both events fire, and the handler is called twice,
	    // but it's fine since all operations for which the mixin is used
	    // are idempotent.
	    Events.on(document, 'mouseup', this._checkClickAway);
	    Events.on(document, 'touchend', this._checkClickAway);
	  },

	  _unbindClickAway: function _unbindClickAway() {
	    Events.off(document, 'mouseup', this._checkClickAway);
	    Events.off(document, 'touchend', this._checkClickAway);
	  }

	};

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var CssEvent = __webpack_require__(232);
	var KeyLine = __webpack_require__(255);
	var KeyCode = __webpack_require__(190);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);
	var ClickAwayable = __webpack_require__(253);
	var Paper = __webpack_require__(201);
	var MenuItem = __webpack_require__(256);
	var LinkMenuItem = __webpack_require__(258);
	var SubheaderMenuItem = __webpack_require__(259);

	/***********************
	* Nested Menu Component
	***********************/
	var NestedMenuItem = React.createClass({
	  displayName: 'NestedMenuItem',

	  mixins: [ClickAwayable, StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    index: React.PropTypes.number.isRequired,
	    text: React.PropTypes.string,
	    menuItems: React.PropTypes.array.isRequired,
	    zDepth: React.PropTypes.number,
	    disabled: React.PropTypes.bool,
	    active: React.PropTypes.bool,
	    onItemTap: React.PropTypes.func,
	    menuItemStyle: React.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      disabled: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      open: false,
	      activeIndex: 0
	    };
	  },

	  componentClickAway: function componentClickAway() {
	    this._closeNestedMenu();
	  },

	  componentDidMount: function componentDidMount() {
	    this._positionNestedMenu();
	    var el = this.getDOMNode();
	    el.focus();
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this._positionNestedMenu();
	  },

	  getSpacing: function getSpacing() {
	    return this.context.muiTheme.spacing;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        userSelect: 'none',
	        cursor: 'pointer',
	        lineHeight: this.getTheme().height + 'px',
	        color: this.context.muiTheme.palette.textColor
	      },
	      icon: {
	        float: 'left',
	        lineHeight: this.getTheme().height + 'px',
	        marginRight: this.getSpacing().desktopGutter
	      },
	      toggle: {
	        marginTop: (this.getTheme().height - this.context.muiTheme.component.radioButton.size) / 2,
	        float: 'right',
	        width: 42
	      },
	      rootWhenHovered: {
	        backgroundColor: this.getTheme().hoverColor
	      },
	      rootWhenSelected: {
	        color: this.getTheme().selectedTextColor
	      },
	      rootWhenDisabled: {
	        cursor: 'default',
	        color: this.context.muiTheme.palette.disabledColor
	      }
	    };

	    return styles;
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.menuItem;
	  },

	  render: function render() {
	    var styles = this.getStyles();
	    styles = this.mergeAndPrefix(styles.root, this.props.active && !this.props.disabled && styles.rootWhenHovered, {
	      position: 'relative'
	    }, this.props.style);

	    var iconCustomArrowDropRight = {
	      marginRight: this.getSpacing().desktopGutterMini * -1,
	      color: this.context.muiTheme.component.dropDownMenu.accentColor
	    };

	    var _props = this.props;
	    var index = _props.index;
	    var menuItemStyle = _props.menuItemStyle;

	    var other = _objectWithoutProperties(_props, ['index', 'menuItemStyle']);

	    return React.createElement(
	      'div',
	      {
	        ref: 'root',
	        style: styles,
	        onMouseEnter: this._openNestedMenu,
	        onMouseLeave: this._closeNestedMenu,
	        onMouseOver: this._handleMouseOver,
	        onMouseOut: this._handleMouseOut },
	      React.createElement(
	        MenuItem,
	        {
	          index: index,
	          style: menuItemStyle,
	          disabled: this.props.disabled,
	          iconRightStyle: iconCustomArrowDropRight,
	          iconRightClassName: 'muidocs-icon-custom-arrow-drop-right',
	          onTouchTap: this._onParentItemTap },
	        this.props.text
	      ),
	      React.createElement(Menu, _extends({}, other, {
	        ref: 'nestedMenu',
	        menuItems: this.props.menuItems,
	        menuItemStyle: menuItemStyle,
	        onItemTap: this._onMenuItemTap,
	        hideable: true,
	        visible: this.state.open,
	        onRequestClose: this._closeNestedMenu,
	        zDepth: this.props.zDepth + 1 }))
	    );
	  },

	  toggleNestedMenu: function toggleNestedMenu() {
	    if (!this.props.disabled) this.setState({ open: !this.state.open });
	  },

	  isOpen: function isOpen() {
	    return this.state.open;
	  },

	  _positionNestedMenu: function _positionNestedMenu() {
	    var el = React.findDOMNode(this);
	    var nestedMenu = React.findDOMNode(this.refs.nestedMenu);
	    nestedMenu.style.left = el.offsetWidth + 'px';
	  },

	  _openNestedMenu: function _openNestedMenu() {
	    if (!this.props.disabled) this.setState({ open: true });
	  },

	  _closeNestedMenu: function _closeNestedMenu() {
	    this.setState({ open: false });
	    React.findDOMNode(this).focus();
	  },

	  _onParentItemTap: function _onParentItemTap() {
	    this.toggleNestedMenu();
	  },

	  _onMenuItemTap: function _onMenuItemTap(e, index, menuItem) {
	    if (this.props.onItemTap) this.props.onItemTap(e, index, menuItem);
	    this._closeNestedMenu();
	  },
	  _handleMouseOver: function _handleMouseOver(e) {
	    if (!this.props.disabled && this.props.onMouseOver) this.props.onMouseOver(e, this.props.index);
	  },

	  _handleMouseOut: function _handleMouseOut(e) {
	    if (!this.props.disabled && this.props.onMouseOut) this.props.onMouseOut(e, this.props.index);
	  }

	});

	/****************
	* Menu Component
	****************/
	var Menu = React.createClass({
	  displayName: 'Menu',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    autoWidth: React.PropTypes.bool,
	    onItemTap: React.PropTypes.func,
	    onToggle: React.PropTypes.func,
	    onRequestClose: React.PropTypes.func,
	    menuItems: React.PropTypes.array.isRequired,
	    selectedIndex: React.PropTypes.number,
	    hideable: React.PropTypes.bool,
	    visible: React.PropTypes.bool,
	    zDepth: React.PropTypes.number,
	    menuItemStyle: React.PropTypes.object,
	    menuItemStyleSubheader: React.PropTypes.object,
	    menuItemStyleLink: React.PropTypes.object,
	    menuItemClassName: React.PropTypes.string,
	    menuItemClassNameSubheader: React.PropTypes.string,
	    menuItemClassNameLink: React.PropTypes.string
	  },

	  getInitialState: function getInitialState() {
	    return {
	      nestedMenuShown: false,
	      activeIndex: 0
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      autoWidth: true,
	      hideable: false,
	      visible: true,
	      zDepth: 1,
	      onRequestClose: function onRequestClose() {}
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    var el = React.findDOMNode(this);

	    //Set the menu width
	    this._setKeyWidth(el);

	    //Show or Hide the menu according to visibility
	    this._renderVisibility();
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    if (this.props.visible !== prevProps.visible || this.props.menuItems.length !== prevProps.menuItems.length) {
	      this._renderVisibility();
	    }
	  },

	  componentWillReceiveProps: function componentWillReceiveProps() {
	    //Set the menu width
	    this._setKeyWidth(React.findDOMNode(this));
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.menu;
	  },

	  getSpacing: function getSpacing() {
	    return this.context.muiTheme.spacing;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        backgroundColor: this.getTheme().containerBackgroundColor,
	        paddingTop: this.getSpacing().desktopGutterMini,
	        paddingBottom: this.getSpacing().desktopGutterMini,
	        transition: Transitions.easeOut(null, 'height'),
	        outline: 'none !important'
	      },
	      subheader: {
	        paddingLeft: this.context.muiTheme.component.menuSubheader.padding,
	        paddingRight: this.context.muiTheme.component.menuSubheader.padding
	      },
	      hideable: {
	        overflow: 'hidden',
	        position: 'absolute',
	        top: 0,
	        zIndex: 1
	      },
	      item: {
	        height: 34
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var styles = this.getStyles();
	    return React.createElement(
	      Paper,
	      {
	        ref: 'paperContainer',
	        tabIndex: '0',
	        onKeyDown: this._onKeyDown,
	        zDepth: this.props.zDepth,
	        style: this.mergeAndPrefix(styles.root, this.props.hideable && styles.hideable, this.props.style) },
	      this._getChildren()
	    );
	  },

	  _getChildren: function _getChildren() {
	    var menuItem = undefined,
	        itemComponent = undefined,
	        isDisabled = undefined;

	    var styles = this.getStyles();

	    this._children = [];
	    //This array is used to keep track of all nested menu refs
	    this._nestedChildren = [];

	    for (var i = 0; i < this.props.menuItems.length; i++) {
	      menuItem = this.props.menuItems[i];
	      isDisabled = menuItem.disabled === undefined ? false : menuItem.disabled;

	      var _menuItem = menuItem;
	      var icon = _menuItem.icon;
	      var data = _menuItem.data;
	      var attribute = _menuItem.attribute;
	      var number = _menuItem.number;
	      var toggle = _menuItem.toggle;
	      var onTouchTap = _menuItem.onTouchTap;

	      var other = _objectWithoutProperties(_menuItem, ['icon', 'data', 'attribute', 'number', 'toggle', 'onTouchTap']);

	      switch (menuItem.type) {

	        case MenuItem.Types.LINK:
	          itemComponent = React.createElement(LinkMenuItem, {
	            key: i,
	            index: i,
	            active: this.state.activeIndex === i,
	            text: menuItem.text,
	            disabled: isDisabled,
	            className: this.props.menuItemClassNameLink,
	            style: this.props.menuItemStyleLink,
	            payload: menuItem.payload,
	            target: menuItem.target });
	          break;

	        case MenuItem.Types.SUBHEADER:
	          itemComponent = React.createElement(SubheaderMenuItem, {
	            key: i,
	            index: i,
	            className: this.props.menuItemClassNameSubheader,
	            style: this.mergeAndPrefix(styles.subheader, this.props.menuItemStyleSubheader),
	            firstChild: i === 0,
	            text: menuItem.text });
	          break;

	        case MenuItem.Types.NESTED:
	          var _props2 = this.props,
	              ref = _props2.ref,
	              key = _props2.key,
	              index = _props2.index,
	              zDepth = _props2.zDepth,
	              other = _objectWithoutProperties(_props2, ['ref', 'key', 'index', 'zDepth']);

	          itemComponent = React.createElement(NestedMenuItem, _extends({}, other, {
	            ref: i,
	            key: i,
	            index: i,
	            nested: true,
	            active: this.state.activeIndex === i,
	            text: menuItem.text,
	            disabled: isDisabled,
	            menuItems: menuItem.items,
	            menuItemStyle: this.props.menuItemStyle,
	            zDepth: this.props.zDepth,
	            onMouseEnter: this._onItemActivated,
	            onMouseLeave: this._onItemDeactivated,
	            onItemTap: this._onNestedItemTap }));
	          this._nestedChildren.push(i);
	          break;

	        default:
	          itemComponent = React.createElement(
	            MenuItem,
	            _extends({}, other, {
	              selected: this.props.selectedIndex === i,
	              key: i,
	              index: i,
	              active: this.state.activeIndex === i,
	              icon: menuItem.icon,
	              data: menuItem.data,
	              className: this.props.menuItemClassName,
	              style: this.props.menuItemStyle,
	              attribute: menuItem.attribute,
	              number: menuItem.number,
	              toggle: menuItem.toggle,
	              onToggle: this.props.onToggle,
	              disabled: isDisabled,
	              onTouchTap: this._onItemTap,
	              onMouseEnter: this._onItemActivated,
	              onMouseLeave: this._onItemDeactivated
	            }),
	            menuItem.text
	          );
	      }
	      this._children.push(itemComponent);
	    }

	    return this._children;
	  },

	  _setKeyWidth: function _setKeyWidth(el) {
	    //Update the menu width
	    var menuWidth = '100%';

	    if (this.props.autoWidth) {
	      el.style.width = 'auto';
	      menuWidth = KeyLine.getIncrementalDim(el.offsetWidth) + 'px';
	    }

	    el.style.width = menuWidth;
	  },

	  _renderVisibility: function _renderVisibility() {
	    if (this.props.hideable) {
	      if (this.props.visible) this._expandHideableMenu();else this._collapseHideableMenu();
	    }
	  },

	  _expandHideableMenu: function _expandHideableMenu() {
	    var _this = this;

	    var el = React.findDOMNode(this);
	    var container = React.findDOMNode(this.refs.paperContainer);
	    var padding = this.getSpacing().desktopGutterMini;
	    var height = this._getHiddenMenuHeight(el, padding);

	    //Add transition
	    if (!el.style.transition) {
	      el.style.transition = Transitions.easeOut();
	    }

	    this._nextAnimationFrame(function () {
	      container.style.overflow = 'hidden';

	      // Yeild to the DOM, then apply height and padding. This makes the transition smoother.
	      el.style.paddingTop = padding + 'px';
	      el.style.paddingBottom = padding + 'px';
	      el.style.height = height + 'px';
	      el.style.opacity = 1;

	      //Set the overflow to visible after the animation is done so
	      //that other nested menus can be shown
	      CssEvent.onTransitionEnd(el, function () {
	        //Make sure the menu is open before setting the overflow.
	        //This is to accout for fast clicks
	        if (_this.props.visible) container.style.overflow = 'visible';
	        el.style.transition = null;
	        el.focus();
	      });
	    });
	  },

	  _getHiddenMenuHeight: function _getHiddenMenuHeight(el, padding) {
	    //Add padding to the offset height, because it is not yet set in the style.
	    var height = padding * 2;

	    //Hide the element and allow the browser to automatically resize it.
	    el.style.visibility = 'hidden';
	    el.style.height = 'auto';

	    //Determine the height of the menu.
	    height += el.offsetHeight;

	    //Unhide the menu with the height set back to zero.
	    el.style.height = '0px';
	    el.style.visibility = 'visible';

	    return height;
	  },

	  _collapseHideableMenu: function _collapseHideableMenu() {
	    var el = React.findDOMNode(this);
	    var container = React.findDOMNode(this.refs.paperContainer);
	    var originalOpacity = el.style.opacity;

	    //Add transition
	    if (!el.style.transition && originalOpacity !== '') {
	      el.style.transition = Transitions.easeOut();
	    }

	    this._nextAnimationFrame(function () {
	      //Set the overflow to hidden so that animation works properly
	      container.style.overflow = 'hidden';

	      //Close the menu
	      el.style.opacity = 0;
	      el.style.height = '0px';
	      el.style.paddingTop = '0px';
	      el.style.paddingBottom = '0px';

	      var end = function end() {
	        el.style.transition = null;
	      };

	      if (originalOpacity === '') end();else CssEvent.onTransitionEnd(el, end);
	    });
	  },

	  _nextAnimationFrame: function _nextAnimationFrame(func) {
	    if (window.requestAnimationFrame) {
	      return window.requestAnimationFrame(func);
	    }
	    return setTimeout(func, 16);
	  },

	  _onNestedItemTap: function _onNestedItemTap(e, index, menuItem) {
	    if (this.props.onItemTap) this.props.onItemTap(e, index, menuItem);
	  },

	  _onItemTap: function _onItemTap(e, index) {
	    if (this.props.onItemTap) this.props.onItemTap(e, index, this.props.menuItems[index]);
	  },

	  _onItemToggle: function _onItemToggle(e, index, toggled) {
	    if (this.props.onItemToggle) this.props.onItemToggle(e, index, this.props.menuItems[index], toggled);
	  },
	  _onItemActivated: function _onItemActivated(e, index) {
	    this.setState({ activeIndex: index });
	  },
	  _onItemDeactivated: function _onItemDeactivated(e, index) {
	    if (this.state.activeKey === index) this.setState({ activeIndex: 0 });
	  },

	  _onKeyDown: function _onKeyDown(e) {
	    if (!(this.state.open || this.props.visible)) return;

	    var nested = this._children[this.state.activeIndex];
	    if (nested && nested.props.nested && this.refs[this.state.activeIndex].isOpen()) return;

	    switch (e.which) {
	      case KeyCode.UP:
	        this._activatePreviousItem();
	        break;
	      case KeyCode.DOWN:
	        this._activateNextItem();
	        break;
	      case KeyCode.RIGHT:
	        this._tryToggleNested(this.state.activeIndex);
	        break;
	      case KeyCode.LEFT:
	        this._close();
	        break;
	      case KeyCode.ESC:
	        this._close();
	        break;
	      case KeyCode.TAB:
	        this._close();
	        return; // so the tab key can propagate
	      case KeyCode.ENTER:
	      case KeyCode.SPACE:
	        e.stopPropagation(); // needs called before the close
	        this._triggerSelection(e);
	        break;
	      default:
	        return; //important
	    }
	    e.preventDefault();
	    e.stopPropagation();
	  },

	  _activatePreviousItem: function _activatePreviousItem() {
	    var active = this.state.activeIndex || 0;
	    active = Math.max(active - 1, 0);
	    this.setState({ activeIndex: active });
	  },

	  _activateNextItem: function _activateNextItem() {
	    var active = this.state.activeIndex || 0;
	    active = Math.min(active + 1, this._children.length - 1);
	    this.setState({ activeIndex: active });
	  },

	  _triggerSelection: function _triggerSelection(e) {
	    var index = this.state.activeIndex || 0;
	    this._onItemTap(e, index);
	  },

	  _close: function _close() {
	    this.props.onRequestClose();
	  },

	  _tryToggleNested: function _tryToggleNested(index) {
	    var item = this.refs[index];
	    if (item && item.toggleNestedMenu) item.toggleNestedMenu();
	  }

	});

	module.exports = Menu;

/***/ },
/* 255 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {

	  Desktop: {
	    GUTTER: 24,
	    GUTTER_LESS: 16,
	    INCREMENT: 64,
	    MENU_ITEM_HEIGHT: 32
	  },

	  getIncrementalDim: function getIncrementalDim(dim) {
	    return Math.ceil(dim / this.Desktop.INCREMENT) * this.Desktop.INCREMENT;
	  }
	};

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var FontIcon = __webpack_require__(197);
	var Toggle = __webpack_require__(257);

	var Types = {
	  LINK: 'LINK',
	  SUBHEADER: 'SUBHEADER',
	  NESTED: 'NESTED'
	};

	var MenuItem = React.createClass({
	  displayName: 'MenuItem',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    index: React.PropTypes.number.isRequired,
	    className: React.PropTypes.string,
	    iconClassName: React.PropTypes.string,
	    iconRightClassName: React.PropTypes.string,
	    iconStyle: React.PropTypes.object,
	    iconRightStyle: React.PropTypes.object,
	    attribute: React.PropTypes.string,
	    number: React.PropTypes.string,
	    data: React.PropTypes.string,
	    toggle: React.PropTypes.bool,
	    disabled: React.PropTypes.bool,
	    onTouchTap: React.PropTypes.func,
	    onToggle: React.PropTypes.func,
	    selected: React.PropTypes.bool,
	    active: React.PropTypes.bool
	  },

	  statics: {
	    Types: Types
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      toggle: false,
	      disabled: false,
	      active: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.menuItem;
	  },

	  getSpacing: function getSpacing() {
	    return this.context.muiTheme.spacing;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        userSelect: 'none',
	        cursor: 'pointer',
	        lineHeight: this.getTheme().height + 'px',
	        paddingLeft: this.getTheme().padding,
	        paddingRight: this.getTheme().padding,
	        color: this.context.muiTheme.palette.textColor
	      },
	      number: {
	        float: 'right',
	        width: 24,
	        textAlign: 'center'
	      },
	      attribute: {
	        float: 'right'
	      },
	      iconRight: {
	        lineHeight: this.getTheme().height + 'px',
	        float: 'right'
	      },
	      icon: {
	        float: 'left',
	        lineHeight: this.getTheme().height + 'px',
	        marginRight: this.getSpacing().desktopGutter
	      },
	      data: {
	        display: 'block',
	        paddingLeft: this.getSpacing().desktopGutter * 2,
	        lineHeight: this.getTheme().dataHeight + 'px',
	        height: this.getTheme().dataHeight + 'px',
	        verticalAlign: 'top',
	        top: -12,
	        position: 'relative',
	        fontWeight: 300,
	        color: this.context.muiTheme.palette.textColor
	      },
	      toggle: {
	        marginTop: (this.getTheme().height - this.context.muiTheme.component.radioButton.size) / 2,
	        float: 'right',
	        width: 42
	      },
	      rootWhenHovered: {
	        backgroundColor: this.getTheme().hoverColor
	      },
	      rootWhenSelected: {
	        color: this.getTheme().selectedTextColor
	      },
	      rootWhenDisabled: {
	        cursor: 'default',
	        color: this.context.muiTheme.palette.disabledColor
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var icon = undefined;
	    var data = undefined;
	    var iconRight = undefined;
	    var attribute = undefined;
	    var number = undefined;
	    var toggleElement = undefined;
	    var styles = this.getStyles();

	    if (this.props.iconClassName) icon = React.createElement(FontIcon, { style: this.mergeAndPrefix(styles.icon, this.props.iconStyle, this.props.selected && styles.rootWhenSelected), className: this.props.iconClassName });
	    if (this.props.iconRightClassName) iconRight = React.createElement(FontIcon, { style: this.mergeAndPrefix(styles.iconRight, this.props.iconRightStyle), className: this.props.iconRightClassName });
	    if (this.props.data) data = React.createElement(
	      'span',
	      { style: this.mergeAndPrefix(styles.data) },
	      this.props.data
	    );
	    if (this.props.number !== undefined) number = React.createElement(
	      'span',
	      { style: this.mergeAndPrefix(styles.number) },
	      this.props.number
	    );
	    if (this.props.attribute !== undefined) attribute = React.createElement(
	      'span',
	      { style: this.mergeAndPrefix(styles.style) },
	      this.props.attribute
	    );
	    if (this.props.icon) icon = this.props.icon;

	    if (this.props.toggle) {
	      var _props = this.props;
	      var toggle = _props.toggle;
	      var onTouchTap = _props.onTouchTap;
	      var onToggle = _props.onToggle;
	      var onMouseEnter = _props.onMouseEnter;
	      var onMouseLeave = _props.onMouseLeave;
	      var children = _props.children;
	      var label = _props.label;
	      var style = _props.style;

	      var other = _objectWithoutProperties(_props, ['toggle', 'onTouchTap', 'onToggle', 'onMouseEnter', 'onMouseLeave', 'children', 'label', 'style']);

	      toggleElement = React.createElement(Toggle, _extends({}, other, { onToggle: this._handleToggle, style: styles.toggle }));
	    }

	    return React.createElement(
	      'div',
	      {
	        key: this.props.index,
	        className: this.props.className,
	        onTouchTap: this._handleTouchTap,
	        onMouseEnter: this._handleMouseEnter,
	        onMouseLeave: this._handleMouseLeave,
	        style: this.mergeAndPrefix(styles.root, this.props.selected && styles.rootWhenSelected, this.props.active && !this.props.disabled && styles.rootWhenHovered, this.props.style, this.props.disabled && styles.rootWhenDisabled) },
	      icon,
	      this.props.children,
	      data,
	      attribute,
	      number,
	      toggleElement,
	      iconRight
	    );
	  },

	  _handleTouchTap: function _handleTouchTap(e) {
	    if (!this.props.disabled && this.props.onTouchTap) this.props.onTouchTap(e, this.props.index);
	  },

	  _handleToggle: function _handleToggle(e, toggled) {
	    if (!this.props.disabled && this.props.onToggle) this.props.onToggle(e, this.props.index, toggled);
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    if (!this.props.disabled && this.props.onMouseEnter) this.props.onMouseEnter(e, this.props.index);
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    if (!this.props.disabled && this.props.onMouseLeave) this.props.onMouseLeave(e, this.props.index);
	  }
	});

	module.exports = MenuItem;

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);
	var Paper = __webpack_require__(201);
	var EnhancedSwitch = __webpack_require__(222);

	var Toggle = React.createClass({
	  displayName: 'Toggle',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    elementStyle: React.PropTypes.object,
	    labelStyle: React.PropTypes.object,
	    onToggle: React.PropTypes.func,
	    toggled: React.PropTypes.bool,
	    defaultToggled: React.PropTypes.bool
	  },

	  getInitialState: function getInitialState() {
	    return {
	      switched: this.props.toggled || this.props.defaultToggled || this.props.valueLink && this.props.valueLink.value || false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.toggle;
	  },

	  getStyles: function getStyles() {
	    var toggleSize = 20;
	    var toggleTrackWidth = 36;
	    var styles = {
	      icon: {
	        width: 36,
	        padding: '4px 0px 6px 2px'
	      },
	      toggleElement: {
	        width: toggleTrackWidth
	      },
	      track: {
	        transition: Transitions.easeOut(),
	        width: '100%',
	        height: 14,
	        borderRadius: 30,
	        backgroundColor: this.getTheme().trackOffColor
	      },
	      thumb: {
	        transition: Transitions.easeOut(),
	        position: 'absolute',
	        top: 1,
	        left: 0,
	        width: toggleSize,
	        height: toggleSize,
	        lineHeight: '24px',
	        borderRadius: '50%',
	        backgroundColor: this.getTheme().thumbOffColor
	      },
	      trackWhenSwitched: {
	        backgroundColor: this.getTheme().trackOnColor
	      },
	      thumbWhenSwitched: {
	        backgroundColor: this.getTheme().thumbOnColor,
	        left: '100%'
	      },
	      trackWhenDisabled: {
	        backgroundColor: this.getTheme().trackDisabledColor
	      },
	      thumbWhenDisabled: {
	        backgroundColor: this.getTheme().thumbDisabledColor
	      },
	      label: {
	        color: this.props.disabled ? this.getTheme().labelDisabledColor : this.getTheme().labelColor
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var onToggle = _props.onToggle;

	    var other = _objectWithoutProperties(_props, ['onToggle']);

	    var styles = this.getStyles();

	    var trackStyles = this.mergeAndPrefix(styles.track, this.props.trackStyle, this.state.switched && styles.trackWhenSwitched, this.props.disabled && styles.trackWhenDisabled);

	    var thumbStyles = this.mergeAndPrefix(styles.thumb, this.props.thumbStyle, this.state.switched && styles.thumbWhenSwitched, this.props.disabled && styles.thumbWhenDisabled);

	    if (this.state.switched) {
	      thumbStyles.marginLeft = '-' + thumbStyles.width;
	    }

	    var toggleElementStyles = this.mergeAndPrefix(styles.toggleElement, this.props.elementStyle);

	    var toggleElement = React.createElement(
	      'div',
	      { style: toggleElementStyles },
	      React.createElement('div', { style: trackStyles }),
	      React.createElement(Paper, { style: thumbStyles, circle: true, zDepth: 1 })
	    );

	    var customRippleStyle = this.mergeAndPrefix({
	      top: -10,
	      left: -10
	    }, this.props.rippleStyle);

	    var rippleColor = this.state.switched ? this.getTheme().thumbOnColor : this.context.muiTheme.component.textColor;

	    var iconStyle = this.mergeAndPrefix(styles.icon, this.props.iconStyle);

	    var labelStyle = this.mergeAndPrefix(styles.label, this.props.labelStyle);

	    var enhancedSwitchProps = {
	      ref: "enhancedSwitch",
	      inputType: "checkbox",
	      switchElement: toggleElement,
	      rippleStyle: customRippleStyle,
	      rippleColor: rippleColor,
	      iconStyle: iconStyle,
	      trackStyle: trackStyles,
	      thumbStyle: thumbStyles,
	      labelStyle: labelStyle,
	      switched: this.state.switched,
	      onSwitch: this._handleToggle,
	      onParentShouldUpdate: this._handleStateChange,
	      defaultSwitched: this.props.defaultToggled,
	      labelPosition: this.props.labelPosition ? this.props.labelPosition : "left"
	    };

	    if (this.props.hasOwnProperty('toggled')) enhancedSwitchProps.checked = this.props.toggled;

	    return React.createElement(EnhancedSwitch, _extends({}, other, enhancedSwitchProps));
	  },

	  isToggled: function isToggled() {
	    return this.refs.enhancedSwitch.isSwitched();
	  },

	  setToggled: function setToggled(newToggledValue) {
	    this.refs.enhancedSwitch.setSwitched(newToggledValue);
	  },

	  _handleToggle: function _handleToggle(e, isInputChecked) {
	    if (this.props.onToggle) this.props.onToggle(e, isInputChecked);
	  },

	  _handleStateChange: function _handleStateChange(newSwitched) {
	    this.setState({ switched: newSwitched });
	  }

	});

	module.exports = Toggle;

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);

	var LinkMenuItem = React.createClass({
	  displayName: 'LinkMenuItem',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    index: React.PropTypes.number.isRequired,
	    payload: React.PropTypes.string.isRequired,
	    text: React.PropTypes.string.isRequired,
	    target: React.PropTypes.string,
	    active: React.PropTypes.bool,
	    disabled: React.PropTypes.bool,
	    className: React.PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      active: false,
	      disabled: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hovered: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.menuItem;
	  },

	  getStyles: function getStyles() {
	    var style = {
	      root: {
	        userSelect: 'none',
	        cursor: 'pointer',
	        display: 'block',
	        lineHeight: this.getTheme().height + 'px',
	        paddingLeft: this.getTheme().padding,
	        paddingRight: this.getTheme().padding
	      },
	      rootWhenHovered: {
	        backgroundColor: this.getTheme().hoverColor
	      },
	      rootWhenSelected: {
	        color: this.getTheme().selectedTextColor
	      },
	      rootWhenDisabled: {
	        cursor: 'default',
	        color: this.context.muiTheme.palette.disabledColor
	      }
	    };

	    return style;
	  },

	  render: function render() {
	    var onClickHandler = this.props.disabled ? this._stopLink : undefined;
	    // Prevent context menu 'Open In New Tab/Window'
	    var linkAttribute = this.props.disabled ? 'data-href' : 'href';
	    var link = {};
	    link[linkAttribute] = this.props.payload;

	    var styles = this.getStyles();

	    var linkStyles = this.mergeAndPrefix(styles.root, this.props.selected && styles.rootWhenSelected, this.props.selected && styles.rootWhenSelected, this.props.active && !this.props.disabled && styles.rootWhenHovered, this.props.style, this.props.disabled && styles.rootWhenDisabled);

	    return React.createElement(
	      'a',
	      _extends({
	        key: this.props.index,
	        target: this.props.target,
	        style: linkStyles }, link, {
	        className: this.props.className,
	        onClick: onClickHandler,
	        onMouseEnter: this._handleMouseEnter,
	        onMouseLeave: this._handleMouseLeave }),
	      this.props.text
	    );
	  },

	  _stopLink: function _stopLink(event) {
	    event.preventDefault();
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    this.setState({ hovered: true });
	    if (!this.props.disabled && this.props.onMouseEnter) this.props.onMouseEnter(e);
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    this.setState({ hovered: false });
	    if (!this.props.disabled && this.props.onMouseLeave) this.props.onMouseLeave(e);
	  }
	});

	module.exports = LinkMenuItem;

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Typography = __webpack_require__(182);

	var SubheaderMenuItem = React.createClass({
	  displayName: 'SubheaderMenuItem',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    index: React.PropTypes.number.isRequired,
	    text: React.PropTypes.string.isRequired,
	    firstChild: React.PropTypes.bool,
	    className: React.PropTypes.string
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.menuSubheader;
	  },

	  getSpacing: function getSpacing() {
	    return this.context.muiTheme.spacing;
	  },

	  getStyles: function getStyles() {
	    var gutterMini = this.getSpacing().desktopGutterMini;
	    var subheaderHeight = this.getSpacing().desktopSubheaderHeight;
	    var styles = {
	      root: {
	        boxSizing: 'border-box',
	        fontSize: '13px',
	        letterSpacing: 0,
	        fontWeight: Typography.fontWeightMedium,
	        margin: 0,
	        height: subheaderHeight + gutterMini,
	        lineHeight: subheaderHeight + 'px',
	        color: this.getTheme().textColor,
	        borderTop: 'solid 1px ' + this.getTheme().borderColor,
	        paddingTop: gutterMini,
	        marginTop: gutterMini
	      },
	      rootWhenFirstChild: {
	        height: subheaderHeight,
	        borderTop: 'none',
	        paddingTop: 0,
	        marginTop: 0
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    return React.createElement(
	      'div',
	      {
	        key: this.props.index,
	        className: this.props.className,
	        style: this.mergeAndPrefix(this.getStyles().root, this.props.firstChild && this.getStyles().rootWhenFirstChild, this.props.style) },
	      this.props.text
	    );
	  }

	});

	module.exports = SubheaderMenuItem;

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);
	var KeyCode = __webpack_require__(190);
	var DropDownArrow = __webpack_require__(261);
	var Paper = __webpack_require__(201);
	var Menu = __webpack_require__(254);
	var ClearFix = __webpack_require__(225);

	var DropDownMenu = React.createClass({
	  displayName: 'DropDownMenu',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  // The nested styles for drop-down-menu are modified by toolbar and possibly
	  // other user components, so it will give full access to its js styles rather
	  // than just the parent.
	  propTypes: {
	    className: React.PropTypes.string,
	    displayMember: React.PropTypes.string,
	    valueMember: React.PropTypes.string,
	    autoWidth: React.PropTypes.bool,
	    disabled: React.PropTypes.bool,
	    onChange: React.PropTypes.func,
	    menuItems: React.PropTypes.array.isRequired,
	    menuItemStyle: React.PropTypes.object,
	    underlineStyle: React.PropTypes.object,
	    iconStyle: React.PropTypes.object,
	    labelStyle: React.PropTypes.object,
	    selectedIndex: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      autoWidth: true,
	      disabled: false,
	      valueMember: 'payload',
	      displayMember: 'text'
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      open: false,
	      selectedIndex: this._isControlled() ? null : this.props.selectedIndex || 0
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    if (this.props.autoWidth) this._setWidth();
	    if (this.props.hasOwnProperty('selectedIndex')) this._setSelectedIndex(this.props);
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (this.props.autoWidth) this._setWidth();
	    if (nextProps.hasOwnProperty('value') || nextProps.hasOwnProperty('valueLink')) {
	      return;
	    } else if (nextProps.hasOwnProperty('selectedIndex')) {
	      this._setSelectedIndex(nextProps);
	    }
	  },

	  getStyles: function getStyles() {
	    var disabled = this.props.disabled;

	    var zIndex = 5; // As AppBar
	    var spacing = this.context.muiTheme.spacing;
	    var accentColor = this.context.muiTheme.component.dropDownMenu.accentColor;
	    var backgroundColor = this.context.muiTheme.component.menu.backgroundColor;
	    var styles = {
	      root: {
	        transition: Transitions.easeOut(),
	        position: 'relative',
	        display: 'inline-block',
	        height: spacing.desktopSubheaderHeight,
	        fontSize: spacing.desktopDropDownMenuFontSize,
	        outline: 'none'
	      },
	      control: {
	        cursor: disabled ? 'not-allowed' : 'pointer',
	        position: 'static',
	        height: '100%'
	      },
	      controlBg: {
	        transition: Transitions.easeOut(),
	        backgroundColor: backgroundColor,
	        height: '100%',
	        width: '100%',
	        opacity: 0
	      },
	      icon: {
	        position: 'absolute',
	        top: (spacing.desktopToolbarHeight - 24) / 2,
	        right: spacing.desktopGutterLess,
	        fill: this.context.muiTheme.component.dropDownMenu.accentColor
	      },
	      label: {
	        transition: Transitions.easeOut(),
	        lineHeight: spacing.desktopToolbarHeight + 'px',
	        position: 'absolute',
	        paddingLeft: spacing.desktopGutter,
	        top: 0,
	        opacity: 1,
	        color: disabled ? this.context.muiTheme.palette.disabledColor : this.context.muiTheme.palette.textColor
	      },
	      underline: {
	        borderTop: 'solid 1px ' + accentColor,
	        margin: '-1px ' + spacing.desktopGutter + 'px'
	      },
	      menu: {
	        zIndex: zIndex + 1
	      },
	      menuItem: {
	        paddingRight: spacing.iconSize + spacing.desktopGutterLess + spacing.desktopGutterMini,
	        height: spacing.desktopDropDownMenuItemHeight,
	        lineHeight: spacing.desktopDropDownMenuItemHeight + 'px',
	        whiteSpace: 'nowrap'
	      },
	      rootWhenOpen: {
	        opacity: 1
	      },
	      labelWhenOpen: {
	        opacity: 0,
	        top: spacing.desktopToolbarHeight / 2
	      },
	      overlay: {
	        height: '100%',
	        width: '100%',
	        position: 'fixed',
	        top: 0,
	        left: 0,
	        zIndex: zIndex
	      }
	    };

	    return styles;
	  },

	  getInputNode: function getInputNode() {
	    var root = this.refs.root;
	    var item = this.props.menuItems[this.state.selectedIndex];
	    if (item) {
	      root.value = item[this.props.displayMember];
	    }

	    return root;
	  },

	  render: function render() {
	    var _this = this;
	    var styles = this.getStyles();
	    var selectedIndex = this._isControlled() ? null : this.state.selectedIndex;
	    var displayValue = "";
	    if (selectedIndex) {
	      if (process.env.NODE_ENV !== 'production') {
	        console.assert(!!this.props.menuItems[selectedIndex], 'SelectedIndex of ' + selectedIndex + ' does not exist in menuItems.');
	      }
	    } else {
	      if (this.props.valueMember && this._isControlled()) {
	        var value = this.props.hasOwnProperty('value') ? this.props.value : this.props.valueLink.value;
	        if (value) {
	          for (var i = 0; i < this.props.menuItems.length; i++) {
	            if (this.props.menuItems[i][this.props.valueMember] === value) {
	              selectedIndex = i;
	            }
	          }
	        }
	      }
	    }

	    var selectedItem = this.props.menuItems[selectedIndex];
	    if (selectedItem) {
	      displayValue = selectedItem[this.props.displayMember];
	    }

	    var menuItems = this.props.menuItems.map(function (item) {
	      item.text = item[_this.props.displayMember];
	      item.payload = item[_this.props.valueMember];
	      return item;
	    });

	    return React.createElement(
	      'div',
	      {
	        ref: 'root',
	        onKeyDown: this._onKeyDown,
	        onFocus: this.props.onFocus,
	        onBlur: this.props.onBlur,
	        className: this.props.className,
	        style: this.mergeAndPrefix(styles.root, this.state.open && styles.rootWhenOpen, this.props.style) },
	      React.createElement(
	        ClearFix,
	        { style: this.mergeAndPrefix(styles.control), onTouchTap: this._onControlClick },
	        React.createElement(Paper, { style: this.mergeAndPrefix(styles.controlBg), zDepth: 0 }),
	        React.createElement(
	          'div',
	          { style: this.mergeAndPrefix(styles.label, this.state.open && styles.labelWhenOpen, this.props.labelStyle) },
	          displayValue
	        ),
	        React.createElement(DropDownArrow, { style: this.mergeAndPrefix(styles.icon, this.props.iconStyle) }),
	        React.createElement('div', { style: this.mergeAndPrefix(styles.underline, this.props.underlineStyle) })
	      ),
	      React.createElement(Menu, {
	        ref: 'menuItems',
	        autoWidth: this.props.autoWidth,
	        selectedIndex: selectedIndex,
	        menuItems: menuItems,
	        style: styles.menu,
	        menuItemStyle: this.mergeAndPrefix(styles.menuItem, this.props.menuItemStyle),
	        hideable: true,
	        visible: this.state.open,
	        onRequestClose: this._onMenuRequestClose,
	        onItemTap: this._onMenuItemClick }),
	      this.state.open && React.createElement('div', { style: styles.overlay, onTouchTap: this._handleOverlayTouchTap })
	    );
	  },

	  _setWidth: function _setWidth() {
	    var el = React.findDOMNode(this);
	    var menuItemsDom = React.findDOMNode(this.refs.menuItems);
	    if (!this.props.style || !this.props.style.hasOwnProperty('width')) {
	      el.style.width = 'auto';
	      el.style.width = menuItemsDom.offsetWidth + 'px';
	    }
	  },

	  _setSelectedIndex: function _setSelectedIndex(props) {
	    var selectedIndex = props.selectedIndex;

	    if (process.env.NODE_ENV !== 'production' && selectedIndex < 0) {
	      console.warn('Cannot set selectedIndex to a negative index.', selectedIndex);
	    }

	    this.setState({ selectedIndex: selectedIndex > -1 ? selectedIndex : 0 });
	  },

	  _onControlClick: function _onControlClick() {
	    if (!this.props.disabled) {
	      this.setState({ open: !this.state.open });
	    }
	  },

	  _onKeyDown: function _onKeyDown(e) {
	    switch (e.which) {
	      case KeyCode.UP:
	        if (!this.state.open) {
	          this._selectPreviousItem();
	        } else {
	          if (e.altKey) {
	            this.setState({ open: false });
	          }
	        }
	        break;
	      case KeyCode.DOWN:
	        if (!this.state.open) {
	          if (e.altKey) {
	            this.setState({ open: true });
	          } else {
	            this._selectNextItem();
	          }
	        }
	        break;
	      case KeyCode.ENTER:
	      case KeyCode.SPACE:
	        this.setState({ open: true });
	        break;
	      default:
	        return; //important
	    }
	    e.preventDefault();
	  },

	  _onMenuItemClick: function _onMenuItemClick(e, key, payload) {
	    if (this.props.onChange && this.state.selectedIndex !== key) {
	      var selectedItem = this.props.menuItems[key];
	      if (selectedItem) {
	        e.target.value = selectedItem[this.props.valueMember];
	      }

	      if (this.props.valueLink) {
	        this.props.valueLink.requestChange(e.target.value);
	      } else {
	        this.props.onChange(e, key, payload);
	      }
	    }

	    this.setState({
	      selectedIndex: key,
	      value: e.target.value,
	      open: false
	    });
	  },

	  _onMenuRequestClose: function _onMenuRequestClose() {
	    this.setState({ open: false });
	  },

	  _selectPreviousItem: function _selectPreviousItem() {
	    this.setState({ selectedIndex: Math.max(this.state.selectedIndex - 1, 0) });
	  },

	  _selectNextItem: function _selectNextItem() {
	    this.setState({ selectedIndex: Math.min(this.state.selectedIndex + 1, this.props.menuItems.length - 1) });
	  },

	  _handleOverlayTouchTap: function _handleOverlayTouchTap() {
	    this.setState({
	      open: false
	    });
	  },

	  _isControlled: function _isControlled() {
	    return this.props.hasOwnProperty('value') || this.props.hasOwnProperty('valueLink');
	  }

	});

	module.exports = DropDownMenu;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(200);

	var NavigationArrowDropDown = React.createClass({
	  displayName: 'NavigationArrowDropDown',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M7 10l5 5 5-5z' })
	    );
	  }

	});

	module.exports = NavigationArrowDropDown;

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);
	var ColorManipulator = __webpack_require__(216);
	var EnhancedButton = __webpack_require__(187);
	var FontIcon = __webpack_require__(197);
	var Paper = __webpack_require__(201);
	var Children = __webpack_require__(188);

	var getZDepth = function getZDepth(disabled) {
	  var zDepth = disabled ? 0 : 2;
	  return {
	    zDepth: zDepth,
	    initialZDepth: zDepth
	  };
	};

	var FloatingActionButton = React.createClass({
	  displayName: 'FloatingActionButton',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    backgroundColor: React.PropTypes.string,
	    disabled: React.PropTypes.bool,
	    disabledColor: React.PropTypes.string,
	    iconClassName: React.PropTypes.string,
	    iconStyle: React.PropTypes.object,
	    mini: React.PropTypes.bool,
	    onMouseDown: React.PropTypes.func,
	    onMouseUp: React.PropTypes.func,
	    onMouseLeave: React.PropTypes.func,
	    onTouchEnd: React.PropTypes.func,
	    onTouchStart: React.PropTypes.func,
	    secondary: React.PropTypes.bool
	  },

	  getInitialState: function getInitialState() {
	    var zDepth = this.props.disabled ? 0 : 2;
	    return {
	      hovered: false,
	      initialZDepth: zDepth,
	      touch: false,
	      zDepth: zDepth
	    };
	  },

	  componentWillMount: function componentWillMount() {
	    this.setState(getZDepth(this.props.disabled));
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
	    if (newProps.disabled !== this.props.disabled) {
	      this.setState(getZDepth(newProps.disabled));
	    }
	  },

	  componentDidMount: function componentDidMount() {
	    if (process.env.NODE_ENV !== 'production') {
	      if (this.props.iconClassName && this.props.children) {
	        var warning = 'You have set both an iconClassName and a child icon. ' + 'It is recommended you use only one method when adding ' + 'icons to FloatingActionButtons.';
	        console.warn(warning);
	      }
	    }
	  },

	  _getBackgroundColor: function _getBackgroundColor() {
	    return this.props.disabled ? this.props.disabledColor || this.getTheme().disabledColor : this.props.backgroundColor ? this.props.backgroundColor : this.props.secondary ? this.getTheme().secondaryColor : this.getTheme().color;
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.floatingActionButton;
	  },

	  _getIconColor: function _getIconColor() {
	    return this.props.disabled ? this.getTheme().disabledTextColor : this.props.secondary ? this.getTheme().secondaryIconColor : this.getTheme().iconColor;
	  },

	  getStyles: function getStyles() {
	    var themeVariables = this.context.muiTheme.component.floatingActionButton;

	    var styles = {
	      root: {
	        transition: Transitions.easeOut(),
	        display: 'inline-block'
	      },
	      container: {
	        transition: Transitions.easeOut(),
	        position: 'relative',
	        height: themeVariables.buttonSize,
	        width: themeVariables.buttonSize,
	        padding: 0,
	        overflow: 'hidden',
	        backgroundColor: this._getBackgroundColor(),
	        borderRadius: '50%',
	        textAlign: 'center',
	        verticalAlign: 'bottom',
	        //This is need so that ripples do not bleed
	        //past border radius.
	        //See: http://stackoverflow.com/questions/17298739/css-overflow-hidden-not-working-in-chrome-when-parent-has-border-radius-and-chil
	        transform: 'translate3d(0, 0, 0)'
	      },
	      containerWhenMini: {
	        height: themeVariables.miniSize,
	        width: themeVariables.miniSize
	      },
	      overlay: {
	        transition: Transitions.easeOut(),
	        top: 0
	      },
	      overlayWhenHovered: {
	        backgroundColor: ColorManipulator.fade(this._getIconColor(), 0.4)
	      },
	      icon: {
	        height: themeVariables.buttonSize,
	        lineHeight: themeVariables.buttonSize + 'px',
	        fill: themeVariables.iconColor,
	        color: this._getIconColor()
	      },
	      iconWhenMini: {
	        height: themeVariables.miniSize,
	        lineHeight: themeVariables.miniSize + 'px'
	      }
	    };
	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var disabled = _props.disabled;
	    var mini = _props.mini;
	    var secondary = _props.secondary;
	    var iconStyle = _props.iconStyle;
	    var iconClassName = _props.iconClassName;

	    var other = _objectWithoutProperties(_props, ['disabled', 'mini', 'secondary', 'iconStyle', 'iconClassName']);

	    var styles = this.getStyles();

	    var iconElement = undefined;
	    if (iconClassName) {
	      iconElement = React.createElement(FontIcon, {
	        className: iconClassName,
	        style: this.mergeAndPrefix(styles.icon, mini && styles.iconWhenMini, iconStyle) });
	    }

	    var children = Children.extend(this.props.children, {
	      style: this.mergeAndPrefix(styles.icon, mini && styles.iconWhenMini, iconStyle)
	    });

	    var buttonEventHandlers = disabled ? null : {
	      onMouseDown: this._handleMouseDown,
	      onMouseUp: this._handleMouseUp,
	      onMouseLeave: this._handleMouseLeave,
	      onMouseEnter: this._handleMouseEnter,
	      onTouchStart: this._handleTouchStart,
	      onTouchEnd: this._handleTouchEnd,
	      onKeyboardFocus: this._handleKeyboardFocus
	    };

	    return React.createElement(
	      Paper,
	      {
	        style: this.mergeAndPrefix(styles.root, this.props.style),
	        zDepth: this.state.zDepth,
	        circle: true },
	      React.createElement(
	        EnhancedButton,
	        _extends({}, other, buttonEventHandlers, {
	          ref: 'container',
	          disabled: disabled,
	          style: this.mergeAndPrefix(styles.container, this.props.mini && styles.containerWhenMini),
	          focusRippleColor: styles.icon.color,
	          touchRippleColor: styles.icon.color }),
	        React.createElement(
	          'div',
	          {
	            ref: 'overlay',
	            style: this.mergeAndPrefix(styles.overlay, this.state.hovered && !this.props.disabled && styles.overlayWhenHovered) },
	          iconElement,
	          children
	        )
	      )
	    );
	  },

	  _handleMouseDown: function _handleMouseDown(e) {
	    //only listen to left clicks
	    if (e.button === 0) {
	      this.setState({ zDepth: this.state.initialZDepth + 1 });
	    }
	    if (this.props.onMouseDown) this.props.onMouseDown(e);
	  },

	  _handleMouseUp: function _handleMouseUp(e) {
	    this.setState({ zDepth: this.state.initialZDepth });
	    if (this.props.onMouseUp) this.props.onMouseUp(e);
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    if (!this.refs.container.isKeyboardFocused()) this.setState({ zDepth: this.state.initialZDepth, hovered: false });
	    if (this.props.onMouseLeave) this.props.onMouseLeave(e);
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    if (!this.refs.container.isKeyboardFocused() && !this.state.touch) {
	      this.setState({ hovered: true });
	    }
	    if (this.props.onMouseEnter) this.props.onMouseEnter(e);
	  },

	  _handleTouchStart: function _handleTouchStart(e) {
	    this.setState({
	      touch: true,
	      zDepth: this.state.initialZDepth + 1
	    });
	    if (this.props.onTouchStart) this.props.onTouchStart(e);
	  },

	  _handleTouchEnd: function _handleTouchEnd(e) {
	    this.setState({ zDepth: this.state.initialZDepth });
	    if (this.props.onTouchEnd) this.props.onTouchEnd(e);
	  },

	  _handleKeyboardFocus: function _handleKeyboardFocus(e, keyboardFocused) {
	    if (keyboardFocused && !this.props.disabled) {
	      this.setState({ zDepth: this.state.initialZDepth + 1 });
	      React.findDOMNode(this.refs.overlay).style.backgroundColor = ColorManipulator.fade(this.getStyles().icon.color, 0.4);
	    } else if (!this.state.hovered) {
	      this.setState({ zDepth: this.state.initialZDepth });
	      React.findDOMNode(this.refs.overlay).style.backgroundColor = 'transparent';
	    }
	  }

	});

	module.exports = FloatingActionButton;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(161);
	var ReactTransitionGroup = React.addons.TransitionGroup;
	var ClickAwayable = __webpack_require__(253);
	var StylePropable = __webpack_require__(159);
	var Events = __webpack_require__(189);
	var PropTypes = __webpack_require__(186);
	var Menu = __webpack_require__(264);

	var IconMenu = React.createClass({
	  displayName: 'IconMenu',

	  mixins: [StylePropable, ClickAwayable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    closeOnItemTouchTap: React.PropTypes.bool,
	    iconButtonElement: React.PropTypes.element.isRequired,
	    openDirection: PropTypes.corners,
	    onItemTouchTap: React.PropTypes.func,
	    onKeyboardFocus: React.PropTypes.func,
	    onMouseDown: React.PropTypes.func,
	    onMouseLeave: React.PropTypes.func,
	    onMouseEnter: React.PropTypes.func,
	    onMouseUp: React.PropTypes.func,
	    onTouchTap: React.PropTypes.func,
	    menuStyle: React.PropTypes.object,
	    touchTapCloseDelay: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      closeOnItemTouchTap: true,
	      openDirection: 'bottom-left',
	      onItemTouchTap: function onItemTouchTap() {},
	      onKeyboardFocus: function onKeyboardFocus() {},
	      onMouseDown: function onMouseDown() {},
	      onMouseLeave: function onMouseLeave() {},
	      onMouseEnter: function onMouseEnter() {},
	      onMouseUp: function onMouseUp() {},
	      onTouchTap: function onTouchTap() {},
	      touchTapCloseDelay: 200
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      iconButtonRef: this.props.iconButtonElement.props.ref || 'iconButton',
	      menuInitiallyKeyboardFocused: false,
	      open: false
	    };
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this._timeout) clearTimeout(this._timeout);
	  },

	  componentClickAway: function componentClickAway() {
	    this.close();
	  },

	  render: function render() {
	    var _this = this;

	    var _props = this.props;
	    var closeOnItemTouchTap = _props.closeOnItemTouchTap;
	    var iconButtonElement = _props.iconButtonElement;
	    var openDirection = _props.openDirection;
	    var onItemTouchTap = _props.onItemTouchTap;
	    var onKeyboardFocus = _props.onKeyboardFocus;
	    var onMouseDown = _props.onMouseDown;
	    var onMouseLeave = _props.onMouseLeave;
	    var onMouseEnter = _props.onMouseEnter;
	    var onMouseUp = _props.onMouseUp;
	    var onTouchTap = _props.onTouchTap;
	    var menuStyle = _props.menuStyle;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['closeOnItemTouchTap', 'iconButtonElement', 'openDirection', 'onItemTouchTap', 'onKeyboardFocus', 'onMouseDown', 'onMouseLeave', 'onMouseEnter', 'onMouseUp', 'onTouchTap', 'menuStyle', 'style']);

	    var open = this.state.open;
	    var openDown = openDirection.split('-')[0] === 'bottom';
	    var openLeft = openDirection.split('-')[1] === 'left';

	    var styles = {
	      root: {
	        display: 'inline-block',
	        position: 'relative'
	      },

	      menu: {
	        top: openDown ? 12 : null,
	        bottom: !openDown ? 12 : null,
	        left: !openLeft ? 12 : null,
	        right: openLeft ? 12 : null
	      }
	    };

	    var mergedRootStyles = this.mergeAndPrefix(styles.root, style);
	    var mergedMenuStyles = this.mergeStyles(styles.menu, menuStyle);

	    var iconButton = React.cloneElement(iconButtonElement, {
	      onKeyboardFocus: this.props.onKeyboardFocus,
	      onTouchTap: (function (e) {
	        _this.open(Events.isKeyboard(e));
	        if (iconButtonElement.props.onTouchTap) iconButtonElement.props.onTouchTap(e);
	      }).bind(this),
	      ref: this.state.iconButtonRef
	    });

	    var menu = open ? React.createElement(
	      Menu,
	      _extends({}, other, {
	        animated: true,
	        initiallyKeyboardFocused: this.state.menuInitiallyKeyboardFocused,
	        onEscKeyDown: this._handleMenuEscKeyDown,
	        onItemTouchTap: this._handleItemTouchTap,
	        openDirection: openDirection,
	        style: mergedMenuStyles }),
	      this.props.children
	    ) : null;

	    return React.createElement(
	      'div',
	      {
	        onMouseDown: onMouseDown,
	        onMouseLeave: onMouseLeave,
	        onMouseEnter: onMouseEnter,
	        onMouseUp: onMouseUp,
	        onTouchTap: onTouchTap,
	        style: mergedRootStyles },
	      iconButton,
	      React.createElement(
	        ReactTransitionGroup,
	        null,
	        menu
	      )
	    );
	  },

	  isOpen: function isOpen() {
	    return this.state.open;
	  },

	  close: function close(isKeyboard) {
	    var _this2 = this;

	    if (this.state.open) {
	      this.setState({ open: false }, function () {
	        //Set focus on the icon button when the menu close
	        if (isKeyboard) {
	          var iconButton = _this2.refs[_this2.state.iconButtonRef];
	          React.findDOMNode(iconButton).focus();
	          iconButton.setKeyboardFocus();
	        }
	      });
	    }
	  },

	  open: function open(menuInitiallyKeyboardFocused) {
	    if (!this.state.open) {
	      this.setState({
	        open: true,
	        menuInitiallyKeyboardFocused: menuInitiallyKeyboardFocused
	      });
	    }
	  },

	  _handleItemTouchTap: function _handleItemTouchTap(e, child) {
	    var _this3 = this;

	    if (this.props.closeOnItemTouchTap) {
	      (function () {
	        var isKeyboard = Events.isKeyboard(e);

	        _this3._timeout = setTimeout(function () {
	          _this3.close(isKeyboard);
	        }, _this3.props.touchTapCloseDelay);
	      })();
	    }

	    this.props.onItemTouchTap(e, child);
	  },

	  _handleMenuEscKeyDown: function _handleMenuEscKeyDown() {
	    this.close(true);
	  }

	});

	module.exports = IconMenu;

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(161);
	var update = React.addons.update;
	var Controllable = __webpack_require__(265);
	var StylePropable = __webpack_require__(159);
	var AutoPrefix = __webpack_require__(180);
	var Transitions = __webpack_require__(185);
	var KeyCode = __webpack_require__(190);
	var PropTypes = __webpack_require__(186);
	var List = __webpack_require__(266);
	var Paper = __webpack_require__(201);

	var Menu = React.createClass({
	  displayName: 'Menu',

	  mixins: [StylePropable, Controllable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    animated: React.PropTypes.bool,
	    autoWidth: React.PropTypes.bool,
	    desktop: React.PropTypes.bool,
	    initiallyKeyboardFocused: React.PropTypes.bool,
	    listStyle: React.PropTypes.object,
	    maxHeight: React.PropTypes.number,
	    multiple: React.PropTypes.bool,
	    onEscKeyDown: React.PropTypes.func,
	    onItemTouchTap: React.PropTypes.func,
	    onKeyDown: React.PropTypes.func,
	    openDirection: PropTypes.corners,
	    selectedMenuItemStyle: React.PropTypes.object,
	    width: PropTypes.stringOrNumber,
	    zDepth: PropTypes.zDepth
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      animated: false,
	      autoWidth: true,
	      maxHeight: null,
	      onEscKeyDown: function onEscKeyDown() {},
	      onItemTouchTap: function onItemTouchTap() {},
	      onKeyDown: function onKeyDown() {},
	      openDirection: 'bottom-left',
	      zDepth: 1
	    };
	  },

	  getInitialState: function getInitialState() {
	    var selectedIndex = this._getSelectedIndex(this.props);

	    return {
	      focusIndex: selectedIndex >= 0 ? selectedIndex : 0,
	      isKeyboardFocused: this.props.initiallyKeyboardFocused,
	      keyWidth: this.props.desktop ? 64 : 56
	    };
	  },

	  componentDidEnter: function componentDidEnter() {
	    this._animateOpen();
	  },

	  componentDidMount: function componentDidMount() {
	    if (this.props.autoWidth) this._setWidth();
	    if (!this.props.animated) this._animateOpen();
	    this._setScollPosition();
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this.props.autoWidth) this._setWidth();
	  },

	  componentWillLeave: function componentWillLeave(callback) {
	    var _this = this;

	    var rootStyle = React.findDOMNode(this).style;

	    AutoPrefix.set(rootStyle, 'transition', Transitions.easeOut('250ms', ['opacity', 'transform']));
	    AutoPrefix.set(rootStyle, 'transform', 'translate3d(0,-8px,0)');
	    rootStyle.opacity = 0;

	    setTimeout((function () {
	      if (_this.isMounted()) callback();
	    }).bind(this), 250);
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var selectedIndex = this._getSelectedIndex(nextProps);

	    this.setState({
	      focusIndex: selectedIndex >= 0 ? selectedIndex : 0,
	      keyWidth: nextProps.desktop ? 64 : 56
	    });
	  },

	  render: function render() {
	    var _this2 = this;

	    var _props = this.props;
	    var animated = _props.animated;
	    var autoWidth = _props.autoWidth;
	    var children = _props.children;
	    var desktop = _props.desktop;
	    var initiallyKeyboardFocused = _props.initiallyKeyboardFocused;
	    var listStyle = _props.listStyle;
	    var maxHeight = _props.maxHeight;
	    var multiple = _props.multiple;
	    var openDirection = _props.openDirection;
	    var selectedMenuItemStyle = _props.selectedMenuItemStyle;
	    var style = _props.style;
	    var value = _props.value;
	    var valueLink = _props.valueLink;
	    var width = _props.width;
	    var zDepth = _props.zDepth;

	    var other = _objectWithoutProperties(_props, ['animated', 'autoWidth', 'children', 'desktop', 'initiallyKeyboardFocused', 'listStyle', 'maxHeight', 'multiple', 'openDirection', 'selectedMenuItemStyle', 'style', 'value', 'valueLink', 'width', 'zDepth']);

	    var openDown = openDirection.split('-')[0] === 'bottom';
	    var openLeft = openDirection.split('-')[1] === 'left';

	    var styles = {
	      root: {
	        //Nested div bacause the List scales x faster than
	        //it scales y
	        transition: animated ? Transitions.easeOut('250ms', 'transform') : null,
	        position: 'absolute',
	        zIndex: 10,
	        top: openDown ? 0 : null,
	        bottom: !openDown ? 0 : null,
	        left: !openLeft ? 0 : null,
	        right: openLeft ? 0 : null,
	        transform: 'scaleX(0)',
	        transformOrigin: openLeft ? 'right' : 'left'
	      },

	      list: {
	        display: 'table-cell',
	        paddingBottom: desktop ? 16 : 8,
	        paddingTop: desktop ? 16 : 8,
	        userSelect: 'none',
	        width: width
	      },

	      menuItemContainer: {
	        transition: animated ? Transitions.easeOut(null, 'opacity') : null,
	        opacity: 0
	      },

	      paper: {
	        transition: animated ? Transitions.easeOut('500ms', ['transform', 'opacity']) : null,
	        transform: 'scaleY(0)',
	        transformOrigin: openDown ? 'top' : 'bottom',
	        opacity: 0,
	        maxHeight: maxHeight,
	        overflowY: maxHeight ? 'scroll' : null
	      },

	      selectedMenuItem: {
	        color: this.context.muiTheme.palette.accent1Color
	      }
	    };

	    var mergedRootStyles = this.mergeAndPrefix(styles.root, style);
	    var mergedListStyles = this.mergeStyles(styles.list, listStyle);

	    //Cascade children opacity
	    var cumulativeDelay = openDown ? 175 : 325;
	    var cascadeChildrenCount = this._getCascadeChildrenCount();
	    var cumulativeDelayIncrement = Math.ceil(150 / cascadeChildrenCount);

	    var menuItemIndex = 0;
	    var newChildren = React.Children.map(children, (function (child) {

	      var childIsADivider = child.type.displayName === 'MenuDivider';
	      var childIsDisabled = child.props.disabled;
	      var childrenContainerStyles = {};

	      if (animated) {
	        var focusIndex = _this2.state.focusIndex;
	        var transitionDelay = 0;

	        //Only cascade the visible menu items
	        if (menuItemIndex >= focusIndex - 1 && menuItemIndex <= focusIndex + cascadeChildrenCount - 1) {
	          cumulativeDelay = openDown ? cumulativeDelay + cumulativeDelayIncrement : cumulativeDelay - cumulativeDelayIncrement;
	          transitionDelay = cumulativeDelay;
	        }

	        childrenContainerStyles = _this2.mergeAndPrefix(styles.menuItemContainer, {
	          transitionDelay: transitionDelay + 'ms'
	        });
	      }

	      var clonedChild = childIsADivider ? child : childIsDisabled ? React.cloneElement(child, { desktop: desktop }) : _this2._cloneMenuItem(child, menuItemIndex, styles);

	      if (!childIsADivider && !childIsDisabled) menuItemIndex++;

	      return animated ? React.createElement(
	        'div',
	        { style: childrenContainerStyles },
	        clonedChild
	      ) : clonedChild;
	    }).bind(this));

	    return React.createElement(
	      'div',
	      {
	        onKeyDown: this._handleKeyDown,
	        style: mergedRootStyles },
	      React.createElement(
	        Paper,
	        {
	          ref: 'scrollContainer',
	          style: styles.paper,
	          zDepth: zDepth },
	        React.createElement(
	          List,
	          _extends({}, other, {
	            ref: 'list',
	            style: mergedListStyles }),
	          newChildren
	        )
	      )
	    );
	  },

	  setKeyboardFocused: function setKeyboardFocused(keyboardFocused) {
	    this.setState({
	      isKeyboardFocused: keyboardFocused
	    });
	  },

	  _animateOpen: function _animateOpen() {
	    var rootStyle = React.findDOMNode(this).style;
	    var scrollContainerStyle = React.findDOMNode(this.refs.scrollContainer).style;
	    var menuContainers = React.findDOMNode(this.refs.list).childNodes;

	    AutoPrefix.set(rootStyle, 'transform', 'scaleX(1)');
	    AutoPrefix.set(scrollContainerStyle, 'transform', 'scaleY(1)');
	    scrollContainerStyle.opacity = 1;

	    for (var i = 0; i < menuContainers.length; ++i) {
	      menuContainers[i].style.opacity = 1;
	    }
	  },

	  _cloneMenuItem: function _cloneMenuItem(child, childIndex, styles) {
	    var _this3 = this;

	    var _props2 = this.props;
	    var desktop = _props2.desktop;
	    var selectedMenuItemStyle = _props2.selectedMenuItemStyle;

	    var selected = this._isChildSelected(child, this.props);
	    var selectedChildrenStyles = {};

	    if (selected) {
	      selectedChildrenStyles = this.mergeStyles(styles.selectedMenuItem, selectedMenuItemStyle);
	    }

	    var mergedChildrenStyles = this.mergeStyles(child.props.style || {}, selectedChildrenStyles);

	    var isFocused = childIndex === this.state.focusIndex;
	    var focusState = 'none';
	    if (isFocused) {
	      focusState = this.state.isKeyboardFocused ? 'keyboard-focused' : 'focused';
	    }

	    return React.cloneElement(child, {
	      desktop: desktop,
	      focusState: focusState,
	      onTouchTap: function onTouchTap(e) {
	        _this3._handleMenuItemTouchTap(e, child);
	        if (child.props.onTouchTap) child.props.onTouchTap(e);
	      },
	      ref: isFocused ? 'focusedMenuItem' : null,
	      style: mergedChildrenStyles
	    });
	  },

	  _decrementKeyboardFocusIndex: function _decrementKeyboardFocusIndex() {
	    var index = this.state.focusIndex;

	    index--;
	    if (index < 0) index = 0;

	    this._setFocusIndex(index, true);
	  },

	  _getCascadeChildrenCount: function _getCascadeChildrenCount() {
	    var _props3 = this.props;
	    var children = _props3.children;
	    var desktop = _props3.desktop;
	    var maxHeight = _props3.maxHeight;

	    var count = 1;
	    var currentHeight = desktop ? 16 : 8;
	    var menuItemHeight = desktop ? 32 : 48;

	    //MaxHeight isn't set - cascade all of the children
	    if (!maxHeight) return React.Children.count(children);

	    //Count all the children that will fit inside the
	    //max menu height
	    React.Children.forEach(children, function (child) {
	      if (currentHeight < maxHeight) {
	        var childIsADivider = child.type.displayName === 'MenuDivider';

	        currentHeight += childIsADivider ? 16 : menuItemHeight;
	        count++;
	      }
	    });

	    return count;
	  },

	  _getMenuItemCount: function _getMenuItemCount() {
	    var menuItemCount = 0;
	    React.Children.forEach(this.props.children, function (child) {
	      var childIsADivider = child.type.displayName === 'MenuDivider';
	      var childIsDisabled = child.props.disabled;
	      if (!childIsADivider && !childIsDisabled) menuItemCount++;
	    });
	    return menuItemCount;
	  },

	  _getSelectedIndex: function _getSelectedIndex(props) {
	    var _this4 = this;

	    var children = props.children;

	    var selectedIndex = -1;
	    var menuItemIndex = 0;

	    React.Children.forEach(children, (function (child) {
	      var childIsADivider = child.type.displayName === 'MenuDivider';

	      if (_this4._isChildSelected(child, props)) selectedIndex = menuItemIndex;
	      if (!childIsADivider) menuItemIndex++;
	    }).bind(this));

	    return selectedIndex;
	  },

	  _handleKeyDown: function _handleKeyDown(e) {
	    switch (e.keyCode) {
	      case KeyCode.DOWN:
	        e.preventDefault();
	        this._incrementKeyboardFocusIndex();
	        break;
	      case KeyCode.ESC:
	        this.props.onEscKeyDown(e);
	        break;
	      case KeyCode.TAB:
	        e.preventDefault();
	        if (e.shiftKey) {
	          this._decrementKeyboardFocusIndex();
	        } else {
	          this._incrementKeyboardFocusIndex();
	        }
	        break;
	      case KeyCode.UP:
	        e.preventDefault();
	        this._decrementKeyboardFocusIndex();
	        break;
	    }
	    this.props.onKeyDown(e);
	  },

	  _handleMenuItemTouchTap: function _handleMenuItemTouchTap(e, item) {
	    var multiple = this.props.multiple;
	    var valueLink = this.getValueLink(this.props);
	    var menuValue = valueLink.value;
	    var itemValue = item.props.value;

	    if (multiple) {
	      var index = menuValue.indexOf(itemValue);
	      var newMenuValue = index === -1 ? update(menuValue, { $push: [itemValue] }) : update(menuValue, { $splice: [[index, 1]] });

	      valueLink.requestChange(e, newMenuValue);
	    } else if (!multiple && itemValue !== menuValue) {
	      valueLink.requestChange(e, itemValue);
	    }

	    this.props.onItemTouchTap(e, item);
	  },

	  _incrementKeyboardFocusIndex: function _incrementKeyboardFocusIndex() {
	    var index = this.state.focusIndex;
	    var maxIndex = this._getMenuItemCount() - 1;

	    index++;
	    if (index > maxIndex) index = maxIndex;

	    this._setFocusIndex(index, true);
	  },

	  _isChildSelected: function _isChildSelected(child, props) {
	    var multiple = props.multiple;
	    var menuValue = this.getValueLink(props).value;
	    var childValue = child.props.value;

	    return multiple && menuValue.length && menuValue.indexOf(childValue) !== -1 || !multiple && menuValue && menuValue === childValue;
	  },

	  _setFocusIndex: function _setFocusIndex(newIndex, isKeyboardFocused) {
	    this.setState({
	      focusIndex: newIndex,
	      isKeyboardFocused: isKeyboardFocused
	    });
	  },

	  _setScollPosition: function _setScollPosition() {
	    var desktop = this.props.desktop;
	    var focusedMenuItem = this.refs.focusedMenuItem;
	    var menuItemHeight = desktop ? 32 : 48;

	    if (focusedMenuItem) {
	      var selectedOffSet = React.findDOMNode(focusedMenuItem).offsetTop;

	      //Make the focused item be the 2nd item in the list the
	      //user sees
	      var scrollTop = selectedOffSet - menuItemHeight;
	      if (scrollTop < menuItemHeight) scrollTop = 0;

	      React.findDOMNode(this.refs.scrollContainer).scrollTop = scrollTop;
	    }
	  },

	  _setWidth: function _setWidth() {
	    var el = React.findDOMNode(this);
	    var listEl = React.findDOMNode(this.refs.list);
	    var elWidth = el.offsetWidth;
	    var keyWidth = this.state.keyWidth;
	    var minWidth = keyWidth * 1.5;
	    var keyIncrements = elWidth / keyWidth;
	    var newWidth = undefined;

	    keyIncrements = keyIncrements <= 1.5 ? 1.5 : Math.ceil(keyIncrements);
	    newWidth = keyIncrements * keyWidth;

	    if (newWidth < minWidth) newWidth = minWidth;

	    el.style.width = newWidth + 'px';
	    listEl.style.width = newWidth + 'px';
	  }

	});

	module.exports = Menu;

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);

	module.exports = {

	  propTypes: {
	    onChange: React.PropTypes.func,
	    value: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.array]),
	    valueLink: React.PropTypes.shape({
	      value: React.PropTypes.string.isRequired,
	      requestChange: React.PropTypes.func.isRequired
	    })
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onChange: function onChange() {}
	    };
	  },

	  getValueLink: function getValueLink(props) {
	    return props.valueLink || {
	      value: props.value,
	      requestChange: props.onChange
	    };
	  }

	};

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var PropTypes = __webpack_require__(186);
	var StylePropable = __webpack_require__(159);
	var Typography = __webpack_require__(182);
	var Paper = __webpack_require__(201);

	var List = React.createClass({
	  displayName: 'List',

	  mixins: [PureRenderMixin, StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    insetSubheader: React.PropTypes.bool,
	    subheader: React.PropTypes.string,
	    subheaderStyle: React.PropTypes.object,
	    zDepth: PropTypes.zDepth
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      zDepth: 0
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var insetSubheader = _props.insetSubheader;
	    var style = _props.style;
	    var subheader = _props.subheader;
	    var subheaderStyle = _props.subheaderStyle;
	    var zDepth = _props.zDepth;

	    var other = _objectWithoutProperties(_props, ['children', 'insetSubheader', 'style', 'subheader', 'subheaderStyle', 'zDepth']);

	    var styles = {
	      root: {
	        padding: 0,
	        paddingBottom: 8,
	        paddingTop: subheader ? 0 : 8
	      },

	      subheader: {
	        color: Typography.textLightBlack,
	        fontSize: 14,
	        fontWeight: Typography.fontWeightMedium,
	        lineHeight: '48px',
	        paddingLeft: insetSubheader ? 72 : 16
	      }
	    };

	    var subheaderElement = undefined;
	    if (subheader) {
	      var mergedSubheaderStyles = this.mergeAndPrefix(styles.subheader, subheaderStyle);
	      subheaderElement = React.createElement(
	        'div',
	        { style: mergedSubheaderStyles },
	        subheader
	      );
	    }

	    return React.createElement(
	      Paper,
	      _extends({}, other, {
	        style: this.mergeStyles(styles.root, style),
	        zDepth: zDepth }),
	      subheaderElement,
	      children
	    );
	  }
	});

	module.exports = List;

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isBrowser = typeof window !== 'undefined';
	var Modernizr = isBrowser ? __webpack_require__(181) : undefined;

	var React = __webpack_require__(1);
	var KeyCode = __webpack_require__(190);
	var StylePropable = __webpack_require__(159);
	var AutoPrefix = __webpack_require__(180);
	var Transitions = __webpack_require__(185);
	var WindowListenable = __webpack_require__(224);
	var Overlay = __webpack_require__(249);
	var Paper = __webpack_require__(201);
	var Menu = __webpack_require__(254);

	var openNavEventHandler = null;

	var LeftNav = React.createClass({
	  displayName: 'LeftNav',

	  mixins: [StylePropable, WindowListenable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    className: React.PropTypes.string,
	    disableSwipeToOpen: React.PropTypes.bool,
	    docked: React.PropTypes.bool,
	    header: React.PropTypes.element,
	    menuItems: React.PropTypes.array.isRequired,
	    onChange: React.PropTypes.func,
	    onNavOpen: React.PropTypes.func,
	    onNavClose: React.PropTypes.func,
	    openRight: React.PropTypes.bool,
	    selectedIndex: React.PropTypes.number,
	    menuItemClassName: React.PropTypes.string,
	    menuItemClassNameSubheader: React.PropTypes.string,
	    menuItemClassNameLink: React.PropTypes.string
	  },

	  windowListeners: {
	    'keyup': '_onWindowKeyUp',
	    'resize': '_onWindowResize'
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      disableSwipeToOpen: false,
	      docked: true
	    };
	  },

	  getInitialState: function getInitialState() {
	    this._maybeSwiping = false;
	    this._touchStartX = null;
	    this._touchStartY = null;
	    this._swipeStartX = null;

	    return {
	      open: this.props.docked,
	      swiping: null
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    this._updateMenuHeight();
	    this._enableSwipeHandling();
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this._updateMenuHeight();
	    this._enableSwipeHandling();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this._disableSwipeHandling();
	  },

	  toggle: function toggle() {
	    this.setState({ open: !this.state.open });
	    return this;
	  },

	  close: function close() {
	    this.setState({ open: false });
	    if (this.props.onNavClose) this.props.onNavClose();
	    return this;
	  },

	  open: function open() {
	    this.setState({ open: true });
	    if (this.props.onNavOpen) this.props.onNavOpen();
	    return this;
	  },

	  getThemePalette: function getThemePalette() {
	    return this.context.muiTheme.palette;
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.leftNav;
	  },

	  getStyles: function getStyles() {
	    var x = this._getTranslateMultiplier() * (this.state.open ? 0 : this._getMaxTranslateX());
	    var styles = {
	      root: {
	        height: '100%',
	        width: this.getTheme().width,
	        position: 'fixed',
	        zIndex: 10,
	        left: isBrowser && Modernizr.csstransforms3d ? 0 : x,
	        top: 0,
	        transform: 'translate3d(' + x + 'px, 0, 0)',
	        transition: !this.state.swiping && Transitions.easeOut(),
	        backgroundColor: this.getTheme().color,
	        overflow: 'hidden'
	      },
	      menu: {
	        overflowY: 'auto',
	        overflowX: 'hidden',
	        height: '100%',
	        borderRadius: '0'
	      },
	      menuItem: {
	        height: this.context.muiTheme.spacing.desktopLeftNavMenuItemHeight,
	        lineHeight: this.context.muiTheme.spacing.desktopLeftNavMenuItemHeight + 'px'
	      },
	      rootWhenOpenRight: {
	        left: 'auto',
	        right: 0
	      }
	    };

	    styles.menuItemLink = this.mergeAndPrefix(styles.menuItem, {
	      display: 'block',
	      textDecoration: 'none',
	      color: this.getThemePalette().textColor
	    });
	    styles.menuItemSubheader = this.mergeAndPrefix(styles.menuItem, {
	      overflow: 'hidden'
	    });

	    return styles;
	  },

	  render: function render() {
	    var selectedIndex = this.props.selectedIndex;
	    var overlay = undefined;

	    var styles = this.getStyles();
	    if (!this.props.docked) {
	      overlay = React.createElement(Overlay, {
	        ref: 'overlay',
	        show: this.state.open || !!this.state.swiping,
	        transitionEnabled: !this.state.swiping,
	        onTouchTap: this._onOverlayTouchTap
	      });
	    }

	    return React.createElement(
	      'div',
	      { className: this.props.className },
	      overlay,
	      React.createElement(
	        Paper,
	        {
	          ref: 'clickAwayableElement',
	          zDepth: 2,
	          rounded: false,
	          transitionEnabled: !this.state.swiping,
	          style: this.mergeAndPrefix(styles.root, this.props.openRight && styles.rootWhenOpenRight, this.props.style) },
	        this.props.header,
	        React.createElement(Menu, {
	          ref: 'menuItems',
	          style: this.mergeAndPrefix(styles.menu),
	          zDepth: 0,
	          menuItems: this.props.menuItems,
	          menuItemStyle: this.mergeAndPrefix(styles.menuItem),
	          menuItemStyleLink: this.mergeAndPrefix(styles.menuItemLink),
	          menuItemStyleSubheader: this.mergeAndPrefix(styles.menuItemSubheader),
	          menuItemClassName: this.props.menuItemClassName,
	          menuItemClassNameSubheader: this.props.menuItemClassNameSubheader,
	          menuItemClassNameLink: this.props.menuItemClassNameLink,
	          selectedIndex: selectedIndex,
	          onItemTap: this._onMenuItemClick })
	      )
	    );
	  },

	  _updateMenuHeight: function _updateMenuHeight() {
	    if (this.props.header) {
	      var container = React.findDOMNode(this.refs.clickAwayableElement);
	      var menu = React.findDOMNode(this.refs.menuItems);
	      var menuHeight = container.clientHeight - menu.offsetTop;
	      menu.style.height = menuHeight + 'px';
	    }
	  },

	  _onMenuItemClick: function _onMenuItemClick(e, key, payload) {
	    if (this.props.onChange && this.props.selectedIndex !== key) {
	      this.props.onChange(e, key, payload);
	    }
	    if (!this.props.docked) this.close();
	  },

	  _onOverlayTouchTap: function _onOverlayTouchTap() {
	    this.close();
	  },

	  _onWindowKeyUp: function _onWindowKeyUp(e) {
	    if (e.keyCode === KeyCode.ESC && !this.props.docked && this.state.open) {
	      this.close();
	    }
	  },

	  _onWindowResize: function _onWindowResize() {
	    this._updateMenuHeight();
	  },

	  _getMaxTranslateX: function _getMaxTranslateX() {
	    return this.getTheme().width + 10;
	  },

	  _getTranslateMultiplier: function _getTranslateMultiplier() {
	    return this.props.openRight ? 1 : -1;
	  },

	  _enableSwipeHandling: function _enableSwipeHandling() {
	    if (!this.props.docked) {
	      document.body.addEventListener('touchstart', this._onBodyTouchStart);
	      if (!openNavEventHandler) {
	        openNavEventHandler = this._onBodyTouchStart;
	      }
	    } else {
	      this._disableSwipeHandling();
	    }
	  },

	  _disableSwipeHandling: function _disableSwipeHandling() {
	    document.body.removeEventListener('touchstart', this._onBodyTouchStart);
	    if (openNavEventHandler === this._onBodyTouchStart) {
	      openNavEventHandler = null;
	    }
	  },

	  _onBodyTouchStart: function _onBodyTouchStart(e) {
	    if (!this.state.open && (openNavEventHandler !== this._onBodyTouchStart || this.props.disableSwipeToOpen)) {
	      return;
	    }

	    var touchStartX = e.touches[0].pageX;
	    var touchStartY = e.touches[0].pageY;

	    this._maybeSwiping = true;
	    this._touchStartX = touchStartX;
	    this._touchStartY = touchStartY;

	    document.body.addEventListener('touchmove', this._onBodyTouchMove);
	    document.body.addEventListener('touchend', this._onBodyTouchEnd);
	    document.body.addEventListener('touchcancel', this._onBodyTouchEnd);
	  },

	  _setPosition: function _setPosition(translateX) {
	    var leftNav = React.findDOMNode(this.refs.clickAwayableElement);
	    leftNav.style[AutoPrefix.single('transform')] = 'translate3d(' + this._getTranslateMultiplier() * translateX + 'px, 0, 0)';
	    this.refs.overlay.setOpacity(1 - translateX / this._getMaxTranslateX());
	  },

	  _getTranslateX: function _getTranslateX(currentX) {
	    return Math.min(Math.max(this.state.swiping === 'closing' ? this._getTranslateMultiplier() * (currentX - this._swipeStartX) : this._getMaxTranslateX() - this._getTranslateMultiplier() * (this._swipeStartX - currentX), 0), this._getMaxTranslateX());
	  },

	  _onBodyTouchMove: function _onBodyTouchMove(e) {
	    var currentX = e.touches[0].pageX;
	    var currentY = e.touches[0].pageY;

	    if (this.state.swiping) {
	      e.preventDefault();
	      this._setPosition(this._getTranslateX(currentX));
	    } else if (this._maybeSwiping) {
	      var dXAbs = Math.abs(currentX - this._touchStartX);
	      var dYAbs = Math.abs(currentY - this._touchStartY);
	      // If the user has moved his thumb ten pixels in either direction,
	      // we can safely make an assumption about whether he was intending
	      // to swipe or scroll.
	      var threshold = 10;

	      if (dXAbs > threshold && dYAbs <= threshold) {
	        this._swipeStartX = currentX;
	        this.setState({
	          swiping: this.state.open ? 'closing' : 'opening'
	        });
	        this._setPosition(this._getTranslateX(currentX));
	      } else if (dXAbs <= threshold && dYAbs > threshold) {
	        this._onBodyTouchEnd();
	      }
	    }
	  },

	  _onBodyTouchEnd: function _onBodyTouchEnd(e) {
	    if (this.state.swiping) {
	      var currentX = e.changedTouches[0].pageX;
	      var translateRatio = this._getTranslateX(currentX) / this._getMaxTranslateX();

	      this._maybeSwiping = false;
	      var swiping = this.state.swiping;
	      this.setState({
	        swiping: null
	      });

	      // We have to open or close after setting swiping to null,
	      // because only then CSS transition is enabled.
	      if (translateRatio > 0.5) {
	        if (swiping === 'opening') {
	          this._setPosition(this._getMaxTranslateX());
	        } else {
	          this.close();
	        }
	      } else {
	        if (swiping === 'opening') {
	          this.open();
	        } else {
	          this._setPosition(0);
	        }
	      }
	    } else {
	      this._maybeSwiping = false;
	    }

	    document.body.removeEventListener('touchmove', this._onBodyTouchMove);
	    document.body.removeEventListener('touchend', this._onBodyTouchEnd);
	    document.body.removeEventListener('touchcancel', this._onBodyTouchEnd);
	  }

	});

	module.exports = LeftNav;

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);

	var LinearProgress = React.createClass({
	  displayName: 'LinearProgress',

	  mixins: [StylePropable],

	  propTypes: {
	    mode: React.PropTypes.oneOf(["determinate", "indeterminate"]),
	    value: React.PropTypes.number,
	    min: React.PropTypes.number,
	    max: React.PropTypes.number
	  },

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  _getRelativeValue: function _getRelativeValue() {
	    var value = this.props.value;
	    var min = this.props.min;
	    var max = this.props.max;

	    var clampedValue = Math.min(Math.max(min, value), max);
	    var rangeValue = max - min;
	    var relValue = Math.round(clampedValue / rangeValue * 10000) / 10000;
	    return relValue * 100;
	  },

	  componentDidMount: function componentDidMount() {
	    var _this = this;

	    var bar1 = React.findDOMNode(this.refs.bar1);
	    var bar2 = React.findDOMNode(this.refs.bar2);

	    this._barUpdate(0, bar1, [[-35, 100], [100, -90]]);

	    setTimeout(function () {
	      _this._barUpdate(0, bar2, [[-200, 100], [107, -8]]);
	    }, 850);
	  },

	  _barUpdate: function _barUpdate(step, barElement, stepValues) {
	    step = step || 0;
	    step %= 4;
	    setTimeout(this._barUpdate.bind(this, step + 1, barElement, stepValues), 420);
	    if (!this.isMounted()) return;
	    if (this.props.mode !== "indeterminate") return;

	    if (step === 0) {
	      barElement.style.left = stepValues[0][0] + "%";
	      barElement.style.right = stepValues[0][1] + "%";
	    } else if (step === 1) {
	      barElement.style.transitionDuration = "840ms";
	    } else if (step === 2) {
	      barElement.style.left = stepValues[1][0] + "%";
	      barElement.style.right = stepValues[1][1] + "%";
	    } else if (step === 3) {
	      barElement.style.transitionDuration = "0ms";
	    }
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      mode: "indeterminate",
	      value: 0,
	      min: 0,
	      max: 100
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.palette;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        position: "relative",
	        height: 4,
	        display: "block",
	        width: "100%",
	        backgroundColor: this.getTheme().primary3Color,
	        borderRadius: 2,
	        margin: 0,
	        overflow: "hidden"
	      },
	      bar: {
	        height: "100%"
	      },
	      barFragment1: {},
	      barFragment2: {}
	    };

	    if (this.props.mode === "indeterminate") {
	      styles.barFragment1 = {
	        position: "absolute",
	        backgroundColor: this.getTheme().primary1Color,
	        top: 0,
	        left: 0,
	        bottom: 0,
	        transition: Transitions.create("all", "840ms", null, "cubic-bezier(0.650, 0.815, 0.735, 0.395)")
	      };

	      styles.barFragment2 = {
	        position: "absolute",
	        backgroundColor: this.getTheme().primary1Color,
	        top: 0,
	        left: 0,
	        bottom: 0,
	        transition: Transitions.create("all", "840ms", null, "cubic-bezier(0.165, 0.840, 0.440, 1.000)")
	      };
	    } else {
	      styles.bar.backgroundColor = this.getTheme().primary1Color;
	      styles.bar.transition = Transitions.create("width", ".3s", null, "linear");
	      styles.bar.width = this._getRelativeValue() + "%";
	    }

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['style']);

	    var styles = this.getStyles();

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: this.mergeAndPrefix(styles.root, style) }),
	      React.createElement(
	        'div',
	        { style: this.mergeAndPrefix(styles.bar) },
	        React.createElement('div', { ref: 'bar1', style: this.mergeAndPrefix(styles.barFragment1) }),
	        React.createElement('div', { ref: 'bar2', style: this.mergeAndPrefix(styles.barFragment2) })
	      )
	    );
	  }
	});

	module.exports = LinearProgress;

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(161);
	var StylePropable = __webpack_require__(159);

	var ListDivider = React.createClass({
	  displayName: 'ListDivider',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    inset: React.PropTypes.bool
	  },

	  render: function render() {
	    var _props = this.props;
	    var inset = _props.inset;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['inset', 'style']);

	    var mergedStyles = this.mergeAndPrefix({
	      margin: 0,
	      marginTop: -1,
	      marginLeft: inset ? 72 : 0,
	      height: 1,
	      border: 'none',
	      backgroundColor: this.context.muiTheme.palette.borderColor
	    }, style);

	    return React.createElement('hr', _extends({}, other, { style: mergedStyles }));
	  }
	});

	module.exports = ListDivider;

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var ColorManipulator = __webpack_require__(216);
	var StylePropable = __webpack_require__(159);
	var Colors = __webpack_require__(183);
	var Transitions = __webpack_require__(185);
	var Typography = __webpack_require__(182);
	var EnhancedButton = __webpack_require__(187);
	var IconButton = __webpack_require__(184);
	var OpenIcon = __webpack_require__(271);
	var CloseIcon = __webpack_require__(261);
	var NestedList = __webpack_require__(272);

	var ListItem = React.createClass({
	  displayName: 'ListItem',

	  mixins: [PureRenderMixin, StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    autoGenerateNestedIndicator: React.PropTypes.bool,
	    disabled: React.PropTypes.bool,
	    disableKeyboardFocus: React.PropTypes.bool,
	    initiallyOpen: React.PropTypes.bool,
	    innerDivStyle: React.PropTypes.object,
	    insetChildren: React.PropTypes.bool,
	    innerStyle: React.PropTypes.object,
	    leftAvatar: React.PropTypes.element,
	    leftCheckbox: React.PropTypes.element,
	    leftIcon: React.PropTypes.element,
	    nestedLevel: React.PropTypes.number,
	    nestedItems: React.PropTypes.arrayOf(React.PropTypes.element),
	    onKeyboardFocus: React.PropTypes.func,
	    onMouseEnter: React.PropTypes.func,
	    onMouseLeave: React.PropTypes.func,
	    onNestedListToggle: React.PropTypes.func,
	    onTouchStart: React.PropTypes.func,
	    rightAvatar: React.PropTypes.element,
	    rightIcon: React.PropTypes.element,
	    rightIconButton: React.PropTypes.element,
	    rightToggle: React.PropTypes.element,
	    primaryText: React.PropTypes.node,
	    secondaryText: React.PropTypes.node,
	    secondaryTextLines: React.PropTypes.oneOf([1, 2])
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      autoGenerateNestedIndicator: true,
	      initiallyOpen: false,
	      nestedItems: [],
	      nestedLevel: 0,
	      onKeyboardFocus: function onKeyboardFocus() {},
	      onMouseEnter: function onMouseEnter() {},
	      onMouseLeave: function onMouseLeave() {},
	      onNestedListToggle: function onNestedListToggle() {},
	      onTouchStart: function onTouchStart() {},
	      secondaryTextLines: 1
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hovered: false,
	      isKeyboardFocused: false,
	      open: this.props.initiallyOpen,
	      rightIconButtonHovered: false,
	      rightIconButtonKeyboardFocused: false,
	      touch: false
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var autoGenerateNestedIndicator = _props.autoGenerateNestedIndicator;
	    var children = _props.children;
	    var disabled = _props.disabled;
	    var disableKeyboardFocus = _props.disableKeyboardFocus;
	    var innerDivStyle = _props.innerDivStyle;
	    var insetChildren = _props.insetChildren;
	    var leftAvatar = _props.leftAvatar;
	    var leftCheckbox = _props.leftCheckbox;
	    var leftIcon = _props.leftIcon;
	    var nestedItems = _props.nestedItems;
	    var nestedLevel = _props.nestedLevel;
	    var onKeyboardFocus = _props.onKeyboardFocus;
	    var onMouseLeave = _props.onMouseLeave;
	    var onMouseEnter = _props.onMouseEnter;
	    var onTouchStart = _props.onTouchStart;
	    var rightAvatar = _props.rightAvatar;
	    var rightIcon = _props.rightIcon;
	    var rightIconButton = _props.rightIconButton;
	    var rightToggle = _props.rightToggle;
	    var primaryText = _props.primaryText;
	    var secondaryText = _props.secondaryText;
	    var secondaryTextLines = _props.secondaryTextLines;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['autoGenerateNestedIndicator', 'children', 'disabled', 'disableKeyboardFocus', 'innerDivStyle', 'insetChildren', 'leftAvatar', 'leftCheckbox', 'leftIcon', 'nestedItems', 'nestedLevel', 'onKeyboardFocus', 'onMouseLeave', 'onMouseEnter', 'onTouchStart', 'rightAvatar', 'rightIcon', 'rightIconButton', 'rightToggle', 'primaryText', 'secondaryText', 'secondaryTextLines', 'style']);

	    var textColor = this.context.muiTheme.palette.textColor;
	    var hoverColor = ColorManipulator.fade(textColor, 0.1);
	    var singleAvatar = !secondaryText && (leftAvatar || rightAvatar);
	    var singleNoAvatar = !secondaryText && !(leftAvatar || rightAvatar);
	    var twoLine = secondaryText && secondaryTextLines === 1;
	    var threeLine = secondaryText && secondaryTextLines > 1;
	    var hasCheckbox = leftCheckbox || rightToggle;

	    var styles = {
	      root: {
	        backgroundColor: (this.state.isKeyboardFocused || this.state.hovered) && !this.state.rightIconButtonHovered && !this.state.rightIconButtonKeyboardFocused ? hoverColor : null,
	        color: textColor,
	        display: 'block',
	        fontSize: 16,
	        lineHeight: '16px',
	        position: 'relative',
	        transition: Transitions.easeOut()
	      },

	      //This inner div is needed so that ripples will span the entire container
	      innerDiv: {
	        marginLeft: nestedLevel * this.context.muiTheme.component.listItem.nestedLevelDepth,
	        paddingLeft: leftIcon || leftAvatar || leftCheckbox || insetChildren ? 72 : 16,
	        paddingRight: rightIcon || rightAvatar || rightIconButton ? 56 : rightToggle ? 72 : 16,
	        paddingBottom: singleAvatar ? 20 : 16,
	        paddingTop: singleNoAvatar || threeLine ? 16 : 20,
	        position: 'relative'
	      },

	      icons: {
	        height: 24,
	        width: 24,
	        display: 'block',
	        position: 'absolute',
	        top: twoLine ? 12 : singleAvatar ? 4 : 0,
	        padding: 12
	      },

	      leftIcon: {
	        color: Colors.grey600,
	        fill: Colors.grey600,
	        left: 4
	      },

	      rightIcon: {
	        color: Colors.grey400,
	        fill: Colors.grey400,
	        right: 4
	      },

	      avatars: {
	        position: 'absolute',
	        top: singleAvatar ? 8 : 16
	      },

	      label: {
	        cursor: 'pointer'
	      },

	      leftAvatar: {
	        left: 16
	      },

	      rightAvatar: {
	        right: 16
	      },

	      leftCheckbox: {
	        position: 'absolute',
	        display: 'block',
	        width: 24,
	        top: twoLine ? 24 : singleAvatar ? 16 : 12,
	        left: 16
	      },

	      primaryText: {
	        margin: 0
	      },

	      rightIconButton: {
	        position: 'absolute',
	        display: 'block',
	        top: twoLine ? 12 : singleAvatar ? 4 : 0,
	        right: 4
	      },

	      rightToggle: {
	        position: 'absolute',
	        display: 'block',
	        width: 54,
	        top: twoLine ? 25 : singleAvatar ? 17 : 13,
	        right: 8
	      },

	      secondaryText: {
	        fontSize: 14,
	        lineHeight: threeLine ? '18px' : '16px',
	        height: threeLine ? 36 : 16,
	        margin: 0,
	        marginTop: 4,
	        color: Typography.textLightBlack,

	        //needed for 2 and 3 line ellipsis
	        overflow: 'hidden',
	        textOverflow: 'ellipsis',
	        whiteSpace: threeLine ? null : 'nowrap',
	        display: threeLine ? '-webkit-box' : null,
	        WebkitLineClamp: threeLine ? 2 : null,
	        WebkitBoxOrient: threeLine ? 'vertical' : null
	      }
	    };

	    var contentChildren = [];

	    if (leftIcon) {
	      this._pushElement(contentChildren, leftIcon, this.mergeStyles(styles.icons, styles.leftIcon));
	    }

	    if (rightIcon) {
	      this._pushElement(contentChildren, rightIcon, this.mergeStyles(styles.icons, styles.rightIcon));
	    }

	    if (leftAvatar) {
	      this._pushElement(contentChildren, leftAvatar, this.mergeStyles(styles.avatars, styles.leftAvatar));
	    }

	    if (rightAvatar) {
	      this._pushElement(contentChildren, rightAvatar, this.mergeStyles(styles.avatars, styles.rightAvatar));
	    }

	    if (leftCheckbox) {
	      this._pushElement(contentChildren, leftCheckbox, this.mergeStyles(styles.leftCheckbox));
	    }

	    //RightIconButtonElement
	    var hasNestListItems = nestedItems.length;
	    var hasRightElement = rightAvatar || rightIcon || rightIconButton || rightToggle;
	    var needsNestedIndicator = hasNestListItems && autoGenerateNestedIndicator && !hasRightElement;

	    if (rightIconButton || needsNestedIndicator) {
	      var rightIconButtonElement = rightIconButton;
	      var rightIconButtonHandlers = {
	        onKeyboardFocus: this._handleRightIconButtonKeyboardFocus,
	        onMouseEnter: this._handleRightIconButtonMouseEnter,
	        onMouseLeave: this._handleRightIconButtonMouseLeave,
	        onTouchTap: this._handleRightIconButtonTouchTap,
	        onMouseDown: this._handleRightIconButtonMouseUp,
	        onMouseUp: this._handleRightIconButtonMouseUp
	      };

	      // Create a nested list indicator icon if we don't have an icon on the right
	      if (needsNestedIndicator) {
	        rightIconButtonElement = this.state.open ? React.createElement(
	          IconButton,
	          null,
	          React.createElement(OpenIcon, null)
	        ) : React.createElement(
	          IconButton,
	          null,
	          React.createElement(CloseIcon, null)
	        );
	        rightIconButtonHandlers.onTouchTap = this._handleNestedListToggle;
	      }

	      this._pushElement(contentChildren, rightIconButtonElement, this.mergeStyles(styles.rightIconButton), rightIconButtonHandlers);
	    }

	    if (rightToggle) {
	      this._pushElement(contentChildren, rightToggle, this.mergeStyles(styles.rightToggle));
	    }

	    if (primaryText) {
	      var secondaryTextElement = this._createTextElement(styles.primaryText, primaryText, 'primaryText');
	      contentChildren.push(secondaryTextElement);
	    }

	    if (secondaryText) {
	      var secondaryTextElement = this._createTextElement(styles.secondaryText, secondaryText, 'secondaryText');
	      contentChildren.push(secondaryTextElement);
	    }

	    var nestedList = nestedItems.length ? React.createElement(
	      NestedList,
	      { nestedLevel: nestedLevel + 1, open: this.state.open },
	      nestedItems
	    ) : undefined;

	    return hasCheckbox ? this._createLabelElement(styles, contentChildren) : disabled ? this._createDisabledElement(styles, contentChildren) : React.createElement(
	      'div',
	      null,
	      React.createElement(
	        EnhancedButton,
	        _extends({}, other, {
	          disabled: disabled,
	          disableKeyboardFocus: disableKeyboardFocus || this.state.rightIconButtonKeyboardFocused,
	          linkButton: true,
	          onKeyboardFocus: this._handleKeyboardFocus,
	          onMouseLeave: this._handleMouseLeave,
	          onMouseEnter: this._handleMouseEnter,
	          onTouchStart: this._handleTouchStart,
	          ref: 'enhancedButton',
	          style: this.mergeAndPrefix(styles.root, style) }),
	        React.createElement(
	          'div',
	          { style: this.mergeAndPrefix(styles.innerDiv, innerDivStyle) },
	          contentChildren
	        )
	      ),
	      nestedList
	    );
	  },

	  applyFocusState: function applyFocusState(focusState) {
	    var button = this.refs.enhancedButton;
	    var buttonEl = React.findDOMNode(button);

	    if (button) {
	      switch (focusState) {
	        case 'none':
	          buttonEl.blur();
	          break;
	        case 'focused':
	          buttonEl.focus();
	          break;
	        case 'keyboard-focused':
	          button.setKeyboardFocus();
	          buttonEl.focus();
	          break;
	      }
	    }
	  },

	  _createDisabledElement: function _createDisabledElement(styles, contentChildren) {
	    var _props2 = this.props;
	    var innerDivStyle = _props2.innerDivStyle;
	    var style = _props2.style;

	    var mergedDivStyles = this.mergeAndPrefix(styles.root, styles.innerDiv, innerDivStyle, style);

	    return React.createElement('div', { style: mergedDivStyles }, contentChildren);
	  },

	  _createLabelElement: function _createLabelElement(styles, contentChildren) {
	    var _props3 = this.props;
	    var innerDivStyle = _props3.innerDivStyle;
	    var style = _props3.style;

	    var mergedLabelStyles = this.mergeAndPrefix(styles.root, styles.innerDiv, innerDivStyle, styles.label, style);

	    return React.createElement('label', { style: mergedLabelStyles }, contentChildren);
	  },

	  _createTextElement: function _createTextElement(styles, data, key) {
	    var isAnElement = React.isValidElement(data);
	    var mergedStyles = isAnElement ? this.mergeStyles(styles, data.props.style) : null;

	    return isAnElement ? React.cloneElement(data, {
	      key: key,
	      style: mergedStyles
	    }) : React.createElement(
	      'div',
	      { key: key, style: styles },
	      data
	    );
	  },

	  _handleKeyboardFocus: function _handleKeyboardFocus(e, isKeyboardFocused) {
	    this.setState({ isKeyboardFocused: isKeyboardFocused });
	    this.props.onKeyboardFocus(e, isKeyboardFocused);
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    if (!this.state.touch) this.setState({ hovered: true });
	    this.props.onMouseEnter(e);
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    this.setState({ hovered: false });
	    this.props.onMouseLeave(e);
	  },

	  _handleNestedListToggle: function _handleNestedListToggle(e) {
	    e.stopPropagation();
	    this.setState({ open: !this.state.open });
	    this.props.onNestedListToggle(this);
	  },

	  _handleRightIconButtonKeyboardFocus: function _handleRightIconButtonKeyboardFocus(e, isKeyboardFocused) {
	    var iconButton = this.props.rightIconButton;
	    var newState = {};

	    newState.rightIconButtonKeyboardFocused = isKeyboardFocused;
	    if (isKeyboardFocused) newState.isKeyboardFocused = false;
	    this.setState(newState);

	    if (iconButton && iconButton.props.onKeyboardFocus) iconButton.props.onKeyboardFocus(e, isKeyboardFocused);
	  },

	  _handleRightIconButtonMouseDown: function _handleRightIconButtonMouseDown(e) {
	    var iconButton = this.props.rightIconButton;
	    e.stopPropagation();
	    if (iconButton && iconButton.props.onMouseDown) iconButton.props.onMouseDown(e);
	  },

	  _handleRightIconButtonMouseLeave: function _handleRightIconButtonMouseLeave(e) {
	    var iconButton = this.props.rightIconButton;
	    this.setState({ rightIconButtonHovered: false });
	    if (iconButton && iconButton.props.onMouseLeave) iconButton.props.onMouseLeave(e);
	  },

	  _handleRightIconButtonMouseEnter: function _handleRightIconButtonMouseEnter(e) {
	    var iconButton = this.props.rightIconButton;
	    this.setState({ rightIconButtonHovered: true });
	    if (iconButton && iconButton.props.onMouseEnter) iconButton.props.onMouseEnter(e);
	  },

	  _handleRightIconButtonMouseUp: function _handleRightIconButtonMouseUp(e) {
	    var iconButton = this.props.rightIconButton;
	    e.stopPropagation();
	    if (iconButton && iconButton.props.onMouseUp) iconButton.props.onMouseUp(e);
	  },

	  _handleRightIconButtonTouchTap: function _handleRightIconButtonTouchTap(e) {
	    var iconButton = this.props.rightIconButton;

	    //Stop the event from bubbling up to the list-item
	    e.stopPropagation();
	    if (iconButton && iconButton.props.onTouchTap) iconButton.props.onTouchTap(e);
	  },

	  _handleTouchStart: function _handleTouchStart(e) {
	    this.setState({ touch: true });
	    this.props.onTouchStart(e);
	  },

	  _pushElement: function _pushElement(children, element, baseStyles, additionalProps) {
	    if (element) {
	      var styles = this.mergeStyles(baseStyles, element.props.style);
	      children.push(React.cloneElement(element, _extends({
	        key: children.length,
	        style: styles
	      }, additionalProps)));
	    }
	  }

	});

	module.exports = ListItem;

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(200);

	var NavigationArrowDropUp = React.createClass({
	  displayName: 'NavigationArrowDropUp',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M7 14l5-5 5 5z' })
	    );
	  }

	});

	module.exports = NavigationArrowDropUp;

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var ImmutabilityHelper = __webpack_require__(160);
	var List = __webpack_require__(266);

	var NestedList = React.createClass({
	  displayName: 'NestedList',

	  propTypes: {
	    nestedLevel: React.PropTypes.number,
	    open: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      nestedLevel: 1,
	      open: false
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var open = _props.open;
	    var nestedLevel = _props.nestedLevel;
	    var style = _props.style;

	    var styles = {
	      root: {
	        display: open ? null : 'none'
	      }
	    };

	    return React.createElement(
	      List,
	      { style: ImmutabilityHelper.merge(styles.root, style) },
	      React.Children.map(children, function (child) {
	        return React.isValidElement(child) ? React.cloneElement(child, {
	          nestedLevel: nestedLevel + 1
	        }) : child;
	      })
	    );
	  }

	});

	module.exports = NestedList;

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	  ClickAwayable: __webpack_require__(253),
	  WindowListenable: __webpack_require__(224),
	  StylePropable: __webpack_require__(159),
	  StyleResizable: __webpack_require__(274)
	};

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Events = __webpack_require__(189);

	var Sizes = {
	  SMALL: 1,
	  MEDIUM: 2,
	  LARGE: 3
	};

	module.exports = {

	  statics: {
	    Sizes: Sizes
	  },

	  getInitialState: function getInitialState() {
	    return {
	      deviceSize: Sizes.SMALL
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    this._updateDeviceSize();
	    if (!this.manuallyBindResize) this._bindResize();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this._unbindResize();
	  },

	  isDeviceSize: function isDeviceSize(desiredSize) {
	    return this.state.deviceSize >= desiredSize;
	  },

	  _updateDeviceSize: function _updateDeviceSize() {
	    var width = window.innerWidth;
	    if (width >= 992) this.setState({ deviceSize: Sizes.LARGE });else if (width >= 768) this.setState({ deviceSize: Sizes.MEDIUM });else this.setState({ deviceSize: Sizes.SMALL }); // width >= 375
	  },

	  _bindResize: function _bindResize() {
	    Events.on(window, 'resize', this._updateDeviceSize);
	  },

	  _unbindResize: function _unbindResize() {
	    Events.off(window, 'resize', this._updateDeviceSize);
	  }
	};

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);
	var EnhancedSwitch = __webpack_require__(222);
	var RadioButtonOff = __webpack_require__(276);
	var RadioButtonOn = __webpack_require__(277);

	var RadioButton = React.createClass({
	  displayName: 'RadioButton',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    iconStyle: React.PropTypes.object,
	    labelStyle: React.PropTypes.object,
	    onCheck: React.PropTypes.func
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.radioButton;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      icon: {
	        height: this.getTheme().size,
	        width: this.getTheme().size
	      },
	      target: {
	        transition: Transitions.easeOut(),
	        position: 'absolute',
	        opacity: 1,
	        transform: 'scale(1)',
	        fill: this.getTheme().borderColor
	      },
	      fill: {
	        position: 'absolute',
	        opacity: 1,
	        transform: 'scale(0)',
	        transformOrigin: '50% 50%',
	        transition: Transitions.easeOut(),
	        fill: this.getTheme().checkedColor
	      },
	      targetWhenChecked: {
	        opacity: 0,
	        transform: 'scale(0)'
	      },
	      fillWhenChecked: {
	        opacity: 1,
	        transform: 'scale(1)'
	      },
	      targetWhenDisabled: {
	        fill: this.getTheme().disabledColor
	      },
	      fillWhenDisabled: {
	        fill: this.getTheme().disabledColor
	      },
	      label: {
	        color: this.props.disabled ? this.getTheme().labelDisabledColor : this.getTheme().labelColor
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var onCheck = _props.onCheck;

	    var other = _objectWithoutProperties(_props, ['onCheck']);

	    var styles = this.getStyles();
	    var onStyles = this.mergeAndPrefix(styles.target, this.props.checked && styles.targetWhenChecked, this.props.iconStyle, this.props.disabled && styles.targetWhenDisabled);
	    var offStyles = this.mergeAndPrefix(styles.fill, this.props.checked && styles.fillWhenChecked, this.props.iconStyle, this.props.disabled && styles.fillWhenDisabled);

	    var radioButtonElement = React.createElement(
	      'div',
	      null,
	      React.createElement(RadioButtonOff, { style: onStyles }),
	      React.createElement(RadioButtonOn, { style: offStyles })
	    );

	    var rippleColor = this.props.checked ? this.getTheme().checkedColor : this.getTheme().borderColor;

	    var iconStyle = this.mergeAndPrefix(styles.icon, this.props.iconStyle);

	    var labelStyle = this.mergeAndPrefix(styles.label, this.props.labelStyle);

	    var enhancedSwitchProps = {
	      ref: "enhancedSwitch",
	      inputType: "radio",
	      switched: this.props.checked || false,
	      switchElement: radioButtonElement,
	      rippleColor: rippleColor,
	      iconStyle: iconStyle,
	      labelStyle: labelStyle,
	      onSwitch: this._handleCheck,
	      onParentShouldUpdate: this._handleStateChange,
	      labelPosition: this.props.labelPosition ? this.props.labelPosition : "right"
	    };

	    return React.createElement(EnhancedSwitch, _extends({}, other, enhancedSwitchProps));
	  },

	  // Only called when selected, not when unselected.
	  _handleCheck: function _handleCheck(e) {
	    if (this.props.onCheck) this.props.onCheck(e, this.props.value);
	  },

	  _handleStateChange: function _handleStateChange() {},

	  isChecked: function isChecked() {
	    return this.refs.enhancedSwitch.isSwitched();
	  },

	  // Use RadioButtonGroup.setSelectedValue(newSelectionValue) to set a
	  // RadioButton's checked value.
	  setChecked: function setChecked(newCheckedValue) {
	    this.refs.enhancedSwitch.setSwitched(newCheckedValue);
	  },

	  getValue: function getValue() {
	    return this.refs.enhancedSwitch.getValue();
	  }

	});

	module.exports = RadioButton;

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(200);

	var ToggleRadioButtonUnchecked = React.createClass({
	  displayName: 'ToggleRadioButtonUnchecked',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z' })
	    );
	  }

	});

	module.exports = ToggleRadioButtonUnchecked;

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(200);

	var ToggleRadioButtonChecked = React.createClass({
	  displayName: 'ToggleRadioButtonChecked',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z' })
	    );
	  }

	});

	module.exports = ToggleRadioButtonChecked;

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var RadioButton = __webpack_require__(275);

	var RadioButtonGroup = React.createClass({
	  displayName: 'RadioButtonGroup',

	  propTypes: {
	    name: React.PropTypes.string.isRequired,
	    valueSelected: React.PropTypes.string,
	    defaultSelected: React.PropTypes.string,
	    labelPosition: React.PropTypes.oneOf(['left', 'right']),
	    onChange: React.PropTypes.func
	  },

	  _hasCheckAttribute: function _hasCheckAttribute(radioButton) {
	    return radioButton.props.hasOwnProperty('checked') && radioButton.props.checked;
	  },

	  getInitialState: function getInitialState() {
	    return {
	      numberCheckedRadioButtons: 0,
	      selected: this.props.valueSelected || this.props.defaultSelected || ''
	    };
	  },

	  componentWillMount: function componentWillMount() {
	    var _this = this;

	    var cnt = 0;

	    React.Children.forEach(this.props.children, function (option) {
	      if (_this._hasCheckAttribute(option)) cnt++;
	    }, this);

	    this.setState({ numberCheckedRadioButtons: cnt });
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (nextProps.hasOwnProperty('valueSelected')) {
	      this.setState({ selected: nextProps.valueSelected });
	    }
	  },

	  render: function render() {
	    var _this2 = this;

	    var options = React.Children.map(this.props.children, function (option) {
	      var _option$props = option.props;
	      var name = _option$props.name;
	      var value = _option$props.value;
	      var label = _option$props.label;
	      var onCheck = _option$props.onCheck;

	      var other = _objectWithoutProperties(_option$props, ['name', 'value', 'label', 'onCheck']);

	      return React.createElement(RadioButton, _extends({}, other, {
	        ref: option.props.value,
	        name: _this2.props.name,
	        key: option.props.value,
	        value: option.props.value,
	        label: option.props.label,
	        labelPosition: _this2.props.labelPosition,
	        onCheck: _this2._onChange,
	        checked: option.props.value === _this2.state.selected }));
	    }, this);

	    return React.createElement(
	      'div',
	      {
	        style: this.props.style,
	        className: this.props.className || '' },
	      options
	    );
	  },

	  _updateRadioButtons: function _updateRadioButtons(newSelection) {
	    if (this.state.numberCheckedRadioButtons === 0) {
	      this.setState({ selected: newSelection });
	    } else if (process.env.NODE_ENV !== 'production') {
	      var message = "Cannot select a different radio button while another radio button " + "has the 'checked' property set to true.";
	      console.error(message);
	    }
	  },

	  _onChange: function _onChange(e, newSelection) {
	    this._updateRadioButtons(newSelection);

	    // Successful update
	    if (this.state.numberCheckedRadioButtons === 0) {
	      if (this.props.onChange) this.props.onChange(e, newSelection);
	    }
	  },

	  getSelectedValue: function getSelectedValue() {
	    return this.state.selected;
	  },

	  setSelectedValue: function setSelectedValue(newSelectionValue) {
	    this._updateRadioButtons(newSelectionValue);
	  },

	  clearValue: function clearValue() {
	    this.setSelectedValue('');
	  }

	});

	module.exports = RadioButtonGroup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);
	var ColorManipulator = __webpack_require__(216);
	var Typography = __webpack_require__(182);
	var EnhancedButton = __webpack_require__(187);
	var Paper = __webpack_require__(201);

	function validateLabel(props, propName, componentName) {
	  if (!props.children && !props.label) {
	    return new Error('Required prop label or children was not ' + 'specified in ' + componentName + '.');
	  }
	}

	var RaisedButton = React.createClass({
	  displayName: 'RaisedButton',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    className: React.PropTypes.string,
	    disabled: React.PropTypes.bool,
	    label: validateLabel,
	    onMouseDown: React.PropTypes.func,
	    onMouseUp: React.PropTypes.func,
	    onMouseLeave: React.PropTypes.func,
	    onTouchEnd: React.PropTypes.func,
	    onTouchStart: React.PropTypes.func,
	    primary: React.PropTypes.bool,
	    secondary: React.PropTypes.bool,
	    labelStyle: React.PropTypes.object,
	    backgroundColor: React.PropTypes.string,
	    labelColor: React.PropTypes.string,
	    disabledBackgroundColor: React.PropTypes.string,
	    disabledLabelColor: React.PropTypes.string,
	    fullWidth: React.PropTypes.bool
	  },

	  getInitialState: function getInitialState() {
	    var zDepth = this.props.disabled ? 0 : 1;
	    return {
	      hovered: false,
	      touched: false,
	      initialZDepth: zDepth,
	      zDepth: zDepth
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var zDepth = nextProps.disabled ? 0 : 1;
	    this.setState({
	      zDepth: zDepth,
	      initialZDepth: zDepth
	    });
	  },

	  _getBackgroundColor: function _getBackgroundColor() {
	    var disabledColor = this.props.disabledBackgroundColor ? this.props.disabledBackgroundColor : this.getTheme().disabledColor;

	    return this.props.disabled ? disabledColor : this.props.backgroundColor ? this.props.backgroundColor : this.props.primary ? this.getTheme().primaryColor : this.props.secondary ? this.getTheme().secondaryColor : this.getTheme().color;
	  },

	  _getLabelColor: function _getLabelColor() {
	    var disabledColor = this.props.disabledLabelColor ? this.props.disabledLabelColor : this.getTheme().disabledTextColor;

	    return this.props.disabled ? disabledColor : this.props.labelColor ? this.props.labelColor : this.props.primary ? this.getTheme().primaryTextColor : this.props.secondary ? this.getTheme().secondaryTextColor : this.getTheme().textColor;
	  },

	  getThemeButton: function getThemeButton() {
	    return this.context.muiTheme.component.button;
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.raisedButton;
	  },

	  getStyles: function getStyles() {
	    var amount = this.props.primary || this.props.secondary ? 0.4 : 0.08;
	    var styles = {
	      root: {
	        backgroundColor: 'none',
	        display: 'inline-block',
	        minWidth: this.props.fullWidth ? '100%' : this.getThemeButton().minWidth,
	        height: this.getThemeButton().height,
	        transition: Transitions.easeOut()
	      },
	      container: {
	        position: 'relative',
	        height: '100%',
	        width: '100%',
	        padding: 0,
	        overflow: 'hidden',
	        borderRadius: 2,
	        transition: Transitions.easeOut(),
	        backgroundColor: this._getBackgroundColor(),

	        //This is need so that ripples do not bleed
	        //past border radius.
	        //See: http://stackoverflow.com/questions/17298739/css-overflow-hidden-not-working-in-chrome-when-parent-has-border-radius-and-chil
	        transform: 'translate3d(0, 0, 0)'
	      },
	      label: {
	        position: 'relative',
	        opacity: 1,
	        fontSize: '14px',
	        letterSpacing: 0,
	        textTransform: 'uppercase',
	        fontWeight: Typography.fontWeightMedium,
	        margin: 0,
	        padding: '0px ' + this.context.muiTheme.spacing.desktopGutterLess + 'px',
	        userSelect: 'none',
	        lineHeight: this.props.style && this.props.style.height ? this.props.style.height : this.getThemeButton().height + 'px',
	        color: this._getLabelColor()
	      },
	      overlay: {
	        transition: Transitions.easeOut(),
	        top: 0
	      },
	      overlayWhenHovered: {
	        backgroundColor: ColorManipulator.fade(this._getLabelColor(), amount)
	      }
	    };
	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var disabled = _props.disabled;
	    var label = _props.label;
	    var primary = _props.primary;
	    var secondary = _props.secondary;

	    var other = _objectWithoutProperties(_props, ['disabled', 'label', 'primary', 'secondary']);

	    var styles = this.getStyles();

	    var labelElement = undefined;
	    if (label) {
	      labelElement = React.createElement(
	        'span',
	        { style: this.mergeAndPrefix(styles.label, this.props.labelStyle) },
	        label
	      );
	    }

	    var rippleColor = styles.label.color;
	    var rippleOpacity = !(primary || secondary) ? 0.1 : 0.16;

	    var buttonEventHandlers = disabled ? null : {
	      onMouseDown: this._handleMouseDown,
	      onMouseUp: this._handleMouseUp,
	      onMouseLeave: this._handleMouseLeave,
	      onMouseEnter: this._handleMouseEnter,
	      onTouchStart: this._handleTouchStart,
	      onTouchEnd: this._handleTouchEnd,
	      onKeyboardFocus: this._handleKeyboardFocus
	    };

	    return React.createElement(
	      Paper,
	      {
	        style: this.mergeAndPrefix(styles.root, this.props.style),
	        zDepth: this.state.zDepth },
	      React.createElement(
	        EnhancedButton,
	        _extends({}, other, buttonEventHandlers, {
	          ref: 'container',
	          disabled: disabled,
	          style: this.mergeAndPrefix(styles.container),
	          focusRippleColor: rippleColor,
	          touchRippleColor: rippleColor,
	          focusRippleOpacity: rippleOpacity,
	          touchRippleOpacity: rippleOpacity }),
	        React.createElement(
	          'div',
	          { ref: 'overlay', style: this.mergeAndPrefix(styles.overlay, this.state.hovered && !this.props.disabled && styles.overlayWhenHovered) },
	          labelElement,
	          this.props.children
	        )
	      )
	    );
	  },

	  _handleMouseDown: function _handleMouseDown(e) {
	    //only listen to left clicks
	    if (e.button === 0) {
	      this.setState({ zDepth: this.state.initialZDepth + 1 });
	    }
	    if (this.props.onMouseDown) this.props.onMouseDown(e);
	  },

	  _handleMouseUp: function _handleMouseUp(e) {
	    this.setState({ zDepth: this.state.initialZDepth });
	    if (this.props.onMouseUp) this.props.onMouseUp(e);
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    if (!this.refs.container.isKeyboardFocused()) this.setState({ zDepth: this.state.initialZDepth, hovered: false });
	    if (this.props.onMouseLeave) this.props.onMouseLeave(e);
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    if (!this.refs.container.isKeyboardFocused() && !this.state.touch) {
	      this.setState({ hovered: true });
	    }
	    if (this.props.onMouseEnter) this.props.onMouseEnter(e);
	  },

	  _handleTouchStart: function _handleTouchStart(e) {
	    this.setState({
	      touch: true,
	      zDepth: this.state.initialZDepth + 1
	    });
	    if (this.props.onTouchStart) this.props.onTouchStart(e);
	  },

	  _handleTouchEnd: function _handleTouchEnd(e) {
	    this.setState({ zDepth: this.state.initialZDepth });
	    if (this.props.onTouchEnd) this.props.onTouchEnd(e);
	  },

	  _handleKeyboardFocus: function _handleKeyboardFocus(e, keyboardFocused) {
	    if (keyboardFocused && !this.props.disabled) {
	      this.setState({ zDepth: this.state.initialZDepth + 1 });
	      var amount = this.props.primary || this.props.secondary ? 0.4 : 0.08;
	      React.findDOMNode(this.refs.overlay).style.backgroundColor = ColorManipulator.fade(this.mergeAndPrefix(this.getStyles().label, this.props.labelStyle).color, amount);
	    } else if (!this.state.hovered) {
	      this.setState({ zDepth: this.state.initialZDepth });
	      React.findDOMNode(this.refs.overlay).style.backgroundColor = 'transparent';
	    }
	  }
	});

	module.exports = RaisedButton;

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var StylePropable = __webpack_require__(159);
	var AutoPrefix = __webpack_require__(180);
	var Transitions = __webpack_require__(185);
	var Paper = __webpack_require__(201);

	var VIEWBOX_SIZE = 32;
	var RefreshIndicator = _react2['default'].createClass({
	  displayName: 'RefreshIndicator',

	  mixins: [StylePropable],

	  propTypes: {
	    left: _react2['default'].PropTypes.number.isRequired,
	    percentage: _react2['default'].PropTypes.number,
	    size: _react2['default'].PropTypes.number,
	    status: _react2['default'].PropTypes.oneOf(['ready', 'loading', 'hide']),
	    style: _react2['default'].PropTypes.object,
	    top: _react2['default'].PropTypes.number.isRequired
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      percentage: 0,
	      size: 40,
	      status: 'hide'
	    };
	  },

	  contextTypes: {
	    muiTheme: _react2['default'].PropTypes.object
	  },

	  componentDidMount: function componentDidMount() {
	    this.componentDidUpdate();
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this._scalePath(_react2['default'].findDOMNode(this.refs.path), 0);
	    this._rotateWrapper(_react2['default'].findDOMNode(this.refs.wrapper));
	  },

	  render: function render() {
	    var rootStyle = this._getRootStyle();
	    return _react2['default'].createElement(
	      Paper,
	      {
	        circle: true,
	        style: this.mergeAndPrefix(rootStyle, this.props.style),
	        ref: 'indicatorCt'
	      },
	      this._renderChildren()
	    );
	  },

	  _renderChildren: function _renderChildren() {
	    var paperSize = this._getPaperSize();
	    var childrenCmp = null;
	    if (this.props.status !== 'ready') {
	      var circleStyle = this._getCircleStyle(paperSize);
	      childrenCmp = _react2['default'].createElement(
	        'div',
	        { ref: 'wrapper', style: this.mergeAndPrefix({
	            transition: Transitions.create('transform', '20s', null, 'linear'),
	            width: '100%',
	            height: '100%'
	          })
	        },
	        _react2['default'].createElement(
	          'svg',
	          { style: {
	              width: paperSize,
	              height: paperSize
	            },
	            viewBox: '0 0 ' + VIEWBOX_SIZE + ' ' + VIEWBOX_SIZE
	          },
	          _react2['default'].createElement('circle', _extends({ ref: 'path',
	            style: this.mergeAndPrefix(circleStyle.style, {
	              transition: Transitions.create('all', '1.5s', null, 'ease-in-out')
	            })
	          }, circleStyle.attr))
	        )
	      );
	    } else {
	      var circleStyle = this._getCircleStyle(paperSize);
	      var polygonStyle = this._getPolygonStyle(paperSize);
	      childrenCmp = _react2['default'].createElement(
	        'svg',
	        { style: {
	            width: paperSize,
	            height: paperSize
	          },
	          viewBox: '0 0 ' + VIEWBOX_SIZE + ' ' + VIEWBOX_SIZE
	        },
	        _react2['default'].createElement('circle', _extends({
	          style: this.mergeAndPrefix(circleStyle.style)
	        }, circleStyle.attr)),
	        _react2['default'].createElement('polygon', _extends({
	          style: this.mergeAndPrefix(polygonStyle.style)
	        }, polygonStyle.attr))
	      );
	    }

	    return childrenCmp;
	  },

	  _getTheme: function _getTheme() {
	    return this.context.muiTheme.component.refreshIndicator;
	  },

	  _getPaddingSize: function _getPaddingSize() {
	    var padding = this.props.size * 0.1;
	    return padding;
	  },

	  _getPaperSize: function _getPaperSize() {
	    return this.props.size - this._getPaddingSize() * 2;
	  },

	  _getCircleAttr: function _getCircleAttr() {
	    return {
	      radiu: VIEWBOX_SIZE / 2 - 5,
	      originX: VIEWBOX_SIZE / 2,
	      originY: VIEWBOX_SIZE / 2,
	      strokeWidth: 3
	    };
	  },

	  _getArcDeg: function _getArcDeg() {
	    var p = this.props.percentage / 100;

	    var beginDeg = p * 120;
	    var endDeg = p * 410;
	    return [beginDeg, endDeg];
	  },

	  _getFactor: function _getFactor() {
	    var p = this.props.percentage / 100;
	    var p1 = Math.min(1, p / 0.4);

	    return p1;
	  },

	  _getRootStyle: function _getRootStyle() {
	    var padding = this._getPaddingSize();
	    return {
	      position: "absolute",
	      zIndex: 2,
	      width: this.props.size,
	      height: this.props.size,
	      padding: padding,
	      top: -10000,
	      left: -10000,
	      transform: 'translate3d(' + (10000 + this.props.left) + 'px, ' + (10000 + this.props.top) + 'px, 0)',
	      opacity: this.props.status === 'hide' ? 0 : 1,
	      transition: this.props.status === 'hide' ? Transitions.create('all', '.3s', 'ease-out') : 'none'
	    };
	  },

	  _getCircleStyle: function _getCircleStyle() {
	    var isLoading = this.props.status === 'loading';
	    var p1 = isLoading ? 1 : this._getFactor();
	    var circle = this._getCircleAttr();
	    var perimeter = Math.PI * 2 * circle.radiu;

	    var _getArcDeg2 = this._getArcDeg();

	    var _getArcDeg22 = _slicedToArray(_getArcDeg2, 2);

	    var beginDeg = _getArcDeg22[0];
	    var endDeg = _getArcDeg22[1];

	    var arcLen = (endDeg - beginDeg) * perimeter / 360;
	    var dashOffset = -beginDeg * perimeter / 360;

	    var theme = this._getTheme();
	    return {
	      style: {
	        strokeDasharray: arcLen + ', ' + (perimeter - arcLen),
	        strokeDashoffset: dashOffset,
	        stroke: isLoading || this.props.percentage === 100 ? theme.loadingStrokeColor : theme.strokeColor,
	        strokeLinecap: 'round',
	        opacity: p1,
	        strokeWidth: circle.strokeWidth * p1,
	        fill: 'none'
	      },
	      attr: {
	        cx: circle.originX,
	        cy: circle.originY,
	        r: circle.radiu
	      }
	    };
	  },

	  _getPolygonStyle: function _getPolygonStyle() {
	    var p1 = this._getFactor();
	    var circle = this._getCircleAttr();

	    var triangleCx = circle.originX + circle.radiu;
	    var triangleCy = circle.originY;
	    var dx = circle.strokeWidth * 7 / 4 * p1;
	    var trianglePath = triangleCx - dx + ',' + triangleCy + ' ' + (triangleCx + dx) + ',' + triangleCy + ' ' + triangleCx + ',' + (triangleCy + dx);

	    var _getArcDeg3 = this._getArcDeg();

	    var _getArcDeg32 = _slicedToArray(_getArcDeg3, 2);

	    var endDeg = _getArcDeg32[1];

	    var theme = this._getTheme();
	    return {
	      style: {
	        fill: this.props.percentage === 100 ? theme.loadingStrokeColor : theme.strokeColor,
	        transform: 'rotate(' + endDeg + 'deg)',
	        transformOrigin: circle.originX + 'px ' + circle.originY + 'px',
	        opacity: p1
	      },
	      attr: {
	        points: trianglePath
	      }
	    };
	  },

	  _scalePath: function _scalePath(path, step) {
	    if (this.props.status !== 'loading' || !this.isMounted()) return;

	    var currStep = (step || 0) % 3;

	    clearTimeout(this._timer1);
	    this._timer1 = setTimeout(this._scalePath.bind(this, path, currStep + 1), currStep ? 750 : 250);

	    var circle = this._getCircleAttr();
	    var perimeter = Math.PI * 2 * circle.radiu;
	    var arcLen = perimeter * 0.64;

	    if (currStep === 0) {
	      path.style.strokeDasharray = '1, 200';
	      path.style.strokeDashoffset = 0;
	      path.style[this.prefixed('transitionDuration')] = '0ms';
	    } else if (currStep === 1) {
	      path.style.strokeDasharray = arcLen + ', 200';
	      path.style.strokeDashoffset = -15;
	      path.style[this.prefixed('transitionDuration')] = '750ms';
	    } else {
	      path.style.strokeDasharray = arcLen + ',200';
	      path.style.strokeDashoffset = -(perimeter - 1);
	      path.style[this.prefixed('transitionDuration')] = '850ms';
	    }
	  },

	  _rotateWrapper: function _rotateWrapper(wrapper) {
	    var _this = this;

	    if (this.props.status !== 'loading' || !this.isMounted()) return;

	    clearTimeout(this._timer2);
	    this._timer2 = setTimeout(this._rotateWrapper.bind(this, wrapper), 10050);

	    AutoPrefix.set(wrapper.style, "transform", null);
	    AutoPrefix.set(wrapper.style, "transform", "rotate(0deg)");
	    AutoPrefix.set(wrapper.style, "transitionDuration", "0ms");

	    setTimeout(function () {
	      if (_this.isMounted()) {
	        AutoPrefix.set(wrapper.style, "transform", "rotate(1800deg)");
	        wrapper.style.transitionDuration = "10s";
	        AutoPrefix.set(wrapper.style, "transitionTimingFunction", "linear");
	      }
	    }, 50);
	  },

	  prefixed: function prefixed(key) {
	    return AutoPrefix.single(key);
	  }

	});

	module.exports = RefreshIndicator;

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	  CircleRipple: __webpack_require__(196),
	  FocusRipple: __webpack_require__(191),
	  TouchRipple: __webpack_require__(194)
	};

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var TextField = __webpack_require__(250);
	var DropDownMenu = __webpack_require__(260);

	var SelectField = React.createClass({
	  displayName: 'SelectField',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    errorText: React.PropTypes.string,
	    floatingLabelText: React.PropTypes.string,
	    selectFieldRoot: React.PropTypes.string,
	    underlineStyle: React.PropTypes.object,
	    labelStyle: React.PropTypes.object,
	    errorStyle: React.PropTypes.object,
	    hintText: React.PropTypes.string,
	    id: React.PropTypes.string,
	    multiLine: React.PropTypes.bool,
	    onBlur: React.PropTypes.func,
	    onChange: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    onKeyDown: React.PropTypes.func,
	    onEnterKeyDown: React.PropTypes.func,
	    type: React.PropTypes.string,
	    rows: React.PropTypes.number,
	    inputStyle: React.PropTypes.object,
	    iconStyle: React.PropTypes.object,
	    floatingLabelStyle: React.PropTypes.object,
	    autoWidth: React.PropTypes.bool,
	    menuItems: React.PropTypes.array.isRequired,
	    menuItemStyle: React.PropTypes.object,
	    selectedIndex: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      fullWidth: false
	    };
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        height: 46,
	        position: 'relative',
	        width: '100%',
	        top: 16,
	        fontSize: 16
	      },
	      label: {
	        paddingLeft: 0,
	        top: 4,
	        width: '100%'
	      },
	      icon: {
	        top: 20,
	        right: 0
	      },
	      underline: {
	        borderTop: 'none'
	      },
	      input: {},
	      error: {}
	    };

	    if (!this.props.floatingLabelText) {
	      if (this.props.hintText) {
	        styles.root.top = -5;
	        styles.label.top = 1;
	        styles.icon.top = 17;
	      } else {
	        styles.root.top = -8;
	      }
	    } else {
	      styles.error.bottom = -15;
	    }

	    return styles;
	  },

	  render: function render() {
	    var styles = this.getStyles();
	    var _props = this.props;
	    var style = _props.style;
	    var labelStyle = _props.labelStyle;
	    var iconStyle = _props.iconStyle;
	    var underlineStyle = _props.underlineStyle;
	    var errorStyle = _props.errorStyle;
	    var selectFieldRoot = _props.selectFieldRoot;
	    var menuItems = _props.menuItems;
	    var disabled = _props.disabled;
	    var floatingLabelText = _props.floatingLabelText;
	    var floatingLabelStyle = _props.floatingLabelStyle;
	    var hintText = _props.hintText;
	    var fullWidth = _props.fullWidth;
	    var errorText = _props.errorText;

	    var other = _objectWithoutProperties(_props, ['style', 'labelStyle', 'iconStyle', 'underlineStyle', 'errorStyle', 'selectFieldRoot', 'menuItems', 'disabled', 'floatingLabelText', 'floatingLabelStyle', 'hintText', 'fullWidth', 'errorText']);

	    var textFieldProps = {
	      style: this.mergeAndPrefix(styles.input, style),
	      floatingLabelText: floatingLabelText,
	      floatingLabelStyle: floatingLabelStyle,
	      hintText: !hintText && !floatingLabelText ? ' ' : hintText,
	      fullWidth: fullWidth,
	      errorText: errorText,
	      errorStyle: this.mergeAndPrefix(styles.error, errorStyle)
	    };
	    var dropDownMenuProps = {
	      menuItems: menuItems,
	      disabled: disabled,
	      style: this.mergeAndPrefix(styles.root, selectFieldRoot),
	      labelStyle: this.mergeAndPrefix(styles.label, labelStyle),
	      iconStyle: this.mergeAndPrefix(styles.icon, iconStyle),
	      underlineStyle: this.mergeAndPrefix(styles.underline),
	      autoWidth: false
	    };

	    return React.createElement(
	      TextField,
	      textFieldProps,
	      React.createElement(DropDownMenu, _extends({}, dropDownMenuProps, other))
	    );
	  }
	});

	module.exports = SelectField;

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Draggable = __webpack_require__(284);
	var Transitions = __webpack_require__(185);
	var FocusRipple = __webpack_require__(191);

	/**
	  * Verifies min/max range.
	  * @param   {Object} props         Properties of the React component.
	  * @param   {String} propName      Name of the property to validate.
	  * @param   {String} componentName Name of the component whose property is being validated.
	  * @returns {Object} Returns an Error if min >= max otherwise null.
	  */
	var minMaxPropType = function minMaxPropType(props, propName, componentName) {
	  var error = React.PropTypes.number(props, propName, componentName);
	  if (error !== null) return error;

	  if (props.min >= props.max) {
	    var errorMsg = propName === 'min' ? 'min should be less than max' : 'max should be greater than min';
	    return new Error(errorMsg);
	  }
	};

	/**
	  * Verifies value is within the min/max range.
	  * @param   {Object} props         Properties of the React component.
	  * @param   {String} propName      Name of the property to validate.
	  * @param   {String} componentName Name of the component whose property is being validated.
	  * @returns {Object} Returns an Error if the value is not within the range otherwise null.
	  */
	var valueInRangePropType = function valueInRangePropType(props, propName, componentName) {
	  var error = React.PropTypes.number(props, propName, componentName);
	  if (error !== null) return error;

	  var value = props[propName];
	  if (value < props.min || props.max < value) {
	    return new Error(propName + ' should be within the range specified by min and max');
	  }
	};

	var Slider = React.createClass({
	  displayName: 'Slider',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    name: React.PropTypes.string.isRequired,
	    defaultValue: valueInRangePropType,
	    description: React.PropTypes.string,
	    disabled: React.PropTypes.bool,
	    error: React.PropTypes.string,
	    max: minMaxPropType,
	    min: minMaxPropType,
	    required: React.PropTypes.bool,
	    step: React.PropTypes.number,
	    onBlur: React.PropTypes.func,
	    onChange: React.PropTypes.func,
	    onDragStart: React.PropTypes.func,
	    onDragStop: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    value: valueInRangePropType
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      defaultValue: 0,
	      disabled: false,
	      max: 1,
	      min: 0,
	      required: true,
	      step: 0.01
	    };
	  },

	  getInitialState: function getInitialState() {
	    var value = this.props.value;
	    if (value === undefined) {
	      value = this.props.defaultValue;
	    }
	    var percent = (value - this.props.min) / (this.props.max - this.props.min);
	    if (isNaN(percent)) percent = 0;

	    return {
	      active: false,
	      dragging: false,
	      focused: false,
	      hovered: false,
	      percent: percent,
	      value: value
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (nextProps.value !== undefined) {
	      this.setValue(nextProps.value);
	    }
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.slider;
	  },

	  getStyles: function getStyles() {
	    var fillGutter = this.getTheme().handleSize / 2;
	    var disabledGutter = this.getTheme().trackSize + this.getTheme().handleSizeDisabled / 2;
	    var calcDisabledSpacing = this.props.disabled ? ' - ' + disabledGutter + 'px' : '';
	    var styles = {
	      root: {
	        touchCallout: 'none',
	        userSelect: 'none',
	        cursor: 'default',
	        height: this.getTheme().handleSizeActive,
	        position: 'relative',
	        marginTop: 24,
	        marginBottom: 48
	      },
	      track: {
	        position: 'absolute',
	        top: (this.getTheme().handleSizeActive - this.getTheme().trackSize) / 2,
	        left: 0,
	        width: '100%',
	        height: this.getTheme().trackSize
	      },
	      filledAndRemaining: {
	        position: 'absolute',
	        top: 0,
	        height: '100%',
	        transition: Transitions.easeOut(null, 'margin')
	      },
	      handle: {
	        boxSizing: 'border-box',
	        position: 'absolute',
	        cursor: 'pointer',
	        pointerEvents: 'inherit',
	        top: (this.getTheme().handleSizeActive - this.getTheme().trackSize) / 2 + 'px',
	        left: '0%',
	        zIndex: 1,
	        margin: this.getTheme().trackSize / 2 + 'px 0 0 0',
	        width: this.getTheme().handleSize,
	        height: this.getTheme().handleSize,
	        backgroundColor: this.getTheme().selectionColor,
	        backgroundClip: 'padding-box',
	        border: '0px solid transparent',
	        borderRadius: '50%',
	        transform: 'translate(-50%, -50%)',
	        transition: Transitions.easeOut('450ms', 'background') + ',' + Transitions.easeOut('450ms', 'border-color') + ',' + Transitions.easeOut('450ms', 'width') + ',' + Transitions.easeOut('450ms', 'height'),
	        overflow: 'visible'
	      },
	      handleWhenDisabled: {
	        boxSizing: 'content-box',
	        cursor: 'not-allowed',
	        backgroundColor: this.getTheme().trackColor,
	        width: this.getTheme().handleSizeDisabled,
	        height: this.getTheme().handleSizeDisabled,
	        border: 'none'
	      },
	      handleWhenPercentZero: {
	        border: this.getTheme().trackSize + 'px solid ' + this.getTheme().handleColorZero,
	        backgroundColor: this.getTheme().handleFillColor,
	        boxShadow: 'none'
	      },
	      handleWhenPercentZeroAndDisabled: {
	        cursor: 'not-allowed',
	        width: this.getTheme().handleSizeDisabled,
	        height: this.getTheme().handleSizeDisabled
	      },
	      handleWhenPercentZeroAndFocused: {
	        border: this.getTheme().trackSize + 'px solid ' + this.getTheme().trackColorSelected
	      },
	      handleWhenActive: {
	        width: this.getTheme().handleSizeActive,
	        height: this.getTheme().handleSizeActive
	      },
	      ripple: {
	        height: this.getTheme().handleSize,
	        width: this.getTheme().handleSize,
	        overflow: 'visible'
	      },
	      rippleWhenPercentZero: {
	        top: -this.getTheme().trackSize,
	        left: -this.getTheme().trackSize
	      },
	      rippleInner: {
	        height: '300%',
	        width: '300%',
	        top: -this.getTheme().handleSize,
	        left: -this.getTheme().handleSize
	      }
	    };
	    styles.filled = this.mergeAndPrefix(styles.filledAndRemaining, {
	      left: 0,
	      backgroundColor: this.props.disabled ? this.getTheme().trackColor : this.getTheme().selectionColor,
	      marginRight: fillGutter,
	      width: 'calc(' + this.state.percent * 100 + '%' + calcDisabledSpacing + ')'
	    });
	    styles.remaining = this.mergeAndPrefix(styles.filledAndRemaining, {
	      right: 0,
	      backgroundColor: this.getTheme().trackColor,
	      marginLeft: fillGutter,
	      width: 'calc(' + (1 - this.state.percent) * 100 + '%' + calcDisabledSpacing + ')'
	    });

	    return styles;
	  },

	  render: function render() {
	    var others = _objectWithoutProperties(this.props, []);

	    var percent = this.state.percent;
	    if (percent > 1) percent = 1;else if (percent < 0) percent = 0;

	    var styles = this.getStyles();
	    var sliderStyles = this.mergeAndPrefix(styles.root, this.props.style);
	    var handleStyles = percent === 0 ? this.mergeAndPrefix(styles.handle, styles.handleWhenPercentZero, this.state.active && styles.handleWhenActive, this.state.focused && { outline: 'none' }, (this.state.hovered || this.state.focused) && !this.props.disabled && styles.handleWhenPercentZeroAndFocused, this.props.disabled && styles.handleWhenPercentZeroAndDisabled) : this.mergeAndPrefix(styles.handle, this.state.active && styles.handleWhenActive, this.state.focused && { outline: 'none' }, this.props.disabled && styles.handleWhenDisabled);
	    var rippleStyle = this.mergeAndPrefix(styles.ripple, percent === 0 && styles.rippleWhenPercentZero);
	    var remainingStyles = styles.remaining;
	    if ((this.state.hovered || this.state.focused) && !this.props.disabled) {
	      remainingStyles.backgroundColor = this.getTheme().trackColorSelected;
	    }

	    var rippleShowCondition = (this.state.hovered || this.state.focused) && !this.state.active;
	    var rippleColor = this.state.percent === 0 ? this.getTheme().handleColorZero : this.getTheme().rippleColor;
	    var focusRipple = undefined;
	    if (!this.props.disabled && !this.props.disableFocusRipple) {
	      focusRipple = React.createElement(FocusRipple, {
	        ref: 'focusRipple',
	        key: 'focusRipple',
	        style: rippleStyle,
	        innerStyle: styles.rippleInner,
	        show: rippleShowCondition,
	        color: rippleColor });
	    }
	    return React.createElement(
	      'div',
	      _extends({}, others, { style: this.props.style }),
	      React.createElement('span', { className: 'mui-input-highlight' }),
	      React.createElement('span', { className: 'mui-input-bar' }),
	      React.createElement(
	        'span',
	        { className: 'mui-input-description' },
	        this.props.description
	      ),
	      React.createElement(
	        'span',
	        { className: 'mui-input-error' },
	        this.props.error
	      ),
	      React.createElement(
	        'div',
	        { style: sliderStyles,
	          onFocus: this._onFocus,
	          onBlur: this._onBlur,
	          onMouseDown: this._onMouseDown,
	          onMouseEnter: this._onMouseEnter,
	          onMouseLeave: this._onMouseLeave,
	          onMouseUp: this._onMouseUp },
	        React.createElement(
	          'div',
	          { ref: 'track', style: styles.track },
	          React.createElement('div', { style: styles.filled }),
	          React.createElement('div', { style: remainingStyles }),
	          React.createElement(
	            Draggable,
	            { axis: 'x', bound: 'point',
	              cancel: this.props.disabled ? '*' : null,
	              start: { x: percent * 100 + '%' },
	              constrain: this._constrain(),
	              onStart: this._onDragStart,
	              onStop: this._onDragStop,
	              onDrag: this._onDragUpdate,
	              onMouseDown: this._onMouseDownKnob },
	            React.createElement(
	              'div',
	              { style: handleStyles, tabIndex: 0 },
	              focusRipple
	            )
	          )
	        )
	      ),
	      React.createElement('input', { ref: 'input', type: 'hidden',
	        name: this.props.name,
	        value: this.state.value,
	        required: this.props.required,
	        min: this.props.min,
	        max: this.props.max,
	        step: this.props.step })
	    );
	  },

	  getValue: function getValue() {
	    return this.state.value;
	  },

	  setValue: function setValue(i) {
	    // calculate percentage
	    var percent = (i - this.props.min) / (this.props.max - this.props.min);
	    if (isNaN(percent)) percent = 0;
	    // update state
	    this.setState({
	      value: i,
	      percent: percent
	    });
	  },

	  getPercent: function getPercent() {
	    return this.state.percent;
	  },

	  setPercent: function setPercent(percent) {
	    var value = this._alignValue(this._percentToValue(percent));
	    this.setState({ value: value, percent: percent });
	  },

	  clearValue: function clearValue() {
	    this.setValue(this.props.min);
	  },

	  _alignValue: function _alignValue(val) {
	    var _props = this.props;
	    var step = _props.step;
	    var min = _props.min;

	    var valModStep = (val - min) % step;
	    var alignValue = val - valModStep;

	    if (Math.abs(valModStep) * 2 >= step) {
	      alignValue += valModStep > 0 ? step : -step;
	    }

	    return parseFloat(alignValue.toFixed(5));
	  },

	  _constrain: function _constrain() {
	    var _this = this;

	    var _props2 = this.props;
	    var min = _props2.min;
	    var max = _props2.max;
	    var step = _props2.step;

	    return function (pos) {
	      var pixelMax = React.findDOMNode(_this.refs.track).clientWidth;
	      var pixelStep = pixelMax / ((max - min) / step);

	      var cursor = min;
	      var i = undefined;
	      for (i = 0; i < (max - min) / step; i++) {
	        var distance = pos.left - cursor;
	        var nextDistance = cursor + pixelStep - pos.left;
	        if (Math.abs(distance) > Math.abs(nextDistance)) {
	          cursor += pixelStep;
	        } else {
	          break;
	        }
	      }

	      return {
	        left: cursor
	      };
	    };
	  },

	  _onFocus: function _onFocus(e) {
	    this.setState({ focused: true });
	    if (this.props.onFocus) this.props.onFocus(e);
	  },

	  _onBlur: function _onBlur(e) {
	    this.setState({ focused: false, active: false });
	    if (this.props.onBlur) this.props.onBlur(e);
	  },

	  _onMouseDown: function _onMouseDown(e) {
	    if (!this.props.disabled) this._pos = e.clientX;
	  },

	  _onMouseEnter: function _onMouseEnter() {
	    this.setState({ hovered: true });
	  },

	  _onMouseLeave: function _onMouseLeave() {
	    this.setState({ hovered: false });
	  },

	  _onMouseUp: function _onMouseUp(e) {
	    if (!this.props.disabled) this.setState({ active: false });
	    if (!this.state.dragging && Math.abs(this._pos - e.clientX) < 5) {
	      var pos = e.clientX - React.findDOMNode(this).getBoundingClientRect().left;
	      this._dragX(e, pos);
	    }

	    this._pos = undefined;
	  },

	  _onMouseDownKnob: function _onMouseDownKnob() {
	    if (!this.props.disabled) this.setState({ active: true });
	  },

	  _onDragStart: function _onDragStart(e, ui) {
	    this.setState({
	      dragging: true,
	      active: true
	    });
	    if (this.props.onDragStart) this.props.onDragStart(e, ui);
	  },

	  _onDragStop: function _onDragStop(e, ui) {
	    this.setState({
	      dragging: false,
	      active: false
	    });
	    if (this.props.onDragStop) this.props.onDragStop(e, ui);
	  },

	  _onDragUpdate: function _onDragUpdate(e, ui) {
	    if (!this.state.dragging) return;
	    if (!this.props.disabled) this._dragX(e, ui.position.left);
	  },

	  _dragX: function _dragX(e, pos) {
	    var max = React.findDOMNode(this.refs.track).clientWidth;
	    if (pos < 0) pos = 0;else if (pos > max) pos = max;
	    if (pos === this.props.min) {
	      return this._updateWithChangeEvent(e, 0);
	    }
	    this._updateWithChangeEvent(e, pos / max);
	  },

	  _updateWithChangeEvent: function _updateWithChangeEvent(e, percent) {
	    if (this.state.percent === percent) return;
	    this.setPercent(percent);
	    var value = this._alignValue(this._percentToValue(percent));
	    if (this.props.onChange) this.props.onChange(e, value);
	  },

	  _percentToValue: function _percentToValue(percent) {
	    return percent * (this.props.max - this.props.min) + this.props.min;
	  }

	});

	module.exports = Slider;

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(161);
	var emptyFunction = function () {};

	// for accessing browser globals
	var root = typeof window !== 'undefined' ? window : this;
	var bodyElement;
	if (typeof document !== 'undefined' && 'body' in document) {
	  bodyElement = document.body;
	}

	function updateBoundState (state, bound) {
	  if (!bound) return state;
	  bound = String(bound);
	  var boundTop = !!~bound.indexOf('top');
	  var boundRight = !!~bound.indexOf('right');
	  var boundBottom = !!~bound.indexOf('bottom');
	  var boundLeft = !!~bound.indexOf('left');
	  var boundAll = !!~bound.indexOf('all') ||
	    !(boundTop || boundRight || boundBottom || boundLeft);
	  var boundBox = !~bound.indexOf('point');
	  state.boundTop = boundAll || boundTop;
	  state.boundRight = boundAll || boundRight;
	  state.boundBottom = boundAll || boundBottom;
	  state.boundLeft = boundAll || boundLeft;
	  state.boundBox = boundBox;
	  return state;
	};

	function createUIEvent(draggable) {
	  return {
	    position: {
	      top: draggable.state.offsetTop,
	      left: draggable.state.offsetLeft
	    }
	  };
	}

	function canDragY(draggable) {
	  return draggable.props.axis === 'both' ||
	      draggable.props.axis === 'y';
	}

	function canDragX(draggable) {
	  return draggable.props.axis === 'both' ||
	      draggable.props.axis === 'x';
	}

	function isFunction(func) {
	  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]'
	}

	// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc
	function findInArray(array, callback) {
	  for (var i = 0, length = array.length, element = null; i < length, element = array[i]; i++) {
	    if (callback.apply(callback, [element, i, array])) return element;
	  }
	}

	function matchesSelector(el, selector) {
	  var method = findInArray([
	    'matches',
	    'webkitMatchesSelector',
	    'mozMatchesSelector',
	    'msMatchesSelector',
	    'oMatchesSelector'
	  ], function(method){
	    return isFunction(el[method]);
	  });

	  return el[method].call(el, selector);
	}

	// @credits: http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript/4819886#4819886
	var isTouchDevice = 'ontouchstart' in root // works on most browsers
	                 || 'onmsgesturechange' in root; // works on ie10 on ms surface

	// look ::handleDragStart
	//function isMultiTouch(e) {
	//  return e.touches && Array.isArray(e.touches) && e.touches.length > 1
	//}

	/**
	 * simple abstraction for dragging events names
	 * */
	var dragEventFor = (function () {
	  var eventsFor = {
	    touch: {
	      start: 'touchstart',
	      move: 'touchmove',
	      end: 'touchend'
	    },
	    mouse: {
	      start: 'mousedown',
	      move: 'mousemove',
	      end: 'mouseup'
	    }
	  };
	  return eventsFor[isTouchDevice ? 'touch' : 'mouse'];
	})();

	/**
	 * get {clientX, clientY} positions of control
	 * */
	function getControlPosition(e) {
	  var position = (e.touches && e.touches[0]) || e;
	  return {
	    clientX: position.clientX,
	    clientY: position.clientY
	  }
	}

	function addEvent(el, event, handler) {
	  if (!el) { return; }
	  if (el.attachEvent) {
	    el.attachEvent('on' + event, handler);
	  } else if (el.addEventListener) {
	    el.addEventListener(event, handler, true);
	  } else {
	    el['on' + event] = handler;
	  }
	}

	function removeEvent(el, event, handler) {
	  if (!el) { return; }
	  if (el.detachEvent) {
	    el.detachEvent('on' + event, handler);
	  } else if (el.removeEventListener) {
	    el.removeEventListener(event, handler, true);
	  } else {
	    el['on' + event] = null;
	  }
	}

	module.exports = React.createClass({
	  displayName: 'Draggable',
	  mixins: [React.addons.PureRenderMixin],

	  propTypes: {
	    /**
	     * `axis` determines which axis the draggable can move.
	     *
	     * 'both' allows movement horizontally and vertically.
	     * 'x' limits movement to horizontal axis.
	     * 'y' limits movement to vertical axis.
	     *
	     * Defaults to 'both'.
	     */
	    axis: React.PropTypes.oneOf(['both', 'x', 'y']),

	    /**
	     * `handle` specifies a selector to be used as the handle that initiates drag.
	     *
	     * Example:
	     *
	     * ```jsx
	     *  var App = React.createClass({
	     *      render: function () {
	     *        return (
	     *          <Draggable handle=".handle">
	     *            <div>
	     *                <div className="handle">Click me to drag</div>
	     *                <div>This is some other content</div>
	     *            </div>
	     *          </Draggable>
	     *        );
	     *      }
	     *  });
	     * ```
	     */
	    handle: React.PropTypes.string,

	    /**
	     * `cancel` specifies a selector to be used to prevent drag initialization.
	     *
	     * Example:
	     *
	     * ```jsx
	     *  var App = React.createClass({
	     *      render: function () {
	     *          return(
	     *              <Draggable cancel=".cancel">
	     *                  <div>
	     *                    <div className="cancel">You can't drag from here</div>
	     *            <div>Dragging here works fine</div>
	     *                  </div>
	     *              </Draggable>
	     *          );
	     *      }
	     *  });
	     * ```
	     */
	    cancel: React.PropTypes.string,

	    /**
	     * `bound` determines whether to bound the movement to the parent box.
	     *
	     * The property takes a list of space-separated strings. The Draggable
	     * is bounded by the nearest DOMNode.offsetParent. To set the offset
	     * parent, give it a position value other than 'static'.
	     *
	     * Optionally choose one or more bounds from:
	     * 'top' bounds movement to the top edge of the parent box.
	     * 'right' bounds movement to the right edge of the parent box.
	     * 'bottom' bounds movement to the bottom edge of the parent box.
	     * 'left' bounds movement to the left edge of the parent box.
	     * 'all' bounds movement to all edges (default if not specified).
	     *
	     * Optionally choose one anchor from:
	     * 'point' to constrain only the top-left corner.
	     * 'box' to constrain the entire box (default if not specified).
	     *
	     * You may use more than one bound, e.g. 'top left point'. Set to a
	     * falsy value to disable.
	     *
	     * Defaults to 'all box'.
	     */
	    bound: React.PropTypes.string,

	    /**
	     * `grid` specifies the x and y that dragging should snap to.
	     *
	     * Example:
	     *
	     * ```jsx
	     *   var App = React.createClass({
	     *       render: function () {
	     *           return (
	     *              <Draggable grid={[25, 25]}>
	     *                   <div>I snap to a 25 x 25 grid</div>
	     *               </Draggable>
	     *           );
	     *      }
	     *   });
	     * ```
	     */
	    grid: React.PropTypes.arrayOf(React.PropTypes.number),

	    /**
	     * `constrain` takes a function to constrain the dragging.
	     *
	     * Example:
	     *
	     * ```jsx
	     *   function constrain (snap) {
	     *         function constrainOffset (offset, prev) {
	     *               var delta = offset - prev;
	     *               if (Math.abs(delta) >= snap) {
	     *                     return prev + (delta < 0 ? -snap : snap);
	     *               }
	     *               return prev;
	     *         }
	     *         return function (pos) {
	     *               return {
	     *                     top: constrainOffset(pos.top, pos.prevTop),
	     *                     left: constrainOffset(pos.left, pos.prevLeft)
	     *               };
	     *         };
	     *   }
	     *   var App = React.createClass({
	     *       render: function () {
	     *           return (
	     *               <Draggable constrain={constrain}>
	     *                   <div>I snap to a 25 x 25 grid</div>
	     *               </Draggable>
	     *           );
	     *       }
	     *   });
	     * ```
	     */
	    constrain: React.PropTypes.func,

	    /**
	     * `start` specifies the x and y that the dragged item should start at
	     *
	     * Example:
	     *
	     * ```jsx
	     *  var App = React.createClass({
	     *      render: function () {
	     *          return (
	     *              <Draggable start={{x: 25, y: 25}}>
	     *                  <div>I start with left: 25px; top: 25px;</div>
	     *              </Draggable>
	     *          );
	     *      }
	     *  });
	     * ```
	     */
	    start: React.PropTypes.object,

	    /**
	     * `zIndex` specifies the zIndex to use while dragging.
	     *
	     * Example:
	     *
	     * ```jsx
	     *  var App = React.createClass({
	     *      render: function () {
	     *          return (
	     *              <Draggable zIndex={100}>
	     *                  <div>I have a zIndex</div>
	     *              </Draggable>
	     *          );
	     *      }
	     *  });
	     * ```
	     */
	    zIndex: React.PropTypes.number,

	    /**
	     * `useChild` determines whether to use the first child as root.
	     *
	     * If false, a div is created. This option is required if any children
	     * have a ref.
	     *
	     * Defaults to true.
	     */
	    useChild: React.PropTypes.bool,

	    /**
	     * Called when dragging starts.
	     *
	     * Example:
	     *
	     * ```js
	     *  function (event, ui) {}
	     * ```
	     *
	     * `event` is the Event that was triggered.
	     * `ui` is an object:
	     *
	     * ```js
	     *  {
	     *    position: {top: 0, left: 0}
	     *  }
	     * ```
	     */
	    onStart: React.PropTypes.func,

	    /**
	     * Called while dragging.
	     *
	     * Example:
	     *
	     * ```js
	     *  function (event, ui) {}
	     * ```
	     *
	     * `event` is the Event that was triggered.
	     * `ui` is an object:
	     *
	     * ```js
	     *  {
	     *    position: {top: 0, left: 0}
	     *  }
	     * ```
	     */
	    onDrag: React.PropTypes.func,

	    /**
	     * Called when dragging stops.
	     *
	     * Example:
	     *
	     * ```js
	     *  function (event, ui) {}
	     * ```
	     *
	     * `event` is the Event that was triggered.
	     * `ui` is an object:
	     *
	     * ```js
	     *  {
	     *    position: {top: 0, left: 0}
	     *  }
	     * ```
	     */
	    onStop: React.PropTypes.func,

	    /**
	     * A workaround option which can be passed if onMouseDown needs to be accessed, since it'll always be blocked (due to that there's internal use of onMouseDown)
	     *
	     */
	    onMouseDown: React.PropTypes.func
	  },

	  getDefaultProps: function () {
	    return {
	      axis: 'both',
	      bound: null,
	      handle: null,
	      cancel: null,
	      grid: null,
	      start: {},
	      zIndex: NaN,
	      useChild: true,
	      onStart: emptyFunction,
	      onDrag: emptyFunction,
	      onStop: emptyFunction,
	      onMouseDown: emptyFunction
	    };
	  },

	  getInitialState: function () {
	    var state = {
	      // Whether or not currently dragging
	      dragging: false,

	      // Pointer offset on screen
	      clientX: 0, clientY: 0,

	      // DOMNode offset relative to parent
	      offsetLeft: this.props.start.x || 0, offsetTop: this.props.start.y || 0
	    };

	    updateBoundState(state, this.props.bound);

	    return state;
	  },

	  componentWillReceiveProps: function (nextProps) {
	    var state = updateBoundState({}, nextProps.bound);
	    if (nextProps.start) {
	      if (nextProps.start.x != null) {
	        state.offsetLeft = nextProps.start.x || 0;
	      }
	      if (nextProps.start.y != null) {
	        state.offsetTop = nextProps.start.y || 0;
	      }
	    }
	    this.setState(state);
	  },

	  componentWillUnmount: function() {
	    // Remove any leftover event handlers
	    removeEvent(root, dragEventFor['move'], this.handleDrag);
	    removeEvent(root, dragEventFor['end'], this.handleDragEnd);
	  },

	  handleDragStart: function (e) {
	    // todo: write right implementation to prevent multitouch drag
	    // prevent multi-touch events
	    // if (isMultiTouch(e)) {
	    //     this.handleDragEnd.apply(e, arguments);
	    //     return
	    // }

	    // Make it possible to attach event handlers on top of this one
	    this.props.onMouseDown(e);

	    // Short circuit if handle or cancel prop was provided and selector doesn't match
	    if ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||
	      (this.props.cancel && matchesSelector(e.target, this.props.cancel))) {
	      return;
	    }

	    var dragPoint = getControlPosition(e);

	    // Initiate dragging
	    this.setState({
	      dragging: true,
	      clientX: dragPoint.clientX,
	      clientY: dragPoint.clientY
	    });

	    // Call event handler
	    this.props.onStart(e, createUIEvent(this));

	    // Add event handlers
	    addEvent(root, dragEventFor['move'], this.handleDrag);
	    addEvent(root, dragEventFor['end'], this.handleDragEnd);

	    // Add dragging class to body element
	    if (bodyElement) bodyElement.className += ' react-draggable-dragging';
	  },

	  handleDragEnd: function (e) {
	    // Short circuit if not currently dragging
	    if (!this.state.dragging) {
	      return;
	    }

	    // Turn off dragging
	    this.setState({
	      dragging: false
	    });

	    // Call event handler
	    this.props.onStop(e, createUIEvent(this));

	    // Remove event handlers
	    removeEvent(root, dragEventFor['move'], this.handleDrag);
	    removeEvent(root, dragEventFor['end'], this.handleDragEnd);

	    // Remove dragging class from body element
	    if (bodyElement) {
	      var className = bodyElement.className;
	      bodyElement.className =
	        className.replace(/(?:^|\s+)react-draggable-dragging\b/, ' ');
	    }
	  },

	  handleDrag: function (e) {
	    var dragPoint = getControlPosition(e);
	    var offsetLeft = this._toPixels(this.state.offsetLeft);
	    var offsetTop = this._toPixels(this.state.offsetTop);

	    var state = {
	      offsetLeft: offsetLeft,
	      offsetTop: offsetTop
	    };

	    // Get parent DOM node
	    var node = this.getDOMNode();
	    var offsetParent = node.offsetParent;
	    var offset, boundingValue;

	    if (canDragX(this)) {
	      // Calculate updated position
	      offset = offsetLeft + dragPoint.clientX - this.state.clientX;

	      // Bound movement to parent box
	      if (this.state.boundLeft) {
	        boundingValue = state.offsetLeft - node.offsetLeft;
	        if (offset < boundingValue) {
	          offset = boundingValue;
	        }
	      }
	      if (this.state.boundRight) {
	        boundingValue += offsetParent.clientWidth;
	        if (this.state.boundBox) {
	          boundingValue -= node.offsetWidth;
	        }
	        if (offset > boundingValue) {
	          offset = boundingValue;
	        }
	      }
	      // Update left
	      state.offsetLeft = offset;
	    }

	    if (canDragY(this)) {
	      // Calculate updated position
	      offset = offsetTop + dragPoint.clientY - this.state.clientY;
	      // Bound movement to parent box
	      if (this.state.boundTop) {
	        boundingValue = state.offsetTop - node.offsetTop;
	        if (offset < boundingValue) {
	          offset = boundingValue;
	        }
	      }
	      if (this.state.boundBottom) {
	        boundingValue += offsetParent.clientHeight;
	        if (this.state.boundBox) {
	          boundingValue -= node.offsetHeight;
	        }
	        if (offset > boundingValue) {
	          offset = boundingValue;
	        }
	      }
	      // Update top
	      state.offsetTop = offset;
	    }

	    var constrain = this.props.constrain;
	    var grid = this.props.grid;

	    // Backwards-compatibility for snap to grid
	    if (!constrain && Array.isArray(grid)) {
	      var constrainOffset = function (offset, prev, snap) {
	        var delta = offset - prev;
	        if (Math.abs(delta) >= snap) {
	          return prev + parseInt(delta / snap, 10) * snap;
	        }
	        return prev;
	      };
	      constrain = function (pos) {
	        return {
	          left: constrainOffset(pos.left, pos.prevLeft, grid[0]),
	          top: constrainOffset(pos.top, pos.prevTop, grid[1])
	        };
	      };
	    }

	    // Constrain if function has been provided
	    var positions;
	    if (constrain) {
	      // Constrain positions
	      positions = constrain({
	        prevLeft: this.state.offsetLeft,
	        prevTop: this.state.offsetTop,
	        left: state.offsetLeft,
	        top: state.offsetTop
	      });
	      if (positions) {
	        // Update left
	        if ('left' in positions && !isNaN(positions.left)) {
	          state.offsetLeft = positions.left;
	        }
	        // Update top
	        if ('top' in positions && !isNaN(positions.top)) {
	          state.offsetTop = positions.top;
	        }
	      }
	    }

	    // Save new state
	    state.clientX = this.state.clientX + (state.offsetLeft - offsetLeft);
	    state.clientY = this.state.clientY + (state.offsetTop - offsetTop);
	    this.setState(state);

	    // Call event handler
	    this.props.onDrag(e, createUIEvent(this));
	  },

	  onTouchStart: function (e) {
	    e.preventDefault(); // prevent for scroll
	    return this.handleDragStart.apply(this, arguments);
	  },

	  render: function () {
	    var style = {
	      top: this.state.offsetTop,
	      left: this.state.offsetLeft
	    };

	    // Set zIndex if currently dragging and prop has been provided
	    if (this.state.dragging && !isNaN(this.props.zIndex)) {
	      style.zIndex = this.props.zIndex;
	    }

	    var props = {
	      style: style,
	      className: 'react-draggable',

	      onMouseDown: this.handleDragStart,
	      onTouchStart: this.onTouchStart,

	      onMouseUp: this.handleDragEnd,
	      onTouchEnd: this.handleDragEnd
	    };

	    // Reuse the child provided
	    // This makes it flexible to use whatever element is wanted (div, ul, etc)
	    if (this.props.useChild) {
	      return React.addons.cloneWithProps(React.Children.only(this.props.children), props);
	    }

	    return React.DOM.div(props, this.props.children);
	  },

	  _toPixels: function (value) {

	    // Support percentages
	    if (typeof value == 'string' && value.slice(-1) == '%') {
	      return parseInt((+value.replace('%', '') / 100) *
	        this.getDOMNode().offsetParent.clientWidth, 10) || 0;
	    }

	    // Invalid values become zero
	    var i = parseInt(value, 10);
	    if (isNaN(i) || !isFinite(i)) return 0;

	    return i;
	  }

	});


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var CssEvent = __webpack_require__(232);
	var StylePropable = __webpack_require__(159);
	var Transitions = __webpack_require__(185);
	var ClickAwayable = __webpack_require__(253);
	var FlatButton = __webpack_require__(247);

	var Snackbar = React.createClass({
	  displayName: 'Snackbar',

	  mixins: [StylePropable, ClickAwayable],

	  manuallyBindClickAway: true,

	  // ID of the active timer.
	  _autoHideTimerId: undefined,

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    message: React.PropTypes.string.isRequired,
	    action: React.PropTypes.string,
	    autoHideDuration: React.PropTypes.number,
	    onActionTouchTap: React.PropTypes.func,
	    onShow: React.PropTypes.func,
	    onDismiss: React.PropTypes.func,
	    openOnMount: React.PropTypes.bool
	  },

	  getInitialState: function getInitialState() {
	    return {
	      open: this.props.openOnMount || false
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    if (this.props.openOnMount) {
	      this._setAutoHideTimer();
	      this._bindClickAway();
	    }
	  },

	  componentClickAway: function componentClickAway() {
	    this.dismiss();
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
	    var _this = this;

	    if (prevState.open !== this.state.open) {
	      if (this.state.open) {
	        this._setAutoHideTimer();

	        //Only Bind clickaway after transition finishes
	        CssEvent.onTransitionEnd(React.findDOMNode(this), function () {
	          _this._bindClickAway();
	        });
	      } else {
	        this._unbindClickAway();
	      }
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this._clearAutoHideTimer();
	    this._unbindClickAway();
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.snackbar;
	  },

	  getSpacing: function getSpacing() {
	    return this.context.muiTheme.spacing;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        color: this.getTheme().textColor,
	        backgroundColor: this.getTheme().backgroundColor,
	        borderRadius: 2,
	        padding: '0px ' + this.getSpacing().desktopGutter + 'px',
	        height: this.getSpacing().desktopSubheaderHeight,
	        lineHeight: this.getSpacing().desktopSubheaderHeight + 'px',
	        minWidth: 288,
	        maxWidth: 568,

	        position: 'fixed',
	        zIndex: 10,
	        bottom: this.getSpacing().desktopGutter,
	        marginLeft: this.getSpacing().desktopGutter,

	        left: 0,
	        opacity: 0,
	        visibility: 'hidden',
	        transform: 'translate3d(0, 20px, 0)',
	        transition: Transitions.easeOut('0ms', 'left', '400ms') + ',' + Transitions.easeOut('400ms', 'opacity') + ',' + Transitions.easeOut('400ms', 'transform') + ',' + Transitions.easeOut('400ms', 'visibility')
	      },
	      action: {
	        color: this.getTheme().actionColor,
	        float: 'right',
	        marginTop: 6,
	        marginRight: -16,
	        marginLeft: this.getSpacing().desktopGutter,
	        backgroundColor: 'transparent'
	      },
	      rootWhenOpen: {
	        opacity: 1,
	        visibility: 'visible',
	        transform: 'translate3d(0, 0, 0)',
	        transition: Transitions.easeOut('0ms', 'left', '0ms') + ',' + Transitions.easeOut('400ms', 'opacity', '0ms') + ',' + Transitions.easeOut('400ms', 'transform', '0ms') + ',' + Transitions.easeOut('400ms', 'visibility', '0ms')
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var action = _props.action;
	    var message = _props.message;
	    var onActionTouchTap = _props.onActionTouchTap;
	    var style = _props.style;

	    var others = _objectWithoutProperties(_props, ['action', 'message', 'onActionTouchTap', 'style']);

	    var styles = this.getStyles();

	    var rootStyles = this.state.open ? this.mergeStyles(styles.root, styles.rootWhenOpen, style) : this.mergeStyles(styles.root, style);

	    var actionButton = undefined;
	    if (action) {
	      actionButton = React.createElement(FlatButton, {
	        style: styles.action,
	        label: action,
	        onTouchTap: onActionTouchTap });
	    }

	    return React.createElement(
	      'span',
	      _extends({}, others, { style: rootStyles }),
	      React.createElement(
	        'span',
	        null,
	        message
	      ),
	      actionButton
	    );
	  },

	  show: function show() {
	    this.setState({ open: true });
	    if (this.props.onShow) this.props.onShow();
	  },

	  dismiss: function dismiss() {
	    this._clearAutoHideTimer();
	    this.setState({ open: false });
	    if (this.props.onDismiss) this.props.onDismiss();
	  },

	  _clearAutoHideTimer: function _clearAutoHideTimer() {
	    if (this._autoHideTimerId !== undefined) {
	      this._autoHideTimerId = clearTimeout(this._autoHideTimerId);
	    }
	  },

	  _setAutoHideTimer: function _setAutoHideTimer() {
	    var _this2 = this;

	    if (this.props.autoHideDuration > 0) {
	      this._clearAutoHideTimer();
	      this._autoHideTimerId = setTimeout(function () {
	        _this2.dismiss();
	      }, this.props.autoHideDuration);
	    }
	  }

	});

	module.exports = Snackbar;

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);

	var Tab = React.createClass({
	  displayName: 'Tab',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    onTouchTap: React.PropTypes.func,
	    label: React.PropTypes.string,
	    onActive: React.PropTypes.func,
	    selected: React.PropTypes.bool,
	    width: React.PropTypes.string,
	    value: React.PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onActive: function onActive() {},
	      onTouchTap: function onTouchTap() {}
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var label = _props.label;
	    var onActive = _props.onActive;
	    var onTouchTap = _props.onTouchTap;
	    var selected = _props.selected;
	    var style = _props.style;
	    var value = _props.value;
	    var width = _props.width;

	    var other = _objectWithoutProperties(_props, ['label', 'onActive', 'onTouchTap', 'selected', 'style', 'value', 'width']);

	    var styles = this.mergeAndPrefix({
	      display: 'table-cell',
	      cursor: 'pointer',
	      textAlign: 'center',
	      verticalAlign: 'middle',
	      height: 48,
	      color: selected ? 'rgba(255,255,255,1)' : 'rgba(255,255,255,0.6)',
	      outline: 'none',
	      fontSize: 14,
	      fontWeight: 500,
	      whiteSpace: 'initial',
	      fontFamily: this.context.muiTheme.contentFontFamily,
	      boxSizing: 'border-box',
	      width: width
	    }, style);

	    return React.createElement(
	      'div',
	      _extends({}, other, {
	        style: styles,
	        onTouchTap: this._handleTouchTap }),
	      label
	    );
	  },

	  _handleTouchTap: function _handleTouchTap(e) {
	    this.props.onTouchTap(this.props.value, e, this);
	  }

	});

	module.exports = Tab;

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(161);
	var TabTemplate = __webpack_require__(288);
	var InkBar = __webpack_require__(289);
	var StylePropable = __webpack_require__(159);
	var Controllable = __webpack_require__(265);

	var Tabs = React.createClass({
	  displayName: 'Tabs',

	  mixins: [StylePropable, Controllable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    contentContainerStyle: React.PropTypes.object,
	    initialSelectedIndex: React.PropTypes.number,
	    inkBarStyle: React.PropTypes.object,
	    tabItemContainerStyle: React.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      initialSelectedIndex: 0
	    };
	  },

	  getInitialState: function getInitialState() {
	    var valueLink = this.getValueLink(this.props);
	    var initialIndex = this.props.initialSelectedIndex;

	    return {
	      selectedIndex: valueLink.value ? this._getSelectedIndex(this.props) : initialIndex < this.getTabCount() ? initialIndex : 0
	    };
	  },

	  getEvenWidth: function getEvenWidth() {
	    return parseInt(window.getComputedStyle(React.findDOMNode(this)).getPropertyValue('width'), 10);
	  },

	  getTabCount: function getTabCount() {
	    return React.Children.count(this.props.children);
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
	    var valueLink = this.getValueLink(newProps);

	    if (valueLink.value) {
	      this.setState({ selectedIndex: this._getSelectedIndex(newProps) });
	    }
	  },

	  render: function render() {
	    var _this = this;

	    var _props = this.props;
	    var children = _props.children;
	    var contentContainerStyle = _props.contentContainerStyle;
	    var initialSelectedIndex = _props.initialSelectedIndex;
	    var inkBarStyle = _props.inkBarStyle;
	    var style = _props.style;
	    var tabWidth = _props.tabWidth;
	    var tabItemContainerStyle = _props.tabItemContainerStyle;

	    var other = _objectWithoutProperties(_props, ['children', 'contentContainerStyle', 'initialSelectedIndex', 'inkBarStyle', 'style', 'tabWidth', 'tabItemContainerStyle']);

	    var themeVariables = this.context.muiTheme.component.tabs;
	    var styles = {
	      tabItemContainer: {
	        margin: 0,
	        padding: 0,
	        width: '100%',
	        height: 48,
	        backgroundColor: themeVariables.backgroundColor,
	        whiteSpace: 'nowrap',
	        display: 'table'
	      }
	    };

	    var valueLink = this.getValueLink(this.props);
	    var tabValue = valueLink.value;
	    var tabContent = [];

	    var width = 100 / this.getTabCount() + '%';

	    var left = 'calc(' + width + '*' + this.state.selectedIndex + ')';

	    var tabs = React.Children.map(children, function (tab, index) {
	      if (tab.type.displayName === "Tab") {
	        if (!tab.props.value && tabValue && process.env.NODE_ENV !== 'production') {
	          console.error('Tabs value prop has been passed, but Tab ' + index + ' does not have a value prop. Needs value if Tabs is going' + ' to be a controlled component.');
	        }

	        tabContent.push(tab.props.children ? React.createElement(TabTemplate, {
	          key: index,
	          selected: _this._getSelected(tab, index)
	        }, tab.props.children) : undefined);

	        return React.cloneElement(tab, {
	          key: index,
	          selected: _this._getSelected(tab, index),
	          tabIndex: index,
	          width: width,
	          onTouchTap: _this._handleTabTouchTap
	        });
	      } else {
	        var type = tab.type.displayName || tab.type;
	        console.error('Tabs only accepts Tab Components as children. Found ' + type + ' as child number ' + (index + 1) + ' of Tabs');
	      }
	    }, this);

	    var inkBar = this.state.selectedIndex !== -1 ? React.createElement(InkBar, {
	      left: left,
	      width: width,
	      style: inkBarStyle }) : null;

	    var inkBarContainerWidth = tabItemContainerStyle ? tabItemContainerStyle.width : '100%';

	    return React.createElement(
	      'div',
	      _extends({}, other, {
	        style: this.mergeAndPrefix(style) }),
	      React.createElement(
	        'div',
	        { style: this.mergeAndPrefix(styles.tabItemContainer, tabItemContainerStyle) },
	        tabs
	      ),
	      React.createElement(
	        'div',
	        { style: { width: inkBarContainerWidth } },
	        inkBar
	      ),
	      React.createElement(
	        'div',
	        { style: this.mergeAndPrefix(contentContainerStyle) },
	        tabContent
	      )
	    );
	  },

	  _getSelectedIndex: function _getSelectedIndex(props) {
	    var valueLink = this.getValueLink(props);
	    var selectedIndex = -1;

	    React.Children.forEach(props.children, function (tab, index) {
	      if (valueLink.value === tab.props.value) {
	        selectedIndex = index;
	      }
	    });

	    return selectedIndex;
	  },

	  _handleTabTouchTap: function _handleTabTouchTap(value, e, tab) {
	    var valueLink = this.getValueLink(this.props);
	    var tabIndex = tab.props.tabIndex;

	    if (valueLink.value && valueLink.value !== value || this.state.selectedIndex !== tabIndex) {
	      valueLink.requestChange(value, e, tab);
	    }

	    this.setState({ selectedIndex: tabIndex });
	    tab.props.onActive(tab);
	  },

	  _getSelected: function _getSelected(tab, index) {
	    var valueLink = this.getValueLink(this.props);
	    return valueLink.value ? valueLink.value === tab.props.value : this.state.selectedIndex === index;
	  }

	});

	module.exports = Tabs;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);

	var TabTemplate = React.createClass({
	  displayName: 'TabTemplate',

	  render: function render() {
	    var styles = {
	      'height': 0,
	      'overflow': 'hidden',
	      'width': '100%',
	      'position': 'relative',
	      'textAlign': 'initial'
	    };

	    if (this.props.selected) {
	      delete styles.height;
	      delete styles.overflow;
	    }

	    return React.createElement(
	      'div',
	      { style: styles },
	      this.props.children
	    );
	  }
	});

	module.exports = TabTemplate;

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var Transitions = __webpack_require__(185);
	var StylePropable = __webpack_require__(159);

	var InkBar = React.createClass({
	  displayName: 'InkBar',

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    color: React.PropTypes.string,
	    left: React.PropTypes.string.isRequired,
	    width: React.PropTypes.string.isRequired
	  },

	  mixins: [StylePropable],

	  render: function render() {
	    var _props = this.props;
	    var color = _props.color;
	    var left = _props.left;
	    var width = _props.width;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['color', 'left', 'width', 'style']);

	    var colorStyle = color ? { backgroundColor: color } : undefined;
	    var styles = this.mergeAndPrefix({
	      left: left,
	      width: width,
	      bottom: 0,
	      display: 'block',
	      backgroundColor: this.context.muiTheme.component.inkBar.backgroundColor,
	      height: 2,
	      marginTop: -2,
	      position: 'relative',
	      transition: Transitions.easeOut('1s', 'left')
	    }, this.props.style, colorStyle);

	    return React.createElement(
	      'div',
	      { style: styles },
	      ' '
	    );
	  }

	});

	module.exports = InkBar;

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);

	var Table = React.createClass({
	  displayName: 'Table',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    allRowsSelected: React.PropTypes.bool,
	    fixedFooter: React.PropTypes.bool,
	    fixedHeader: React.PropTypes.bool,
	    height: React.PropTypes.string,
	    multiSelectable: React.PropTypes.bool,
	    onCellClick: React.PropTypes.func,
	    onCellHover: React.PropTypes.func,
	    onCellHoverExit: React.PropTypes.func,
	    onRowHover: React.PropTypes.func,
	    onRowHoverExit: React.PropTypes.func,
	    onRowSelection: React.PropTypes.func,
	    selectable: React.PropTypes.bool,
	    style: React.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      allRowsSelected: false,
	      fixedFooter: true,
	      fixedHeader: true,
	      height: 'inherit',
	      multiSelectable: false,
	      selectable: true
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      allRowsSelected: this.props.allRowsSelected
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.table;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        backgroundColor: this.getTheme().backgroundColor,
	        padding: '0 ' + this.context.muiTheme.spacing.desktopGutter + 'px',
	        width: '100%',
	        borderCollapse: 'collapse',
	        borderSpacing: 0,
	        tableLayout: 'fixed'
	      },
	      bodyTable: {
	        height: this.props.fixedHeader || this.props.fixedFooter ? this.props.height : 'auto',
	        overflowX: 'hidden',
	        overflowY: 'auto'
	      },
	      tableWrapper: {
	        height: this.props.fixedHeader || this.props.fixedFooter ? 'auto' : this.props.height,
	        overflow: 'auto'
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var className = _props.className;
	    var fixedFooter = _props.fixedFooter;
	    var fixedHeader = _props.fixedHeader;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['children', 'className', 'fixedFooter', 'fixedHeader', 'style']);

	    var classes = 'mui-table';
	    if (className) classes += ' ' + className;
	    var styles = this.getStyles();

	    var tHead = undefined,
	        tFoot = undefined,
	        tBody = undefined;
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;

	    try {
	      for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	        var child = _step.value;

	        if (!React.isValidElement(child)) continue;

	        var displayName = child.type.displayName;
	        if (displayName === 'TableBody') {
	          tBody = this._createTableBody(child);
	        } else if (displayName === 'TableHeader') {
	          tHead = this._createTableHeader(child);
	        } else if (displayName === 'TableFooter') {
	          tFoot = this._createTableFooter(child);
	        }
	      }

	      // If we could not find a table-header and a table-body, do not attempt to display anything.
	    } catch (err) {
	      _didIteratorError = true;
	      _iteratorError = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion && _iterator['return']) {
	          _iterator['return']();
	        }
	      } finally {
	        if (_didIteratorError) {
	          throw _iteratorError;
	        }
	      }
	    }

	    if (!tBody && !tHead) return null;

	    var mergedTableStyle = this.mergeAndPrefix(styles.root, style);
	    var headerTable = undefined,
	        footerTable = undefined;
	    var inlineHeader = undefined,
	        inlineFooter = undefined;
	    if (fixedHeader) {
	      headerTable = React.createElement(
	        'div',
	        { className: 'mui-header-table' },
	        React.createElement(
	          'table',
	          { className: className, style: mergedTableStyle },
	          tHead
	        )
	      );
	    } else {
	      inlineHeader = tHead;
	    }
	    if (tFoot !== undefined) {
	      if (fixedFooter) {
	        footerTable = React.createElement(
	          'div',
	          { className: 'mui-footer-table' },
	          React.createElement(
	            'table',
	            { className: className, style: mergedTableStyle },
	            tFoot
	          )
	        );
	      } else {
	        inlineFooter = tFoot;
	      }
	    }

	    return React.createElement(
	      'div',
	      { className: 'mui-table-wrapper', style: styles.tableWrapper },
	      headerTable,
	      React.createElement(
	        'div',
	        { className: 'mui-body-table', style: styles.bodyTable },
	        React.createElement(
	          'table',
	          { className: classes, style: mergedTableStyle },
	          inlineHeader,
	          inlineFooter,
	          tBody
	        )
	      ),
	      footerTable
	    );
	  },

	  _createTableHeader: function _createTableHeader(base) {
	    return React.cloneElement(base, {
	      enableSelectAll: base.props.enableSelectAll && this.props.selectable && this.props.multiSelectable,
	      onSelectAll: this._onSelectAll,
	      selectAllSelected: this.state.allRowsSelected
	    });
	  },

	  _createTableBody: function _createTableBody(base) {
	    return React.cloneElement(base, {
	      allRowsSelected: this.state.allRowsSelected,
	      multiSelectable: this.props.multiSelectable,
	      onCellClick: this._onCellClick,
	      onCellHover: this._onCellHover,
	      onCellHoverExit: this._onCellHoverExit,
	      onRowHover: this._onRowHover,
	      onRowHoverExit: this._onRowHoverExit,
	      onRowSelection: this._onRowSelection,
	      selectable: this.props.selectable,
	      style: this.mergeAndPrefix({ height: this.props.height }, base.props.style)
	    });
	  },

	  _createTableFooter: function _createTableFooter(base) {
	    return base;
	  },

	  _onCellClick: function _onCellClick(rowNumber, columnNumber) {
	    if (this.props.onCellClick) this.props.onCellClick(rowNumber, columnNumber);
	  },

	  _onCellHover: function _onCellHover(rowNumber, columnNumber) {
	    if (this.props.onCellHover) this.props.onCellHover(rowNumber, columnNumber);
	  },

	  _onCellHoverExit: function _onCellHoverExit(rowNumber, columnNumber) {
	    if (this.props.onCellHoverExit) this.props.onCellHoverExit(rowNumber, columnNumber);
	  },

	  _onRowHover: function _onRowHover(rowNumber) {
	    if (this.props.onRowHover) this.props.onRowHover(rowNumber);
	  },

	  _onRowHoverExit: function _onRowHoverExit(rowNumber) {
	    if (this.props.onRowHoverExit) this.props.onRowHoverExit(rowNumber);
	  },

	  _onRowSelection: function _onRowSelection(selectedRows) {
	    if (this.state.allRowsSelected) this.setState({ allRowsSelected: false });
	    if (this.props.onRowSelection) this.props.onRowSelection(selectedRows);
	  },

	  _onSelectAll: function _onSelectAll() {
	    if (this.props.onRowSelection && !this.state.allRowsSelected) this.props.onRowSelection('all');
	    this.setState({ allRowsSelected: !this.state.allRowsSelected });
	  }

	});

	module.exports = Table;

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var Checkbox = __webpack_require__(221);
	var TableRowColumn = __webpack_require__(292);
	var ClickAwayable = __webpack_require__(253);
	var StylePropable = __webpack_require__(159);

	var TableBody = React.createClass({
	  displayName: 'TableBody',

	  mixins: [ClickAwayable, StylePropable],

	  propTypes: {
	    allRowsSelected: React.PropTypes.bool,
	    deselectOnClickaway: React.PropTypes.bool,
	    displayRowCheckbox: React.PropTypes.bool,
	    multiSelectable: React.PropTypes.bool,
	    onCellClick: React.PropTypes.func,
	    onCellHover: React.PropTypes.func,
	    onCellHoverExit: React.PropTypes.func,
	    onRowHover: React.PropTypes.func,
	    onRowHoverExit: React.PropTypes.func,
	    onRowSelection: React.PropTypes.func,
	    preScanRows: React.PropTypes.bool,
	    selectable: React.PropTypes.bool,
	    showRowHover: React.PropTypes.bool,
	    stripedRows: React.PropTypes.bool,
	    style: React.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      allRowsSelected: false,
	      deselectOnClickaway: true,
	      displayRowCheckbox: true,
	      multiSelectable: false,
	      preScanRows: true,
	      selectable: true
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      selectedRows: this._calculatePreselectedRows(this.props)
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var newState = {};

	    if (this.props.allRowsSelected && !nextProps.allRowsSelected) {
	      var lastSelectedRow = this.state.selectedRows.length ? this.state.selectedRows[this.state.selectedRows.length - 1] : undefined;

	      newState.selectedRows = [lastSelectedRow];
	    } else {
	      newState.selectedRows = this._calculatePreselectedRows(nextProps);
	    }

	    this.setState(newState);
	  },

	  componentClickAway: function componentClickAway() {
	    if (this.props.deselectOnClickaway && this.state.selectedRows.length) {
	      this.setState({ selectedRows: [] });
	    }
	  },

	  render: function render() {
	    var _props = this.props;
	    var className = _props.className;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['className', 'style']);

	    var classes = 'mui-table-body';
	    if (className) classes += ' ' + className;

	    var rows = this._createRows();

	    return React.createElement(
	      'tbody',
	      { className: classes, style: style },
	      rows
	    );
	  },

	  _createRows: function _createRows() {
	    var _this = this;

	    var numChildren = React.Children.count(this.props.children);
	    var rowNumber = 0;
	    var handlers = {
	      onCellClick: this._onCellClick,
	      onCellHover: this._onCellHover,
	      onCellHoverExit: this._onCellHoverExit,
	      onRowHover: this._onRowHover,
	      onRowHoverExit: this._onRowHoverExit,
	      onRowClick: this._onRowClick
	    };

	    return React.Children.map(this.props.children, function (child) {
	      if (React.isValidElement(child)) {
	        var _ret = (function () {
	          var props = {
	            displayRowCheckbox: _this.props.displayRowCheckbox,
	            hoverable: _this.props.showRowHover,
	            selected: _this._isRowSelected(rowNumber),
	            striped: _this.props.stripedRows && rowNumber % 2 === 0,
	            rowNumber: rowNumber++
	          };
	          var checkboxColumn = _this._createRowCheckboxColumn(props);

	          if (rowNumber === numChildren) {
	            props.displayBorder = false;
	          }

	          var children = [checkboxColumn];
	          React.Children.forEach(child.props.children, function (child) {
	            children.push(child);
	          });

	          return {
	            v: React.cloneElement(child, _extends({}, props, handlers), children)
	          };
	        })();

	        if (typeof _ret === 'object') return _ret.v;
	      }
	    });
	  },

	  _createRowCheckboxColumn: function _createRowCheckboxColumn(rowProps) {
	    if (!this.props.displayRowCheckbox) return null;

	    var key = rowProps.rowNumber + '-cb';
	    var checkbox = React.createElement(Checkbox, {
	      ref: 'rowSelectCB',
	      name: key,
	      value: 'selected',
	      disabled: !this.props.selectable,
	      checked: rowProps.selected });

	    return React.createElement(
	      TableRowColumn,
	      {
	        key: key,
	        columnNumber: 0,
	        style: { width: 24 } },
	      checkbox
	    );
	  },

	  _calculatePreselectedRows: function _calculatePreselectedRows(props) {
	    // Determine what rows are 'pre-selected'.
	    var preSelectedRows = [];

	    if (props.selectable && props.preScanRows) {
	      (function () {
	        var index = 0;
	        React.Children.forEach(props.children, function (child) {
	          if (React.isValidElement(child)) {
	            if (child.props.selected && (preSelectedRows.length === 0 || props.multiSelectable)) {
	              preSelectedRows.push(index);
	            }

	            index++;
	          }
	        });
	      })();
	    }

	    return preSelectedRows;
	  },

	  _isRowSelected: function _isRowSelected(rowNumber) {
	    if (this.props.allRowsSelected) {
	      return true;
	    }

	    for (var i = 0; i < this.state.selectedRows.length; i++) {
	      var selection = this.state.selectedRows[i];

	      if (typeof selection === 'object') {
	        if (this._isValueInRange(rowNumber, selection)) return true;
	      } else {
	        if (selection === rowNumber) return true;
	      }
	    }

	    return false;
	  },

	  _isValueInRange: function _isValueInRange(value, range) {
	    if (!range) return false;

	    if (range.start <= value && value <= range.end || range.end <= value && value <= range.start) {
	      return true;
	    }

	    return false;
	  },

	  _onRowClick: function _onRowClick(e, rowNumber) {
	    e.stopPropagation();

	    if (this.props.selectable) {
	      // Prevent text selection while selecting rows.
	      window.getSelection().removeAllRanges();
	      this._processRowSelection(e, rowNumber);
	    }
	  },

	  _processRowSelection: function _processRowSelection(e, rowNumber) {
	    var selectedRows = this.state.selectedRows;

	    if (e.shiftKey && this.props.multiSelectable && selectedRows.length) {
	      var lastIndex = selectedRows.length - 1;
	      var lastSelection = selectedRows[lastIndex];

	      if (typeof lastSelection === 'object') {
	        lastSelection.end = rowNumber;
	      } else {
	        selectedRows.splice(lastIndex, 1, { start: lastSelection, end: rowNumber });
	      }
	    } else if ((e.ctrlKey && !e.metaKey || e.metaKey && !e.ctrlKey) && this.props.multiSelectable) {
	      var idx = selectedRows.indexOf(rowNumber);
	      if (idx < 0) {
	        var foundRange = false;
	        for (var i = 0; i < selectedRows.length; i++) {
	          var range = selectedRows[i];
	          if (typeof range !== 'object') continue;

	          if (this._isValueInRange(rowNumber, range)) {
	            var _selectedRows;

	            foundRange = true;
	            var values = this._splitRange(range, rowNumber);
	            (_selectedRows = selectedRows).splice.apply(_selectedRows, [i, 1].concat(_toConsumableArray(values)));
	          }
	        }

	        if (!foundRange) selectedRows.push(rowNumber);
	      } else {
	        selectedRows.splice(idx, 1);
	      }
	    } else {
	      if (selectedRows.length === 1 && selectedRows[0] === rowNumber) {
	        selectedRows = [];
	      } else {
	        selectedRows = [rowNumber];
	      }
	    }

	    this.setState({ selectedRows: selectedRows });
	    if (this.props.onRowSelection) this.props.onRowSelection(this._flattenRanges(selectedRows));
	  },

	  _splitRange: function _splitRange(range, splitPoint) {
	    var splitValues = [];
	    var startOffset = range.start - splitPoint;
	    var endOffset = range.end - splitPoint;

	    // Process start half
	    splitValues.push.apply(splitValues, _toConsumableArray(this._genRangeOfValues(splitPoint, startOffset)));

	    // Process end half
	    splitValues.push.apply(splitValues, _toConsumableArray(this._genRangeOfValues(splitPoint, endOffset)));

	    return splitValues;
	  },

	  _genRangeOfValues: function _genRangeOfValues(start, offset) {
	    var values = [];
	    var dir = offset > 0 ? -1 : 1; // This forces offset to approach 0 from either direction.
	    while (offset !== 0) {
	      values.push(start + offset);
	      offset += dir;
	    }

	    return values;
	  },

	  _flattenRanges: function _flattenRanges(selectedRows) {
	    var rows = [];
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;

	    try {
	      for (var _iterator = selectedRows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	        var selection = _step.value;

	        if (typeof selection === 'object') {
	          var values = this._genRangeOfValues(selection.end, selection.start - selection.end);
	          rows.push.apply(rows, [selection.end].concat(_toConsumableArray(values)));
	        } else {
	          rows.push(selection);
	        }
	      }
	    } catch (err) {
	      _didIteratorError = true;
	      _iteratorError = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion && _iterator['return']) {
	          _iterator['return']();
	        }
	      } finally {
	        if (_didIteratorError) {
	          throw _iteratorError;
	        }
	      }
	    }

	    return rows.sort();
	  },

	  _onCellClick: function _onCellClick(e, rowNumber, columnNumber) {
	    e.stopPropagation();
	    if (this.props.onCellClick) this.props.onCellClick(rowNumber, this._getColumnId(columnNumber));
	  },

	  _onCellHover: function _onCellHover(e, rowNumber, columnNumber) {
	    if (this.props.onCellHover) this.props.onCellHover(rowNumber, this._getColumnId(columnNumber));
	    this._onRowHover(e, rowNumber);
	  },

	  _onCellHoverExit: function _onCellHoverExit(e, rowNumber, columnNumber) {
	    if (this.props.onCellHoverExit) this.props.onCellHoverExit(rowNumber, this._getColumnId(columnNumber));
	    this._onRowHoverExit(e, rowNumber);
	  },

	  _onRowHover: function _onRowHover(e, rowNumber) {
	    if (this.props.onRowHover) this.props.onRowHover(rowNumber);
	  },

	  _onRowHoverExit: function _onRowHoverExit(e, rowNumber) {
	    if (this.props.onRowHoverExit) this.props.onRowHoverExit(rowNumber);
	  },

	  _getColumnId: function _getColumnId(columnNumber) {
	    var columnId = columnNumber;
	    if (this.props.displayRowCheckbox) columnId--;

	    return columnId;
	  }

	});

	module.exports = TableBody;

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);

	var TableRowColumn = React.createClass({
	  displayName: 'TableRowColumn',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    columnNumber: React.PropTypes.number,
	    hoverable: React.PropTypes.bool,
	    onClick: React.PropTypes.func,
	    onHover: React.PropTypes.func,
	    onHoverExit: React.PropTypes.func,
	    style: React.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      hoverable: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hovered: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.tableRowColumn;
	  },

	  getStyles: function getStyles() {
	    var theme = this.getTheme();
	    var styles = {
	      root: {
	        paddingLeft: theme.spacing,
	        paddingRight: theme.spacing,
	        height: theme.height,
	        textAlign: 'left',
	        fontSize: 13,
	        overflow: 'hidden',
	        whiteSpace: 'nowrap',
	        textOverflow: 'ellipsis'
	      }
	    };

	    if (React.Children.count(this.props.children) === 1 && !isNaN(this.props.children)) {
	      styles.textAlign = 'right';
	    }

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var className = _props.className;
	    var columnNumber = _props.columnNumber;
	    var hoverable = _props.hoverable;
	    var onClick = _props.onClick;
	    var onHover = _props.onHover;
	    var onHoverExit = _props.onHoverExit;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['className', 'columnNumber', 'hoverable', 'onClick', 'onHover', 'onHoverExit', 'style']);

	    var styles = this.getStyles();
	    var handlers = {
	      onClick: this._onClick,
	      onMouseEnter: this._onMouseEnter,
	      onMouseLeave: this._onMouseLeave
	    };
	    var classes = 'mui-table-row-column';
	    if (className) classes += ' ' + className;

	    return React.createElement(
	      'td',
	      _extends({
	        key: this.props.key,
	        className: classes,
	        style: this.mergeAndPrefix(styles.root, style)
	      }, handlers, other),
	      this.props.children
	    );
	  },

	  _onClick: function _onClick(e) {
	    if (this.props.onClick) this.props.onClick(e, this.props.columnNumber);
	  },

	  _onMouseEnter: function _onMouseEnter(e) {
	    if (this.props.hoverable) {
	      this.setState({ hovered: true });
	      if (this.props.onHover) this.props.onHover(e, this.props.columnNumber);
	    }
	  },

	  _onMouseLeave: function _onMouseLeave(e) {
	    if (this.props.hoverable) {
	      this.setState({ hovered: false });
	      if (this.props.onHoverExit) this.props.onHoverExit(e, this.props.columnNumber);
	    }
	  }

	});

	module.exports = TableRowColumn;

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var TableRowColumn = __webpack_require__(292);
	var StylePropable = __webpack_require__(159);

	var TableFooter = React.createClass({
	  displayName: 'TableFooter',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    adjustForCheckbox: React.PropTypes.bool,
	    style: React.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      adjustForCheckbox: true
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.tableFooter;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      cell: {
	        borderTop: '1px solid ' + this.getTheme().borderColor,
	        verticalAlign: 'bottom',
	        padding: 20,
	        textAlign: 'left',
	        whiteSpace: 'nowrap'
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var className = _props.className;

	    var other = _objectWithoutProperties(_props, ['className']);

	    var classes = 'mui-table-footer';
	    if (className) classes += ' ' + className;

	    var footerRows = this._createRows();

	    return React.createElement(
	      'tfoot',
	      _extends({ className: classes }, other),
	      footerRows
	    );
	  },

	  _createRows: function _createRows() {
	    var _this = this;

	    var rowNumber = 0;
	    return React.Children.map(this.props.children, function (child) {
	      return _this._createRow(child, rowNumber++);
	    });
	  },

	  _createRow: function _createRow(child, rowNumber) {
	    var styles = this.getStyles();
	    var props = {
	      className: 'mui-table-footer-row',
	      displayBorder: false,
	      key: 'f-' + rowNumber,
	      rowNumber: rowNumber,
	      style: this.mergeAndPrefix(styles.cell, child.props.style)
	    };

	    var children = [this._getCheckboxPlaceholder(props)];
	    React.Children.forEach(child.props.children, function (child) {
	      children.push(child);
	    });

	    return React.cloneElement(child, props, children);
	  },

	  _getCheckboxPlaceholder: function _getCheckboxPlaceholder(props) {
	    if (!this.props.adjustForCheckbox) return null;

	    var key = 'fpcb' + props.rowNumber;
	    return React.createElement(TableRowColumn, { key: key, style: { width: 24 } });
	  }

	});

	module.exports = TableFooter;

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var Checkbox = __webpack_require__(221);
	var StylePropable = __webpack_require__(159);
	var TableHeaderColumn = __webpack_require__(295);

	var TableHeader = React.createClass({
	  displayName: 'TableHeader',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    adjustForCheckbox: React.PropTypes.bool,
	    displaySelectAll: React.PropTypes.bool,
	    enableSelectAll: React.PropTypes.bool,
	    onSelectAll: React.PropTypes.func,
	    selectAllSelected: React.PropTypes.bool,
	    style: React.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      adjustForCheckbox: true,
	      displaySelectAll: true,
	      enableSelectAll: true,
	      selectAllSelected: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.tableHeader;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        borderBottom: '1px solid ' + this.getTheme().borderColor
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var className = _props.className;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['className', 'style']);

	    var classes = 'mui-table-header';
	    if (className) classes += ' ' + className;

	    var superHeaderRows = this._createSuperHeaderRows();
	    var baseHeaderRow = this._createBaseHeaderRow();

	    return React.createElement(
	      'thead',
	      { className: classes, style: this.mergeAndPrefix(this.getStyles().root, style) },
	      superHeaderRows,
	      baseHeaderRow
	    );
	  },

	  _createSuperHeaderRows: function _createSuperHeaderRows() {
	    var numChildren = React.Children.count(this.props.children);
	    if (numChildren === 1) return undefined;

	    var superHeaders = [];
	    for (var index = 0; index < numChildren - 1; index++) {
	      var child = this.props.children[index];

	      if (!React.isValidElement(child)) continue;

	      var props = {
	        className: 'mui-table-super-header-row',
	        displayRowCheckbox: false,
	        key: 'sh' + index,
	        rowNumber: index
	      };
	      superHeaders.push(this._createSuperHeaderRow(child, props));
	    }

	    if (superHeaders.length) return superHeaders;
	  },

	  _createSuperHeaderRow: function _createSuperHeaderRow(child, props) {
	    var children = [];
	    if (this.props.adjustForCheckbox) {
	      children.push(this._getCheckboxPlaceholder(props));
	    }
	    React.Children.forEach(child.props.children, function (child) {
	      children.push(child);
	    });

	    return React.cloneElement(child, props, children);
	  },

	  _createBaseHeaderRow: function _createBaseHeaderRow() {
	    var numChildren = React.Children.count(this.props.children);
	    var child = numChildren === 1 ? this.props.children : this.props.children[numChildren - 1];
	    var props = {
	      className: 'mui-table-header-row',
	      key: 'h' + numChildren,
	      rowNumber: numChildren
	    };

	    var children = [this._getSelectAllCheckboxColumn(props)];
	    React.Children.forEach(child.props.children, function (child) {
	      children.push(child);
	    });

	    return React.cloneElement(child, props, children);
	  },

	  _getCheckboxPlaceholder: function _getCheckboxPlaceholder(props) {
	    if (!this.props.adjustForCheckbox) return null;

	    var key = 'hpcb' + props.rowNumber;
	    return React.createElement(TableHeaderColumn, { key: key, style: { width: 24 } });
	  },

	  _getSelectAllCheckboxColumn: function _getSelectAllCheckboxColumn(props) {
	    if (!this.props.displaySelectAll) return this._getCheckboxPlaceholder(props);

	    var checkbox = React.createElement(Checkbox, {
	      key: 'selectallcb',
	      name: 'selectallcb',
	      value: 'selected',
	      disabled: !this.props.enableSelectAll,
	      checked: this.props.selectAllSelected,
	      onCheck: this._onSelectAll });

	    return React.createElement(
	      TableHeaderColumn,
	      { style: { width: 24 } },
	      checkbox
	    );
	  },

	  _onSelectAll: function _onSelectAll(e, checked) {
	    if (this.props.onSelectAll) this.props.onSelectAll(checked);
	  }

	});

	module.exports = TableHeader;

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var Tooltip = __webpack_require__(198);

	var TableHeaderColumn = React.createClass({
	  displayName: 'TableHeaderColumn',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    columnNumber: React.PropTypes.number,
	    onClick: React.PropTypes.func,
	    style: React.PropTypes.object,
	    tooltip: React.PropTypes.string,
	    tooltipStyle: React.PropTypes.object
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hovered: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.tableHeaderColumn;
	  },

	  getStyles: function getStyles() {
	    var theme = this.getTheme();
	    var styles = {
	      root: {
	        fontWeight: 'normal',
	        fontSize: 12,
	        paddingLeft: theme.spacing,
	        paddingRight: theme.spacing,
	        height: theme.height,
	        textAlign: 'left',
	        whiteSpace: 'nowrap',
	        textOverflow: 'ellipsis',
	        color: this.getTheme().textColor,
	        position: 'relative'
	      },
	      tooltip: {
	        boxSizing: 'border-box',
	        marginTop: theme.height / 2
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var styles = this.getStyles();
	    var handlers = {
	      onMouseEnter: this._onMouseEnter,
	      onMouseLeave: this._onMouseLeave,
	      onClick: this._onClick
	    };
	    var _props = this.props;
	    var className = _props.className;
	    var columnNumber = _props.columnNumber;
	    var onClick = _props.onClick;
	    var style = _props.style;
	    var tooltip = _props.tooltip;
	    var tooltipStyle = _props.tooltipStyle;

	    var other = _objectWithoutProperties(_props, ['className', 'columnNumber', 'onClick', 'style', 'tooltip', 'tooltipStyle']);

	    var classes = 'mui-table-header-column';
	    if (className) classes += ' ' + className;

	    if (this.props.tooltip !== undefined) {
	      tooltip = React.createElement(Tooltip, {
	        label: this.props.tooltip,
	        show: this.state.hovered,
	        style: this.mergeAndPrefix(styles.tooltip, tooltipStyle) });
	    }

	    return React.createElement(
	      'th',
	      _extends({
	        key: this.props.key,
	        className: classes,
	        style: this.mergeAndPrefix(styles.root, style)
	      }, handlers, other),
	      tooltip,
	      this.props.children
	    );
	  },

	  _onMouseEnter: function _onMouseEnter() {
	    if (this.props.tooltip !== undefined) this.setState({ hovered: true });
	  },

	  _onMouseLeave: function _onMouseLeave() {
	    if (this.props.tooltip !== undefined) this.setState({ hovered: false });
	  },

	  _onClick: function _onClick(e) {
	    if (this.props.onClick) this.props.onClick(e, this.props.columnNumber);
	  }

	});

	module.exports = TableHeaderColumn;

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);

	var TableRow = React.createClass({
	  displayName: 'TableRow',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    displayBorder: React.PropTypes.bool,
	    hoverable: React.PropTypes.bool,
	    onCellClick: React.PropTypes.func,
	    onCellHover: React.PropTypes.func,
	    onCellHoverExit: React.PropTypes.func,
	    onRowClick: React.PropTypes.func,
	    onRowHover: React.PropTypes.func,
	    onRowHoverExit: React.PropTypes.func,
	    rowNumber: React.PropTypes.number,
	    selectable: React.PropTypes.bool,
	    selected: React.PropTypes.bool,
	    striped: React.PropTypes.bool,
	    style: React.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      displayBorder: true,
	      displayRowCheckbox: true,
	      hoverable: false,
	      selectable: true,
	      selected: false,
	      striped: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hovered: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.tableRow;
	  },

	  getStyles: function getStyles() {
	    var theme = this.getTheme();
	    var cellBgColor = 'inherit';
	    if (this.state.hovered) {
	      cellBgColor = theme.hoverColor;
	    } else if (this.props.selected) {
	      cellBgColor = theme.selectedColor;
	    } else if (this.props.striped) {
	      cellBgColor = theme.stripeColor;
	    }

	    var styles = {
	      root: {
	        borderBottom: '1px solid ' + this.getTheme().borderColor,
	        color: this.getTheme().textColor
	      },
	      cell: {
	        backgroundColor: cellBgColor
	      }
	    };

	    if (!this.props.displayBorder) {
	      styles.root.borderBottom = '';
	    }

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var className = _props.className;
	    var displayBorder = _props.displayBorder;
	    var hoverable = _props.hoverable;
	    var onCellClick = _props.onCellClick;
	    var onCellHover = _props.onCellHover;
	    var onCellHoverExit = _props.onCellHoverExit;
	    var onRowClick = _props.onRowClick;
	    var onRowHover = _props.onRowHover;
	    var onRowHoverExit = _props.onRowHoverExit;
	    var rowNumber = _props.rowNumber;
	    var selectable = _props.selectable;
	    var selected = _props.selected;
	    var striped = _props.striped;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['className', 'displayBorder', 'hoverable', 'onCellClick', 'onCellHover', 'onCellHoverExit', 'onRowClick', 'onRowHover', 'onRowHoverExit', 'rowNumber', 'selectable', 'selected', 'striped', 'style']);

	    var classes = 'mui-table-row';
	    if (className) classes += ' ' + className;
	    var rowColumns = this._createColumns();

	    return React.createElement(
	      'tr',
	      _extends({
	        className: classes,
	        style: this.mergeAndPrefix(this.getStyles().root, style)
	      }, other),
	      rowColumns
	    );
	  },

	  _createColumns: function _createColumns() {
	    var _this = this;

	    var columnNumber = 1;
	    return React.Children.map(this.props.children, function (child) {
	      if (React.isValidElement(child)) {
	        return _this._createColumn(child, columnNumber++);
	      }
	    });
	  },

	  _createColumn: function _createColumn(child, columnNumber) {
	    var key = this.props.rowNumber + '-' + columnNumber;
	    var styles = this.getStyles();
	    var handlers = {
	      onClick: this._onCellClick,
	      onHover: this._onCellHover,
	      onHoverExit: this._onCellHoverExit
	    };

	    return React.cloneElement(child, _extends({
	      columnNumber: columnNumber,
	      hoverable: this.props.hoverable,
	      key: child.props.key || key,
	      style: this.mergeAndPrefix(styles.cell, child.props.style)
	    }, handlers));
	  },

	  _onRowClick: function _onRowClick(e) {
	    if (this.props.onRowClick) this.props.onRowClick(e, this.props.rowNumber);
	  },

	  _onRowHover: function _onRowHover(e) {
	    if (this.props.onRowHover) this.props.onRowHover(e, this.props.rowNumber);
	  },

	  _onRowHoverExit: function _onRowHoverExit(e) {
	    if (this.props.onRowHoverExit) this.props.onRowHoverExit(e, this.props.rowNumber);
	  },

	  _onCellClick: function _onCellClick(e, columnIndex) {
	    if (this.props.selectable && this.props.onCellClick) this.props.onCellClick(e, this.props.rowNumber, columnIndex);
	    e.ctrlKey = true;
	    this._onRowClick(e);
	  },

	  _onCellHover: function _onCellHover(e, columnIndex) {
	    if (this.props.hoverable) {
	      this.setState({ hovered: true });
	      if (this.props.onCellHover) this.props.onCellHover(e, this.props.rowNumber, columnIndex);
	      this._onRowHover(e);
	    }
	  },

	  _onCellHoverExit: function _onCellHoverExit(e, columnIndex) {
	    if (this.props.hoverable) {
	      this.setState({ hovered: false });
	      if (this.props.onCellHoverExit) this.props.onCellHoverExit(e, this.props.rowNumber, columnIndex);
	      this._onRowHoverExit(e);
	    }
	  }

	});

	module.exports = TableRow;

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var ThemeManager = __webpack_require__(214);

	var Theme = React.createClass({
	  displayName: 'Theme',

	  propTypes: {
	    theme: React.PropTypes.object
	  },

	  childContextTypes: {
	    muiTheme: React.PropTypes.object.isRequired,
	    muiThemeManager: React.PropTypes.object.isRequired
	  },

	  getChildContext: function getChildContext() {
	    return {
	      muiTheme: this.themeManager.getCurrentTheme(),
	      muiThemeManager: this.themeManager
	    };
	  },

	  componentWillMount: function componentWillMount() {
	    this.themeManager = new ThemeManager();

	    if (this.props.theme) {
	      this.themeManager.setTheme(this.props.theme);
	    }
	  },

	  render: function render() {
	    return this.props.children({
	      muiTheme: this.themeManager.getCurrentTheme(),
	      muiThemeManager: this.themeManager
	    });
	  }
	});

	function getDisplayName(Component) {
	  return Component.displayName || Component.name || 'Component';
	}

	function theme(customTheme) {
	  return function (Component) {
	    return React.createClass({

	      displayName: 'Theme(' + getDisplayName(Component) + ')',

	      render: function render() {
	        return React.createElement(
	          Theme,
	          { theme: customTheme },
	          (function (props) {
	            return React.createElement(Component, _extends({}, this.props, props));
	          }).bind(this)
	        );
	      }
	    });
	  };
	}

	module.exports = Theme;
	module.exports.theme = theme;

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(299);

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var WindowListenable = __webpack_require__(224);
	var TimePickerDialog = __webpack_require__(300);
	var TextField = __webpack_require__(250);

	var emptyTime = new Date();
	emptyTime.setHours(0);
	emptyTime.setMinutes(0);

	var TimePicker = React.createClass({
	  displayName: 'TimePicker',

	  mixins: [StylePropable, WindowListenable],

	  propTypes: {
	    defaultTime: React.PropTypes.object,
	    format: React.PropTypes.oneOf(['ampm', '24hr']),
	    pedantic: React.PropTypes.bool,
	    onFocus: React.PropTypes.func,
	    onTouchTap: React.PropTypes.func,
	    onChange: React.PropTypes.func,
	    onShow: React.PropTypes.func,
	    onDismiss: React.PropTypes.func
	  },

	  windowListeners: {
	    'keyup': '_handleWindowKeyUp'
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      defaultTime: null,
	      format: 'ampm',
	      pedantic: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      time: this.props.defaultTime || emptyTime,
	      dialogTime: new Date()
	    };
	  },

	  formatTime: function formatTime(date) {
	    var hours = date.getHours();
	    var mins = date.getMinutes().toString();

	    if (this.props.format === "ampm") {
	      var isAM = hours < 12;
	      hours = hours % 12;
	      var additional = isAM ? " am" : " pm";
	      hours = (hours || 12).toString();

	      if (mins.length < 2) mins = "0" + mins;

	      if (this.props.pedantic) {
	        // Treat midday/midnight specially http://www.nist.gov/pml/div688/times.cfm
	        if (hours === "12" && mins === "00") {
	          return additional === " pm" ? "12 noon" : "12 midnight";
	        }
	      }

	      return hours + (mins === "00" ? "" : ":" + mins) + additional;
	    }

	    hours = hours.toString();

	    if (hours.length < 2) hours = "0" + hours;
	    if (mins.length < 2) mins = "0" + mins;

	    return hours + ":" + mins;
	  },

	  render: function render() {
	    var _props = this.props;
	    var format = _props.format;
	    var onFocus = _props.onFocus;
	    var onTouchTap = _props.onTouchTap;
	    var onShow = _props.onShow;
	    var onDismiss = _props.onDismiss;

	    var other = _objectWithoutProperties(_props, ['format', 'onFocus', 'onTouchTap', 'onShow', 'onDismiss']);

	    var defaultInputValue = undefined;

	    if (this.props.defaultTime) {
	      defaultInputValue = this.formatTime(this.props.defaultTime);
	    }

	    return React.createElement(
	      'div',
	      null,
	      React.createElement(TextField, _extends({}, other, {
	        ref: 'input',
	        defaultValue: defaultInputValue,
	        onFocus: this._handleInputFocus,
	        onTouchTap: this._handleInputTouchTap })),
	      React.createElement(TimePickerDialog, {
	        ref: 'dialogWindow',
	        initialTime: this.state.dialogTime,
	        onAccept: this._handleDialogAccept,
	        onShow: onShow,
	        onDismiss: onDismiss,
	        format: format })
	    );
	  },

	  getTime: function getTime() {
	    return this.state.time;
	  },

	  setTime: function setTime(t) {
	    this.setState({
	      time: t
	    });
	    this.refs.input.setValue(this.formatTime(t));
	  },

	  _handleDialogAccept: function _handleDialogAccept(t) {
	    this.setTime(t);
	    if (this.props.onChange) this.props.onChange(null, t);
	  },

	  _handleInputFocus: function _handleInputFocus(e) {
	    e.target.blur();
	    if (this.props.onFocus) this.props.onFocus(e);
	  },

	  _handleInputTouchTap: function _handleInputTouchTap(e) {
	    e.preventDefault();

	    this.setState({
	      dialogTime: this.getTime()
	    });

	    this.refs.dialogWindow.show();
	    if (this.props.onTouchTap) this.props.onTouchTap(e);
	  }
	});

	module.exports = TimePicker;

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var WindowListenable = __webpack_require__(224);
	var KeyCode = __webpack_require__(190);
	var Clock = __webpack_require__(301);
	var Dialog = __webpack_require__(246);
	var FlatButton = __webpack_require__(247);

	var TimePickerDialog = React.createClass({
	  displayName: 'TimePickerDialog',

	  mixins: [StylePropable, WindowListenable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    initialTime: React.PropTypes.object,
	    onAccept: React.PropTypes.func,
	    onShow: React.PropTypes.func,
	    onDismiss: React.PropTypes.func
	  },

	  windowListeners: {
	    keyup: '_handleWindowKeyUp'
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.timePicker;
	  },

	  render: function render() {
	    var _props = this.props;
	    var initialTime = _props.initialTime;
	    var onAccept = _props.onAccept;
	    var format = _props.format;

	    var other = _objectWithoutProperties(_props, ['initialTime', 'onAccept', 'format']);

	    var styles = {
	      root: {
	        fontSize: 14,
	        color: this.getTheme().clockColor
	      },
	      dialogContent: {
	        width: 280
	      },
	      body: {
	        padding: 0
	      }
	    };

	    var actions = [React.createElement(FlatButton, {
	      key: 0,
	      label: 'Cancel',
	      secondary: true,
	      onTouchTap: this._handleCancelTouchTap }), React.createElement(FlatButton, {
	      key: 1,
	      label: 'OK',
	      secondary: true,
	      onTouchTap: this._handleOKTouchTap })];

	    return React.createElement(
	      Dialog,
	      _extends({}, other, {
	        ref: 'dialogWindow',
	        style: this.mergeAndPrefix(styles.root),
	        bodyStyle: this.mergeAndPrefix(styles.body),
	        actions: actions,
	        contentStyle: styles.dialogContent,
	        onDismiss: this._handleDialogDismiss,
	        onShow: this._handleDialogShow,
	        repositionOnUpdate: false }),
	      React.createElement(Clock, {
	        ref: 'clock',
	        format: format,
	        initialTime: initialTime })
	    );
	  },

	  show: function show() {
	    this.refs.dialogWindow.show();
	  },

	  dismiss: function dismiss() {
	    this.refs.dialogWindow.dismiss();
	  },

	  _handleCancelTouchTap: function _handleCancelTouchTap() {
	    this.dismiss();
	  },

	  _handleOKTouchTap: function _handleOKTouchTap() {
	    this.dismiss();
	    if (this.props.onAccept) {
	      this.props.onAccept(this.refs.clock.getSelectedTime());
	    }
	  },

	  _handleDialogShow: function _handleDialogShow() {
	    if (this.props.onShow) {
	      this.props.onShow();
	    }
	  },

	  _handleDialogDismiss: function _handleDialogDismiss() {
	    if (this.props.onDismiss) {
	      this.props.onDismiss();
	    }
	  },

	  _handleWindowKeyUp: function _handleWindowKeyUp(e) {
	    if (this.refs.dialogWindow.isOpen()) {
	      switch (e.keyCode) {
	        case KeyCode.ENTER:
	          this._handleOKTouchTap();
	          break;
	      }
	    }
	  }

	});

	module.exports = TimePickerDialog;

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var TimeDisplay = __webpack_require__(302);
	var ClockButton = __webpack_require__(303);
	var ClockHours = __webpack_require__(304);
	var ClockMinutes = __webpack_require__(307);

	var Clock = React.createClass({
	  displayName: 'Clock',

	  mixins: [StylePropable],

	  propTypes: {
	    initialTime: React.PropTypes.object,
	    mode: React.PropTypes.oneOf(['hour', 'minute']),
	    format: React.PropTypes.oneOf(['ampm', '24hr']),
	    isActive: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      initialTime: new Date()
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    this.setState({
	      selectedTime: nextProps.initialTime
	    });
	  },

	  getInitialState: function getInitialState() {
	    return {
	      selectedTime: this.props.initialTime,
	      mode: 'hour'
	    };
	  },

	  _setMode: function _setMode(mode) {
	    var _this = this;

	    setTimeout(function () {
	      _this.setState({
	        mode: mode
	      });
	    }, 100);
	  },

	  _setAffix: function _setAffix(affix) {
	    if (affix === this._getAffix()) return;

	    var hours = this.state.selectedTime.getHours();

	    if (affix === "am") {
	      this.handleChangeHours(hours - 12, affix);
	      return;
	    }

	    this.handleChangeHours(hours + 12, affix);
	  },

	  _getAffix: function _getAffix() {
	    if (this.props.format !== "ampm") return "";

	    var hours = this.state.selectedTime.getHours();
	    if (hours < 12) {
	      return "am";
	    }

	    return "pm";
	  },

	  _getButtons: function _getButtons() {
	    var buttons = [];
	    var isAM = this._getIsAM();

	    if (this.props.format === 'ampm') {
	      buttons = [React.createElement(
	        ClockButton,
	        { position: 'left', onTouchTap: this._setAffix.bind(this, "am"), selected: isAM },
	        "AM"
	      ), React.createElement(
	        ClockButton,
	        { position: 'right', onTouchTap: this._setAffix.bind(this, "pm"), selected: !isAM },
	        "PM"
	      )];
	    }
	    return buttons;
	  },

	  _getIsAM: function _getIsAM() {
	    return this._getAffix() === "am";
	  },

	  render: function render() {
	    var clock = null;
	    var buttons = this._getButtons();

	    var styles = {
	      root: {},

	      container: {
	        height: 280,
	        padding: 10
	      }
	    };

	    if (this.state.mode === "hour") {
	      clock = React.createElement(ClockHours, { key: 'hours',
	        format: this.props.format,
	        onChange: this.handleChangeHours,
	        initialHours: this.state.selectedTime.getHours() });
	    } else {
	      clock = React.createElement(ClockMinutes, { key: 'minutes',
	        onChange: this.handleChangeMinutes,
	        initialMinutes: this.state.selectedTime.getMinutes() });
	    }

	    return React.createElement(
	      'div',
	      { style: styles.root },
	      React.createElement(TimeDisplay, {
	        selectedTime: this.state.selectedTime,
	        mode: this.state.mode,
	        format: this.props.format,
	        affix: this._getAffix(),
	        onSelectHour: this._setMode.bind(this, 'hour'),
	        onSelectMin: this._setMode.bind(this, 'minute') }),
	      React.createElement(
	        'div',
	        { style: styles.container },
	        clock
	      ),
	      buttons
	    );
	  },

	  handleChangeHours: function handleChangeHours(hours, finished) {
	    var _this2 = this;

	    var time = new Date(this.state.selectedTime);
	    var affix = undefined;

	    if (typeof finished === 'string') {
	      affix = finished;
	      finished = undefined;
	    }
	    if (!affix) {
	      affix = this._getAffix();
	    }
	    if (affix === 'pm' && hours < 12) {
	      hours += 12;
	    }

	    time.setHours(hours);
	    this.setState({
	      selectedTime: time
	    });

	    if (finished) {
	      setTimeout(function () {
	        _this2.setState({
	          mode: 'minute'
	        });
	      }, 100);
	    }
	  },

	  handleChangeMinutes: function handleChangeMinutes(minutes) {
	    var time = new Date(this.state.selectedTime);
	    time.setMinutes(minutes);
	    this.setState({
	      selectedTime: time
	    });
	  },

	  getSelectedTime: function getSelectedTime() {
	    return this.state.selectedTime;
	  }
	});

	module.exports = Clock;

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);

	var TimeDisplay = React.createClass({
	  displayName: 'TimeDisplay',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    selectedTime: React.PropTypes.object.isRequired,
	    format: React.PropTypes.oneOf(['ampm', '24hr']),
	    mode: React.PropTypes.oneOf(['hour', 'minute']),
	    affix: React.PropTypes.oneOf(['', 'pm', 'am'])
	  },

	  getInitialState: function getInitialState() {
	    return {
	      transitionDirection: 'up'
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      mode: 'hour',
	      affix: ''
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var direction = undefined;

	    if (nextProps.selectedTime !== this.props.selectedTime) {
	      direction = nextProps.selectedTime > this.props.selectedTime ? 'up' : 'down';

	      this.setState({
	        transitionDirection: direction
	      });
	    }
	  },

	  sanitizeTime: function sanitizeTime() {
	    var hour = this.props.selectedTime.getHours();
	    var min = this.props.selectedTime.getMinutes().toString();

	    if (this.props.format === "ampm") {
	      hour %= 12;
	      hour = hour || 12;
	    }

	    hour = hour.toString();
	    if (hour.length < 2) hour = "0" + hour;
	    if (min.length < 2) min = "0" + min;

	    return [hour, min];
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.timePicker;
	  },

	  render: function render() {
	    var _props = this.props;
	    var selectedTime = _props.selectedTime;
	    var mode = _props.mode;

	    var other = _objectWithoutProperties(_props, ['selectedTime', 'mode']);

	    var styles = {
	      root: {
	        textAlign: "center",
	        position: "relative",
	        width: 280,
	        height: "100%"
	      },

	      time: {
	        margin: "6px 0",
	        lineHeight: "58px",
	        height: 58,
	        fontSize: "58px"
	      },

	      box: {
	        padding: "16px 0",
	        backgroundColor: this.getTheme().color,
	        color: this.getTheme().textColor
	      },

	      hour: {},

	      minute: {}
	    };

	    var _sanitizeTime = this.sanitizeTime();

	    var _sanitizeTime2 = _slicedToArray(_sanitizeTime, 2);

	    var hour = _sanitizeTime2[0];
	    var min = _sanitizeTime2[1];

	    styles[mode].color = this.getTheme().accentColor;

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: this.mergeAndPrefix(styles.root) }),
	      React.createElement(
	        'div',
	        { style: this.mergeAndPrefix(styles.box) },
	        React.createElement(
	          'div',
	          { style: this.mergeAndPrefix(styles.time) },
	          React.createElement(
	            'span',
	            { style: this.mergeAndPrefix(styles.hour), onTouchTap: this.props.onSelectHour },
	            hour
	          ),
	          React.createElement(
	            'span',
	            null,
	            ':'
	          ),
	          React.createElement(
	            'span',
	            { style: this.mergeAndPrefix(styles.minute), onTouchTap: this.props.onSelectMin },
	            min
	          )
	        ),
	        React.createElement(
	          'span',
	          { key: "affix" },
	          this.props.affix.toUpperCase()
	        )
	      )
	    );
	  }

	});

	module.exports = TimeDisplay;

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var EnhancedButton = __webpack_require__(187);
	var Transitions = __webpack_require__(185);

	var ClockButton = React.createClass({
	  displayName: 'ClockButton',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    position: React.PropTypes.oneOf(['left', 'right'])
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      position: "left"
	    };
	  },

	  _handleTouchTap: function _handleTouchTap() {
	    this.setState({
	      selected: true
	    });
	    this.props.onTouchTap();
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.timePicker;
	  },

	  render: function render() {
	    var _props = this.props;
	    var className = _props.className;

	    var other = _objectWithoutProperties(_props, ['className']);

	    var styles = {
	      root: {
	        position: "absolute",
	        bottom: 65,
	        pointerEvents: "auto",
	        height: 50,
	        width: 50,
	        borderRadius: "100%"
	      },

	      label: {
	        position: "absolute",
	        top: 17,
	        left: 14
	      },

	      select: {
	        position: 'absolute',
	        height: 50,
	        width: 50,
	        top: 0,
	        left: 0,
	        opacity: 0,
	        borderRadius: '50%',
	        transform: 'scale(0)',
	        transition: Transitions.easeOut(),
	        backgroundColor: this.getTheme().accentColor
	      }
	    };

	    if (this.props.selected) {
	      styles.label.color = this.getTheme().selectTextColor;
	      styles.select.opacity = 1;
	      styles.select.transform = 'scale(1)';
	    }

	    if (this.props.position === "right") {
	      styles.root.right = "5px";
	    } else {
	      styles.root.left = "5px";
	    }

	    return React.createElement(
	      EnhancedButton,
	      _extends({}, other, {
	        style: this.mergeAndPrefix(styles.root),
	        disableFocusRipple: true,
	        disableTouchRipple: true,
	        onTouchTap: this._handleTouchTap }),
	      React.createElement('span', { style: this.mergeAndPrefix(styles.select) }),
	      React.createElement(
	        'span',
	        { style: this.mergeAndPrefix(styles.label) },
	        this.props.children
	      )
	    );
	  }
	});

	module.exports = ClockButton;

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var ClockNumber = __webpack_require__(305);
	var ClockPointer = __webpack_require__(306);

	function rad2deg(rad) {
	  return rad * 57.29577951308232;
	}

	function getTouchEventOffsetValues(e) {
	  var el = e.target;
	  var boundingRect = el.getBoundingClientRect();

	  var offset = {
	    offsetX: e.clientX - boundingRect.left,
	    offsetY: e.clientY - boundingRect.top
	  };

	  return offset;
	}

	var ClockHours = React.createClass({
	  displayName: 'ClockHours',

	  mixins: [StylePropable],

	  propTypes: {
	    initialHours: React.PropTypes.number,
	    onChange: React.PropTypes.func,
	    format: React.PropTypes.oneOf(['ampm', '24hr'])
	  },

	  center: { x: 0, y: 0 },
	  basePoint: { x: 0, y: 0 },

	  isMousePressed: function isMousePressed(e) {
	    if (typeof e.buttons === "undefined") {
	      return e.nativeEvent.which;
	    }

	    return e.buttons;
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      initialHours: new Date().getHours(),
	      onChange: function onChange() {},
	      format: 'ampm'
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    var clockElement = React.findDOMNode(this.refs.mask);

	    this.center = {
	      x: clockElement.offsetWidth / 2,
	      y: clockElement.offsetHeight / 2
	    };

	    this.basePoint = {
	      x: this.center.x,
	      y: 0
	    };
	  },

	  handleUp: function handleUp(e) {
	    e.preventDefault();
	    this.setClock(e.nativeEvent, true);
	  },

	  handleMove: function handleMove(e) {
	    e.preventDefault();
	    if (this.isMousePressed(e) !== 1) return;
	    this.setClock(e.nativeEvent, false);
	  },

	  handleTouchMove: function handleTouchMove(e) {
	    e.preventDefault();
	    this.setClock(e.changedTouches[0], false);
	  },

	  handleTouchEnd: function handleTouchEnd(e) {
	    e.preventDefault();
	    this.setClock(e.changedTouches[0], true);
	  },

	  setClock: function setClock(e, finish) {
	    if (typeof e.offsetX === 'undefined') {
	      var offset = getTouchEventOffsetValues(e);

	      e.offsetX = offset.offsetX;
	      e.offsetY = offset.offsetY;
	    }

	    var hours = this.getHours(e.offsetX, e.offsetY);

	    this.props.onChange(hours, finish);
	  },

	  getHours: function getHours(offsetX, offsetY) {
	    var step = 30;
	    var x = offsetX - this.center.x;
	    var y = offsetY - this.center.y;
	    var cx = this.basePoint.x - this.center.x;
	    var cy = this.basePoint.y - this.center.y;

	    var atan = Math.atan2(cx, cy) - Math.atan2(x, y);

	    var deg = rad2deg(atan);
	    deg = Math.round(deg / step) * step;
	    deg %= 360;

	    var value = Math.floor(deg / step) || 0;

	    var delta = Math.pow(x, 2) + Math.pow(y, 2);
	    var distance = Math.sqrt(delta);

	    value = value || 12;
	    if (this.props.format === "24hr") {
	      if (distance < 90) {
	        value += 12;
	        value %= 24;
	      }
	    } else {
	      value %= 12;
	    }

	    return value;
	  },

	  _getSelected: function _getSelected() {
	    var hour = this.props.initialHours;

	    if (this.props.format === "ampm") {
	      hour %= 12;
	      hour = hour || 12;
	    }

	    return hour;
	  },

	  _getHourNumbers: function _getHourNumbers() {
	    var _this = this;

	    var style = {
	      pointerEvents: "none"
	    };
	    var hourSize = this.props.format === 'ampm' ? 12 : 24;

	    var hours = [];
	    for (var i = 1; i <= hourSize; i++) {
	      hours.push(i % 24);
	    }

	    return hours.map(function (hour) {
	      var isSelected = _this._getSelected() === hour;
	      return React.createElement(ClockNumber, { key: hour, style: style, isSelected: isSelected, type: 'hour',
	        value: hour });
	    });
	  },

	  render: function render() {
	    var styles = {
	      root: {
	        height: "100%",
	        width: "100%",
	        borderRadius: "100%",
	        position: "relative",
	        pointerEvents: "none",
	        boxSizing: "border-box"
	      },

	      hitMask: {
	        height: "100%",
	        width: "100%",
	        pointerEvents: "auto"
	      }
	    };

	    var hours = this._getSelected();
	    var numbers = this._getHourNumbers();

	    return React.createElement(
	      'div',
	      { ref: 'clock', style: this.mergeAndPrefix(styles.root) },
	      React.createElement(ClockPointer, { hasSelected: true, value: hours, type: 'hour' }),
	      numbers,
	      React.createElement('div', { ref: 'mask', style: this.mergeAndPrefix(styles.hitMask), onTouchMove: this.handleTouchMove,
	        onTouchEnd: this.handleTouchEnd, onMouseUp: this.handleUp, onMouseMove: this.handleMove })
	    );
	  }
	});

	module.exports = ClockHours;

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);

	var ClockNumber = React.createClass({
	  displayName: 'ClockNumber',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    value: React.PropTypes.number,
	    type: React.PropTypes.oneOf(['hour', 'minute']),
	    onSelected: React.PropTypes.func,
	    isSelected: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      value: 0,
	      type: 'minute',
	      isSelected: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.timePicker;
	  },

	  render: function render() {
	    var pos = this.props.value;
	    var inner = false;

	    if (this.props.type === "hour") {
	      inner = pos < 1 || pos > 12;
	      pos %= 12;
	    } else {
	      pos = pos / 5;
	    }

	    var positions = [[0, 5], [54.5, 16.6], [94.4, 59.5], [109, 114], [94.4, 168.5], [54.5, 208.4], [0, 223], [-54.5, 208.4], [-94.4, 168.5], [-109, 114], [-94.4, 59.5], [-54.5, 19.6]];

	    var innerPositions = [[0, 40], [36.9, 49.9], [64, 77], [74, 114], [64, 151], [37, 178], [0, 188], [-37, 178], [-64, 151], [-74, 114], [-64, 77], [-37, 50]];

	    var styles = {
	      root: {
	        display: "inline-block",
	        position: "absolute",
	        width: 32,
	        height: 32,
	        borderRadius: "100%",
	        left: 'calc(50% - 16px)',
	        top: 10,
	        textAlign: "center",
	        paddingTop: 5,
	        userSelect: "none", /* Chrome all / Safari all */
	        fontSize: "1.1em",
	        pointerEvents: "none",
	        boxSizing: "border-box"
	      }
	    };

	    if (this.props.isSelected) {
	      styles.root.backgroundColor = this.getTheme().accentColor;
	      styles.root.color = this.getTheme().selectTextColor;
	    }

	    var transformPos = positions[pos];

	    if (inner) {
	      styles.root.width = "28px";
	      styles.root.height = "28px";
	      styles.root.left = 'calc(50% - 14px)';
	      transformPos = innerPositions[pos];
	    }

	    var _transformPos = transformPos;

	    var _transformPos2 = _slicedToArray(_transformPos, 2);

	    var x = _transformPos2[0];
	    var y = _transformPos2[1];

	    styles.root.transform = "translate(" + x + "px, " + y + "px)";

	    return React.createElement(
	      'span',
	      { style: this.mergeAndPrefix(styles.root) },
	      this.props.value
	    );
	  }
	});

	module.exports = ClockNumber;

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);

	var ClockPointer = React.createClass({
	  displayName: 'ClockPointer',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    value: React.PropTypes.number,
	    type: React.PropTypes.oneOf(['hour', 'minute'])
	  },

	  getInitialState: function getInitialState() {
	    return {
	      inner: this.isInner(this.props.value)
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      value: null,
	      type: 'minute',
	      hasSelected: false
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    this.setState({
	      inner: this.isInner(nextProps.value)
	    });
	  },

	  isInner: function isInner(value) {
	    if (this.props.type !== "hour") {
	      return false;
	    }
	    return value < 1 || value > 12;
	  },

	  getAngle: function getAngle() {
	    if (this.props.type === "hour") {
	      return this.calcAngle(this.props.value, 12);
	    }

	    return this.calcAngle(this.props.value, 60);
	  },

	  calcAngle: function calcAngle(value, base) {
	    value %= base;
	    var angle = 360 / base * value;
	    return angle;
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.timePicker;
	  },

	  render: function render() {
	    if (this.props.value === null) {
	      return React.createElement('span', null);
	    }

	    var angle = this.getAngle();

	    var styles = {
	      root: {
	        height: "30%",
	        background: this.getTheme().accentColor,
	        width: 2,
	        left: 'calc(50% - 1px)',
	        position: "absolute",
	        bottom: "50%",
	        transformOrigin: "bottom",
	        pointerEvents: "none",
	        transform: "rotateZ(" + angle + "deg)"
	      },
	      mark: {
	        background: this.getTheme().selectTextColor,
	        border: "4px solid " + this.getTheme().accentColor,
	        width: 7,
	        height: 7,
	        position: "absolute",
	        top: -5,
	        left: -6,
	        borderRadius: "100%"
	      }
	    };

	    if (!this.state.inner) {
	      styles.root.height = "40%";
	    }

	    if (this.props.hasSelected) {
	      styles.mark.display = "none";
	    }

	    return React.createElement(
	      'div',
	      { style: this.mergeAndPrefix(styles.root) },
	      React.createElement('div', { style: styles.mark })
	    );
	  }
	});

	module.exports = ClockPointer;

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);
	var ClockNumber = __webpack_require__(305);
	var ClockPointer = __webpack_require__(306);

	function rad2deg(rad) {
	  return rad * 57.29577951308232;
	}

	function getTouchEventOffsetValues(e) {
	  var el = e.target;
	  var boundingRect = el.getBoundingClientRect();

	  var offset = {
	    offsetX: e.clientX - boundingRect.left,
	    offsetY: e.clientY - boundingRect.top
	  };

	  return offset;
	}

	var ClockMinutes = React.createClass({
	  displayName: 'ClockMinutes',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    initialMinutes: React.PropTypes.number,
	    onChange: React.PropTypes.func
	  },

	  center: { x: 0, y: 0 },
	  basePoint: { x: 0, y: 0 },

	  isMousePressed: function isMousePressed(e) {

	    if (typeof e.buttons === "undefined") {
	      return e.nativeEvent.which;
	    }
	    return e.buttons;
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      initialMinutes: new Date().getMinutes(),
	      onChange: function onChange() {}
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    var clockElement = React.findDOMNode(this.refs.mask);

	    this.center = {
	      x: clockElement.offsetWidth / 2,
	      y: clockElement.offsetHeight / 2
	    };

	    this.basePoint = {
	      x: this.center.x,
	      y: 0
	    };
	  },

	  handleUp: function handleUp(e) {
	    e.preventDefault();
	    this.setClock(e.nativeEvent, true);
	  },

	  handleMove: function handleMove(e) {
	    e.preventDefault();
	    if (this.isMousePressed(e) !== 1) return;
	    this.setClock(e.nativeEvent, false);
	  },

	  handleTouch: function handleTouch(e) {
	    e.preventDefault();
	    this.setClock(e.changedTouches[0], false);
	  },

	  setClock: function setClock(e, finish) {
	    if (typeof e.offsetX === 'undefined') {
	      var offset = getTouchEventOffsetValues(e);

	      e.offsetX = offset.offsetX;
	      e.offsetY = offset.offsetY;
	    }

	    var minutes = this.getMinutes(e.offsetX, e.offsetY);

	    this.props.onChange(minutes, finish);
	  },

	  getMinutes: function getMinutes(offsetX, offsetY) {
	    var step = 6;
	    var x = offsetX - this.center.x;
	    var y = offsetY - this.center.y;
	    var cx = this.basePoint.x - this.center.x;
	    var cy = this.basePoint.y - this.center.y;

	    var atan = Math.atan2(cx, cy) - Math.atan2(x, y);

	    var deg = rad2deg(atan);
	    deg = Math.round(deg / step) * step;
	    deg %= 360;

	    var value = Math.floor(deg / step) || 0;

	    return value;
	  },

	  _getMinuteNumbers: function _getMinuteNumbers() {
	    var minutes = [];
	    for (var i = 0; i < 12; i++) {
	      minutes.push(i * 5);
	    }
	    var selectedMinutes = this.props.initialMinutes;
	    var hasSelected = false;

	    var numbers = minutes.map(function (minute) {
	      var isSelected = selectedMinutes === minute;
	      if (isSelected) hasSelected = true;
	      return React.createElement(ClockNumber, { key: minute, isSelected: isSelected, type: 'minute', value: minute });
	    });

	    return {
	      numbers: numbers,
	      hasSelected: hasSelected,
	      selected: selectedMinutes
	    };
	  },

	  render: function render() {
	    var styles = {
	      root: {
	        height: "100%",
	        width: "100%",
	        borderRadius: "100%",
	        position: "relative",
	        pointerEvents: "none",
	        boxSizing: "border-box"
	      },

	      hitMask: {
	        height: "100%",
	        width: "100%",
	        pointerEvents: "auto"
	      }
	    };

	    var minutes = this._getMinuteNumbers();

	    return React.createElement(
	      'div',
	      { ref: 'clock', style: this.mergeAndPrefix(styles.root) },
	      React.createElement(ClockPointer, { value: minutes.selected, type: 'minute' }),
	      minutes.numbers,
	      React.createElement('div', { ref: 'mask', style: this.mergeAndPrefix(styles.hitMask), hasSelected: minutes.hasSelected,
	        onTouchMove: this.handleTouch, onTouchEnd: this.handleTouch,
	        onMouseUp: this.handleUp, onMouseMove: this.handleMove })
	    );
	  }
	});

	module.exports = ClockMinutes;

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);

	var ToolbarSeparator = React.createClass({
	  displayName: 'ToolbarSeparator',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.toolbar;
	  },

	  getSpacing: function getSpacing() {
	    return this.context.muiTheme.spacing;
	  },

	  render: function render() {
	    var styles = this.mergeAndPrefix({
	      backgroundColor: this.getTheme().separatorColor,
	      display: 'inline-block',
	      height: this.getSpacing().desktopGutterMore,
	      marginLeft: this.getSpacing().desktopGutter,
	      position: 'relative',
	      top: (this.getTheme().height - this.getSpacing().desktopGutterMore) / 2,
	      width: 1
	    }, this.props.style);

	    return React.createElement('span', { className: this.props.className, style: styles });
	  }

	});

	module.exports = ToolbarSeparator;

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(159);

	var ToolbarTitle = React.createClass({
	  displayName: 'ToolbarTitle',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    text: React.PropTypes.string
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.toolbar;
	  },

	  render: function render() {
	    var _props = this.props;
	    var style = _props.style;
	    var text = _props.text;

	    var other = _objectWithoutProperties(_props, ['style', 'text']);

	    var styles = this.mergeAndPrefix({
	      paddingRight: this.context.muiTheme.spacing.desktopGutterLess,
	      lineHeight: this.getTheme().height + 'px',
	      fontSize: this.getTheme().titleFontSize + 'px',
	      display: 'inline-block',
	      position: 'relative'
	    }, style);

	    return React.createElement(
	      'span',
	      _extends({ style: styles }, other),
	      text
	    );
	  }

	});

	module.exports = ToolbarTitle;

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	  ColorManipulator: __webpack_require__(216),
	  CssEvent: __webpack_require__(232),
	  Dom: __webpack_require__(195),
	  Events: __webpack_require__(189),
	  Extend: __webpack_require__(207),
	  ImmutabilityHelper: __webpack_require__(160),
	  KeyCode: __webpack_require__(190),
	  KeyLine: __webpack_require__(255),
	  UniqueId: __webpack_require__(223),
	  Styles: __webpack_require__(179)
	};

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function injectTapEventPlugin () {
	  var React = __webpack_require__(1);
	  React.initializeTouchEvents(true);

	  __webpack_require__(69).injection.injectEventPluginsByName({
	    "ResponderEventPlugin": __webpack_require__(312),
	    "TapEventPlugin":       __webpack_require__(313)
	  });
	};


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ResponderEventPlugin
	 */

	"use strict";

	var EventConstants = __webpack_require__(5);
	var EventPluginUtils = __webpack_require__(4);
	var EventPropagators = __webpack_require__(93);
	var SyntheticEvent = __webpack_require__(97);

	var accumulateInto = __webpack_require__(71);
	var keyOf = __webpack_require__(39);

	var isStartish = EventPluginUtils.isStartish;
	var isMoveish = EventPluginUtils.isMoveish;
	var isEndish = EventPluginUtils.isEndish;
	var executeDirectDispatch = EventPluginUtils.executeDirectDispatch;
	var hasDispatches = EventPluginUtils.hasDispatches;
	var executeDispatchesInOrderStopAtTrue =
	  EventPluginUtils.executeDispatchesInOrderStopAtTrue;

	/**
	 * ID of element that should respond to touch/move types of interactions, as
	 * indicated explicitly by relevant callbacks.
	 */
	var responderID = null;
	var isPressing = false;

	var eventTypes = {
	  /**
	   * On a `touchStart`/`mouseDown`, is it desired that this element become the
	   * responder?
	   */
	  startShouldSetResponder: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onStartShouldSetResponder: null}),
	      captured: keyOf({onStartShouldSetResponderCapture: null})
	    }
	  },

	  /**
	   * On a `scroll`, is it desired that this element become the responder? This
	   * is usually not needed, but should be used to retroactively infer that a
	   * `touchStart` had occured during momentum scroll. During a momentum scroll,
	   * a touch start will be immediately followed by a scroll event if the view is
	   * currently scrolling.
	   */
	  scrollShouldSetResponder: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScrollShouldSetResponder: null}),
	      captured: keyOf({onScrollShouldSetResponderCapture: null})
	    }
	  },

	  /**
	   * On a `touchMove`/`mouseMove`, is it desired that this element become the
	   * responder?
	   */
	  moveShouldSetResponder: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMoveShouldSetResponder: null}),
	      captured: keyOf({onMoveShouldSetResponderCapture: null})
	    }
	  },

	  /**
	   * Direct responder events dispatched directly to responder. Do not bubble.
	   */
	  responderMove: {registrationName: keyOf({onResponderMove: null})},
	  responderRelease: {registrationName: keyOf({onResponderRelease: null})},
	  responderTerminationRequest: {
	    registrationName: keyOf({onResponderTerminationRequest: null})
	  },
	  responderGrant: {registrationName: keyOf({onResponderGrant: null})},
	  responderReject: {registrationName: keyOf({onResponderReject: null})},
	  responderTerminate: {registrationName: keyOf({onResponderTerminate: null})}
	};

	/**
	 * Performs negotiation between any existing/current responder, checks to see if
	 * any new entity is interested in becoming responder, performs that handshake
	 * and returns any events that must be emitted to notify the relevant parties.
	 *
	 * A note about event ordering in the `EventPluginHub`.
	 *
	 * Suppose plugins are injected in the following order:
	 *
	 * `[R, S, C]`
	 *
	 * To help illustrate the example, assume `S` is `SimpleEventPlugin` (for
	 * `onClick` etc) and `R` is `ResponderEventPlugin`.
	 *
	 * "Deferred-Dispatched Events":
	 *
	 * - The current event plugin system will traverse the list of injected plugins,
	 *   in order, and extract events by collecting the plugin's return value of
	 *   `extractEvents()`.
	 * - These events that are returned from `extractEvents` are "deferred
	 *   dispatched events".
	 * - When returned from `extractEvents`, deferred-dispatched events contain an
	 *   "accumulation" of deferred dispatches.
	 * - These deferred dispatches are accumulated/collected before they are
	 *   returned, but processed at a later time by the `EventPluginHub` (hence the
	 *   name deferred).
	 *
	 * In the process of returning their deferred-dispatched events, event plugins
	 * themselves can dispatch events on-demand without returning them from
	 * `extractEvents`. Plugins might want to do this, so that they can use event
	 * dispatching as a tool that helps them decide which events should be extracted
	 * in the first place.
	 *
	 * "On-Demand-Dispatched Events":
	 *
	 * - On-demand-dispatched events are not returned from `extractEvents`.
	 * - On-demand-dispatched events are dispatched during the process of returning
	 *   the deferred-dispatched events.
	 * - They should not have side effects.
	 * - They should be avoided, and/or eventually be replaced with another
	 *   abstraction that allows event plugins to perform multiple "rounds" of event
	 *   extraction.
	 *
	 * Therefore, the sequence of event dispatches becomes:
	 *
	 * - `R`s on-demand events (if any)   (dispatched by `R` on-demand)
	 * - `S`s on-demand events (if any)   (dispatched by `S` on-demand)
	 * - `C`s on-demand events (if any)   (dispatched by `C` on-demand)
	 * - `R`s extracted events (if any)   (dispatched by `EventPluginHub`)
	 * - `S`s extracted events (if any)   (dispatched by `EventPluginHub`)
	 * - `C`s extracted events (if any)   (dispatched by `EventPluginHub`)
	 *
	 * In the case of `ResponderEventPlugin`: If the `startShouldSetResponder`
	 * on-demand dispatch returns `true` (and some other details are satisfied) the
	 * `onResponderGrant` deferred dispatched event is returned from
	 * `extractEvents`. The sequence of dispatch executions in this case
	 * will appear as follows:
	 *
	 * - `startShouldSetResponder` (`ResponderEventPlugin` dispatches on-demand)
	 * - `touchStartCapture`       (`EventPluginHub` dispatches as usual)
	 * - `touchStart`              (`EventPluginHub` dispatches as usual)
	 * - `responderGrant/Reject`   (`EventPluginHub` dispatches as usual)
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {string} topLevelTargetID ID of deepest React rendered element.
	 * @param {object} nativeEvent Native browser event.
	 * @return {*} An accumulation of synthetic events.
	 */
	function setResponderAndExtractTransfer(
	    topLevelType,
	    topLevelTargetID,
	    nativeEvent) {
	  var shouldSetEventType =
	    isStartish(topLevelType) ? eventTypes.startShouldSetResponder :
	    isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder :
	    eventTypes.scrollShouldSetResponder;

	  var bubbleShouldSetFrom = responderID || topLevelTargetID;
	  var shouldSetEvent = SyntheticEvent.getPooled(
	    shouldSetEventType,
	    bubbleShouldSetFrom,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(shouldSetEvent);
	  var wantsResponderID = executeDispatchesInOrderStopAtTrue(shouldSetEvent);
	  if (!shouldSetEvent.isPersistent()) {
	    shouldSetEvent.constructor.release(shouldSetEvent);
	  }

	  if (!wantsResponderID || wantsResponderID === responderID) {
	    return null;
	  }
	  var extracted;
	  var grantEvent = SyntheticEvent.getPooled(
	    eventTypes.responderGrant,
	    wantsResponderID,
	    nativeEvent
	  );

	  EventPropagators.accumulateDirectDispatches(grantEvent);
	  if (responderID) {
	    var terminationRequestEvent = SyntheticEvent.getPooled(
	      eventTypes.responderTerminationRequest,
	      responderID,
	      nativeEvent
	    );
	    EventPropagators.accumulateDirectDispatches(terminationRequestEvent);
	    var shouldSwitch = !hasDispatches(terminationRequestEvent) ||
	      executeDirectDispatch(terminationRequestEvent);
	    if (!terminationRequestEvent.isPersistent()) {
	      terminationRequestEvent.constructor.release(terminationRequestEvent);
	    }

	    if (shouldSwitch) {
	      var terminateType = eventTypes.responderTerminate;
	      var terminateEvent = SyntheticEvent.getPooled(
	        terminateType,
	        responderID,
	        nativeEvent
	      );
	      EventPropagators.accumulateDirectDispatches(terminateEvent);
	      extracted = accumulateInto(extracted, [grantEvent, terminateEvent]);
	      responderID = wantsResponderID;
	    } else {
	      var rejectEvent = SyntheticEvent.getPooled(
	        eventTypes.responderReject,
	        wantsResponderID,
	        nativeEvent
	      );
	      EventPropagators.accumulateDirectDispatches(rejectEvent);
	      extracted = accumulateInto(extracted, rejectEvent);
	    }
	  } else {
	    extracted = accumulateInto(extracted, grantEvent);
	    responderID = wantsResponderID;
	  }
	  return extracted;
	}

	/**
	 * A transfer is a negotiation between a currently set responder and the next
	 * element to claim responder status. Any start event could trigger a transfer
	 * of responderID. Any move event could trigger a transfer, so long as there is
	 * currently a responder set (in other words as long as the user is pressing
	 * down).
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @return {boolean} True if a transfer of responder could possibly occur.
	 */
	function canTriggerTransfer(topLevelType) {
	  return topLevelType === EventConstants.topLevelTypes.topScroll ||
	         isStartish(topLevelType) ||
	         (isPressing && isMoveish(topLevelType));
	}

	/**
	 * Event plugin for formalizing the negotiation between claiming locks on
	 * receiving touches.
	 */
	var ResponderEventPlugin = {

	  getResponderID: function() {
	    return responderID;
	  },

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var extracted;
	    // Must have missed an end event - reset the state here.
	    if (responderID && isStartish(topLevelType)) {
	      responderID = null;
	    }
	    if (isStartish(topLevelType)) {
	      isPressing = true;
	    } else if (isEndish(topLevelType)) {
	      isPressing = false;
	    }
	    if (canTriggerTransfer(topLevelType)) {
	      var transfer = setResponderAndExtractTransfer(
	        topLevelType,
	        topLevelTargetID,
	        nativeEvent
	      );
	      if (transfer) {
	        extracted = accumulateInto(extracted, transfer);
	      }
	    }
	    // Now that we know the responder is set correctly, we can dispatch
	    // responder type events (directly to the responder).
	    var type = isMoveish(topLevelType) ? eventTypes.responderMove :
	      isEndish(topLevelType) ? eventTypes.responderRelease :
	      isStartish(topLevelType) ? eventTypes.responderStart : null;
	    if (type) {
	      var gesture = SyntheticEvent.getPooled(
	        type,
	        responderID || '',
	        nativeEvent
	      );
	      EventPropagators.accumulateDirectDispatches(gesture);
	      extracted = accumulateInto(extracted, gesture);
	    }
	    if (type === eventTypes.responderRelease) {
	      responderID = null;
	    }
	    return extracted;
	  }

	};

	module.exports = ResponderEventPlugin;


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule TapEventPlugin
	 * @typechecks static-only
	 */

	"use strict";

	var EventConstants = __webpack_require__(5);
	var EventPluginUtils = __webpack_require__(4);
	var EventPropagators = __webpack_require__(93);
	var SyntheticUIEvent = __webpack_require__(106);
	var TouchEventUtils = __webpack_require__(314);
	var ViewportMetrics = __webpack_require__(74);

	var keyOf = __webpack_require__(39);
	var topLevelTypes = EventConstants.topLevelTypes;

	var isStartish = EventPluginUtils.isStartish;
	var isEndish = EventPluginUtils.isEndish;

	var isTouch = function(topLevelType) {
	  var touchTypes = [
	    topLevelTypes.topTouchCancel,
	    topLevelTypes.topTouchEnd,
	    topLevelTypes.topTouchStart,
	    topLevelTypes.topTouchMove
	  ];
	  return touchTypes.indexOf(topLevelType) >= 0;
	}

	/**
	 * Number of pixels that are tolerated in between a `touchStart` and `touchEnd`
	 * in order to still be considered a 'tap' event.
	 */
	var tapMoveThreshold = 10;
	var ignoreMouseThreshold = 750;
	var startCoords = {x: null, y: null};
	var lastTouchEvent = null;

	var Axis = {
	  x: {page: 'pageX', client: 'clientX', envScroll: 'currentPageScrollLeft'},
	  y: {page: 'pageY', client: 'clientY', envScroll: 'currentPageScrollTop'}
	};

	function getAxisCoordOfEvent(axis, nativeEvent) {
	  var singleTouch = TouchEventUtils.extractSingleTouch(nativeEvent);
	  if (singleTouch) {
	    return singleTouch[axis.page];
	  }
	  return axis.page in nativeEvent ?
	    nativeEvent[axis.page] :
	    nativeEvent[axis.client] + ViewportMetrics[axis.envScroll];
	}

	function getDistance(coords, nativeEvent) {
	  var pageX = getAxisCoordOfEvent(Axis.x, nativeEvent);
	  var pageY = getAxisCoordOfEvent(Axis.y, nativeEvent);
	  return Math.pow(
	    Math.pow(pageX - coords.x, 2) + Math.pow(pageY - coords.y, 2),
	    0.5
	  );
	}

	var dependencies = [
	  topLevelTypes.topMouseDown,
	  topLevelTypes.topMouseMove,
	  topLevelTypes.topMouseUp
	];

	if (EventPluginUtils.useTouchEvents) {
	  dependencies.push(
	    topLevelTypes.topTouchEnd,
	    topLevelTypes.topTouchStart,
	    topLevelTypes.topTouchMove
	  );
	}

	var eventTypes = {
	  touchTap: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchTap: null}),
	      captured: keyOf({onTouchTapCapture: null})
	    },
	    dependencies: dependencies
	  }
	};

	var now = function() {
	  if (Date.now) {
	    return Date.now();
	  } else {
	    // IE8 support: http://stackoverflow.com/questions/9430357/please-explain-why-and-how-new-date-works-as-workaround-for-date-now-in
	    return +new Date;
	  }
	}

	var TapEventPlugin = {

	  tapMoveThreshold: tapMoveThreshold,

	  ignoreMouseThreshold: ignoreMouseThreshold,

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    if (isTouch(topLevelType)) {
	      lastTouchEvent = now();
	    } else {
	      if (lastTouchEvent && (now() - lastTouchEvent) < ignoreMouseThreshold) {
	        return null;
	      }
	    }

	    if (!isStartish(topLevelType) && !isEndish(topLevelType)) {
	      return null;
	    }
	    var event = null;
	    var distance = getDistance(startCoords, nativeEvent);
	    if (isEndish(topLevelType) && distance < tapMoveThreshold) {
	      event = SyntheticUIEvent.getPooled(
	        eventTypes.touchTap,
	        topLevelTargetID,
	        nativeEvent
	      );
	    }
	    if (isStartish(topLevelType)) {
	      startCoords.x = getAxisCoordOfEvent(Axis.x, nativeEvent);
	      startCoords.y = getAxisCoordOfEvent(Axis.y, nativeEvent);
	    } else if (isEndish(topLevelType)) {
	      startCoords.x = 0;
	      startCoords.y = 0;
	    }
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }

	};

	module.exports = TapEventPlugin;


/***/ },
/* 314 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule TouchEventUtils
	 */

	var TouchEventUtils = {
	  /**
	   * Utility function for common case of extracting out the primary touch from a
	   * touch event.
	   * - `touchEnd` events usually do not have the `touches` property.
	   *   http://stackoverflow.com/questions/3666929/
	   *   mobile-sarai-touchend-event-not-firing-when-last-touch-is-removed
	   *
	   * @param {Event} nativeEvent Native event that may or may not be a touch.
	   * @return {TouchesObject?} an object with pageX and pageY or null.
	   */
	  extractSingleTouch: function(nativeEvent) {
	    var touches = nativeEvent.touches;
	    var changedTouches = nativeEvent.changedTouches;
	    var hasTouches = touches && touches.length > 0;
	    var hasChangedTouches = changedTouches && changedTouches.length > 0;

	    return !hasTouches && hasChangedTouches ? changedTouches[0] :
	           hasTouches ? touches[0] :
	           nativeEvent;
	  }
	};

	module.exports = TouchEventUtils;


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(316);

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(317));
		else if(typeof define === 'function' && define.amd)
			define(["./highcharts"], factory);
		else if(typeof exports === 'object')
			exports["Highcharts"] = factory(require("./highcharts"));
		else
			root["Highcharts"] = factory(root["./highcharts"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_8__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ({

	/***/ 0:
	/***/ function(module, exports, __webpack_require__) {

		"use strict";

		module.exports = __webpack_require__(8);
		__webpack_require__(9);

	/***/ },

	/***/ 8:
	/***/ function(module, exports) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

	/***/ },

	/***/ 9:
	/***/ function(module, exports) {

		// ==ClosureCompiler==
		// @compilation_level SIMPLE_OPTIMIZATIONS

		/**
		 * @license Highcharts JS v4.1.8 (2015-08-20)
		 *
		 * (c) 2009-2014 Torstein Honsi
		 *
		 * License: www.highcharts.com/license
		 */

		// JSLint options:
		/*global Highcharts, HighchartsAdapter, document, window, navigator, setInterval, clearInterval, clearTimeout, setTimeout, location, jQuery, $, console */

		(function (Highcharts, UNDEFINED) {
		var arrayMin = Highcharts.arrayMin,
			arrayMax = Highcharts.arrayMax,
			each = Highcharts.each,
			extend = Highcharts.extend,
			merge = Highcharts.merge,
			map = Highcharts.map,
			pick = Highcharts.pick,
			pInt = Highcharts.pInt,
			defaultPlotOptions = Highcharts.getOptions().plotOptions,
			seriesTypes = Highcharts.seriesTypes,
			extendClass = Highcharts.extendClass,
			splat = Highcharts.splat,
			wrap = Highcharts.wrap,
			Axis = Highcharts.Axis,
			Tick = Highcharts.Tick,
			Point = Highcharts.Point,
			Pointer = Highcharts.Pointer,
			CenteredSeriesMixin = Highcharts.CenteredSeriesMixin,
			TrackerMixin = Highcharts.TrackerMixin,
			Series = Highcharts.Series,
			math = Math,
			mathRound = math.round,
			mathFloor = math.floor,
			mathMax = math.max,
			Color = Highcharts.Color,
			noop = function () {};/**
		 * The Pane object allows options that are common to a set of X and Y axes.
		 * 
		 * In the future, this can be extended to basic Highcharts and Highstock.
		 */
		function Pane(options, chart, firstAxis) {
			this.init.call(this, options, chart, firstAxis);
		}

		// Extend the Pane prototype
		extend(Pane.prototype, {
			
			/**
			 * Initiate the Pane object
			 */
			init: function (options, chart, firstAxis) {
				var pane = this,
					backgroundOption,
					defaultOptions = pane.defaultOptions;
				
				pane.chart = chart;
				
				// Set options. Angular charts have a default background (#3318)
				pane.options = options = merge(defaultOptions, chart.angular ? { background: {} } : undefined, options);
				
				backgroundOption = options.background;
				
				// To avoid having weighty logic to place, update and remove the backgrounds,
				// push them to the first axis' plot bands and borrow the existing logic there.
				if (backgroundOption) {
					each([].concat(splat(backgroundOption)).reverse(), function (config) {
						var backgroundColor = config.backgroundColor,  // if defined, replace the old one (specific for gradients)
							axisUserOptions = firstAxis.userOptions;
						config = merge(pane.defaultBackgroundOptions, config);
						if (backgroundColor) {
							config.backgroundColor = backgroundColor;
						}
						config.color = config.backgroundColor; // due to naming in plotBands
						firstAxis.options.plotBands.unshift(config);
						axisUserOptions.plotBands = axisUserOptions.plotBands || []; // #3176
						axisUserOptions.plotBands.unshift(config);
					});
				}
			},
			
			/**
			 * The default options object
			 */
			defaultOptions: {
				// background: {conditional},
				center: ['50%', '50%'],
				size: '85%',
				startAngle: 0
				//endAngle: startAngle + 360
			},	
			
			/**
			 * The default background options
			 */
			defaultBackgroundOptions: {
				shape: 'circle',
				borderWidth: 1,
				borderColor: 'silver',
				backgroundColor: {
					linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
					stops: [
						[0, '#FFF'],
						[1, '#DDD']
					]
				},
				from: -Number.MAX_VALUE, // corrected to axis min
				innerRadius: 0,
				to: Number.MAX_VALUE, // corrected to axis max
				outerRadius: '105%'
			}
			
		});
		var axisProto = Axis.prototype,
			tickProto = Tick.prototype;
			
		/**
		 * Augmented methods for the x axis in order to hide it completely, used for the X axis in gauges
		 */
		var hiddenAxisMixin = {
			getOffset: noop,
			redraw: function () {
				this.isDirty = false; // prevent setting Y axis dirty
			},
			render: function () {
				this.isDirty = false; // prevent setting Y axis dirty
			},
			setScale: noop,
			setCategories: noop,
			setTitle: noop
		};

		/**
		 * Augmented methods for the value axis
		 */
		/*jslint unparam: true*/
		var radialAxisMixin = {
			isRadial: true,
			
			/**
			 * The default options extend defaultYAxisOptions
			 */
			defaultRadialGaugeOptions: {
				labels: {
					align: 'center',
					x: 0,
					y: null // auto
				},
				minorGridLineWidth: 0,
				minorTickInterval: 'auto',
				minorTickLength: 10,
				minorTickPosition: 'inside',
				minorTickWidth: 1,
				tickLength: 10,
				tickPosition: 'inside',
				tickWidth: 2,
				title: {
					rotation: 0
				},
				zIndex: 2 // behind dials, points in the series group
			},
			
			// Circular axis around the perimeter of a polar chart
			defaultRadialXOptions: {
				gridLineWidth: 1, // spokes
				labels: {
					align: null, // auto
					distance: 15,
					x: 0,
					y: null // auto
				},
				maxPadding: 0,
				minPadding: 0,
				showLastLabel: false, 
				tickLength: 0
			},
			
			// Radial axis, like a spoke in a polar chart
			defaultRadialYOptions: {
				gridLineInterpolation: 'circle',
				labels: {
					align: 'right',
					x: -3,
					y: -2
				},
				showLastLabel: false,
				title: {
					x: 4,
					text: null,
					rotation: 90
				}
			},
			
			/**
			 * Merge and set options
			 */
			setOptions: function (userOptions) {
				
				var options = this.options = merge(
					this.defaultOptions,
					this.defaultRadialOptions,
					userOptions
				);

				// Make sure the plotBands array is instanciated for each Axis (#2649)
				if (!options.plotBands) {
					options.plotBands = [];
				}
				
			},
			
			/**
			 * Wrap the getOffset method to return zero offset for title or labels in a radial 
			 * axis
			 */
			getOffset: function () {
				// Call the Axis prototype method (the method we're in now is on the instance)
				axisProto.getOffset.call(this);
				
				// Title or label offsets are not counted
				this.chart.axisOffset[this.side] = 0;
				
				// Set the center array
				this.center = this.pane.center = CenteredSeriesMixin.getCenter.call(this.pane);
			},


			/**
			 * Get the path for the axis line. This method is also referenced in the getPlotLinePath
			 * method.
			 */
			getLinePath: function (lineWidth, radius) {
				var center = this.center;
				radius = pick(radius, center[2] / 2 - this.offset);
				
				return this.chart.renderer.symbols.arc(
					this.left + center[0],
					this.top + center[1],
					radius,
					radius, 
					{
						start: this.startAngleRad,
						end: this.endAngleRad,
						open: true,
						innerR: 0
					}
				);
			},

			/**
			 * Override setAxisTranslation by setting the translation to the difference
			 * in rotation. This allows the translate method to return angle for 
			 * any given value.
			 */
			setAxisTranslation: function () {
				
				// Call uber method		
				axisProto.setAxisTranslation.call(this);
					
				// Set transA and minPixelPadding
				if (this.center) { // it's not defined the first time
					if (this.isCircular) {
						
						this.transA = (this.endAngleRad - this.startAngleRad) / 
							((this.max - this.min) || 1);
							
						
					} else { 
						this.transA = (this.center[2] / 2) / ((this.max - this.min) || 1);
					}
					
					if (this.isXAxis) {
						this.minPixelPadding = this.transA * this.minPointOffset;
					} else {
						// This is a workaround for regression #2593, but categories still don't position correctly.
						// TODO: Implement true handling of Y axis categories on gauges.
						this.minPixelPadding = 0; 
					}
				}
			},
			
			/**
			 * In case of auto connect, add one closestPointRange to the max value right before
			 * tickPositions are computed, so that ticks will extend passed the real max.
			 */
			beforeSetTickPositions: function () {
				if (this.autoConnect) {
					this.max += (this.categories && 1) || this.pointRange || this.closestPointRange || 0; // #1197, #2260
				}
			},
			
			/**
			 * Override the setAxisSize method to use the arc's circumference as length. This
			 * allows tickPixelInterval to apply to pixel lengths along the perimeter
			 */
			setAxisSize: function () {
				
				axisProto.setAxisSize.call(this);

				if (this.isRadial) {

					// Set the center array
					this.center = this.pane.center = Highcharts.CenteredSeriesMixin.getCenter.call(this.pane);

					// The sector is used in Axis.translate to compute the translation of reversed axis points (#2570)
					if (this.isCircular) {
						this.sector = this.endAngleRad - this.startAngleRad;	
					}
					
					// Axis len is used to lay out the ticks
					this.len = this.width = this.height = this.center[2] * pick(this.sector, 1) / 2;


				}
			},
			
			/**
			 * Returns the x, y coordinate of a point given by a value and a pixel distance
			 * from center
			 */
			getPosition: function (value, length) {
				return this.postTranslate(
					this.isCircular ? this.translate(value) : 0, // #2848
					pick(this.isCircular ? length : this.translate(value), this.center[2] / 2) - this.offset
				);		
			},
			
			/**
			 * Translate from intermediate plotX (angle), plotY (axis.len - radius) to final chart coordinates. 
			 */
			postTranslate: function (angle, radius) {
				
				var chart = this.chart,
					center = this.center;
					
				angle = this.startAngleRad + angle;

				return {
					x: chart.plotLeft + center[0] + Math.cos(angle) * radius,
					y: chart.plotTop + center[1] + Math.sin(angle) * radius
				}; 
				
			},
			
			/**
			 * Find the path for plot bands along the radial axis
			 */
			getPlotBandPath: function (from, to, options) {
				var center = this.center,
					startAngleRad = this.startAngleRad,
					fullRadius = center[2] / 2,
					radii = [
						pick(options.outerRadius, '100%'),
						options.innerRadius,
						pick(options.thickness, 10)
					],
					percentRegex = /%$/,
					start,
					end,
					open,
					isCircular = this.isCircular, // X axis in a polar chart
					ret;
					
				// Polygonal plot bands
				if (this.options.gridLineInterpolation === 'polygon') {
					ret = this.getPlotLinePath(from).concat(this.getPlotLinePath(to, true));
				
				// Circular grid bands
				} else {

					// Keep within bounds
					from = Math.max(from, this.min);
					to = Math.min(to, this.max);
					
					// Plot bands on Y axis (radial axis) - inner and outer radius depend on to and from
					if (!isCircular) {
						radii[0] = this.translate(from);
						radii[1] = this.translate(to);
					}
					
					// Convert percentages to pixel values
					radii = map(radii, function (radius) {
						if (percentRegex.test(radius)) {
							radius = (pInt(radius, 10) * fullRadius) / 100;
						}
						return radius;
					});
					
					// Handle full circle
					if (options.shape === 'circle' || !isCircular) {
						start = -Math.PI / 2;
						end = Math.PI * 1.5;
						open = true;
					} else {
						start = startAngleRad + this.translate(from);
						end = startAngleRad + this.translate(to);
					}
				
				
					ret = this.chart.renderer.symbols.arc(
						this.left + center[0],
						this.top + center[1],
						radii[0],
						radii[0],
						{
							start: Math.min(start, end), // Math is for reversed yAxis (#3606)
							end: Math.max(start, end),
							innerR: pick(radii[1], radii[0] - radii[2]),
							open: open
						}
					);
				}

				return ret;
			},
			
			/**
			 * Find the path for plot lines perpendicular to the radial axis.
			 */
			getPlotLinePath: function (value, reverse) {
				var axis = this,
					center = axis.center,
					chart = axis.chart,
					end = axis.getPosition(value),
					xAxis,
					xy,
					tickPositions,
					ret;
				
				// Spokes
				if (axis.isCircular) {
					ret = ['M', center[0] + chart.plotLeft, center[1] + chart.plotTop, 'L', end.x, end.y];
				
				// Concentric circles			
				} else if (axis.options.gridLineInterpolation === 'circle') {
					value = axis.translate(value);
					if (value) { // a value of 0 is in the center
						ret = axis.getLinePath(0, value);
					}
				// Concentric polygons 
				} else {
					// Find the X axis in the same pane
					each(chart.xAxis, function (a) {
						if (a.pane === axis.pane) {
							xAxis = a;
						}
					});
					ret = [];
					value = axis.translate(value);
					tickPositions = xAxis.tickPositions;
					if (xAxis.autoConnect) {
						tickPositions = tickPositions.concat([tickPositions[0]]);
					}
					// Reverse the positions for concatenation of polygonal plot bands
					if (reverse) {
						tickPositions = [].concat(tickPositions).reverse();
					}
						
					each(tickPositions, function (pos, i) {
						xy = xAxis.getPosition(pos, value);
						ret.push(i ? 'L' : 'M', xy.x, xy.y);
					});
					
				}
				return ret;
			},
			
			/**
			 * Find the position for the axis title, by default inside the gauge
			 */
			getTitlePosition: function () {
				var center = this.center,
					chart = this.chart,
					titleOptions = this.options.title;
				
				return { 
					x: chart.plotLeft + center[0] + (titleOptions.x || 0), 
					y: chart.plotTop + center[1] - ({ high: 0.5, middle: 0.25, low: 0 }[titleOptions.align] * 
						center[2]) + (titleOptions.y || 0)  
				};
			}
			
		};
		/*jslint unparam: false*/

		/**
		 * Override axisProto.init to mix in special axis instance functions and function overrides
		 */
		wrap(axisProto, 'init', function (proceed, chart, userOptions) {
			var axis = this,
				angular = chart.angular,
				polar = chart.polar,
				isX = userOptions.isX,
				isHidden = angular && isX,
				isCircular,
				startAngleRad,
				endAngleRad,
				options,
				chartOptions = chart.options,
				paneIndex = userOptions.pane || 0,
				pane,
				paneOptions;
				
			// Before prototype.init
			if (angular) {
				extend(this, isHidden ? hiddenAxisMixin : radialAxisMixin);
				isCircular =  !isX;
				if (isCircular) {
					this.defaultRadialOptions = this.defaultRadialGaugeOptions;
				}
				
			} else if (polar) {
				//extend(this, userOptions.isX ? radialAxisMixin : radialAxisMixin);
				extend(this, radialAxisMixin);
				isCircular = isX;
				this.defaultRadialOptions = isX ? this.defaultRadialXOptions : merge(this.defaultYAxisOptions, this.defaultRadialYOptions);
				
			}
			
			// Run prototype.init
			proceed.call(this, chart, userOptions);
			
			if (!isHidden && (angular || polar)) {
				options = this.options;
				
				// Create the pane and set the pane options.
				if (!chart.panes) {
					chart.panes = [];
				}
				this.pane = pane = chart.panes[paneIndex] = chart.panes[paneIndex] || new Pane(
					splat(chartOptions.pane)[paneIndex],
					chart,
					axis
				);
				paneOptions = pane.options;
				
					
				// Disable certain features on angular and polar axes
				chart.inverted = false;
				chartOptions.chart.zoomType = null;
				
				// Start and end angle options are
				// given in degrees relative to top, while internal computations are
				// in radians relative to right (like SVG).
				this.startAngleRad = startAngleRad = (paneOptions.startAngle - 90) * Math.PI / 180;
				this.endAngleRad = endAngleRad = (pick(paneOptions.endAngle, paneOptions.startAngle + 360)  - 90) * Math.PI / 180;
				this.offset = options.offset || 0;
				
				this.isCircular = isCircular;
				
				// Automatically connect grid lines?
				if (isCircular && userOptions.max === UNDEFINED && endAngleRad - startAngleRad === 2 * Math.PI) {
					this.autoConnect = true;
				}
			}
			
		});

		/**
		 * Add special cases within the Tick class' methods for radial axes.
		 */	
		wrap(tickProto, 'getPosition', function (proceed, horiz, pos, tickmarkOffset, old) {
			var axis = this.axis;
			
			return axis.getPosition ? 
				axis.getPosition(pos) :
				proceed.call(this, horiz, pos, tickmarkOffset, old);	
		});

		/**
		 * Wrap the getLabelPosition function to find the center position of the label
		 * based on the distance option
		 */	
		wrap(tickProto, 'getLabelPosition', function (proceed, x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {
			var axis = this.axis,
				optionsY = labelOptions.y,
				ret,
				centerSlot = 20, // 20 degrees to each side at the top and bottom
				align = labelOptions.align,
				angle = ((axis.translate(this.pos) + axis.startAngleRad + Math.PI / 2) / Math.PI * 180) % 360;

			if (axis.isRadial) {
				ret = axis.getPosition(this.pos, (axis.center[2] / 2) + pick(labelOptions.distance, -25));
				
				// Automatically rotated
				if (labelOptions.rotation === 'auto') {
					label.attr({ 
						rotation: angle
					});
				
				// Vertically centered
				} else if (optionsY === null) {
					optionsY = axis.chart.renderer.fontMetrics(label.styles.fontSize).b - label.getBBox().height / 2;
				}
				
				// Automatic alignment
				if (align === null) {
					if (axis.isCircular) {
						if (this.label.getBBox().width > axis.len * axis.tickInterval / (axis.max - axis.min)) { // #3506
							centerSlot = 0;
						}
						if (angle > centerSlot && angle < 180 - centerSlot) {
							align = 'left'; // right hemisphere
						} else if (angle > 180 + centerSlot && angle < 360 - centerSlot) {
							align = 'right'; // left hemisphere
						} else {
							align = 'center'; // top or bottom
						}
					} else {
						align = 'center';
					}
					label.attr({
						align: align
					});
				}
				
				ret.x += labelOptions.x;
				ret.y += optionsY;
				
			} else {
				ret = proceed.call(this, x, y, label, horiz, labelOptions, tickmarkOffset, index, step);
			}
			return ret;
		});

		/**
		 * Wrap the getMarkPath function to return the path of the radial marker
		 */
		wrap(tickProto, 'getMarkPath', function (proceed, x, y, tickLength, tickWidth, horiz, renderer) {
			var axis = this.axis,
				endPoint,
				ret;
				
			if (axis.isRadial) {
				endPoint = axis.getPosition(this.pos, axis.center[2] / 2 + tickLength);
				ret = [
					'M',
					x,
					y,
					'L',
					endPoint.x,
					endPoint.y
				];
			} else {
				ret = proceed.call(this, x, y, tickLength, tickWidth, horiz, renderer);
			}
			return ret;
		});/* 
		 * The AreaRangeSeries class
		 * 
		 */

		/**
		 * Extend the default options with map options
		 */
		defaultPlotOptions.arearange = merge(defaultPlotOptions.area, {
			lineWidth: 1,
			marker: null,
			threshold: null,
			tooltip: {
				pointFormat: '<span style="color:{series.color}">\u25CF</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>'
			},
			trackByArea: true,
			dataLabels: {
				align: null,
				verticalAlign: null,
				xLow: 0,
				xHigh: 0,
				yLow: 0,
				yHigh: 0	
			},
			states: {
				hover: {
					halo: false
				}
			}
		});

		/**
		 * Add the series type
		 */
		seriesTypes.arearange = extendClass(seriesTypes.area, {
			type: 'arearange',
			pointArrayMap: ['low', 'high'],
			dataLabelCollections: ['dataLabel', 'dataLabelUpper'],
			toYData: function (point) {
				return [point.low, point.high];
			},
			pointValKey: 'low',
			deferTranslatePolar: true,

			/**
			 * Translate a point's plotHigh from the internal angle and radius measures to 
			 * true plotHigh coordinates. This is an addition of the toXY method found in
			 * Polar.js, because it runs too early for arearanges to be considered (#3419).
			 */
			highToXY: function (point) {
				// Find the polar plotX and plotY
				var chart = this.chart,
					xy = this.xAxis.postTranslate(point.rectPlotX, this.yAxis.len - point.plotHigh);
				point.plotHighX = xy.x - chart.plotLeft;
				point.plotHigh = xy.y - chart.plotTop;
			},
			
			/**
			 * Extend getSegments to force null points if the higher value is null. #1703.
			 */
			getSegments: function () {
				var series = this;

				each(series.points, function (point) {
					if (!series.options.connectNulls && (point.low === null || point.high === null)) {
						point.y = null;
					} else if (point.low === null && point.high !== null) {
						point.y = point.high;
					}
				});
				Series.prototype.getSegments.call(this);
			},
			
			/**
			 * Translate data points from raw values x and y to plotX and plotY
			 */
			translate: function () {
				var series = this,
					yAxis = series.yAxis;

				seriesTypes.area.prototype.translate.apply(series);

				// Set plotLow and plotHigh
				each(series.points, function (point) {

					var low = point.low,
						high = point.high,
						plotY = point.plotY;

					if (high === null && low === null) {
						point.y = null;
					} else if (low === null) {
						point.plotLow = point.plotY = null;
						point.plotHigh = yAxis.translate(high, 0, 1, 0, 1);
					} else if (high === null) {
						point.plotLow = plotY;
						point.plotHigh = null;
					} else {
						point.plotLow = plotY;
						point.plotHigh = yAxis.translate(high, 0, 1, 0, 1);
					}
				});

				// Postprocess plotHigh
				if (this.chart.polar) {
					each(this.points, function (point) {
						series.highToXY(point);
					});
				}
			},
			
			/**
			 * Extend the line series' getSegmentPath method by applying the segment
			 * path to both lower and higher values of the range
			 */
			getSegmentPath: function (segment) {
				
				var lowSegment,
					highSegment = [],
					i = segment.length,
					baseGetSegmentPath = Series.prototype.getSegmentPath,
					point,
					linePath,
					lowerPath,
					options = this.options,
					step = options.step,
					higherPath;
					
				// Remove nulls from low segment
				lowSegment = HighchartsAdapter.grep(segment, function (point) {
					return point.plotLow !== null;
				});
				
				// Make a segment with plotX and plotY for the top values
				while (i--) {
					point = segment[i];
					if (point.plotHigh !== null) {
						highSegment.push({
							plotX: point.plotHighX || point.plotX, // plotHighX is for polar charts
							plotY: point.plotHigh
						});
					}
				}
				
				// Get the paths
				lowerPath = baseGetSegmentPath.call(this, lowSegment);
				if (step) {
					if (step === true) {
						step = 'left';
					}
					options.step = { left: 'right', center: 'center', right: 'left' }[step]; // swap for reading in getSegmentPath
				}
				higherPath = baseGetSegmentPath.call(this, highSegment);
				options.step = step;
				
				// Create a line on both top and bottom of the range
				linePath = [].concat(lowerPath, higherPath);
				
				// For the area path, we need to change the 'move' statement into 'lineTo' or 'curveTo'
				if (!this.chart.polar) {
					higherPath[0] = 'L'; // this probably doesn't work for spline
				}
				this.areaPath = this.areaPath.concat(lowerPath, higherPath);
				
				return linePath;
			},
			
			/**
			 * Extend the basic drawDataLabels method by running it for both lower and higher
			 * values.
			 */
			drawDataLabels: function () {
				
				var data = this.data,
					length = data.length,
					i,
					originalDataLabels = [],
					seriesProto = Series.prototype,
					dataLabelOptions = this.options.dataLabels,
					align = dataLabelOptions.align,
					point,
					up,
					inverted = this.chart.inverted;
					
				if (dataLabelOptions.enabled || this._hasPointLabels) {
					
					// Step 1: set preliminary values for plotY and dataLabel and draw the upper labels
					i = length;
					while (i--) {
						point = data[i];
						if (point) {
							up = point.plotHigh > point.plotLow;
							
							// Set preliminary values
							point.y = point.high;
							point._plotY = point.plotY;
							point.plotY = point.plotHigh;
							
							// Store original data labels and set preliminary label objects to be picked up 
							// in the uber method
							originalDataLabels[i] = point.dataLabel;
							point.dataLabel = point.dataLabelUpper;
							
							// Set the default offset
							point.below = up;
							if (inverted) {
								if (!align) {
									dataLabelOptions.align = up ? 'right' : 'left';
								}
								dataLabelOptions.x = dataLabelOptions.xHigh;								
							} else {
								dataLabelOptions.y = dataLabelOptions.yHigh;
							}
						}
					}
					
					if (seriesProto.drawDataLabels) {
						seriesProto.drawDataLabels.apply(this, arguments); // #1209
					}
					
					// Step 2: reorganize and handle data labels for the lower values
					i = length;
					while (i--) {
						point = data[i];
						if (point) {
							up = point.plotHigh > point.plotLow;
							
							// Move the generated labels from step 1, and reassign the original data labels
							point.dataLabelUpper = point.dataLabel;
							point.dataLabel = originalDataLabels[i];
							
							// Reset values
							point.y = point.low;
							point.plotY = point._plotY;
							
							// Set the default offset
							point.below = !up;
							if (inverted) {
								if (!align) {
									dataLabelOptions.align = up ? 'left' : 'right';
								}
								dataLabelOptions.x = dataLabelOptions.xLow;
							} else {
								dataLabelOptions.y = dataLabelOptions.yLow;
							}
						}
					}
					if (seriesProto.drawDataLabels) {
						seriesProto.drawDataLabels.apply(this, arguments);
					}
				}

				dataLabelOptions.align = align;
			
			},
			
			alignDataLabel: function () {
				seriesTypes.column.prototype.alignDataLabel.apply(this, arguments);
			},
			
			setStackedPoints: noop,
			
			getSymbol: noop,
			
			drawPoints: noop
		});/**
		 * The AreaSplineRangeSeries class
		 */

		defaultPlotOptions.areasplinerange = merge(defaultPlotOptions.arearange);

		/**
		 * AreaSplineRangeSeries object
		 */
		seriesTypes.areasplinerange = extendClass(seriesTypes.arearange, {
			type: 'areasplinerange',
			getPointSpline: seriesTypes.spline.prototype.getPointSpline
		});

		(function () {
			
			var colProto = seriesTypes.column.prototype;

			/**
			 * The ColumnRangeSeries class
			 */
			defaultPlotOptions.columnrange = merge(defaultPlotOptions.column, defaultPlotOptions.arearange, {
				lineWidth: 1,
				pointRange: null
			});

			/**
			 * ColumnRangeSeries object
			 */
			seriesTypes.columnrange = extendClass(seriesTypes.arearange, {
				type: 'columnrange',
				/**
				 * Translate data points from raw values x and y to plotX and plotY
				 */
				translate: function () {
					var series = this,
						yAxis = series.yAxis,
						plotHigh;

					colProto.translate.apply(series);

					// Set plotLow and plotHigh
					each(series.points, function (point) {
						var shapeArgs = point.shapeArgs,
							minPointLength = series.options.minPointLength,
							heightDifference,
							height,
							y;

						point.tooltipPos = null; // don't inherit from column
						point.plotHigh = plotHigh = yAxis.translate(point.high, 0, 1, 0, 1);
						point.plotLow = point.plotY;

						// adjust shape
						y = plotHigh;
						height = point.plotY - plotHigh;

						// Adjust for minPointLength
						if (Math.abs(height) < minPointLength) {
							heightDifference = (minPointLength - height);
							height += heightDifference;
							y -= heightDifference / 2;

						// Adjust for negative ranges or reversed Y axis (#1457)
						} else if (height < 0) {
							height *= -1;
							y -= height;
						}

						shapeArgs.height = height;
						shapeArgs.y = y;
					});
				},
				directTouch: true,
				trackerGroups: ['group', 'dataLabelsGroup'],
				drawGraph: noop,
				pointAttrToOptions: colProto.pointAttrToOptions,
				drawPoints: colProto.drawPoints,
				drawTracker: colProto.drawTracker,
				animate: colProto.animate,
				getColumnMetrics: colProto.getColumnMetrics
			});
		}());

		/* 
		 * The GaugeSeries class
		 */



		/**
		 * Extend the default options
		 */
		defaultPlotOptions.gauge = merge(defaultPlotOptions.line, {
			dataLabels: {
				enabled: true,
				defer: false,
				y: 15,
				borderWidth: 1,
				borderColor: 'silver',
				borderRadius: 3,
				crop: false,
				verticalAlign: 'top',
				zIndex: 2
			},
			dial: {
				// radius: '80%',
				// backgroundColor: 'black',
				// borderColor: 'silver',
				// borderWidth: 0,
				// baseWidth: 3,
				// topWidth: 1,
				// baseLength: '70%' // of radius
				// rearLength: '10%'
			},
			pivot: {
				//radius: 5,
				//borderWidth: 0
				//borderColor: 'silver',
				//backgroundColor: 'black'
			},
			tooltip: {
				headerFormat: ''
			},
			showInLegend: false
		});

		/**
		 * Extend the point object
		 */
		var GaugePoint = extendClass(Point, {
			/**
			 * Don't do any hover colors or anything
			 */
			setState: function (state) {
				this.state = state;
			}
		});


		/**
		 * Add the series type
		 */
		var GaugeSeries = {
			type: 'gauge',
			pointClass: GaugePoint,
			
			// chart.angular will be set to true when a gauge series is present, and this will
			// be used on the axes
			angular: true, 
			drawGraph: noop,
			fixedBox: true,
			forceDL: true,
			trackerGroups: ['group', 'dataLabelsGroup'],
			
			/**
			 * Calculate paths etc
			 */
			translate: function () {
				
				var series = this,
					yAxis = series.yAxis,
					options = series.options,
					center = yAxis.center;
					
				series.generatePoints();
				
				each(series.points, function (point) {
					
					var dialOptions = merge(options.dial, point.dial),
						radius = (pInt(pick(dialOptions.radius, 80)) * center[2]) / 200,
						baseLength = (pInt(pick(dialOptions.baseLength, 70)) * radius) / 100,
						rearLength = (pInt(pick(dialOptions.rearLength, 10)) * radius) / 100,
						baseWidth = dialOptions.baseWidth || 3,
						topWidth = dialOptions.topWidth || 1,
						overshoot = options.overshoot,
						rotation = yAxis.startAngleRad + yAxis.translate(point.y, null, null, null, true);

					// Handle the wrap and overshoot options
					if (overshoot && typeof overshoot === 'number') {
						overshoot = overshoot / 180 * Math.PI;
						rotation = Math.max(yAxis.startAngleRad - overshoot, Math.min(yAxis.endAngleRad + overshoot, rotation));			
					
					} else if (options.wrap === false) {
						rotation = Math.max(yAxis.startAngleRad, Math.min(yAxis.endAngleRad, rotation));
					}

					rotation = rotation * 180 / Math.PI;
						
					point.shapeType = 'path';
					point.shapeArgs = {
						d: dialOptions.path || [
							'M', 
							-rearLength, -baseWidth / 2, 
							'L', 
							baseLength, -baseWidth / 2,
							radius, -topWidth / 2,
							radius, topWidth / 2,
							baseLength, baseWidth / 2,
							-rearLength, baseWidth / 2,
							'z'
						],
						translateX: center[0],
						translateY: center[1],
						rotation: rotation
					};
					
					// Positions for data label
					point.plotX = center[0];
					point.plotY = center[1];
				});
			},
			
			/**
			 * Draw the points where each point is one needle
			 */
			drawPoints: function () {
				
				var series = this,
					center = series.yAxis.center,
					pivot = series.pivot,
					options = series.options,
					pivotOptions = options.pivot,
					renderer = series.chart.renderer;
				
				each(series.points, function (point) {
					
					var graphic = point.graphic,
						shapeArgs = point.shapeArgs,
						d = shapeArgs.d,
						dialOptions = merge(options.dial, point.dial); // #1233
					
					if (graphic) {
						graphic.animate(shapeArgs);
						shapeArgs.d = d; // animate alters it
					} else {
						point.graphic = renderer[point.shapeType](shapeArgs)
							.attr({
								stroke: dialOptions.borderColor || 'none',
								'stroke-width': dialOptions.borderWidth || 0,
								fill: dialOptions.backgroundColor || 'black',
								rotation: shapeArgs.rotation // required by VML when animation is false
							})
							.add(series.group);
					}
				});
				
				// Add or move the pivot
				if (pivot) {
					pivot.animate({ // #1235
						translateX: center[0],
						translateY: center[1]
					});
				} else {
					series.pivot = renderer.circle(0, 0, pick(pivotOptions.radius, 5))
						.attr({
							'stroke-width': pivotOptions.borderWidth || 0,
							stroke: pivotOptions.borderColor || 'silver',
							fill: pivotOptions.backgroundColor || 'black'
						})
						.translate(center[0], center[1])
						.add(series.group);
				}
			},
			
			/**
			 * Animate the arrow up from startAngle
			 */
			animate: function (init) {
				var series = this;

				if (!init) {
					each(series.points, function (point) {
						var graphic = point.graphic;

						if (graphic) {
							// start value
							graphic.attr({
								rotation: series.yAxis.startAngleRad * 180 / Math.PI
							});

							// animate
							graphic.animate({
								rotation: point.shapeArgs.rotation
							}, series.options.animation);
						}
					});

					// delete this function to allow it only once
					series.animate = null;
				}
			},
			
			render: function () {
				this.group = this.plotGroup(
					'group', 
					'series', 
					this.visible ? 'visible' : 'hidden', 
					this.options.zIndex, 
					this.chart.seriesGroup
				);
				Series.prototype.render.call(this);
				this.group.clip(this.chart.clipRect);
			},
			
			/**
			 * Extend the basic setData method by running processData and generatePoints immediately,
			 * in order to access the points from the legend.
			 */
			setData: function (data, redraw) {
				Series.prototype.setData.call(this, data, false);
				this.processData();
				this.generatePoints();
				if (pick(redraw, true)) {
					this.chart.redraw();
				}
			},

			/**
			 * If the tracking module is loaded, add the point tracker
			 */
			drawTracker: TrackerMixin && TrackerMixin.drawTrackerPoint
		};
		seriesTypes.gauge = extendClass(seriesTypes.line, GaugeSeries);

		/* ****************************************************************************
		 * Start Box plot series code											      *
		 *****************************************************************************/

		// Set default options
		defaultPlotOptions.boxplot = merge(defaultPlotOptions.column, {
			fillColor: '#FFFFFF',
			lineWidth: 1,
			//medianColor: null,
			medianWidth: 2,
			states: {
				hover: {
					brightness: -0.3
				}
			},
			//stemColor: null,
			//stemDashStyle: 'solid'
			//stemWidth: null,
			threshold: null,
			tooltip: {
				pointFormat: '<span style="color:{point.color}">\u25CF</span> <b> {series.name}</b><br/>' + // docs
					'Maximum: {point.high}<br/>' +
					'Upper quartile: {point.q3}<br/>' +
					'Median: {point.median}<br/>' +
					'Lower quartile: {point.q1}<br/>' +
					'Minimum: {point.low}<br/>'
					
			},
			//whiskerColor: null,
			whiskerLength: '50%',
			whiskerWidth: 2
		});

		// Create the series object
		seriesTypes.boxplot = extendClass(seriesTypes.column, {
			type: 'boxplot',
			pointArrayMap: ['low', 'q1', 'median', 'q3', 'high'], // array point configs are mapped to this
			toYData: function (point) { // return a plain array for speedy calculation
				return [point.low, point.q1, point.median, point.q3, point.high];
			},
			pointValKey: 'high', // defines the top of the tracker
			
			/**
			 * One-to-one mapping from options to SVG attributes
			 */
			pointAttrToOptions: { // mapping between SVG attributes and the corresponding options
				fill: 'fillColor',
				stroke: 'color',
				'stroke-width': 'lineWidth'
			},
			
			/**
			 * Disable data labels for box plot
			 */
			drawDataLabels: noop,

			/**
			 * Translate data points from raw values x and y to plotX and plotY
			 */
			translate: function () {
				var series = this,
					yAxis = series.yAxis,
					pointArrayMap = series.pointArrayMap;

				seriesTypes.column.prototype.translate.apply(series);

				// do the translation on each point dimension
				each(series.points, function (point) {
					each(pointArrayMap, function (key) {
						if (point[key] !== null) {
							point[key + 'Plot'] = yAxis.translate(point[key], 0, 1, 0, 1);
						}
					});
				});
			},

			/**
			 * Draw the data points
			 */
			drawPoints: function () {
				var series = this,  //state = series.state,
					points = series.points,
					options = series.options,
					chart = series.chart,
					renderer = chart.renderer,
					pointAttr,
					q1Plot,
					q3Plot,
					highPlot,
					lowPlot,
					medianPlot,
					crispCorr,
					crispX,
					graphic,
					stemPath,
					stemAttr,
					boxPath,
					whiskersPath,
					whiskersAttr,
					medianPath,
					medianAttr,
					width,
					left,
					right,
					halfWidth,
					shapeArgs,
					color,
					doQuartiles = series.doQuartiles !== false, // error bar inherits this series type but doesn't do quartiles
					whiskerLength = parseInt(series.options.whiskerLength, 10) / 100;


				each(points, function (point) {

					graphic = point.graphic;
					shapeArgs = point.shapeArgs; // the box
					stemAttr = {};
					whiskersAttr = {};
					medianAttr = {};
					color = point.color || series.color;
					
					if (point.plotY !== UNDEFINED) {

						pointAttr = point.pointAttr[point.selected ? 'selected' : ''];

						// crisp vector coordinates
						width = shapeArgs.width;
						left = mathFloor(shapeArgs.x);
						right = left + width;
						halfWidth = mathRound(width / 2);
						//crispX = mathRound(left + halfWidth) + crispCorr;
						q1Plot = mathFloor(doQuartiles ? point.q1Plot : point.lowPlot);// + crispCorr;
						q3Plot = mathFloor(doQuartiles ? point.q3Plot : point.lowPlot);// + crispCorr;
						highPlot = mathFloor(point.highPlot);// + crispCorr;
						lowPlot = mathFloor(point.lowPlot);// + crispCorr;
						
						// Stem attributes
						stemAttr.stroke = point.stemColor || options.stemColor || color;
						stemAttr['stroke-width'] = pick(point.stemWidth, options.stemWidth, options.lineWidth);
						stemAttr.dashstyle = point.stemDashStyle || options.stemDashStyle;
						
						// Whiskers attributes
						whiskersAttr.stroke = point.whiskerColor || options.whiskerColor || color;
						whiskersAttr['stroke-width'] = pick(point.whiskerWidth, options.whiskerWidth, options.lineWidth);
						
						// Median attributes
						medianAttr.stroke = point.medianColor || options.medianColor || color;
						medianAttr['stroke-width'] = pick(point.medianWidth, options.medianWidth, options.lineWidth);
						
						// The stem
						crispCorr = (stemAttr['stroke-width'] % 2) / 2;
						crispX = left + halfWidth + crispCorr;				
						stemPath = [
							// stem up
							'M',
							crispX, q3Plot,
							'L',
							crispX, highPlot,
							
							// stem down
							'M',
							crispX, q1Plot,
							'L',
							crispX, lowPlot
						];
						
						// The box
						if (doQuartiles) {
							crispCorr = (pointAttr['stroke-width'] % 2) / 2;
							crispX = mathFloor(crispX) + crispCorr;
							q1Plot = mathFloor(q1Plot) + crispCorr;
							q3Plot = mathFloor(q3Plot) + crispCorr;
							left += crispCorr;
							right += crispCorr;
							boxPath = [
								'M',
								left, q3Plot,
								'L',
								left, q1Plot,
								'L',
								right, q1Plot,
								'L',
								right, q3Plot,
								'L',
								left, q3Plot,
								'z'
							];
						}
						
						// The whiskers
						if (whiskerLength) {
							crispCorr = (whiskersAttr['stroke-width'] % 2) / 2;
							highPlot = highPlot + crispCorr;
							lowPlot = lowPlot + crispCorr;
							whiskersPath = [
								// High whisker
								'M',
								crispX - halfWidth * whiskerLength, 
								highPlot,
								'L',
								crispX + halfWidth * whiskerLength, 
								highPlot,
								
								// Low whisker
								'M',
								crispX - halfWidth * whiskerLength, 
								lowPlot,
								'L',
								crispX + halfWidth * whiskerLength, 
								lowPlot
							];
						}
						
						// The median
						crispCorr = (medianAttr['stroke-width'] % 2) / 2;				
						medianPlot = mathRound(point.medianPlot) + crispCorr;
						medianPath = [
							'M',
							left, 
							medianPlot,
							'L',
							right, 
							medianPlot
						];
						
						// Create or update the graphics
						if (graphic) { // update
							
							point.stem.animate({ d: stemPath });
							if (whiskerLength) {
								point.whiskers.animate({ d: whiskersPath });
							}
							if (doQuartiles) {
								point.box.animate({ d: boxPath });
							}
							point.medianShape.animate({ d: medianPath });
							
						} else { // create new
							point.graphic = graphic = renderer.g()
								.add(series.group);
							
							point.stem = renderer.path(stemPath)
								.attr(stemAttr)
								.add(graphic);
								
							if (whiskerLength) {
								point.whiskers = renderer.path(whiskersPath) 
									.attr(whiskersAttr)
									.add(graphic);
							}
							if (doQuartiles) {
								point.box = renderer.path(boxPath)
									.attr(pointAttr)
									.add(graphic);
							}	
							point.medianShape = renderer.path(medianPath)
								.attr(medianAttr)
								.add(graphic);
						}
					}
				});

			},
			setStackedPoints: noop // #3890


		});

		/* ****************************************************************************
		 * End Box plot series code												*
		 *****************************************************************************/
		/* ****************************************************************************
		 * Start error bar series code                                                *
		 *****************************************************************************/

		// 1 - set default options
		defaultPlotOptions.errorbar = merge(defaultPlotOptions.boxplot, {
			color: '#000000',
			grouping: false,
			linkedTo: ':previous',
			tooltip: {
				pointFormat: '<span style="color:{point.color}">\u25CF</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>' // docs
			},
			whiskerWidth: null
		});

		// 2 - Create the series object
		seriesTypes.errorbar = extendClass(seriesTypes.boxplot, {
			type: 'errorbar',
			pointArrayMap: ['low', 'high'], // array point configs are mapped to this
			toYData: function (point) { // return a plain array for speedy calculation
				return [point.low, point.high];
			},
			pointValKey: 'high', // defines the top of the tracker
			doQuartiles: false,
			drawDataLabels: seriesTypes.arearange ? seriesTypes.arearange.prototype.drawDataLabels : noop,

			/**
			 * Get the width and X offset, either on top of the linked series column
			 * or standalone
			 */
			getColumnMetrics: function () {
				return (this.linkedParent && this.linkedParent.columnMetrics) || 
					seriesTypes.column.prototype.getColumnMetrics.call(this);
			}
		});

		/* ****************************************************************************
		 * End error bar series code                                                  *
		 *****************************************************************************/
		/* ****************************************************************************
		 * Start Waterfall series code                                                *
		 *****************************************************************************/

		// 1 - set default options
		defaultPlotOptions.waterfall = merge(defaultPlotOptions.column, {
			lineWidth: 1,
			lineColor: '#333',
			dashStyle: 'dot',
			borderColor: '#333',
			dataLabels: {
				inside: true
			},
			states: {
				hover: {
					lineWidthPlus: 0 // #3126
				}
			}
		});


		// 2 - Create the series object
		seriesTypes.waterfall = extendClass(seriesTypes.column, {
			type: 'waterfall',

			upColorProp: 'fill',

			pointValKey: 'y',

			/**
			 * Translate data points from raw values
			 */
			translate: function () {
				var series = this,
					options = series.options,
					yAxis = series.yAxis,
					len,
					i,
					points,
					point,
					shapeArgs,
					stack,
					y,
					yValue,
					previousY,
					previousIntermediate,
					range,
					threshold = options.threshold,
					stacking = options.stacking,
					tooltipY;

				// run column series translate
				seriesTypes.column.prototype.translate.apply(this);

				previousY = previousIntermediate = threshold;
				points = series.points;

				for (i = 0, len = points.length; i < len; i++) {
					// cache current point object
					point = points[i];
					yValue = this.processedYData[i];
					shapeArgs = point.shapeArgs;

					// get current stack
					stack = stacking && yAxis.stacks[(series.negStacks && yValue < threshold ? '-' : '') + series.stackKey];
					range = stack ? 
						stack[point.x].points[series.index + ',' + i] :
						[0, yValue];

					// override point value for sums
					// #3710 Update point does not propagate to sum
					if (point.isSum) {
						point.y = yValue;
					} else if (point.isIntermediateSum) {
						point.y = yValue - previousIntermediate; // #3840
					}
					// up points
					y = mathMax(previousY, previousY + point.y) + range[0];
					shapeArgs.y = yAxis.translate(y, 0, 1);


					// sum points
					if (point.isSum) {
						shapeArgs.y = yAxis.translate(range[1], 0, 1);
						shapeArgs.height = Math.min(yAxis.translate(range[0], 0, 1), yAxis.len) - shapeArgs.y; // #4256

					} else if (point.isIntermediateSum) {
						shapeArgs.y = yAxis.translate(range[1], 0, 1);
						shapeArgs.height = Math.min(yAxis.translate(previousIntermediate, 0, 1), yAxis.len) - shapeArgs.y;
						previousIntermediate = range[1];

					// If it's not the sum point, update previous stack end position and get 
					// shape height (#3886)
					} else {
						if (previousY !== 0) { // Not the first point
							shapeArgs.height = yValue > 0 ? 
								yAxis.translate(previousY, 0, 1) - shapeArgs.y :
								yAxis.translate(previousY, 0, 1) - yAxis.translate(previousY - yValue, 0, 1);
						}
						previousY += yValue;
					}
					// #3952 Negative sum or intermediate sum not rendered correctly
					if (shapeArgs.height < 0) {
						shapeArgs.y += shapeArgs.height;
						shapeArgs.height *= -1;
					}

					point.plotY = shapeArgs.y = mathRound(shapeArgs.y) - (series.borderWidth % 2) / 2;
					shapeArgs.height = mathMax(mathRound(shapeArgs.height), 0.001); // #3151
					point.yBottom = shapeArgs.y + shapeArgs.height;

					// Correct tooltip placement (#3014)
					tooltipY = point.plotY + (point.negative ? shapeArgs.height : 0);
					if (series.chart.inverted) {
						point.tooltipPos[0] = yAxis.len - tooltipY;
					} else {
						point.tooltipPos[1] = tooltipY;
					}

				}
			},

			/**
			 * Call default processData then override yData to reflect waterfall's extremes on yAxis
			 */
			processData: function (force) {
				var series = this,
					options = series.options,
					yData = series.yData,
					points = series.options.data, // #3710 Update point does not propagate to sum
					point,
					dataLength = yData.length,
					threshold = options.threshold || 0,
					subSum,
					sum,
					dataMin,
					dataMax,
					y,
					i;

				sum = subSum = dataMin = dataMax = threshold;

				for (i = 0; i < dataLength; i++) {
					y = yData[i];
					point = points && points[i] ? points[i] : {};

					if (y === "sum" || point.isSum) {
						yData[i] = sum;
					} else if (y === "intermediateSum" || point.isIntermediateSum) {
						yData[i] = subSum;
					} else {
						sum += y;
						subSum += y;
					}
					dataMin = Math.min(sum, dataMin);
					dataMax = Math.max(sum, dataMax);
				}

				Series.prototype.processData.call(this, force);

				// Record extremes
				series.dataMin = dataMin;
				series.dataMax = dataMax;
			},

			/**
			 * Return y value or string if point is sum
			 */
			toYData: function (pt) {
				if (pt.isSum) {
					return (pt.x === 0 ? null : "sum"); //#3245 Error when first element is Sum or Intermediate Sum
				} else if (pt.isIntermediateSum) {
					return (pt.x === 0 ? null : "intermediateSum"); //#3245
				}
				return pt.y;
			},

			/**
			 * Postprocess mapping between options and SVG attributes
			 */
			getAttribs: function () {
				seriesTypes.column.prototype.getAttribs.apply(this, arguments);

				var series = this,
					options = series.options,
					stateOptions = options.states,
					upColor = options.upColor || series.color,
					hoverColor = Highcharts.Color(upColor).brighten(0.1).get(),
					seriesDownPointAttr = merge(series.pointAttr),
					upColorProp = series.upColorProp;

				seriesDownPointAttr[''][upColorProp] = upColor;
				seriesDownPointAttr.hover[upColorProp] = stateOptions.hover.upColor || hoverColor;
				seriesDownPointAttr.select[upColorProp] = stateOptions.select.upColor || upColor;

				each(series.points, function (point) {
					if (!point.options.color) {
						// Up color
						if (point.y > 0) {
							point.pointAttr = seriesDownPointAttr;
							point.color = upColor;

						// Down color (#3710, update to negative)
						} else {
							point.pointAttr = series.pointAttr;
						}
					}
				});
			},

			/**
			 * Draw columns' connector lines
			 */
			getGraphPath: function () {

				var data = this.data,
					length = data.length,
					lineWidth = this.options.lineWidth + this.borderWidth,
					normalizer = mathRound(lineWidth) % 2 / 2,
					path = [],
					M = 'M',
					L = 'L',
					prevArgs,
					pointArgs,
					i,
					d;

				for (i = 1; i < length; i++) {
					pointArgs = data[i].shapeArgs;
					prevArgs = data[i - 1].shapeArgs;

					d = [
						M,
						prevArgs.x + prevArgs.width, prevArgs.y + normalizer,
						L,
						pointArgs.x, prevArgs.y + normalizer
					];

					if (data[i - 1].y < 0) {
						d[2] += prevArgs.height;
						d[5] += prevArgs.height;
					}

					path = path.concat(d);
				}

				return path;
			},

			/**
			 * Extremes are recorded in processData
			 */
			getExtremes: noop,

			drawGraph: Series.prototype.drawGraph
		});

		/* ****************************************************************************
		 * End Waterfall series code                                                  *
		 *****************************************************************************/
		/**
		 * Set the default options for polygon
		 */
		defaultPlotOptions.polygon = merge(defaultPlotOptions.scatter, {
			marker: {
				enabled: false
			}
		});

		/**
		 * The polygon series class
		 */
		seriesTypes.polygon = extendClass(seriesTypes.scatter, {
			type: 'polygon',
			fillGraph: true,
			// Close all segments
			getSegmentPath: function (segment) {
				return Series.prototype.getSegmentPath.call(this, segment).concat('z');
			},
			drawGraph: Series.prototype.drawGraph,
			drawLegendSymbol: Highcharts.LegendSymbolMixin.drawRectangle
		});
		/* ****************************************************************************
		 * Start Bubble series code											          *
		 *****************************************************************************/

		// 1 - set default options
		defaultPlotOptions.bubble = merge(defaultPlotOptions.scatter, {
			dataLabels: {
				formatter: function () { // #2945
					return this.point.z;
				},
				inside: true,
				verticalAlign: 'middle'
			},
			// displayNegative: true,
			marker: {
				// fillOpacity: 0.5,
				lineColor: null, // inherit from series.color
				lineWidth: 1
			},
			minSize: 8,
			maxSize: '20%',
			// negativeColor: null,
			// sizeBy: 'area'
			states: {
				hover: {
					halo: {
						size: 5
					}
				}
			},
			tooltip: {
				pointFormat: '({point.x}, {point.y}), Size: {point.z}'
			},
			turboThreshold: 0,
			zThreshold: 0,
			zoneAxis: 'z'
		});

		var BubblePoint = extendClass(Point, {
			haloPath: function () {
				return Point.prototype.haloPath.call(this, this.shapeArgs.r + this.series.options.states.hover.halo.size);
			},
			ttBelow: false
		});

		// 2 - Create the series object
		seriesTypes.bubble = extendClass(seriesTypes.scatter, {
			type: 'bubble',
			pointClass: BubblePoint,
			pointArrayMap: ['y', 'z'],
			parallelArrays: ['x', 'y', 'z'],
			trackerGroups: ['group', 'dataLabelsGroup'],
			bubblePadding: true,
			zoneAxis: 'z',
			
			/**
			 * Mapping between SVG attributes and the corresponding options
			 */
			pointAttrToOptions: { 
				stroke: 'lineColor',
				'stroke-width': 'lineWidth',
				fill: 'fillColor'
			},
			
			/**
			 * Apply the fillOpacity to all fill positions
			 */
			applyOpacity: function (fill) {
				var markerOptions = this.options.marker,
					fillOpacity = pick(markerOptions.fillOpacity, 0.5);
				
				// When called from Legend.colorizeItem, the fill isn't predefined
				fill = fill || markerOptions.fillColor || this.color; 
				
				if (fillOpacity !== 1) {
					fill = Color(fill).setOpacity(fillOpacity).get('rgba');
				}
				return fill;
			},
			
			/**
			 * Extend the convertAttribs method by applying opacity to the fill
			 */
			convertAttribs: function () {
				var obj = Series.prototype.convertAttribs.apply(this, arguments);
				
				obj.fill = this.applyOpacity(obj.fill);
				
				return obj;
			},

			/**
			 * Get the radius for each point based on the minSize, maxSize and each point's Z value. This
			 * must be done prior to Series.translate because the axis needs to add padding in 
			 * accordance with the point sizes.
			 */
			getRadii: function (zMin, zMax, minSize, maxSize) {
				var len,
					i,
					pos,
					zData = this.zData,
					radii = [],
					sizeByArea = this.options.sizeBy !== 'width',
					zRange = zMax - zMin;

				// Set the shape type and arguments to be picked up in drawPoints
				for (i = 0, len = zData.length; i < len; i++) {
					// Issue #4419 - if value is less than zMin, push a radius that's always smaller than the minimum size
					if (zData[i] < zMin) {
						radii.push(minSize / 2 - 1);
					} else {
						// Relative size, a number between 0 and 1
						pos = zRange > 0 ? (zData[i] - zMin) / zRange : 0.5; 
						
						if (sizeByArea && pos >= 0) {
							pos = Math.sqrt(pos);
						}
				
						radii.push(math.ceil(minSize + pos * (maxSize - minSize)) / 2);
					}
				}
				this.radii = radii;
			},
			
			/**
			 * Perform animation on the bubbles
			 */
			animate: function (init) {
				var animation = this.options.animation;
				
				if (!init) { // run the animation
					each(this.points, function (point) {
						var graphic = point.graphic,
							shapeArgs = point.shapeArgs;

						if (graphic && shapeArgs) {
							// start values
							graphic.attr('r', 1);

							// animate
							graphic.animate({
								r: shapeArgs.r
							}, animation);
						}
					});

					// delete this function to allow it only once
					this.animate = null;
				}
			},
			
			/**
			 * Extend the base translate method to handle bubble size
			 */
			translate: function () {
				
				var i,
					data = this.data,
					point,
					radius,
					radii = this.radii;
				
				// Run the parent method
				seriesTypes.scatter.prototype.translate.call(this);
				
				// Set the shape type and arguments to be picked up in drawPoints
				i = data.length;
				
				while (i--) {
					point = data[i];
					radius = radii ? radii[i] : 0; // #1737
					
					if (radius >= this.minPxSize / 2) {
						// Shape arguments
						point.shapeType = 'circle';
						point.shapeArgs = {
							x: point.plotX,
							y: point.plotY,
							r: radius
						};
						
						// Alignment box for the data label
						point.dlBox = {
							x: point.plotX - radius,
							y: point.plotY - radius,
							width: 2 * radius,
							height: 2 * radius
						};
					} else { // below zThreshold
						point.shapeArgs = point.plotY = point.dlBox = UNDEFINED; // #1691
					}
				}
			},
			
			/**
			 * Get the series' symbol in the legend
			 * 
			 * @param {Object} legend The legend object
			 * @param {Object} item The series (this) or point
			 */
			drawLegendSymbol: function (legend, item) {
				var radius = pInt(legend.itemStyle.fontSize) / 2;
				
				item.legendSymbol = this.chart.renderer.circle(
					radius,
					legend.baseline - radius,
					radius
				).attr({
					zIndex: 3
				}).add(item.legendGroup);
				item.legendSymbol.isMarker = true;	
				
			},
				
			drawPoints: seriesTypes.column.prototype.drawPoints,
			alignDataLabel: seriesTypes.column.prototype.alignDataLabel,
			buildKDTree: noop,
			applyZones: noop
		});

		/**
		 * Add logic to pad each axis with the amount of pixels
		 * necessary to avoid the bubbles to overflow.
		 */
		Axis.prototype.beforePadding = function () {
			var axis = this,
				axisLength = this.len,
				chart = this.chart,
				pxMin = 0, 
				pxMax = axisLength,
				isXAxis = this.isXAxis,
				dataKey = isXAxis ? 'xData' : 'yData',
				min = this.min,
				extremes = {},
				smallestSize = math.min(chart.plotWidth, chart.plotHeight),
				zMin = Number.MAX_VALUE,
				zMax = -Number.MAX_VALUE,
				range = this.max - min,
				transA = axisLength / range,
				activeSeries = [];

			// Handle padding on the second pass, or on redraw
			each(this.series, function (series) {

				var seriesOptions = series.options,
					zData;

				if (series.bubblePadding && (series.visible || !chart.options.chart.ignoreHiddenSeries)) {

					// Correction for #1673
					axis.allowZoomOutside = true;

					// Cache it
					activeSeries.push(series);

					if (isXAxis) { // because X axis is evaluated first
					
						// For each series, translate the size extremes to pixel values
						each(['minSize', 'maxSize'], function (prop) {
							var length = seriesOptions[prop],
								isPercent = /%$/.test(length);
							
							length = pInt(length);
							extremes[prop] = isPercent ?
								smallestSize * length / 100 :
								length;
							
						});
						series.minPxSize = extremes.minSize;
						series.maxPxSize = extremes.maxSize;
						
						// Find the min and max Z
						zData = series.zData;
						if (zData.length) { // #1735
							zMin = pick(seriesOptions.zMin, math.min(
								zMin,
								math.max(
									arrayMin(zData), 
									seriesOptions.displayNegative === false ? seriesOptions.zThreshold : -Number.MAX_VALUE
								)
							));
							zMax = pick(seriesOptions.zMax, math.max(zMax, arrayMax(zData)));
						}
					}
				}
			});

			each(activeSeries, function (series) {

				var data = series[dataKey],
					i = data.length,
					radius;

				if (isXAxis) {
					series.getRadii(zMin, zMax, series.minPxSize, series.maxPxSize);
				}
				
				if (range > 0) {
					while (i--) {
						if (typeof data[i] === 'number') {
							radius = series.radii[i];
							pxMin = Math.min(((data[i] - min) * transA) - radius, pxMin);
							pxMax = Math.max(((data[i] - min) * transA) + radius, pxMax);
						}
					}
				}
			});
			

			if (activeSeries.length && range > 0 && !this.isLog) {
				pxMax -= axisLength;
				transA *= (axisLength + pxMin - pxMax) / axisLength;
				each([['min', 'userMin', pxMin], ['max', 'userMax', pxMax]], function (keys) {
					if (pick(axis.options[keys[0]], axis[keys[1]]) === UNDEFINED) {
						axis[keys[0]] += keys[2] / transA; 
					}
				});
			}
		};

		/* ****************************************************************************
		 * End Bubble series code                                                     *
		 *****************************************************************************/

		(function () {

			/**
			 * Extensions for polar charts. Additionally, much of the geometry required for polar charts is
			 * gathered in RadialAxes.js.
			 * 
			 */

			var seriesProto = Series.prototype,
				pointerProto = Pointer.prototype,
				colProto;

			/**
			 * Search a k-d tree by the point angle, used for shared tooltips in polar charts
			 */
			seriesProto.searchPointByAngle = function (e) {
				var series = this,
					chart = series.chart,
					xAxis = series.xAxis,
					center = xAxis.pane.center,
					plotX = e.chartX - center[0] - chart.plotLeft,
					plotY = e.chartY - center[1] - chart.plotTop;

				return this.searchKDTree({
					clientX: 180 + (Math.atan2(plotX, plotY) * (-180 / Math.PI))
				});

			};
			
			/**
			 * Wrap the buildKDTree function so that it searches by angle (clientX) in case of shared tooltip,
			 * and by two dimensional distance in case of non-shared.
			 */
			wrap(seriesProto, 'buildKDTree', function (proceed) {
				if (this.chart.polar) {
					if (this.kdByAngle) {
						this.searchPoint = this.searchPointByAngle;
					} else {
						this.kdDimensions = 2;
					}
				}
				proceed.apply(this);
			});

			/**
			 * Translate a point's plotX and plotY from the internal angle and radius measures to 
			 * true plotX, plotY coordinates
			 */
			seriesProto.toXY = function (point) {
				var xy,
					chart = this.chart,
					plotX = point.plotX,
					plotY = point.plotY,
					clientX;
			
				// Save rectangular plotX, plotY for later computation
				point.rectPlotX = plotX;
				point.rectPlotY = plotY;
			
				// Find the polar plotX and plotY
				xy = this.xAxis.postTranslate(point.plotX, this.yAxis.len - plotY);
				point.plotX = point.polarPlotX = xy.x - chart.plotLeft;
				point.plotY = point.polarPlotY = xy.y - chart.plotTop;

				// If shared tooltip, record the angle in degrees in order to align X points. Otherwise,
				// use a standard k-d tree to get the nearest point in two dimensions.
				if (this.kdByAngle) {
					clientX = ((plotX / Math.PI * 180) + this.xAxis.pane.options.startAngle) % 360;
					if (clientX < 0) { // #2665
						clientX += 360;
					}
					point.clientX = clientX;
				} else {
					point.clientX = point.plotX;
				}
			};

			/**
			 * Add some special init logic to areas and areasplines
			 */
			function initArea(proceed, chart, options) {
				proceed.call(this, chart, options);
				if (this.chart.polar) {
				
					/**
					 * Overridden method to close a segment path. While in a cartesian plane the area 
					 * goes down to the threshold, in the polar chart it goes to the center.
					 */
					this.closeSegment = function (path) {
						var center = this.xAxis.center;
						path.push(
							'L',
							center[0],
							center[1]
						);			
					};
				
					// Instead of complicated logic to draw an area around the inner area in a stack,
					// just draw it behind
					this.closedStacks = true;
				}
			}

		 
			if (seriesTypes.area) {		
				wrap(seriesTypes.area.prototype, 'init', initArea);	
			}
			if (seriesTypes.areaspline) {		
				wrap(seriesTypes.areaspline.prototype, 'init', initArea);			
			}	

			if (seriesTypes.spline) {
				/**
				 * Overridden method for calculating a spline from one point to the next
				 */
				wrap(seriesTypes.spline.prototype, 'getPointSpline', function (proceed, segment, point, i) {
			
					var ret,
						smoothing = 1.5, // 1 means control points midway between points, 2 means 1/3 from the point, 3 is 1/4 etc;
						denom = smoothing + 1,
						plotX, 
						plotY,
						lastPoint,
						nextPoint,
						lastX,
						lastY,
						nextX,
						nextY,
						leftContX,
						leftContY,
						rightContX,
						rightContY,
						distanceLeftControlPoint,
						distanceRightControlPoint,
						leftContAngle,
						rightContAngle,
						jointAngle;
				
				
					if (this.chart.polar) {
				
						plotX = point.plotX;
						plotY = point.plotY;
						lastPoint = segment[i - 1];
						nextPoint = segment[i + 1];
					
						// Connect ends
						if (this.connectEnds) {
							if (!lastPoint) {
								lastPoint = segment[segment.length - 2]; // not the last but the second last, because the segment is already connected
							}
							if (!nextPoint) {
								nextPoint = segment[1];
							}	
						}

						// find control points
						if (lastPoint && nextPoint) {
				
							lastX = lastPoint.plotX;
							lastY = lastPoint.plotY;
							nextX = nextPoint.plotX;
							nextY = nextPoint.plotY;
							leftContX = (smoothing * plotX + lastX) / denom;
							leftContY = (smoothing * plotY + lastY) / denom;
							rightContX = (smoothing * plotX + nextX) / denom;
							rightContY = (smoothing * plotY + nextY) / denom;
							distanceLeftControlPoint = Math.sqrt(Math.pow(leftContX - plotX, 2) + Math.pow(leftContY - plotY, 2));
							distanceRightControlPoint = Math.sqrt(Math.pow(rightContX - plotX, 2) + Math.pow(rightContY - plotY, 2));
							leftContAngle = Math.atan2(leftContY - plotY, leftContX - plotX);
							rightContAngle = Math.atan2(rightContY - plotY, rightContX - plotX);
							jointAngle = (Math.PI / 2) + ((leftContAngle + rightContAngle) / 2);
						
						
							// Ensure the right direction, jointAngle should be in the same quadrant as leftContAngle
							if (Math.abs(leftContAngle - jointAngle) > Math.PI / 2) {
								jointAngle -= Math.PI;
							}
					
							// Find the corrected control points for a spline straight through the point
							leftContX = plotX + Math.cos(jointAngle) * distanceLeftControlPoint;
							leftContY = plotY + Math.sin(jointAngle) * distanceLeftControlPoint;
							rightContX = plotX + Math.cos(Math.PI + jointAngle) * distanceRightControlPoint;
							rightContY = plotY + Math.sin(Math.PI + jointAngle) * distanceRightControlPoint;
					
							// Record for drawing in next point
							point.rightContX = rightContX;
							point.rightContY = rightContY;

						}
				
				
						// moveTo or lineTo
						if (!i) {
							ret = ['M', plotX, plotY];
						} else { // curve from last point to this
							ret = [
								'C',
								lastPoint.rightContX || lastPoint.plotX,
								lastPoint.rightContY || lastPoint.plotY,
								leftContX || plotX,
								leftContY || plotY,
								plotX,
								plotY
							];
							lastPoint.rightContX = lastPoint.rightContY = null; // reset for updating series later
						}
				
				
					} else {
						ret = proceed.call(this, segment, point, i);
					}
					return ret;
				});
			}

			/**
			 * Extend translate. The plotX and plotY values are computed as if the polar chart were a
			 * cartesian plane, where plotX denotes the angle in radians and (yAxis.len - plotY) is the pixel distance from
			 * center. 
			 */
			wrap(seriesProto, 'translate', function (proceed) {
				var chart = this.chart,
					points,
					i;

				// Run uber method
				proceed.call(this);
			
				// Postprocess plot coordinates
				if (chart.polar) {
					this.kdByAngle = chart.tooltip && chart.tooltip.shared;
			
					if (!this.preventPostTranslate) {
						points = this.points;
						i = points.length;

						while (i--) {
							// Translate plotX, plotY from angle and radius to true plot coordinates
							this.toXY(points[i]);
						}
					}
				}
			});

			/** 
			 * Extend getSegmentPath to allow connecting ends across 0 to provide a closed circle in 
			 * line-like series.
			 */
			wrap(seriesProto, 'getSegmentPath', function (proceed, segment) {
				
				var points = this.points;
			
				// Connect the path
				if (this.chart.polar && this.options.connectEnds !== false && 
						segment[segment.length - 1] === points[points.length - 1] && points[0].y !== null) {
					this.connectEnds = true; // re-used in splines
					segment = [].concat(segment, [points[0]]);
				}
			
				// Run uber method
				return proceed.call(this, segment);
			
			});


			function polarAnimate(proceed, init) {
				var chart = this.chart,
					animation = this.options.animation,
					group = this.group,
					markerGroup = this.markerGroup,
					center = this.xAxis.center,
					plotLeft = chart.plotLeft,
					plotTop = chart.plotTop,
					attribs;

				// Specific animation for polar charts
				if (chart.polar) {
				
					// Enable animation on polar charts only in SVG. In VML, the scaling is different, plus animation
					// would be so slow it would't matter.
					if (chart.renderer.isSVG) {

						if (animation === true) {
							animation = {};
						}
			
						// Initialize the animation
						if (init) {
						
							// Scale down the group and place it in the center
							attribs = {
								translateX: center[0] + plotLeft,
								translateY: center[1] + plotTop,
								scaleX: 0.001, // #1499
								scaleY: 0.001
							};
							
							group.attr(attribs);
							if (markerGroup) {
								//markerGroup.attrSetters = group.attrSetters;
								markerGroup.attr(attribs);
							}
						
						// Run the animation
						} else {
							attribs = {
								translateX: plotLeft,
								translateY: plotTop,
								scaleX: 1,
								scaleY: 1
							};
							group.animate(attribs, animation);
							if (markerGroup) {
								markerGroup.animate(attribs, animation);
							}
						
							// Delete this function to allow it only once
							this.animate = null;
						}
					}
			
				// For non-polar charts, revert to the basic animation
				} else {
					proceed.call(this, init);
				} 
			}

			// Define the animate method for regular series
			wrap(seriesProto, 'animate', polarAnimate);


			if (seriesTypes.column) {

				colProto = seriesTypes.column.prototype;
				/**
				* Define the animate method for columnseries
				*/
				wrap(colProto, 'animate', polarAnimate);


				/**
				 * Extend the column prototype's translate method
				 */
				wrap(colProto, 'translate', function (proceed) {
				
					var xAxis = this.xAxis,
						len = this.yAxis.len,
						center = xAxis.center,
						startAngleRad = xAxis.startAngleRad,
						renderer = this.chart.renderer,
						start,
						points,
						point,
						i;
			
					this.preventPostTranslate = true;
			
					// Run uber method
					proceed.call(this);
			
					// Postprocess plot coordinates
					if (xAxis.isRadial) {
						points = this.points;
						i = points.length;
						while (i--) {
							point = points[i];
							start = point.barX + startAngleRad;
							point.shapeType = 'path';
							point.shapeArgs = {
								d: renderer.symbols.arc(
									center[0],
									center[1],
									len - point.plotY,
									null, 
									{
										start: start,
										end: start + point.pointWidth,
										innerR: len - pick(point.yBottom, len)
									}
								)
							};
							// Provide correct plotX, plotY for tooltip
							this.toXY(point); 
							point.tooltipPos = [point.plotX, point.plotY];
							point.ttBelow = point.plotY > center[1];
						}
					}
				});


				/**
				 * Align column data labels outside the columns. #1199.
				 */
				wrap(colProto, 'alignDataLabel', function (proceed, point, dataLabel, options, alignTo, isNew) {
			
					if (this.chart.polar) {
						var angle = point.rectPlotX / Math.PI * 180,
							align,
							verticalAlign;
				
						// Align nicely outside the perimeter of the columns
						if (options.align === null) {
							if (angle > 20 && angle < 160) {
								align = 'left'; // right hemisphere
							} else if (angle > 200 && angle < 340) {
								align = 'right'; // left hemisphere
							} else {
								align = 'center'; // top or bottom
							}
							options.align = align;
						}
						if (options.verticalAlign === null) {
							if (angle < 45 || angle > 315) {
								verticalAlign = 'bottom'; // top part
							} else if (angle > 135 && angle < 225) {
								verticalAlign = 'top'; // bottom part
							} else {
								verticalAlign = 'middle'; // left or right
							}
							options.verticalAlign = verticalAlign;
						}
				
						seriesProto.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);
					} else {
						proceed.call(this, point, dataLabel, options, alignTo, isNew);
					}
			
				});		
			}

			/**
			 * Extend getCoordinates to prepare for polar axis values
			 */
			wrap(pointerProto, 'getCoordinates', function (proceed, e) {
				var chart = this.chart,
					ret = {
						xAxis: [],
						yAxis: []
					};
			
				if (chart.polar) {	

					each(chart.axes, function (axis) {
						var isXAxis = axis.isXAxis,
							center = axis.center,
							x = e.chartX - center[0] - chart.plotLeft,
							y = e.chartY - center[1] - chart.plotTop;
					
						ret[isXAxis ? 'xAxis' : 'yAxis'].push({
							axis: axis,
							value: axis.translate(
								isXAxis ?
									Math.PI - Math.atan2(x, y) : // angle 
									Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)), // distance from center
								true
							)
						});
					});
				
				} else {
					ret = proceed.call(this, e);
				}
			
				return ret;
			});

		}());

		}(Highcharts));


		/*** EXPORTS FROM exports-loader ***/
		module.exports = Highcharts

	/***/ }

	/******/ })
	});
	;

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(1));
		else if(typeof define === 'function' && define.amd)
			define(["react"], factory);
		else if(typeof exports === 'object')
			exports["Highcharts"] = factory(require("react"));
		else
			root["Highcharts"] = factory(root["react"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_5__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(1);


	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {'use strict';

		global.HighchartsAdapter = __webpack_require__(2);
		var Highcharts = __webpack_require__(3);
		var chartFactory = __webpack_require__(4);
		module.exports = chartFactory(Highcharts, 'Chart');
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 2 */
	/***/ function(module, exports) {

		/**
		 * @license Highcharts JS v4.1.8 (2015-08-20)
		 *
		 * Standalone Highcharts Framework
		 *
		 * License: MIT License
		 */


		/*global Highcharts */
		var HighchartsAdapter = (function () {

		var UNDEFINED,
			doc = document,
			emptyArray = [],
			timers = [],
			timerId,
			animSetters = {},
			Fx;

		Math.easeInOutSine = function (t, b, c, d) {
			return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
		};



		/**
		 * Extend given object with custom events
		 */
		function augment(obj) {
			function removeOneEvent(el, type, fn) {
				el.removeEventListener(type, fn, false);
			}

			function IERemoveOneEvent(el, type, fn) {
				fn = el.HCProxiedMethods[fn.toString()];
				el.detachEvent('on' + type, fn);
			}

			function removeAllEvents(el, type) {
				var events = el.HCEvents,
					remove,
					types,
					len,
					n;

				if (el.removeEventListener) {
					remove = removeOneEvent;
				} else if (el.attachEvent) {
					remove = IERemoveOneEvent;
				} else {
					return; // break on non-DOM events
				}


				if (type) {
					types = {};
					types[type] = true;
				} else {
					types = events;
				}

				for (n in types) {
					if (events[n]) {
						len = events[n].length;
						while (len--) {
							remove(el, n, events[n][len]);
						}
					}
				}
			}

			if (!obj.HCExtended) {
				Highcharts.extend(obj, {
					HCExtended: true,

					HCEvents: {},

					bind: function (name, fn) {
						var el = this,
							events = this.HCEvents,
							wrappedFn;

						// handle DOM events in modern browsers
						if (el.addEventListener) {
							el.addEventListener(name, fn, false);

						// handle old IE implementation
						} else if (el.attachEvent) {
							
							wrappedFn = function (e) {
								e.target = e.srcElement || window; // #2820
								fn.call(el, e);
							};

							if (!el.HCProxiedMethods) {
								el.HCProxiedMethods = {};
							}

							// link wrapped fn with original fn, so we can get this in removeEvent
							el.HCProxiedMethods[fn.toString()] = wrappedFn;

							el.attachEvent('on' + name, wrappedFn);
						}


						if (events[name] === UNDEFINED) {
							events[name] = [];
						}

						events[name].push(fn);
					},

					unbind: function (name, fn) {
						var events,
							index;

						if (name) {
							events = this.HCEvents[name] || [];
							if (fn) {
								index = HighchartsAdapter.inArray(fn, events);
								if (index > -1) {
									events.splice(index, 1);
									this.HCEvents[name] = events;
								}
								if (this.removeEventListener) {
									removeOneEvent(this, name, fn);
								} else if (this.attachEvent) {
									IERemoveOneEvent(this, name, fn);
								}
							} else {
								removeAllEvents(this, name);
								this.HCEvents[name] = [];
							}
						} else {
							removeAllEvents(this);
							this.HCEvents = {};
						}
					},

					trigger: function (name, args) {
						var events = this.HCEvents[name] || [],
							target = this,
							len = events.length,
							i,
							preventDefault,
							fn;

						// Attach a simple preventDefault function to skip default handler if called
						preventDefault = function () {
							args.defaultPrevented = true;
						};
						
						for (i = 0; i < len; i++) {
							fn = events[i];

							// args is never null here
							if (args.stopped) {
								return;
							}

							args.preventDefault = preventDefault;
							args.target = target;

							// If the type is not set, we're running a custom event (#2297). If it is set,
							// we're running a browser event, and setting it will cause en error in
							// IE8 (#2465).
							if (!args.type) {
								args.type = name;
							}
							

							
							// If the event handler return false, prevent the default handler from executing
							if (fn.call(this, args) === false) {
								args.preventDefault();
							}
						}
					}
				});
			}

			return obj;
		}


		return {

			/**
			 * Initialize the adapter. This is run once as Highcharts is first run.
			 */
			init: function (pathAnim) {

				/**
				 * Compatibility section to add support for legacy IE. This can be removed if old IE 
				 * support is not needed.
				 */
				if (!doc.defaultView) {
					this._getStyle = function (el, prop) {
						var val;
						if (el.style[prop]) {
							return el.style[prop];
						} else {
							if (prop === 'opacity') {
								prop = 'filter';
							}
							/*jslint unparam: true*/
							val = el.currentStyle[prop.replace(/\-(\w)/g, function (a, b) { return b.toUpperCase(); })];
							if (prop === 'filter') {
								val = val.replace(
									/alpha\(opacity=([0-9]+)\)/, 
									function (a, b) { 
										return b / 100; 
									}
								);
							}
							/*jslint unparam: false*/
							return val === '' ? 1 : val;
						} 
					};
					this.adapterRun = function (elem, method) {
						var alias = { width: 'clientWidth', height: 'clientHeight' }[method];

						if (alias) {
							elem.style.zoom = 1;
							return elem[alias] - 2 * parseInt(HighchartsAdapter._getStyle(elem, 'padding'), 10);
						}
					};
				}

				if (!Array.prototype.forEach) {
					this.each = function (arr, fn) { // legacy
						var i = 0, 
							len = arr.length;
						for (; i < len; i++) {
							if (fn.call(arr[i], arr[i], i, arr) === false) {
								return i;
							}
						}
					};
				}

				if (!Array.prototype.indexOf) {
					this.inArray = function (item, arr) {
						var len, 
							i = 0;

						if (arr) {
							len = arr.length;
							
							for (; i < len; i++) {
								if (arr[i] === item) {
									return i;
								}
							}
						}

						return -1;
					};
				}

				if (!Array.prototype.filter) {
					this.grep = function (elements, callback) {
						var ret = [],
							i = 0,
							length = elements.length;

						for (; i < length; i++) {
							if (!!callback(elements[i], i)) {
								ret.push(elements[i]);
							}
						}

						return ret;
					};
				}

				//--- End compatibility section ---


				/**
				 * Start of animation specific code
				 */
				Fx = function (elem, options, prop) {
					this.options = options;
					this.elem = elem;
					this.prop = prop;
				};
				Fx.prototype = {
					
					update: function () {
						var styles,
							paths = this.paths,
							elem = this.elem,
							elemelem = elem.element; // if destroyed, it is null

						// Animation setter defined from outside
						if (animSetters[this.prop]) {
							animSetters[this.prop](this);

						// Animating a path definition on SVGElement
						} else if (paths && elemelem) {
							elem.attr('d', pathAnim.step(paths[0], paths[1], this.now, this.toD));

						// Other animations on SVGElement
						} else if (elem.attr) {
							if (elemelem) {
								elem.attr(this.prop, this.now);
							}

						// HTML styles
						} else {
							styles = {};
							styles[this.prop] = this.now + this.unit;
							Highcharts.css(elem, styles);
						}
						
						if (this.options.step) {
							this.options.step.call(this.elem, this.now, this);
						}

					},
					custom: function (from, to, unit) {
						var self = this,
							t = function (gotoEnd) {
								return self.step(gotoEnd);
							},
							i;

						this.startTime = +new Date();
						this.start = from;
						this.end = to;
						this.unit = unit;
						this.now = this.start;
						this.pos = this.state = 0;

						t.elem = this.elem;

						if (t() && timers.push(t) === 1) {
							timerId = setInterval(function () {
								
								for (i = 0; i < timers.length; i++) {
									if (!timers[i]()) {
										timers.splice(i--, 1);
									}
								}

								if (!timers.length) {
									clearInterval(timerId);
								}
							}, 13);
						}
					},
					
					step: function (gotoEnd) {
						var t = +new Date(),
							ret,
							done,
							options = this.options,
							elem = this.elem,
							i;
						
						if (elem.stopAnimation || (elem.attr && !elem.element)) { // #2616, element including flag is destroyed
							ret = false;

						} else if (gotoEnd || t >= options.duration + this.startTime) {
							this.now = this.end;
							this.pos = this.state = 1;
							this.update();

							this.options.curAnim[this.prop] = true;

							done = true;
							for (i in options.curAnim) {
								if (options.curAnim[i] !== true) {
									done = false;
								}
							}

							if (done) {
								if (options.complete) {
									options.complete.call(elem);
								}
							}
							ret = false;

						} else {
							var n = t - this.startTime;
							this.state = n / options.duration;
							this.pos = options.easing(n, 0, 1, options.duration);
							this.now = this.start + ((this.end - this.start) * this.pos);
							this.update();
							ret = true;
						}
						return ret;
					}
				};

				/**
				 * The adapter animate method
				 */
				this.animate = function (el, prop, opt) {
					var start,
						unit = '',
						end,
						fx,
						args,
						name,
						PX = 'px';

					el.stopAnimation = false; // ready for new

					if (typeof opt !== 'object' || opt === null) {
						args = arguments;
						opt = {
							duration: args[2],
							easing: args[3],
							complete: args[4]
						};
					}
					if (typeof opt.duration !== 'number') {
						opt.duration = 400;
					}
					opt.easing = Math[opt.easing] || Math.easeInOutSine;
					opt.curAnim = Highcharts.extend({}, prop);
					
					for (name in prop) {
						fx = new Fx(el, opt, name);
						end = null;
						
						if (name === 'd') {
							fx.paths = pathAnim.init(
								el,
								el.d,
								prop.d
							);
							fx.toD = prop.d;
							start = 0;
							end = 1;
						} else if (el.attr) {
							start = el.attr(name);
						} else {
							start = parseFloat(HighchartsAdapter._getStyle(el, name)) || 0;
							if (name !== 'opacity') {
								unit = PX;
							}
						}
			
						if (!end) {
							end = prop[name];
						}
						if (end.match && end.match(PX)) {
							end = end.replace(/px/g, ''); // #4351
						}
						fx.custom(start, end, unit);
					}	
				};
			},

			/**
			 * Internal method to return CSS value for given element and property
			 */
			_getStyle: function (el, prop) {
				return window.getComputedStyle(el, undefined).getPropertyValue(prop);
			},

			/**
			 * Add an animation setter for a specific property
			 */
			addAnimSetter: function (prop, fn) {
				animSetters[prop] = fn;
			},

			/**
			 * Downloads a script and executes a callback when done.
			 * @param {String} scriptLocation
			 * @param {Function} callback
			 */
			getScript: function (scriptLocation, callback) {
				// We cannot assume that Assets class from mootools-more is available so instead insert a script tag to download script.
				var head = doc.getElementsByTagName('head')[0],
					script = doc.createElement('script');

				script.type = 'text/javascript';
				script.src = scriptLocation;
				script.onload = callback;

				head.appendChild(script);
			},

			/**
			 * Return the index of an item in an array, or -1 if not found
			 */
			inArray: function (item, arr) {
				return arr.indexOf ? arr.indexOf(item) : emptyArray.indexOf.call(arr, item);
			},


			/**
			 * A direct link to adapter methods
			 */
			adapterRun: function (elem, method) {
				return parseInt(HighchartsAdapter._getStyle(elem, method), 10);
			},

			/**
			 * Filter an array
			 */
			grep: function (elements, callback) {
				return emptyArray.filter.call(elements, callback);
			},

			/**
			 * Map an array
			 */
			map: function (arr, fn) {
				var results = [], i = 0, len = arr.length;

				for (; i < len; i++) {
					results[i] = fn.call(arr[i], arr[i], i, arr);
				}

				return results;
			},

			/**
			 * Get the element's offset position, corrected by overflow:auto. Loosely based on jQuery's offset method.
			 */
			offset: function (el) {
				var docElem = document.documentElement,
					box = el.getBoundingClientRect();

				return {
					top: box.top  + (window.pageYOffset || docElem.scrollTop)  - (docElem.clientTop  || 0),
					left: box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
				};
			},

			/**
			 * Add an event listener
			 */
			addEvent: function (el, type, fn) {
				augment(el).bind(type, fn);
			},

			/**
			 * Remove event added with addEvent
			 */
			removeEvent: function (el, type, fn) {
				augment(el).unbind(type, fn);
			},

			/**
			 * Fire an event on a custom object
			 */
			fireEvent: function (el, type, eventArguments, defaultFunction) {
				var e;

				if (doc.createEvent && (el.dispatchEvent || el.fireEvent)) {
					e = doc.createEvent('Events');
					e.initEvent(type, true, true);
					e.target = el;

					Highcharts.extend(e, eventArguments);

					if (el.dispatchEvent) {
						el.dispatchEvent(e);
					} else {
						el.fireEvent(type, e);
					}

				} else if (el.HCExtended === true) {
					eventArguments = eventArguments || {};
					el.trigger(type, eventArguments);
				}

				if (eventArguments && eventArguments.defaultPrevented) {
					defaultFunction = null;
				}

				if (defaultFunction) {
					defaultFunction(eventArguments);
				}
			},

			washMouseEvent: function (e) {
				return e;
			},


			/**
			 * Stop running animation
			 */
			stop: function (el) {
				el.stopAnimation = true;
			},

			/**
			 * Utility for iterating over an array. Parameters are reversed compared to jQuery.
			 * @param {Array} arr
			 * @param {Function} fn
			 */
			each: function (arr, fn) { // modern browsers
				return Array.prototype.forEach.call(arr, fn);
			}
		};
		}());


		/*** EXPORTS FROM exports-loader ***/
		module.exports = HighchartsAdapter

	/***/ },
	/* 3 */
	/***/ function(module, exports) {

		// ==ClosureCompiler==
		// @compilation_level SIMPLE_OPTIMIZATIONS

		/**
		 * @license Highcharts JS v4.1.8 (2015-08-20)
		 *
		 * (c) 2009-2014 Torstein Honsi
		 *
		 * License: www.highcharts.com/license
		 */

		// JSLint options:
		/*global Highcharts, HighchartsAdapter, document, window, navigator, setInterval, clearInterval, clearTimeout, setTimeout, location, jQuery, $, console, each, grep */
		/*jslint ass: true, sloppy: true, forin: true, plusplus: true, nomen: true, vars: true, regexp: true, newcap: true, browser: true, continue: true, white: true */
		(function () {
		// encapsulated variables
		var UNDEFINED,
			doc = document,
			win = window,
			math = Math,
			mathRound = math.round,
			mathFloor = math.floor,
			mathCeil = math.ceil,
			mathMax = math.max,
			mathMin = math.min,
			mathAbs = math.abs,
			mathCos = math.cos,
			mathSin = math.sin,
			mathPI = math.PI,
			deg2rad = mathPI * 2 / 360,


			// some variables
			userAgent = navigator.userAgent,
			isOpera = win.opera,
			isIE = /(msie|trident)/i.test(userAgent) && !isOpera,
			docMode8 = doc.documentMode === 8,
			isWebKit = /AppleWebKit/.test(userAgent),
			isFirefox = /Firefox/.test(userAgent),
			isTouchDevice = /(Mobile|Android|Windows Phone)/.test(userAgent),
			SVG_NS = 'http://www.w3.org/2000/svg',
			hasSVG = !!doc.createElementNS && !!doc.createElementNS(SVG_NS, 'svg').createSVGRect,
			hasBidiBug = isFirefox && parseInt(userAgent.split('Firefox/')[1], 10) < 4, // issue #38
			useCanVG = !hasSVG && !isIE && !!doc.createElement('canvas').getContext,
			Renderer,
			hasTouch,
			symbolSizes = {},
			idCounter = 0,
			garbageBin,
			defaultOptions,
			dateFormat, // function
			pathAnim,
			timeUnits,
			noop = function () { return UNDEFINED; },
			charts = [],
			chartCount = 0,
			PRODUCT = 'Highcharts',
			VERSION = '4.1.8',

			// some constants for frequently used strings
			DIV = 'div',
			ABSOLUTE = 'absolute',
			RELATIVE = 'relative',
			HIDDEN = 'hidden',
			PREFIX = 'highcharts-',
			VISIBLE = 'visible',
			PX = 'px',
			NONE = 'none',
			M = 'M',
			L = 'L',
			numRegex = /^[0-9]+$/,
			NORMAL_STATE = '',
			HOVER_STATE = 'hover',
			SELECT_STATE = 'select',
			marginNames = ['plotTop', 'marginRight', 'marginBottom', 'plotLeft'],
			
			// Object for extending Axis
			AxisPlotLineOrBandExtension,

			// constants for attributes
			STROKE_WIDTH = 'stroke-width',

			// time methods, changed based on whether or not UTC is used
			Date,  // Allow using a different Date class
			makeTime,
			timezoneOffset,
			getTimezoneOffset,
			getMinutes,
			getHours,
			getDay,
			getDate,
			getMonth,
			getFullYear,
			setMilliseconds,
			setSeconds,
			setMinutes,
			setHours,
			setDate,
			setMonth,
			setFullYear,


			// lookup over the types and the associated classes
			seriesTypes = {},
			Highcharts;

		// The Highcharts namespace
		Highcharts = win.Highcharts = win.Highcharts ? error(16, true) : {};
		Highcharts.seriesTypes = seriesTypes;

		/**
		 * Extend an object with the members of another
		 * @param {Object} a The object to be extended
		 * @param {Object} b The object to add to the first one
		 */
		var extend = Highcharts.extend = function (a, b) {
			var n;
			if (!a) {
				a = {};
			}
			for (n in b) {
				a[n] = b[n];
			}
			return a;
		};
		/**
		 * Deep merge two or more objects and return a third object. If the first argument is
		 * true, the contents of the second object is copied into the first object.
		 * Previously this function redirected to jQuery.extend(true), but this had two limitations.
		 * First, it deep merged arrays, which lead to workarounds in Highcharts. Second,
		 * it copied properties from extended prototypes. 
		 */
		function merge() {
			var i,
				args = arguments,
				len,
				ret = {},
				doCopy = function (copy, original) {
					var value, key;

					// An object is replacing a primitive
					if (typeof copy !== 'object') {
						copy = {};
					}

					for (key in original) {
						if (original.hasOwnProperty(key)) {
							value = original[key];

							// Copy the contents of objects, but not arrays or DOM nodes
							if (value && typeof value === 'object' && Object.prototype.toString.call(value) !== '[object Array]' &&
									key !== 'renderTo' && typeof value.nodeType !== 'number') {
								copy[key] = doCopy(copy[key] || {}, value);
						
							// Primitives and arrays are copied over directly
							} else {
								copy[key] = original[key];
							}
						}
					}
					return copy;
				};

			// If first argument is true, copy into the existing object. Used in setOptions.
			if (args[0] === true) {
				ret = args[1];
				args = Array.prototype.slice.call(args, 2);
			}

			// For each argument, extend the return
			len = args.length;
			for (i = 0; i < len; i++) {
				ret = doCopy(ret, args[i]);
			}

			return ret;
		}

		/**
		 * Shortcut for parseInt
		 * @param {Object} s
		 * @param {Number} mag Magnitude
		 */
		function pInt(s, mag) {
			return parseInt(s, mag || 10);
		}

		/**
		 * Check for string
		 * @param {Object} s
		 */
		function isString(s) {
			return typeof s === 'string';
		}

		/**
		 * Check for object
		 * @param {Object} obj
		 */
		function isObject(obj) {
			return obj && typeof obj === 'object';
		}

		/**
		 * Check for array
		 * @param {Object} obj
		 */
		function isArray(obj) {
			return Object.prototype.toString.call(obj) === '[object Array]';
		}

		/**
		 * Check for number
		 * @param {Object} n
		 */
		function isNumber(n) {
			return typeof n === 'number';
		}

		function log2lin(num) {
			return math.log(num) / math.LN10;
		}
		function lin2log(num) {
			return math.pow(10, num);
		}

		/**
		 * Remove last occurence of an item from an array
		 * @param {Array} arr
		 * @param {Mixed} item
		 */
		function erase(arr, item) {
			var i = arr.length;
			while (i--) {
				if (arr[i] === item) {
					arr.splice(i, 1);
					break;
				}
			}
			//return arr;
		}

		/**
		 * Returns true if the object is not null or undefined. Like MooTools' $.defined.
		 * @param {Object} obj
		 */
		function defined(obj) {
			return obj !== UNDEFINED && obj !== null;
		}

		/**
		 * Set or get an attribute or an object of attributes. Can't use jQuery attr because
		 * it attempts to set expando properties on the SVG element, which is not allowed.
		 *
		 * @param {Object} elem The DOM element to receive the attribute(s)
		 * @param {String|Object} prop The property or an abject of key-value pairs
		 * @param {String} value The value if a single property is set
		 */
		function attr(elem, prop, value) {
			var key,
				ret;

			// if the prop is a string
			if (isString(prop)) {
				// set the value
				if (defined(value)) {
					elem.setAttribute(prop, value);

				// get the value
				} else if (elem && elem.getAttribute) { // elem not defined when printing pie demo...
					ret = elem.getAttribute(prop);
				}

			// else if prop is defined, it is a hash of key/value pairs
			} else if (defined(prop) && isObject(prop)) {
				for (key in prop) {
					elem.setAttribute(key, prop[key]);
				}
			}
			return ret;
		}
		/**
		 * Check if an element is an array, and if not, make it into an array. Like
		 * MooTools' $.splat.
		 */
		function splat(obj) {
			return isArray(obj) ? obj : [obj];
		}


		/**
		 * Return the first value that is defined. Like MooTools' $.pick.
		 */
		var pick = Highcharts.pick = function () {
			var args = arguments,
				i,
				arg,
				length = args.length;
			for (i = 0; i < length; i++) {
				arg = args[i];
				if (arg !== UNDEFINED && arg !== null) {
					return arg;
				}
			}
		};

		/**
		 * Set CSS on a given element
		 * @param {Object} el
		 * @param {Object} styles Style object with camel case property names
		 */
		function css(el, styles) {
			if (isIE && !hasSVG) { // #2686
				if (styles && styles.opacity !== UNDEFINED) {
					styles.filter = 'alpha(opacity=' + (styles.opacity * 100) + ')';
				}
			}
			extend(el.style, styles);
		}

		/**
		 * Utility function to create element with attributes and styles
		 * @param {Object} tag
		 * @param {Object} attribs
		 * @param {Object} styles
		 * @param {Object} parent
		 * @param {Object} nopad
		 */
		function createElement(tag, attribs, styles, parent, nopad) {
			var el = doc.createElement(tag);
			if (attribs) {
				extend(el, attribs);
			}
			if (nopad) {
				css(el, {padding: 0, border: NONE, margin: 0});
			}
			if (styles) {
				css(el, styles);
			}
			if (parent) {
				parent.appendChild(el);
			}
			return el;
		}

		/**
		 * Extend a prototyped class by new members
		 * @param {Object} parent
		 * @param {Object} members
		 */
		function extendClass(parent, members) {
			var object = function () { return UNDEFINED; };
			object.prototype = new parent();
			extend(object.prototype, members);
			return object;
		}

		/**
		 * Pad a string to a given length by adding 0 to the beginning
		 * @param {Number} number
		 * @param {Number} length
		 */
		function pad(number, length) {
			// Create an array of the remaining length +1 and join it with 0's
			return new Array((length || 2) + 1 - String(number).length).join(0) + number;
		}

		/**
		 * Return a length based on either the integer value, or a percentage of a base.
		 */
		function relativeLength (value, base) {
			return (/%$/).test(value) ? base * parseFloat(value) / 100 : parseFloat(value);
		}

		/**
		 * Wrap a method with extended functionality, preserving the original function
		 * @param {Object} obj The context object that the method belongs to 
		 * @param {String} method The name of the method to extend
		 * @param {Function} func A wrapper function callback. This function is called with the same arguments
		 * as the original function, except that the original function is unshifted and passed as the first 
		 * argument. 
		 */
		var wrap = Highcharts.wrap = function (obj, method, func) {
			var proceed = obj[method];
			obj[method] = function () {
				var args = Array.prototype.slice.call(arguments);
				args.unshift(proceed);
				return func.apply(this, args);
			};
		};


		function getTZOffset(timestamp) {
			return ((getTimezoneOffset && getTimezoneOffset(timestamp)) || timezoneOffset || 0) * 60000;
		}

		/**
		 * Based on http://www.php.net/manual/en/function.strftime.php
		 * @param {String} format
		 * @param {Number} timestamp
		 * @param {Boolean} capitalize
		 */
		dateFormat = function (format, timestamp, capitalize) {
			if (!defined(timestamp) || isNaN(timestamp)) {
				return defaultOptions.lang.invalidDate || '';
			}
			format = pick(format, '%Y-%m-%d %H:%M:%S');

			var date = new Date(timestamp - getTZOffset(timestamp)),
				key, // used in for constuct below
				// get the basic time values
				hours = date[getHours](),
				day = date[getDay](),
				dayOfMonth = date[getDate](),
				month = date[getMonth](),
				fullYear = date[getFullYear](),
				lang = defaultOptions.lang,
				langWeekdays = lang.weekdays,

				// List all format keys. Custom formats can be added from the outside. 
				replacements = extend({

					// Day
					'a': langWeekdays[day].substr(0, 3), // Short weekday, like 'Mon'
					'A': langWeekdays[day], // Long weekday, like 'Monday'
					'd': pad(dayOfMonth), // Two digit day of the month, 01 to 31
					'e': dayOfMonth, // Day of the month, 1 through 31
					'w': day,

					// Week (none implemented)
					//'W': weekNumber(),

					// Month
					'b': lang.shortMonths[month], // Short month, like 'Jan'
					'B': lang.months[month], // Long month, like 'January'
					'm': pad(month + 1), // Two digit month number, 01 through 12

					// Year
					'y': fullYear.toString().substr(2, 2), // Two digits year, like 09 for 2009
					'Y': fullYear, // Four digits year, like 2009

					// Time
					'H': pad(hours), // Two digits hours in 24h format, 00 through 23
					'k': hours, // Hours in 24h format, 0 through 23
					'I': pad((hours % 12) || 12), // Two digits hours in 12h format, 00 through 11
					'l': (hours % 12) || 12, // Hours in 12h format, 1 through 12
					'M': pad(date[getMinutes]()), // Two digits minutes, 00 through 59
					'p': hours < 12 ? 'AM' : 'PM', // Upper case AM or PM
					'P': hours < 12 ? 'am' : 'pm', // Lower case AM or PM
					'S': pad(date.getSeconds()), // Two digits seconds, 00 through  59
					'L': pad(mathRound(timestamp % 1000), 3) // Milliseconds (naming from Ruby)
				}, Highcharts.dateFormats);


			// do the replaces
			for (key in replacements) {
				while (format.indexOf('%' + key) !== -1) { // regex would do it in one line, but this is faster
					format = format.replace('%' + key, typeof replacements[key] === 'function' ? replacements[key](timestamp) : replacements[key]);
				}
			}

			// Optionally capitalize the string and return
			return capitalize ? format.substr(0, 1).toUpperCase() + format.substr(1) : format;
		};

		/** 
		 * Format a single variable. Similar to sprintf, without the % prefix.
		 */
		function formatSingle(format, val) {
			var floatRegex = /f$/,
				decRegex = /\.([0-9])/,
				lang = defaultOptions.lang,
				decimals;

			if (floatRegex.test(format)) { // float
				decimals = format.match(decRegex);
				decimals = decimals ? decimals[1] : -1;
				if (val !== null) {
					val = Highcharts.numberFormat(
						val,
						decimals,
						lang.decimalPoint,
						format.indexOf(',') > -1 ? lang.thousandsSep : ''
					);
				}
			} else {
				val = dateFormat(format, val);
			}
			return val;
		}

		/**
		 * Format a string according to a subset of the rules of Python's String.format method.
		 */
		function format(str, ctx) {
			var splitter = '{',
				isInside = false,
				segment,
				valueAndFormat,
				path,
				i,
				len,
				ret = [],
				val,
				index;
			
			while ((index = str.indexOf(splitter)) !== -1) {
				
				segment = str.slice(0, index);
				if (isInside) { // we're on the closing bracket looking back
					
					valueAndFormat = segment.split(':');
					path = valueAndFormat.shift().split('.'); // get first and leave format
					len = path.length;
					val = ctx;

					// Assign deeper paths
					for (i = 0; i < len; i++) {
						val = val[path[i]];
					}

					// Format the replacement
					if (valueAndFormat.length) {
						val = formatSingle(valueAndFormat.join(':'), val);
					}

					// Push the result and advance the cursor
					ret.push(val);
					
				} else {
					ret.push(segment);
					
				}
				str = str.slice(index + 1); // the rest
				isInside = !isInside; // toggle
				splitter = isInside ? '}' : '{'; // now look for next matching bracket
			}
			ret.push(str);
			return ret.join('');
		}

		/**
		 * Get the magnitude of a number
		 */
		function getMagnitude(num) {
			return math.pow(10, mathFloor(math.log(num) / math.LN10));
		}

		/**
		 * Take an interval and normalize it to multiples of 1, 2, 2.5 and 5
		 * @param {Number} interval
		 * @param {Array} multiples
		 * @param {Number} magnitude
		 * @param {Object} options
		 */
		function normalizeTickInterval(interval, multiples, magnitude, allowDecimals, preventExceed) {
			var normalized, 
				i,
				retInterval = interval;

			// round to a tenfold of 1, 2, 2.5 or 5
			magnitude = pick(magnitude, 1);
			normalized = interval / magnitude;

			// multiples for a linear scale
			if (!multiples) {
				multiples = [1, 2, 2.5, 5, 10];

				// the allowDecimals option
				if (allowDecimals === false) {
					if (magnitude === 1) {
						multiples = [1, 2, 5, 10];
					} else if (magnitude <= 0.1) {
						multiples = [1 / magnitude];
					}
				}
			}

			// normalize the interval to the nearest multiple
			for (i = 0; i < multiples.length; i++) {
				retInterval = multiples[i];
				if ((preventExceed && retInterval * magnitude >= interval) || // only allow tick amounts smaller than natural
					(!preventExceed && (normalized <= (multiples[i] + (multiples[i + 1] || multiples[i])) / 2))) {
					break;
				}
			}

			// multiply back to the correct magnitude
			retInterval *= magnitude;
			
			return retInterval;
		}


		/**
		 * Utility method that sorts an object array and keeping the order of equal items.
		 * ECMA script standard does not specify the behaviour when items are equal.
		 */
		function stableSort(arr, sortFunction) {
			var length = arr.length,
				sortValue,
				i;

			// Add index to each item
			for (i = 0; i < length; i++) {
				arr[i].ss_i = i; // stable sort index
			}

			arr.sort(function (a, b) {
				sortValue = sortFunction(a, b);
				return sortValue === 0 ? a.ss_i - b.ss_i : sortValue;
			});

			// Remove index from items
			for (i = 0; i < length; i++) {
				delete arr[i].ss_i; // stable sort index
			}
		}

		/**
		 * Non-recursive method to find the lowest member of an array. Math.min raises a maximum
		 * call stack size exceeded error in Chrome when trying to apply more than 150.000 points. This
		 * method is slightly slower, but safe.
		 */
		function arrayMin(data) {
			var i = data.length,
				min = data[0];

			while (i--) {
				if (data[i] < min) {
					min = data[i];
				}
			}
			return min;
		}

		/**
		 * Non-recursive method to find the lowest member of an array. Math.min raises a maximum
		 * call stack size exceeded error in Chrome when trying to apply more than 150.000 points. This
		 * method is slightly slower, but safe.
		 */
		function arrayMax(data) {
			var i = data.length,
				max = data[0];

			while (i--) {
				if (data[i] > max) {
					max = data[i];
				}
			}
			return max;
		}

		/**
		 * Utility method that destroys any SVGElement or VMLElement that are properties on the given object.
		 * It loops all properties and invokes destroy if there is a destroy method. The property is
		 * then delete'ed.
		 * @param {Object} The object to destroy properties on
		 * @param {Object} Exception, do not destroy this property, only delete it.
		 */
		function destroyObjectProperties(obj, except) {
			var n;
			for (n in obj) {
				// If the object is non-null and destroy is defined
				if (obj[n] && obj[n] !== except && obj[n].destroy) {
					// Invoke the destroy
					obj[n].destroy();
				}

				// Delete the property from the object.
				delete obj[n];
			}
		}


		/**
		 * Discard an element by moving it to the bin and delete
		 * @param {Object} The HTML node to discard
		 */
		function discardElement(element) {
			// create a garbage bin element, not part of the DOM
			if (!garbageBin) {
				garbageBin = createElement(DIV);
			}

			// move the node and empty bin
			if (element) {
				garbageBin.appendChild(element);
			}
			garbageBin.innerHTML = '';
		}

		/**
		 * Provide error messages for debugging, with links to online explanation 
		 */
		function error (code, stop) {
			var msg = 'Highcharts error #' + code + ': www.highcharts.com/errors/' + code;
			if (stop) {
				throw msg;
			}
			// else ...
			if (win.console) {
				console.log(msg);
			}
		}

		/**
		 * Fix JS round off float errors
		 * @param {Number} num
		 */
		function correctFloat(num, prec) {
			return parseFloat(
				num.toPrecision(prec || 14)
			);
		}

		/**
		 * Set the global animation to either a given value, or fall back to the
		 * given chart's animation option
		 * @param {Object} animation
		 * @param {Object} chart
		 */
		function setAnimation(animation, chart) {
			chart.renderer.globalAnimation = pick(animation, chart.animation);
		}

		/**
		 * The time unit lookup
		 */
		timeUnits = {
			millisecond: 1,
			second: 1000,
			minute: 60000,
			hour: 3600000,
			day: 24 * 3600000,
			week: 7 * 24 * 3600000,
			month: 28 * 24 * 3600000,
			year: 364 * 24 * 3600000
		};


		/**
		 * Format a number and return a string based on input settings
		 * @param {Number} number The input number to format
		 * @param {Number} decimals The amount of decimals
		 * @param {String} decPoint The decimal point, defaults to the one given in the lang options
		 * @param {String} thousandsSep The thousands separator, defaults to the one given in the lang options
		 */
		Highcharts.numberFormat = function (number, decimals, decPoint, thousandsSep) {
			var lang = defaultOptions.lang,
				// http://kevin.vanzonneveld.net/techblog/article/javascript_equivalent_for_phps_number_format/
				n = +number || 0,
				c = decimals === -1 ?
					mathMin((n.toString().split('.')[1] || '').length, 20) : // Preserve decimals. Not huge numbers (#3793).
					(isNaN(decimals = mathAbs(decimals)) ? 2 : decimals),
				d = decPoint === undefined ? lang.decimalPoint : decPoint,
				t = thousandsSep === undefined ? lang.thousandsSep : thousandsSep,
				s = n < 0 ? "-" : "",
				i = String(pInt(n = mathAbs(n).toFixed(c))),
				j = i.length > 3 ? i.length % 3 : 0;

			return (s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) +
					(c ? d + mathAbs(n - i).toFixed(c).slice(2) : ""));
		};
		/**
		 * Path interpolation algorithm used across adapters
		 */
		pathAnim = {
			/**
			 * Prepare start and end values so that the path can be animated one to one
			 */
			init: function (elem, fromD, toD) {
				fromD = fromD || '';
				var shift = elem.shift,
					bezier = fromD.indexOf('C') > -1,
					numParams = bezier ? 7 : 3,
					endLength,
					slice,
					i,
					start = fromD.split(' '),
					end = [].concat(toD), // copy
					startBaseLine,
					endBaseLine,
					sixify = function (arr) { // in splines make move points have six parameters like bezier curves
						i = arr.length;
						while (i--) {
							if (arr[i] === M) {
								arr.splice(i + 1, 0, arr[i + 1], arr[i + 2], arr[i + 1], arr[i + 2]);
							}
						}
					};

				if (bezier) {
					sixify(start);
					sixify(end);
				}

				// pull out the base lines before padding
				if (elem.isArea) {
					startBaseLine = start.splice(start.length - 6, 6);
					endBaseLine = end.splice(end.length - 6, 6);
				}

				// if shifting points, prepend a dummy point to the end path
				if (shift <= end.length / numParams && start.length === end.length) {
					while (shift--) {
						end = [].concat(end).splice(0, numParams).concat(end);
					}
				}
				elem.shift = 0; // reset for following animations

				// copy and append last point until the length matches the end length
				if (start.length) {
					endLength = end.length;
					while (start.length < endLength) {

						//bezier && sixify(start);
						slice = [].concat(start).splice(start.length - numParams, numParams);
						if (bezier) { // disable first control point
							slice[numParams - 6] = slice[numParams - 2];
							slice[numParams - 5] = slice[numParams - 1];
						}
						start = start.concat(slice);
					}
				}

				if (startBaseLine) { // append the base lines for areas
					start = start.concat(startBaseLine);
					end = end.concat(endBaseLine);
				}
				return [start, end];
			},

			/**
			 * Interpolate each value of the path and return the array
			 */
			step: function (start, end, pos, complete) {
				var ret = [],
					i = start.length,
					startVal;

				if (pos === 1) { // land on the final path without adjustment points appended in the ends
					ret = complete;

				} else if (i === end.length && pos < 1) {
					while (i--) {
						startVal = parseFloat(start[i]);
						ret[i] =
							isNaN(startVal) ? // a letter instruction like M or L
								start[i] :
								pos * (parseFloat(end[i] - startVal)) + startVal;

					}
				} else { // if animation is finished or length not matching, land on right value
					ret = end;
				}
				return ret;
			}
		};

		(function ($) {
			/**
			 * The default HighchartsAdapter for jQuery
			 */
			win.HighchartsAdapter = win.HighchartsAdapter || ($ && {
				
				/**
				 * Initialize the adapter by applying some extensions to jQuery
				 */
				init: function (pathAnim) {
					
					// extend the animate function to allow SVG animations
					var Fx = $.fx;
					
					/*jslint unparam: true*//* allow unused param x in this function */
					$.extend($.easing, {
						easeOutQuad: function (x, t, b, c, d) {
							return -c * (t /= d) * (t - 2) + b;
						}
					});
					/*jslint unparam: false*/
				
					// extend some methods to check for elem.attr, which means it is a Highcharts SVG object
					$.each(['cur', '_default', 'width', 'height', 'opacity'], function (i, fn) {
						var obj = Fx.step,
							base;
							
						// Handle different parent objects
						if (fn === 'cur') {
							obj = Fx.prototype; // 'cur', the getter, relates to Fx.prototype
						
						} else if (fn === '_default' && $.Tween) { // jQuery 1.8 model
							obj = $.Tween.propHooks[fn];
							fn = 'set';
						}
				
						// Overwrite the method
						base = obj[fn];
						if (base) { // step.width and step.height don't exist in jQuery < 1.7
				
							// create the extended function replacement
							obj[fn] = function (fx) {

								var elem;
								
								// Fx.prototype.cur does not use fx argument
								fx = i ? fx : this;

								// Don't run animations on textual properties like align (#1821)
								if (fx.prop === 'align') {
									return;
								}
				
								// shortcut
								elem = fx.elem;
				
								// Fx.prototype.cur returns the current value. The other ones are setters
								// and returning a value has no effect.
								return elem.attr ? // is SVG element wrapper
									elem.attr(fx.prop, fn === 'cur' ? UNDEFINED : fx.now) : // apply the SVG wrapper's method
									base.apply(this, arguments); // use jQuery's built-in method
							};
						}
					});

					// Extend the opacity getter, needed for fading opacity with IE9 and jQuery 1.10+
					wrap($.cssHooks.opacity, 'get', function (proceed, elem, computed) {
						return elem.attr ? (elem.opacity || 0) : proceed.call(this, elem, computed);
					});
					
					// Define the setter function for d (path definitions)
					this.addAnimSetter('d', function (fx) {
						var elem = fx.elem,
							ends;
				
						// Normally start and end should be set in state == 0, but sometimes,
						// for reasons unknown, this doesn't happen. Perhaps state == 0 is skipped
						// in these cases
						if (!fx.started) {
							ends = pathAnim.init(elem, elem.d, elem.toD);
							fx.start = ends[0];
							fx.end = ends[1];
							fx.started = true;
						}
				
						// Interpolate each value of the path
						elem.attr('d', pathAnim.step(fx.start, fx.end, fx.pos, elem.toD));
					});
					
					/**
					 * Utility for iterating over an array. Parameters are reversed compared to jQuery.
					 * @param {Array} arr
					 * @param {Function} fn
					 */
					this.each = Array.prototype.forEach ?
						function (arr, fn) { // modern browsers
							return Array.prototype.forEach.call(arr, fn);
							
						} : 
						function (arr, fn) { // legacy
							var i, 
								len = arr.length;
							for (i = 0; i < len; i++) {
								if (fn.call(arr[i], arr[i], i, arr) === false) {
									return i;
								}
							}
						};
					
					/**
					 * Register Highcharts as a plugin in the respective framework
					 */
					$.fn.highcharts = function () {
						var constr = 'Chart', // default constructor
							args = arguments,
							options,
							ret,
							chart;

						if (this[0]) {

							if (isString(args[0])) {
								constr = args[0];
								args = Array.prototype.slice.call(args, 1); 
							}
							options = args[0];

							// Create the chart
							if (options !== UNDEFINED) {
								/*jslint unused:false*/
								options.chart = options.chart || {};
								options.chart.renderTo = this[0];
								chart = new Highcharts[constr](options, args[1]);
								ret = this;
								/*jslint unused:true*/
							}

							// When called without parameters or with the return argument, get a predefined chart
							if (options === UNDEFINED) {
								ret = charts[attr(this[0], 'data-highcharts-chart')];
							}
						}
						
						return ret;
					};

				},

				/**
				 * Add an animation setter for a specific property
				 */
				addAnimSetter: function (prop, setter) {
					// jQuery 1.8 style
					if ($.Tween) {
						$.Tween.propHooks[prop] = {
							set: setter
						};
					// pre 1.8
					} else {
						$.fx.step[prop] = setter;
					}
				},
				
				/**
				 * Downloads a script and executes a callback when done.
				 * @param {String} scriptLocation
				 * @param {Function} callback
				 */
				getScript: $.getScript,
				
				/**
				 * Return the index of an item in an array, or -1 if not found
				 */
				inArray: $.inArray,
				
				/**
				 * A direct link to jQuery methods. MooTools and Prototype adapters must be implemented for each case of method.
				 * @param {Object} elem The HTML element
				 * @param {String} method Which method to run on the wrapped element
				 */
				adapterRun: function (elem, method) {
					return $(elem)[method]();
				},
			
				/**
				 * Filter an array
				 */
				grep: $.grep,
			
				/**
				 * Map an array
				 * @param {Array} arr
				 * @param {Function} fn
				 */
				map: function (arr, fn) {
					//return jQuery.map(arr, fn);
					var results = [],
						i = 0,
						len = arr.length;
					for (; i < len; i++) {
						results[i] = fn.call(arr[i], arr[i], i, arr);
					}
					return results;
			
				},
			
				/**
				 * Get the position of an element relative to the top left of the page
				 */
				offset: function (el) {
					return $(el).offset();
				},
			
				/**
				 * Add an event listener
				 * @param {Object} el A HTML element or custom object
				 * @param {String} event The event type
				 * @param {Function} fn The event handler
				 */
				addEvent: function (el, event, fn) {
					$(el).bind(event, fn);
				},
			
				/**
				 * Remove event added with addEvent
				 * @param {Object} el The object
				 * @param {String} eventType The event type. Leave blank to remove all events.
				 * @param {Function} handler The function to remove
				 */
				removeEvent: function (el, eventType, handler) {
					// workaround for jQuery issue with unbinding custom events:
					// http://forum.jQuery.com/topic/javascript-error-when-unbinding-a-custom-event-using-jQuery-1-4-2
					var func = doc.removeEventListener ? 'removeEventListener' : 'detachEvent';
					if (doc[func] && el && !el[func]) {
						el[func] = function () {};
					}
			
					$(el).unbind(eventType, handler);
				},
			
				/**
				 * Fire an event on a custom object
				 * @param {Object} el
				 * @param {String} type
				 * @param {Object} eventArguments
				 * @param {Function} defaultFunction
				 */
				fireEvent: function (el, type, eventArguments, defaultFunction) {
					var event = $.Event(type),
						detachedType = 'detached' + type,
						defaultPrevented;
			
					// Remove warnings in Chrome when accessing returnValue (#2790), layerX and layerY. Although Highcharts
					// never uses these properties, Chrome includes them in the default click event and
					// raises the warning when they are copied over in the extend statement below.
					//
					// To avoid problems in IE (see #1010) where we cannot delete the properties and avoid
					// testing if they are there (warning in chrome) the only option is to test if running IE.
					if (!isIE && eventArguments) {
						delete eventArguments.layerX;
						delete eventArguments.layerY;
						delete eventArguments.returnValue;
					}
			
					extend(event, eventArguments);
			
					// Prevent jQuery from triggering the object method that is named the
					// same as the event. For example, if the event is 'select', jQuery
					// attempts calling el.select and it goes into a loop.
					if (el[type]) {
						el[detachedType] = el[type];
						el[type] = null;
					}
			
					// Wrap preventDefault and stopPropagation in try/catch blocks in
					// order to prevent JS errors when cancelling events on non-DOM
					// objects. #615.
					/*jslint unparam: true*/
					$.each(['preventDefault', 'stopPropagation'], function (i, fn) {
						var base = event[fn];
						event[fn] = function () {
							try {
								base.call(event);
							} catch (e) {
								if (fn === 'preventDefault') {
									defaultPrevented = true;
								}
							}
						};
					});
					/*jslint unparam: false*/
			
					// trigger it
					$(el).trigger(event);
			
					// attach the method
					if (el[detachedType]) {
						el[type] = el[detachedType];
						el[detachedType] = null;
					}
			
					if (defaultFunction && !event.isDefaultPrevented() && !defaultPrevented) {
						defaultFunction(event);
					}
				},
				
				/**
				 * Extension method needed for MooTools
				 */
				washMouseEvent: function (e) {
					var ret = e.originalEvent || e;
					
					// computed by jQuery, needed by IE8
					if (ret.pageX === UNDEFINED) { // #1236
						ret.pageX = e.pageX;
						ret.pageY = e.pageY;
					}
					
					return ret;
				},
			
				/**
				 * Animate a HTML element or SVG element wrapper
				 * @param {Object} el
				 * @param {Object} params
				 * @param {Object} options jQuery-like animation options: duration, easing, callback
				 */
				animate: function (el, params, options) {
					var $el = $(el);
					if (!el.style) {
						el.style = {}; // #1881
					}
					if (params.d) {
						el.toD = params.d; // keep the array form for paths, used in $.fx.step.d
						params.d = 1; // because in jQuery, animating to an array has a different meaning
					}
			
					$el.stop();
					if (params.opacity !== UNDEFINED && el.attr) {
						params.opacity += 'px'; // force jQuery to use same logic as width and height (#2161)
					}
					el.hasAnim = 1; // #3342
					$el.animate(params, options);
			
				},
				/**
				 * Stop running animation
				 */
				stop: function (el) {
					if (el.hasAnim) { // #3342, memory leak on calling $(el) from destroy
						$(el).stop();
					}
				}
			});
		}(win.jQuery));


		// check for a custom HighchartsAdapter defined prior to this file
		var globalAdapter = win.HighchartsAdapter,
			adapter = globalAdapter || {};
			
		// Initialize the adapter
		if (globalAdapter) {
			globalAdapter.init.call(globalAdapter, pathAnim);
		}


		// Utility functions. If the HighchartsAdapter is not defined, adapter is an empty object
		// and all the utility functions will be null. In that case they are populated by the
		// default adapters below.
		var adapterRun = adapter.adapterRun,
			getScript = adapter.getScript,
			inArray = adapter.inArray,
			each = Highcharts.each = adapter.each,
			grep = adapter.grep,
			offset = adapter.offset,
			map = adapter.map,
			addEvent = adapter.addEvent,
			removeEvent = adapter.removeEvent,
			fireEvent = adapter.fireEvent,
			washMouseEvent = adapter.washMouseEvent,
			animate = adapter.animate,
			stop = adapter.stop;



		/* ****************************************************************************
		 * Handle the options                                                         *
		 *****************************************************************************/
		defaultOptions = {
			colors: ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', 
				    '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'],
			symbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],
			lang: {
				loading: 'Loading...',
				months: ['January', 'February', 'March', 'April', 'May', 'June', 'July',
						'August', 'September', 'October', 'November', 'December'],
				shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
				weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
				// invalidDate: '',
				decimalPoint: '.',
				numericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'], // SI prefixes used in axis labels
				resetZoom: 'Reset zoom',
				resetZoomTitle: 'Reset zoom level 1:1',
				thousandsSep: ' '
			},
			global: {
				useUTC: true,
				//timezoneOffset: 0,
				canvasToolsURL: 'http://code.highcharts.com/4.1.8/modules/canvas-tools.js',
				VMLRadialGradientURL: 'http://code.highcharts.com/4.1.8/gfx/vml-radial-gradient.png'
			},
			chart: {
				//animation: true,
				//alignTicks: false,
				//reflow: true,
				//className: null,
				//events: { load, selection },
				//margin: [null],
				//marginTop: null,
				//marginRight: null,
				//marginBottom: null,
				//marginLeft: null,
				borderColor: '#4572A7',
				//borderWidth: 0,
				borderRadius: 0,
				defaultSeriesType: 'line',
				ignoreHiddenSeries: true,
				//inverted: false,
				//shadow: false,
				spacing: [10, 10, 15, 10],
				//spacingTop: 10,
				//spacingRight: 10,
				//spacingBottom: 15,
				//spacingLeft: 10,
				//style: {
				//	fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif', // default font
				//	fontSize: '12px'
				//},
				backgroundColor: '#FFFFFF',
				//plotBackgroundColor: null,
				plotBorderColor: '#C0C0C0',
				//plotBorderWidth: 0,
				//plotShadow: false,
				//zoomType: ''
				resetZoomButton: {
					theme: {
						zIndex: 20
					},
					position: {
						align: 'right',
						x: -10,
						//verticalAlign: 'top',
						y: 10
					}
					// relativeTo: 'plot'
				}
			},
			title: {
				text: 'Chart title',
				align: 'center',
				// floating: false,
				margin: 15,
				// x: 0,
				// verticalAlign: 'top',
				// y: null,
				style: {
					color: '#333333',
					fontSize: '18px'
				}

			},
			subtitle: {
				text: '',
				align: 'center',
				// floating: false
				// x: 0,
				// verticalAlign: 'top',
				// y: null,
				style: {
					color: '#555555'
				}
			},

			plotOptions: {
				line: { // base series options
					allowPointSelect: false,
					showCheckbox: false,
					animation: {
						duration: 1000
					},
					//connectNulls: false,
					//cursor: 'default',
					//clip: true,
					//dashStyle: null,
					//enableMouseTracking: true,
					events: {},
					//legendIndex: 0,
					//linecap: 'round',
					lineWidth: 2,
					//shadow: false,
					// stacking: null,
					marker: {
						//enabled: true,
						//symbol: null,
						lineWidth: 0,
						radius: 4,
						lineColor: '#FFFFFF',
						//fillColor: null,
						states: { // states for a single point
							hover: {
								enabled: true,
								lineWidthPlus: 1,
								radiusPlus: 2
							},
							select: {
								fillColor: '#FFFFFF',
								lineColor: '#000000',
								lineWidth: 2
							}
						}
					},
					point: {
						events: {}
					},
					dataLabels: {
						align: 'center',
						// defer: true,
						// enabled: false,
						formatter: function () {
							return this.y === null ? '' : Highcharts.numberFormat(this.y, -1);
						},
						style: {
							color: 'contrast',
							fontSize: '11px',
							fontWeight: 'bold',
							textShadow: '0 0 6px contrast, 0 0 3px contrast'
						},
						verticalAlign: 'bottom', // above singular point
						x: 0,
						y: 0,
						// backgroundColor: undefined,
						// borderColor: undefined,
						// borderRadius: undefined,
						// borderWidth: undefined,
						padding: 5
						// shadow: false
					},
					cropThreshold: 300, // draw points outside the plot area when the number of points is less than this
					pointRange: 0,
					//pointStart: 0,
					//pointInterval: 1,
					//showInLegend: null, // auto: true for standalone series, false for linked series
					states: { // states for the entire series
						hover: {
							//enabled: false,
							lineWidthPlus: 1,
							marker: {
								// lineWidth: base + 1,
								// radius: base + 1
							},
							halo: {
								size: 10,
								opacity: 0.25
							}
						},
						select: {
							marker: {}
						}
					},
					stickyTracking: true,
					//tooltip: {
						//pointFormat: '<span style="color:{point.color}">\u25CF</span> {series.name}: <b>{point.y}</b>'
						//valueDecimals: null,
						//xDateFormat: '%A, %b %e, %Y',
						//valuePrefix: '',
						//ySuffix: ''				
					//}
					turboThreshold: 1000
					// zIndex: null
				}
			},
			labels: {
				//items: [],
				style: {
					//font: defaultFont,
					position: ABSOLUTE,
					color: '#3E576F'
				}
			},
			legend: {
				enabled: true,
				align: 'center',
				//floating: false,
				layout: 'horizontal',
				labelFormatter: function () {
					return this.name;
				},
				//borderWidth: 0,
				borderColor: '#909090',
				borderRadius: 0,
				navigation: {
					// animation: true,
					activeColor: '#274b6d',
					// arrowSize: 12
					inactiveColor: '#CCC'
					// style: {} // text styles
				},
				// margin: 20,
				// reversed: false,
				shadow: false,
				// backgroundColor: null,
				/*style: {
					padding: '5px'
				},*/
				itemStyle: {			
					color: '#333333',
					fontSize: '12px',
					fontWeight: 'bold'
				},
				itemHoverStyle: {
					//cursor: 'pointer', removed as of #601
					color: '#000'
				},
				itemHiddenStyle: {
					color: '#CCC'
				},
				itemCheckboxStyle: {
					position: ABSOLUTE,
					width: '13px', // for IE precision
					height: '13px'
				},
				// itemWidth: undefined,
				// symbolRadius: 0,
				// symbolWidth: 16,
				symbolPadding: 5,
				verticalAlign: 'bottom',
				// width: undefined,
				x: 0,
				y: 0,
				title: {
					//text: null,
					style: {
						fontWeight: 'bold'
					}
				}			
			},

			loading: {
				// hideDuration: 100,
				labelStyle: {
					fontWeight: 'bold',
					position: RELATIVE,
					top: '45%'
				},
				// showDuration: 0,
				style: {
					position: ABSOLUTE,
					backgroundColor: 'white',
					opacity: 0.5,
					textAlign: 'center'
				}
			},

			tooltip: {
				enabled: true,
				animation: hasSVG,
				//crosshairs: null,
				backgroundColor: 'rgba(249, 249, 249, .85)',
				borderWidth: 1,
				borderRadius: 3,
				dateTimeLabelFormats: { 
					millisecond: '%A, %b %e, %H:%M:%S.%L',
					second: '%A, %b %e, %H:%M:%S',
					minute: '%A, %b %e, %H:%M',
					hour: '%A, %b %e, %H:%M',
					day: '%A, %b %e, %Y',
					week: 'Week from %A, %b %e, %Y',
					month: '%B %Y',
					year: '%Y'
				},
				footerFormat: '',
				//formatter: defaultFormatter,
				headerFormat: '<span style="font-size: 10px">{point.key}</span><br/>',
				pointFormat: '<span style="color:{point.color}">\u25CF</span> {series.name}: <b>{point.y}</b><br/>',
				shadow: true,
				//shape: 'callout',
				//shared: false,
				snap: isTouchDevice ? 25 : 10,
				style: {
					color: '#333333',
					cursor: 'default',
					fontSize: '12px',
					padding: '8px',
					whiteSpace: 'nowrap'
				}
				//xDateFormat: '%A, %b %e, %Y',
				//valueDecimals: null,
				//valuePrefix: '',
				//valueSuffix: ''
			},

			credits: {
				enabled: true,
				text: 'Highcharts.com',
				href: 'http://www.highcharts.com',
				position: {
					align: 'right',
					x: -10,
					verticalAlign: 'bottom',
					y: -5
				},
				style: {
					cursor: 'pointer',
					color: '#909090',
					fontSize: '9px'
				}
			}
		};




		// Series defaults
		var defaultPlotOptions = defaultOptions.plotOptions,
			defaultSeriesOptions = defaultPlotOptions.line;

		// set the default time methods
		setTimeMethods();



		/**
		 * Set the time methods globally based on the useUTC option. Time method can be either
		 * local time or UTC (default).
		 */
		function setTimeMethods() {
			var globalOptions = defaultOptions.global,
				useUTC = globalOptions.useUTC,
				GET = useUTC ? 'getUTC' : 'get',
				SET = useUTC ? 'setUTC' : 'set';


			Date = globalOptions.Date || window.Date;
			timezoneOffset = useUTC && globalOptions.timezoneOffset;
			getTimezoneOffset = useUTC && globalOptions.getTimezoneOffset;
			makeTime = function (year, month, date, hours, minutes, seconds) {
				var d;
				if (useUTC) {
					d = Date.UTC.apply(0, arguments);
					d += getTZOffset(d);
				} else {
					d = new Date(
						year,
						month,
						pick(date, 1),
						pick(hours, 0),
						pick(minutes, 0),
						pick(seconds, 0)
					).getTime();
				}
				return d;
			};
			getMinutes =      GET + 'Minutes';
			getHours =        GET + 'Hours';
			getDay =          GET + 'Day';
			getDate =         GET + 'Date';
			getMonth =        GET + 'Month';
			getFullYear =     GET + 'FullYear';
			setMilliseconds = SET + 'Milliseconds';
			setSeconds =      SET + 'Seconds';
			setMinutes =      SET + 'Minutes';
			setHours =        SET + 'Hours';
			setDate =         SET + 'Date';
			setMonth =        SET + 'Month';
			setFullYear =     SET + 'FullYear';

		}

		/**
		 * Merge the default options with custom options and return the new options structure
		 * @param {Object} options The new custom options
		 */
		function setOptions(options) {
			
			// Copy in the default options
			defaultOptions = merge(true, defaultOptions, options);
			
			// Apply UTC
			setTimeMethods();

			return defaultOptions;
		}

		/**
		 * Get the updated default options. Until 3.0.7, merely exposing defaultOptions for outside modules
		 * wasn't enough because the setOptions method created a new object.
		 */
		function getOptions() {
			return defaultOptions;
		}


		/**
		 * Handle color operations. The object methods are chainable.
		 * @param {String} input The input color in either rbga or hex format
		 */
		var rgbaRegEx = /rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]?(?:\.[0-9]+)?)\s*\)/,
			hexRegEx = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,
			rgbRegEx = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/;

		var Color = function (input) {
			// declare variables
			var rgba = [], result, stops;

			/**
			 * Parse the input color to rgba array
			 * @param {String} input
			 */
			function init(input) {

				// Gradients
				if (input && input.stops) {
					stops = map(input.stops, function (stop) {
						return Color(stop[1]);
					});

				// Solid colors
				} else {
					// rgba
					result = rgbaRegEx.exec(input);
					if (result) {
						rgba = [pInt(result[1]), pInt(result[2]), pInt(result[3]), parseFloat(result[4], 10)];
					} else { 
						// hex
						result = hexRegEx.exec(input);
						if (result) {
							rgba = [pInt(result[1], 16), pInt(result[2], 16), pInt(result[3], 16), 1];
						} else {
							// rgb
							result = rgbRegEx.exec(input);
							if (result) {
								rgba = [pInt(result[1]), pInt(result[2]), pInt(result[3]), 1];
							}
						}
					}
				}		

			}
			/**
			 * Return the color a specified format
			 * @param {String} format
			 */
			function get(format) {
				var ret;

				if (stops) {
					ret = merge(input);
					ret.stops = [].concat(ret.stops);
					each(stops, function (stop, i) {
						ret.stops[i] = [ret.stops[i][0], stop.get(format)];
					});

				// it's NaN if gradient colors on a column chart
				} else if (rgba && !isNaN(rgba[0])) {
					if (format === 'rgb') {
						ret = 'rgb(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ')';
					} else if (format === 'a') {
						ret = rgba[3];
					} else {
						ret = 'rgba(' + rgba.join(',') + ')';
					}
				} else {
					ret = input;
				}
				return ret;
			}

			/**
			 * Brighten the color
			 * @param {Number} alpha
			 */
			function brighten(alpha) {
				if (stops) {
					each(stops, function (stop) {
						stop.brighten(alpha);
					});
				
				} else if (isNumber(alpha) && alpha !== 0) {
					var i;
					for (i = 0; i < 3; i++) {
						rgba[i] += pInt(alpha * 255);

						if (rgba[i] < 0) {
							rgba[i] = 0;
						}
						if (rgba[i] > 255) {
							rgba[i] = 255;
						}
					}
				}
				return this;
			}
			/**
			 * Set the color's opacity to a given alpha value
			 * @param {Number} alpha
			 */
			function setOpacity(alpha) {
				rgba[3] = alpha;
				return this;
			}

			// initialize: parse the input
			init(input);

			// public methods
			return {
				get: get,
				brighten: brighten,
				rgba: rgba,
				setOpacity: setOpacity,
				raw: input
			};
		};


		/**
		 * A wrapper object for SVG elements
		 */
		function SVGElement() {}

		SVGElement.prototype = {
			
			// Default base for animation
			opacity: 1,
			// For labels, these CSS properties are applied to the <text> node directly
			textProps: ['fontSize', 'fontWeight', 'fontFamily', 'fontStyle', 'color', 
				'lineHeight', 'width', 'textDecoration', 'textOverflow', 'textShadow'],
			
			/**
			 * Initialize the SVG renderer
			 * @param {Object} renderer
			 * @param {String} nodeName
			 */
			init: function (renderer, nodeName) {
				var wrapper = this;
				wrapper.element = nodeName === 'span' ?
					createElement(nodeName) :
					doc.createElementNS(SVG_NS, nodeName);
				wrapper.renderer = renderer;
			},
			
			/**
			 * Animate a given attribute
			 * @param {Object} params
			 * @param {Number} options The same options as in jQuery animation
			 * @param {Function} complete Function to perform at the end of animation
			 */
			animate: function (params, options, complete) {
				var animOptions = pick(options, this.renderer.globalAnimation, true);
				stop(this); // stop regardless of animation actually running, or reverting to .attr (#607)
				if (animOptions) {
					animOptions = merge(animOptions, {}); //#2625
					if (complete) { // allows using a callback with the global animation without overwriting it
						animOptions.complete = complete;
					}
					animate(this, params, animOptions);
				} else {
					this.attr(params, null, complete);
				}
				return this;
			},

			/**
			 * Build an SVG gradient out of a common JavaScript configuration object
			 */
			colorGradient: function (color, prop, elem) {
				var renderer = this.renderer,
					colorObject,
					gradName,
					gradAttr,
					gradients,
					gradientObject,
					stops,
					stopColor,
					stopOpacity,
					radialReference,
					n,
					id,
					key = [];

				// Apply linear or radial gradients
				if (color.linearGradient) {
					gradName = 'linearGradient';
				} else if (color.radialGradient) {
					gradName = 'radialGradient';
				}

				if (gradName) {
					gradAttr = color[gradName];
					gradients = renderer.gradients;
					stops = color.stops;
					radialReference = elem.radialReference;

					// Keep < 2.2 kompatibility
					if (isArray(gradAttr)) {
						color[gradName] = gradAttr = {
							x1: gradAttr[0],
							y1: gradAttr[1],
							x2: gradAttr[2],
							y2: gradAttr[3],
							gradientUnits: 'userSpaceOnUse'
						};
					}

					// Correct the radial gradient for the radial reference system
					if (gradName === 'radialGradient' && radialReference && !defined(gradAttr.gradientUnits)) {
						gradAttr = merge(gradAttr, {
							cx: (radialReference[0] - radialReference[2] / 2) + gradAttr.cx * radialReference[2],
							cy: (radialReference[1] - radialReference[2] / 2) + gradAttr.cy * radialReference[2],
							r: gradAttr.r * radialReference[2],
							gradientUnits: 'userSpaceOnUse'
						});
					}

					// Build the unique key to detect whether we need to create a new element (#1282)
					for (n in gradAttr) {
						if (n !== 'id') {
							key.push(n, gradAttr[n]);
						}
					}
					for (n in stops) {
						key.push(stops[n]);
					}
					key = key.join(',');

					// Check if a gradient object with the same config object is created within this renderer
					if (gradients[key]) {
						id = gradients[key].attr('id');

					} else {

						// Set the id and create the element
						gradAttr.id = id = PREFIX + idCounter++;
						gradients[key] = gradientObject = renderer.createElement(gradName)
							.attr(gradAttr)
							.add(renderer.defs);


						// The gradient needs to keep a list of stops to be able to destroy them
						gradientObject.stops = [];
						each(stops, function (stop) {
							var stopObject;
							if (stop[1].indexOf('rgba') === 0) {
								colorObject = Color(stop[1]);
								stopColor = colorObject.get('rgb');
								stopOpacity = colorObject.get('a');
							} else {
								stopColor = stop[1];
								stopOpacity = 1;
							}
							stopObject = renderer.createElement('stop').attr({
								offset: stop[0],
								'stop-color': stopColor,
								'stop-opacity': stopOpacity
							}).add(gradientObject);

							// Add the stop element to the gradient
							gradientObject.stops.push(stopObject);
						});
					}

					// Set the reference to the gradient object
					elem.setAttribute(prop, 'url(' + renderer.url + '#' + id + ')');
				} 
			},

			/**
			 * Apply a polyfill to the text-stroke CSS property, by copying the text element
			 * and apply strokes to the copy.
			 *
			 * Contrast checks at http://jsfiddle.net/highcharts/43soe9m1/2/
			 *
			 * docs: update default, document the polyfill and the limitations on hex colors and pixel values, document contrast pseudo-color
			 */
			applyTextShadow: function (textShadow) {
				var elem = this.element,
					tspans,
					hasContrast = textShadow.indexOf('contrast') !== -1,
					styles = {},
					// IE10 and IE11 report textShadow in elem.style even though it doesn't work. Check
					// this again with new IE release. In exports, the rendering is passed to PhantomJS. 
					supports = this.renderer.forExport || (elem.style.textShadow !== UNDEFINED && !isIE);

				// When the text shadow is set to contrast, use dark stroke for light text and vice versa
				if (hasContrast) {
					styles.textShadow = textShadow = textShadow.replace(/contrast/g, this.renderer.getContrast(elem.style.fill));
				}

				// Safari with retina displays as well as PhantomJS bug (#3974). Firefox does not tolerate this,
				// it removes the text shadows.
				if (isWebKit) {
					styles.textRendering = 'geometricPrecision';
				}

				/* Selective side-by-side testing in supported browser (http://jsfiddle.net/highcharts/73L1ptrh/)
				if (elem.textContent.indexOf('2.') === 0) {
					elem.style['text-shadow'] = 'none';
					supports = false;
				}
				// */

				// No reason to polyfill, we've got native support
				if (supports) {
					css(elem, styles); // Apply altered textShadow or textRendering workaround
				} else {

					this.fakeTS = true; // Fake text shadow

					// In order to get the right y position of the clones, 
					// copy over the y setter
					this.ySetter = this.xSetter;

					tspans = [].slice.call(elem.getElementsByTagName('tspan'));
					each(textShadow.split(/\s?,\s?/g), function (textShadow) {
						var firstChild = elem.firstChild,
							color,
							strokeWidth;
						
						textShadow = textShadow.split(' ');
						color = textShadow[textShadow.length - 1];

						// Approximately tune the settings to the text-shadow behaviour
						strokeWidth = textShadow[textShadow.length - 2];

						if (strokeWidth) {
							each(tspans, function (tspan, y) {
								var clone;

								// Let the first line start at the correct X position
								if (y === 0) {
									tspan.setAttribute('x', elem.getAttribute('x'));
									y = elem.getAttribute('y');
									tspan.setAttribute('y', y || 0);
									if (y === null) {
										elem.setAttribute('y', 0);
									}
								}

								// Create the clone and apply shadow properties
								clone = tspan.cloneNode(1);
								attr(clone, {
									'class': PREFIX + 'text-shadow',
									'fill': color,
									'stroke': color,
									'stroke-opacity': 1 / mathMax(pInt(strokeWidth), 3),
									'stroke-width': strokeWidth,
									'stroke-linejoin': 'round'
								});
								elem.insertBefore(clone, firstChild);
							});
						}
					});
				}
			},

			/**
			 * Set or get a given attribute
			 * @param {Object|String} hash
			 * @param {Mixed|Undefined} val
			 */
			attr: function (hash, val, complete) {
				var key,
					value,
					element = this.element,
					hasSetSymbolSize,
					ret = this,
					skipAttr;

				// single key-value pair
				if (typeof hash === 'string' && val !== UNDEFINED) {
					key = hash;
					hash = {};
					hash[key] = val;
				}

				// used as a getter: first argument is a string, second is undefined
				if (typeof hash === 'string') {
					ret = (this[hash + 'Getter'] || this._defaultGetter).call(this, hash, element);
				
				// setter
				} else {

					for (key in hash) {
						value = hash[key];
						skipAttr = false;



						if (this.symbolName && /^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(key)) {
							if (!hasSetSymbolSize) {
								this.symbolAttr(hash);
								hasSetSymbolSize = true;
							}
							skipAttr = true;
						}

						if (this.rotation && (key === 'x' || key === 'y')) {
							this.doTransform = true;
						}
						
						if (!skipAttr) {
							(this[key + 'Setter'] || this._defaultSetter).call(this, value, key, element);
						}

						// Let the shadow follow the main element
						if (this.shadows && /^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(key)) {
							this.updateShadows(key, value);
						}
					}

					// Update transform. Do this outside the loop to prevent redundant updating for batch setting
					// of attributes.
					if (this.doTransform) {
						this.updateTransform();
						this.doTransform = false;
					}

				}

				// In accordance with animate, run a complete callback
				if (complete) {
					complete();
				}

				return ret;
			},

			updateShadows: function (key, value) {
				var shadows = this.shadows,
					i = shadows.length;
				while (i--) {
					shadows[i].setAttribute(
						key,
						key === 'height' ?
							mathMax(value - (shadows[i].cutHeight || 0), 0) :
							key === 'd' ? this.d : value
					);
				}
			},

			/**
			 * Add a class name to an element
			 */
			addClass: function (className) {
				var element = this.element,
					currentClassName = attr(element, 'class') || '';

				if (currentClassName.indexOf(className) === -1) {
					attr(element, 'class', currentClassName + ' ' + className);
				}
				return this;
			},
			/* hasClass and removeClass are not (yet) needed
			hasClass: function (className) {
				return attr(this.element, 'class').indexOf(className) !== -1;
			},
			removeClass: function (className) {
				attr(this.element, 'class', attr(this.element, 'class').replace(className, ''));
				return this;
			},
			*/

			/**
			 * If one of the symbol size affecting parameters are changed,
			 * check all the others only once for each call to an element's
			 * .attr() method
			 * @param {Object} hash
			 */
			symbolAttr: function (hash) {
				var wrapper = this;

				each(['x', 'y', 'r', 'start', 'end', 'width', 'height', 'innerR', 'anchorX', 'anchorY'], function (key) {
					wrapper[key] = pick(hash[key], wrapper[key]);
				});

				wrapper.attr({
					d: wrapper.renderer.symbols[wrapper.symbolName](
						wrapper.x,
						wrapper.y,
						wrapper.width,
						wrapper.height,
						wrapper
					)
				});
			},

			/**
			 * Apply a clipping path to this object
			 * @param {String} id
			 */
			clip: function (clipRect) {
				return this.attr('clip-path', clipRect ? 'url(' + this.renderer.url + '#' + clipRect.id + ')' : NONE);
			},

			/**
			 * Calculate the coordinates needed for drawing a rectangle crisply and return the
			 * calculated attributes
			 * @param {Number} strokeWidth
			 * @param {Number} x
			 * @param {Number} y
			 * @param {Number} width
			 * @param {Number} height
			 */
			crisp: function (rect) {

				var wrapper = this,
					key,
					attribs = {},
					normalizer,
					strokeWidth = rect.strokeWidth || wrapper.strokeWidth || 0;

				normalizer = mathRound(strokeWidth) % 2 / 2; // mathRound because strokeWidth can sometimes have roundoff errors

				// normalize for crisp edges
				rect.x = mathFloor(rect.x || wrapper.x || 0) + normalizer;
				rect.y = mathFloor(rect.y || wrapper.y || 0) + normalizer;
				rect.width = mathFloor((rect.width || wrapper.width || 0) - 2 * normalizer);
				rect.height = mathFloor((rect.height || wrapper.height || 0) - 2 * normalizer);
				rect.strokeWidth = strokeWidth;

				for (key in rect) {
					if (wrapper[key] !== rect[key]) { // only set attribute if changed
						wrapper[key] = attribs[key] = rect[key];
					}
				}

				return attribs;
			},

			/**
			 * Set styles for the element
			 * @param {Object} styles
			 */
			css: function (styles) {
				var elemWrapper = this,
					oldStyles = elemWrapper.styles,
					newStyles = {},
					elem = elemWrapper.element,
					textWidth,
					n,
					serializedCss = '',
					hyphenate,
					hasNew = !oldStyles;

				// convert legacy
				if (styles && styles.color) {
					styles.fill = styles.color;
				}

				// Filter out existing styles to increase performance (#2640)
				if (oldStyles) {
					for (n in styles) {
						if (styles[n] !== oldStyles[n]) {
							newStyles[n] = styles[n];
							hasNew = true;
						}
					}
				}
				if (hasNew) {
					textWidth = elemWrapper.textWidth = 
						(styles && styles.width && elem.nodeName.toLowerCase() === 'text' && pInt(styles.width)) || 
						elemWrapper.textWidth; // #3501

					// Merge the new styles with the old ones
					if (oldStyles) {
						styles = extend(
							oldStyles,
							newStyles
						);
					}		

					// store object
					elemWrapper.styles = styles;

					if (textWidth && (useCanVG || (!hasSVG && elemWrapper.renderer.forExport))) {
						delete styles.width;
					}

					// serialize and set style attribute
					if (isIE && !hasSVG) {
						css(elemWrapper.element, styles);
					} else {
						/*jslint unparam: true*/
						hyphenate = function (a, b) { return '-' + b.toLowerCase(); };
						/*jslint unparam: false*/
						for (n in styles) {
							serializedCss += n.replace(/([A-Z])/g, hyphenate) + ':' + styles[n] + ';';
						}
						attr(elem, 'style', serializedCss); // #1881
					}


					// re-build text
					if (textWidth && elemWrapper.added) {
						elemWrapper.renderer.buildText(elemWrapper);
					}
				}

				return elemWrapper;
			},

			/**
			 * Add an event listener
			 * @param {String} eventType
			 * @param {Function} handler
			 */
			on: function (eventType, handler) {
				var svgElement = this,
					element = svgElement.element;
				
				// touch
				if (hasTouch && eventType === 'click') {
					element.ontouchstart = function (e) {			
						svgElement.touchEventFired = Date.now();				
						e.preventDefault();
						handler.call(element, e);
					};
					element.onclick = function (e) {												
						if (userAgent.indexOf('Android') === -1 || Date.now() - (svgElement.touchEventFired || 0) > 1100) { // #2269
							handler.call(element, e);
						}
					};			
				} else {
					// simplest possible event model for internal use
					element['on' + eventType] = handler;
				}
				return this;
			},

			/**
			 * Set the coordinates needed to draw a consistent radial gradient across
			 * pie slices regardless of positioning inside the chart. The format is
			 * [centerX, centerY, diameter] in pixels.
			 */
			setRadialReference: function (coordinates) {
				this.element.radialReference = coordinates;
				return this;
			},

			/**
			 * Move an object and its children by x and y values
			 * @param {Number} x
			 * @param {Number} y
			 */
			translate: function (x, y) {
				return this.attr({
					translateX: x,
					translateY: y
				});
			},

			/**
			 * Invert a group, rotate and flip
			 */
			invert: function () {
				var wrapper = this;
				wrapper.inverted = true;
				wrapper.updateTransform();
				return wrapper;
			},

			/**
			 * Private method to update the transform attribute based on internal
			 * properties
			 */
			updateTransform: function () {
				var wrapper = this,
					translateX = wrapper.translateX || 0,
					translateY = wrapper.translateY || 0,
					scaleX = wrapper.scaleX,
					scaleY = wrapper.scaleY,
					inverted = wrapper.inverted,
					rotation = wrapper.rotation,
					element = wrapper.element,
					transform;

				// flipping affects translate as adjustment for flipping around the group's axis
				if (inverted) {
					translateX += wrapper.attr('width');
					translateY += wrapper.attr('height');
				}

				// Apply translate. Nearly all transformed elements have translation, so instead
				// of checking for translate = 0, do it always (#1767, #1846).
				transform = ['translate(' + translateX + ',' + translateY + ')'];

				// apply rotation
				if (inverted) {
					transform.push('rotate(90) scale(-1,1)');
				} else if (rotation) { // text rotation
					transform.push('rotate(' + rotation + ' ' + (element.getAttribute('x') || 0) + ' ' + (element.getAttribute('y') || 0) + ')');
					
					// Delete bBox memo when the rotation changes
					//delete wrapper.bBox;
				}

				// apply scale
				if (defined(scaleX) || defined(scaleY)) {
					transform.push('scale(' + pick(scaleX, 1) + ' ' + pick(scaleY, 1) + ')');
				}

				if (transform.length) {
					element.setAttribute('transform', transform.join(' '));
				}
			},
			/**
			 * Bring the element to the front
			 */
			toFront: function () {
				var element = this.element;
				element.parentNode.appendChild(element);
				return this;
			},


			/**
			 * Break down alignment options like align, verticalAlign, x and y
			 * to x and y relative to the chart.
			 *
			 * @param {Object} alignOptions
			 * @param {Boolean} alignByTranslate
			 * @param {String[Object} box The box to align to, needs a width and height. When the
			 *		box is a string, it refers to an object in the Renderer. For example, when
			 *		box is 'spacingBox', it refers to Renderer.spacingBox which holds width, height
			 *		x and y properties.
			 *
			 */
			align: function (alignOptions, alignByTranslate, box) {
				var align,
					vAlign,
					x,
					y,
					attribs = {},
					alignTo,
					renderer = this.renderer,
					alignedObjects = renderer.alignedObjects;

				// First call on instanciate
				if (alignOptions) {
					this.alignOptions = alignOptions;
					this.alignByTranslate = alignByTranslate;
					if (!box || isString(box)) { // boxes other than renderer handle this internally
						this.alignTo = alignTo = box || 'renderer';
						erase(alignedObjects, this); // prevent duplicates, like legendGroup after resize
						alignedObjects.push(this);
						box = null; // reassign it below
					}

				// When called on resize, no arguments are supplied
				} else {
					alignOptions = this.alignOptions;
					alignByTranslate = this.alignByTranslate;
					alignTo = this.alignTo;
				}

				box = pick(box, renderer[alignTo], renderer);

				// Assign variables
				align = alignOptions.align;
				vAlign = alignOptions.verticalAlign;
				x = (box.x || 0) + (alignOptions.x || 0); // default: left align
				y = (box.y || 0) + (alignOptions.y || 0); // default: top align

				// Align
				if (align === 'right' || align === 'center') {
					x += (box.width - (alignOptions.width || 0)) /
							{ right: 1, center: 2 }[align];
				}
				attribs[alignByTranslate ? 'translateX' : 'x'] = mathRound(x);


				// Vertical align
				if (vAlign === 'bottom' || vAlign === 'middle') {
					y += (box.height - (alignOptions.height || 0)) /
							({ bottom: 1, middle: 2 }[vAlign] || 1);

				}
				attribs[alignByTranslate ? 'translateY' : 'y'] = mathRound(y);

				// Animate only if already placed
				this[this.placed ? 'animate' : 'attr'](attribs);
				this.placed = true;
				this.alignAttr = attribs;

				return this;
			},

			/**
			 * Get the bounding box (width, height, x and y) for the element
			 */
			getBBox: function (reload) {
				var wrapper = this,
					bBox,// = wrapper.bBox,
					renderer = wrapper.renderer,
					width,
					height,
					rotation = wrapper.rotation,
					element = wrapper.element,
					styles = wrapper.styles,
					rad = rotation * deg2rad,
					textStr = wrapper.textStr,
					textShadow,
					elemStyle = element.style,
					toggleTextShadowShim,
					cacheKey;

				if (textStr !== UNDEFINED) {

					// Properties that affect bounding box
					cacheKey = ['', rotation || 0, styles && styles.fontSize, element.style.width].join(',');

					// Since numbers are monospaced, and numerical labels appear a lot in a chart,
					// we assume that a label of n characters has the same bounding box as others 
					// of the same length.
					if (textStr === '' || numRegex.test(textStr)) {
						cacheKey = 'num:' + textStr.toString().length + cacheKey;

					// Caching all strings reduces rendering time by 4-5%.
					} else {
						cacheKey = textStr + cacheKey;
					}
				}

				if (cacheKey && !reload) {
					bBox = renderer.cache[cacheKey];
				}

				// No cache found
				if (!bBox) {

					// SVG elements
					if (element.namespaceURI === SVG_NS || renderer.forExport) {
						try { // Fails in Firefox if the container has display: none.

							// When the text shadow shim is used, we need to hide the fake shadows
							// to get the correct bounding box (#3872)
							toggleTextShadowShim = this.fakeTS && function (display) {
								each(element.querySelectorAll('.' + PREFIX + 'text-shadow'), function (tspan) {
									tspan.style.display = display;
								});
							};

							// Workaround for #3842, Firefox reporting wrong bounding box for shadows
							if (isFirefox && elemStyle.textShadow) {
								textShadow = elemStyle.textShadow;
								elemStyle.textShadow = '';
							} else if (toggleTextShadowShim) {
								toggleTextShadowShim(NONE);
							}

							bBox = element.getBBox ?
								// SVG: use extend because IE9 is not allowed to change width and height in case
								// of rotation (below)
								extend({}, element.getBBox()) :
								// Canvas renderer and legacy IE in export mode
								{
									width: element.offsetWidth,
									height: element.offsetHeight
								};

							// #3842
							if (textShadow) {
								elemStyle.textShadow = textShadow;
							} else if (toggleTextShadowShim) {
								toggleTextShadowShim('');
							}
						} catch (e) {}

						// If the bBox is not set, the try-catch block above failed. The other condition
						// is for Opera that returns a width of -Infinity on hidden elements.
						if (!bBox || bBox.width < 0) {
							bBox = { width: 0, height: 0 };
						}


					// VML Renderer or useHTML within SVG
					} else {

						bBox = wrapper.htmlGetBBox();

					}

					// True SVG elements as well as HTML elements in modern browsers using the .useHTML option
					// need to compensated for rotation
					if (renderer.isSVG) {
						width = bBox.width;
						height = bBox.height;

						// Workaround for wrong bounding box in IE9 and IE10 (#1101, #1505, #1669, #2568)
						if (isIE && styles && styles.fontSize === '11px' && height.toPrecision(3) === '16.9') {
							bBox.height = height = 14;
						}

						// Adjust for rotated text
						if (rotation) {
							bBox.width = mathAbs(height * mathSin(rad)) + mathAbs(width * mathCos(rad));
							bBox.height = mathAbs(height * mathCos(rad)) + mathAbs(width * mathSin(rad));
						}
					}

					// Cache it
					if (cacheKey) {
						renderer.cache[cacheKey] = bBox;
					}
				}
				return bBox;
			},

			/**
			 * Show the element
			 */
			show: function (inherit) {
				return this.attr({ visibility: inherit ? 'inherit' : VISIBLE });
			},

			/**
			 * Hide the element
			 */
			hide: function () {
				return this.attr({ visibility: HIDDEN });
			},

			fadeOut: function (duration) {
				var elemWrapper = this;
				elemWrapper.animate({
					opacity: 0
				}, {
					duration: duration || 150,
					complete: function () {
						elemWrapper.attr({ y: -9999 }); // #3088, assuming we're only using this for tooltips
					}
				});
			},

			/**
			 * Add the element
			 * @param {Object|Undefined} parent Can be an element, an element wrapper or undefined
			 *	to append the element to the renderer.box.
			 */
			add: function (parent) {

				var renderer = this.renderer,
					element = this.element,
					inserted;

				if (parent) {
					this.parentGroup = parent;
				}

				// mark as inverted
				this.parentInverted = parent && parent.inverted;

				// build formatted text
				if (this.textStr !== undefined) {
					renderer.buildText(this);
				}

				// Mark as added
				this.added = true;

				// If we're adding to renderer root, or other elements in the group 
				// have a z index, we need to handle it
				if (!parent || parent.handleZ || this.zIndex) {
					inserted = this.zIndexSetter();
				}

				// If zIndex is not handled, append at the end
				if (!inserted) {
					(parent ? parent.element : renderer.box).appendChild(element);
				}

				// fire an event for internal hooks
				if (this.onAdd) {
					this.onAdd();
				}

				return this;
			},

			/**
			 * Removes a child either by removeChild or move to garbageBin.
			 * Issue 490; in VML removeChild results in Orphaned nodes according to sIEve, discardElement does not.
			 */
			safeRemoveChild: function (element) {
				var parentNode = element.parentNode;
				if (parentNode) {
					parentNode.removeChild(element);
				}
			},

			/**
			 * Destroy the element and element wrapper
			 */
			destroy: function () {
				var wrapper = this,
					element = wrapper.element || {},
					shadows = wrapper.shadows,
					parentToClean = wrapper.renderer.isSVG && element.nodeName === 'SPAN' && wrapper.parentGroup,
					grandParent,
					key,
					i;

				// remove events
				element.onclick = element.onmouseout = element.onmouseover = element.onmousemove = element.point = null;
				stop(wrapper); // stop running animations

				if (wrapper.clipPath) {
					wrapper.clipPath = wrapper.clipPath.destroy();
				}

				// Destroy stops in case this is a gradient object
				if (wrapper.stops) {
					for (i = 0; i < wrapper.stops.length; i++) {
						wrapper.stops[i] = wrapper.stops[i].destroy();
					}
					wrapper.stops = null;
				}

				// remove element
				wrapper.safeRemoveChild(element);

				// destroy shadows
				if (shadows) {
					each(shadows, function (shadow) {
						wrapper.safeRemoveChild(shadow);
					});
				}

				// In case of useHTML, clean up empty containers emulating SVG groups (#1960, #2393, #2697).
				while (parentToClean && parentToClean.div && parentToClean.div.childNodes.length === 0) {
					grandParent = parentToClean.parentGroup;
					wrapper.safeRemoveChild(parentToClean.div);
					delete parentToClean.div;
					parentToClean = grandParent;
				}

				// remove from alignObjects
				if (wrapper.alignTo) {
					erase(wrapper.renderer.alignedObjects, wrapper);
				}

				for (key in wrapper) {
					delete wrapper[key];
				}

				return null;
			},

			/**
			 * Add a shadow to the element. Must be done after the element is added to the DOM
			 * @param {Boolean|Object} shadowOptions
			 */
			shadow: function (shadowOptions, group, cutOff) {
				var shadows = [],
					i,
					shadow,
					element = this.element,
					strokeWidth,
					shadowWidth,
					shadowElementOpacity,

					// compensate for inverted plot area
					transform;


				if (shadowOptions) {
					shadowWidth = pick(shadowOptions.width, 3);
					shadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;
					transform = this.parentInverted ?
						'(-1,-1)' :
						'(' + pick(shadowOptions.offsetX, 1) + ', ' + pick(shadowOptions.offsetY, 1) + ')';
					for (i = 1; i <= shadowWidth; i++) {
						shadow = element.cloneNode(0);
						strokeWidth = (shadowWidth * 2) + 1 - (2 * i);
						attr(shadow, {
							'isShadow': 'true',
							'stroke': shadowOptions.color || 'black',
							'stroke-opacity': shadowElementOpacity * i,
							'stroke-width': strokeWidth,
							'transform': 'translate' + transform,
							'fill': NONE
						});
						if (cutOff) {
							attr(shadow, 'height', mathMax(attr(shadow, 'height') - strokeWidth, 0));
							shadow.cutHeight = strokeWidth;
						}

						if (group) {
							group.element.appendChild(shadow);
						} else {
							element.parentNode.insertBefore(shadow, element);
						}

						shadows.push(shadow);
					}

					this.shadows = shadows;
				}
				return this;

			},

			xGetter: function (key) {
				if (this.element.nodeName === 'circle') {
					key = { x: 'cx', y: 'cy' }[key] || key;
				}
				return this._defaultGetter(key);
			},

			/** 
			 * Get the current value of an attribute or pseudo attribute, used mainly
			 * for animation.
			 */
			_defaultGetter: function (key) {
				var ret = pick(this[key], this.element ? this.element.getAttribute(key) : null, 0);

				if (/^[\-0-9\.]+$/.test(ret)) { // is numerical
					ret = parseFloat(ret);
				}
				return ret;
			},


			dSetter: function (value, key, element) {
				if (value && value.join) { // join path
					value = value.join(' ');
				}
				if (/(NaN| {2}|^$)/.test(value)) {
					value = 'M 0 0';
				}
				element.setAttribute(key, value);

				this[key] = value;
			},
			dashstyleSetter: function (value) {
				var i;
				value = value && value.toLowerCase();
				if (value) {
					value = value
						.replace('shortdashdotdot', '3,1,1,1,1,1,')
						.replace('shortdashdot', '3,1,1,1')
						.replace('shortdot', '1,1,')
						.replace('shortdash', '3,1,')
						.replace('longdash', '8,3,')
						.replace(/dot/g, '1,3,')
						.replace('dash', '4,3,')
						.replace(/,$/, '')
						.split(','); // ending comma

					i = value.length;
					while (i--) {
						value[i] = pInt(value[i]) * this['stroke-width'];
					}
					value = value.join(',')
						.replace('NaN', 'none'); // #3226
					this.element.setAttribute('stroke-dasharray', value);
				}
			},
			alignSetter: function (value) {
				this.element.setAttribute('text-anchor', { left: 'start', center: 'middle', right: 'end' }[value]);
			},
			opacitySetter: function (value, key, element) {
				this[key] = value;
				element.setAttribute(key, value);
			},
			titleSetter: function (value) {
				var titleNode = this.element.getElementsByTagName('title')[0];
				if (!titleNode) {
					titleNode = doc.createElementNS(SVG_NS, 'title');
					this.element.appendChild(titleNode);
				}
				titleNode.appendChild(
					doc.createTextNode(
						(String(pick(value), '')).replace(/<[^>]*>/g, '') // #3276, #3895
					)
				);
			},
			textSetter: function (value) {
				if (value !== this.textStr) {
					// Delete bBox memo when the text changes
					delete this.bBox;
				
					this.textStr = value;
					if (this.added) {
						this.renderer.buildText(this);
					}
				}
			},
			fillSetter: function (value, key, element) {
				if (typeof value === 'string') {
					element.setAttribute(key, value);
				} else if (value) {
					this.colorGradient(value, key, element);
				}
			},
			visibilitySetter: function (value, key, element) {
				// IE9-11 doesn't handle visibilty:inherit well, so we remove the attribute instead (#2881, #3909)
				if (value === 'inherit') {
					element.removeAttribute(key);
				} else {
					element.setAttribute(key, value);
				}
			},
			zIndexSetter: function (value, key) {
				var renderer = this.renderer,
					parentGroup = this.parentGroup,
					parentWrapper = parentGroup || renderer,
					parentNode = parentWrapper.element || renderer.box,
					childNodes,
					otherElement,
					otherZIndex,
					element = this.element,
					inserted,
					run = this.added,
					i;
				
				if (defined(value)) {
					element.setAttribute(key, value); // So we can read it for other elements in the group
					value = +value;
					if (this[key] === value) { // Only update when needed (#3865)
						run = false;
					}
					this[key] = value;
				}

				// Insert according to this and other elements' zIndex. Before .add() is called,
				// nothing is done. Then on add, or by later calls to zIndexSetter, the node
				// is placed on the right place in the DOM.
				if (run) {
					value = this.zIndex;

					if (value && parentGroup) {
						parentGroup.handleZ = true;
					}
				
					childNodes = parentNode.childNodes;
					for (i = 0; i < childNodes.length && !inserted; i++) {
						otherElement = childNodes[i];
						otherZIndex = attr(otherElement, 'zIndex');
						if (otherElement !== element && (
								// Insert before the first element with a higher zIndex
								pInt(otherZIndex) > value ||
								// If no zIndex given, insert before the first element with a zIndex
								(!defined(value) && defined(otherZIndex))

								)) {
							parentNode.insertBefore(element, otherElement);
							inserted = true;
						}
					}
					if (!inserted) {
						parentNode.appendChild(element);
					}
				}
				return inserted;
			},
			_defaultSetter: function (value, key, element) {
				element.setAttribute(key, value);
			}
		};

		// Some shared setters and getters
		SVGElement.prototype.yGetter = SVGElement.prototype.xGetter;
		SVGElement.prototype.translateXSetter = SVGElement.prototype.translateYSetter = 
				SVGElement.prototype.rotationSetter = SVGElement.prototype.verticalAlignSetter = 
				SVGElement.prototype.scaleXSetter = SVGElement.prototype.scaleYSetter = function (value, key) {
			this[key] = value;
			this.doTransform = true;
		};

		// WebKit and Batik have problems with a stroke-width of zero, so in this case we remove the 
		// stroke attribute altogether. #1270, #1369, #3065, #3072.
		SVGElement.prototype['stroke-widthSetter'] = SVGElement.prototype.strokeSetter = function (value, key, element) {
			this[key] = value;
			// Only apply the stroke attribute if the stroke width is defined and larger than 0
			if (this.stroke && this['stroke-width']) {
				this.strokeWidth = this['stroke-width'];
				SVGElement.prototype.fillSetter.call(this, this.stroke, 'stroke', element); // use prototype as instance may be overridden
				element.setAttribute('stroke-width', this['stroke-width']);
				this.hasStroke = true;
			} else if (key === 'stroke-width' && value === 0 && this.hasStroke) {
				element.removeAttribute('stroke');
				this.hasStroke = false;
			}
		};


		/**
		 * The default SVG renderer
		 */
		var SVGRenderer = function () {
			this.init.apply(this, arguments);
		};
		SVGRenderer.prototype = {
			Element: SVGElement,

			/**
			 * Initialize the SVGRenderer
			 * @param {Object} container
			 * @param {Number} width
			 * @param {Number} height
			 * @param {Boolean} forExport
			 */
			init: function (container, width, height, style, forExport) {
				var renderer = this,
					loc = location,
					boxWrapper,
					element,
					desc;

				boxWrapper = renderer.createElement('svg')
					.attr({
						version: '1.1'
					})
					.css(this.getStyle(style));
				element = boxWrapper.element;
				container.appendChild(element);

				// For browsers other than IE, add the namespace attribute (#1978)
				if (container.innerHTML.indexOf('xmlns') === -1) {
					attr(element, 'xmlns', SVG_NS);
				}

				// object properties
				renderer.isSVG = true;
				renderer.box = element;
				renderer.boxWrapper = boxWrapper;
				renderer.alignedObjects = [];

				// Page url used for internal references. #24, #672, #1070
				renderer.url = (isFirefox || isWebKit) && doc.getElementsByTagName('base').length ?
					loc.href
						.replace(/#.*?$/, '') // remove the hash
						.replace(/([\('\)])/g, '\\$1') // escape parantheses and quotes
						.replace(/ /g, '%20') : // replace spaces (needed for Safari only)
					'';

				// Add description
				desc = this.createElement('desc').add();
				desc.element.appendChild(doc.createTextNode('Created with ' + PRODUCT + ' ' + VERSION));


				renderer.defs = this.createElement('defs').add();
				renderer.forExport = forExport;
				renderer.gradients = {}; // Object where gradient SvgElements are stored
				renderer.cache = {}; // Cache for numerical bounding boxes

				renderer.setSize(width, height, false);



				// Issue 110 workaround:
				// In Firefox, if a div is positioned by percentage, its pixel position may land
				// between pixels. The container itself doesn't display this, but an SVG element
				// inside this container will be drawn at subpixel precision. In order to draw
				// sharp lines, this must be compensated for. This doesn't seem to work inside
				// iframes though (like in jsFiddle).
				var subPixelFix, rect;
				if (isFirefox && container.getBoundingClientRect) {
					renderer.subPixelFix = subPixelFix = function () {
						css(container, { left: 0, top: 0 });
						rect = container.getBoundingClientRect();
						css(container, {
							left: (mathCeil(rect.left) - rect.left) + PX,
							top: (mathCeil(rect.top) - rect.top) + PX
						});
					};

					// run the fix now
					subPixelFix();

					// run it on resize
					addEvent(win, 'resize', subPixelFix);
				}
			},

			getStyle: function (style) {
				return (this.style = extend({
					fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif', // default font
					fontSize: '12px'
				}, style));
			},

			/**
			 * Detect whether the renderer is hidden. This happens when one of the parent elements
			 * has display: none. #608.
			 */
			isHidden: function () {
				return !this.boxWrapper.getBBox().width;
			},

			/**
			 * Destroys the renderer and its allocated members.
			 */
			destroy: function () {
				var renderer = this,
					rendererDefs = renderer.defs;
				renderer.box = null;
				renderer.boxWrapper = renderer.boxWrapper.destroy();

				// Call destroy on all gradient elements
				destroyObjectProperties(renderer.gradients || {});
				renderer.gradients = null;

				// Defs are null in VMLRenderer
				// Otherwise, destroy them here.
				if (rendererDefs) {
					renderer.defs = rendererDefs.destroy();
				}

				// Remove sub pixel fix handler
				// We need to check that there is a handler, otherwise all functions that are registered for event 'resize' are removed
				// See issue #982
				if (renderer.subPixelFix) {
					removeEvent(win, 'resize', renderer.subPixelFix);
				}

				renderer.alignedObjects = null;

				return null;
			},

			/**
			 * Create a wrapper for an SVG element
			 * @param {Object} nodeName
			 */
			createElement: function (nodeName) {
				var wrapper = new this.Element();
				wrapper.init(this, nodeName);
				return wrapper;
			},

			/**
			 * Dummy function for use in canvas renderer
			 */
			draw: function () {},

			/**
			 * Parse a simple HTML string into SVG tspans
			 *
			 * @param {Object} textNode The parent text SVG node
			 */
			buildText: function (wrapper) {
				var textNode = wrapper.element,
					renderer = this,
					forExport = renderer.forExport,
					textStr = pick(wrapper.textStr, '').toString(),
					hasMarkup = textStr.indexOf('<') !== -1,
					lines,
					childNodes = textNode.childNodes,
					styleRegex,
					hrefRegex,
					parentX = attr(textNode, 'x'),
					textStyles = wrapper.styles,
					width = wrapper.textWidth,
					textLineHeight = textStyles && textStyles.lineHeight,
					textShadow = textStyles && textStyles.textShadow,
					ellipsis = textStyles && textStyles.textOverflow === 'ellipsis',
					i = childNodes.length,
					tempParent = width && !wrapper.added && this.box,
					getLineHeight = function (tspan) {
						return textLineHeight ? 
							pInt(textLineHeight) :
							renderer.fontMetrics(
								/(px|em)$/.test(tspan && tspan.style.fontSize) ?
									tspan.style.fontSize :
									((textStyles && textStyles.fontSize) || renderer.style.fontSize || 12),
								tspan
							).h;
					},
					unescapeAngleBrackets = function (inputStr) {
						return inputStr.replace(/&lt;/g, '<').replace(/&gt;/g, '>');
					};

				/// remove old text
				while (i--) {
					textNode.removeChild(childNodes[i]);
				}

				// Skip tspans, add text directly to text node. The forceTSpan is a hook 
				// used in text outline hack.
				if (!hasMarkup && !textShadow && !ellipsis && textStr.indexOf(' ') === -1) {
					textNode.appendChild(doc.createTextNode(unescapeAngleBrackets(textStr)));
					return;

				// Complex strings, add more logic
				} else {

					styleRegex = /<.*style="([^"]+)".*>/;
					hrefRegex = /<.*href="(http[^"]+)".*>/;

					if (tempParent) {
						tempParent.appendChild(textNode); // attach it to the DOM to read offset width
					}

					if (hasMarkup) {
						lines = textStr
							.replace(/<(b|strong)>/g, '<span style="font-weight:bold">')
							.replace(/<(i|em)>/g, '<span style="font-style:italic">')
							.replace(/<a/g, '<span')
							.replace(/<\/(b|strong|i|em|a)>/g, '</span>')
							.split(/<br.*?>/g);

					} else {
						lines = [textStr];
					}


					// remove empty line at end
					if (lines[lines.length - 1] === '') {
						lines.pop();
					}

					
					// build the lines
					each(lines, function (line, lineNo) {
						var spans, spanNo = 0;

						line = line.replace(/<span/g, '|||<span').replace(/<\/span>/g, '</span>|||');
						spans = line.split('|||');

						each(spans, function (span) {
							if (span !== '' || spans.length === 1) {
								var attributes = {},
									tspan = doc.createElementNS(SVG_NS, 'tspan'),
									spanStyle; // #390
								if (styleRegex.test(span)) {
									spanStyle = span.match(styleRegex)[1].replace(/(;| |^)color([ :])/, '$1fill$2');
									attr(tspan, 'style', spanStyle);
								}
								if (hrefRegex.test(span) && !forExport) { // Not for export - #1529
									attr(tspan, 'onclick', 'location.href=\"' + span.match(hrefRegex)[1] + '\"');
									css(tspan, { cursor: 'pointer' });
								}

								span = unescapeAngleBrackets(span.replace(/<(.|\n)*?>/g, '') || ' ');

								// Nested tags aren't supported, and cause crash in Safari (#1596)
								if (span !== ' ') {

									// add the text node
									tspan.appendChild(doc.createTextNode(span));

									if (!spanNo) { // first span in a line, align it to the left
										if (lineNo && parentX !== null) {
											attributes.x = parentX;
										}
									} else {
										attributes.dx = 0; // #16
									}

									// add attributes
									attr(tspan, attributes);

									// Append it
									textNode.appendChild(tspan);

									// first span on subsequent line, add the line height
									if (!spanNo && lineNo) {

										// allow getting the right offset height in exporting in IE
										if (!hasSVG && forExport) {
											css(tspan, { display: 'block' });
										}

										// Set the line height based on the font size of either
										// the text element or the tspan element
										attr(
											tspan,
											'dy',
											getLineHeight(tspan)
										);
									}

									/*if (width) {
										renderer.breakText(wrapper, width);
									}*/

									// Check width and apply soft breaks or ellipsis
									if (width) {
										var words = span.replace(/([^\^])-/g, '$1- ').split(' '), // #1273
											hasWhiteSpace = spans.length > 1 || lineNo || (words.length > 1 && textStyles.whiteSpace !== 'nowrap'),
											tooLong,
											wasTooLong,
											actualWidth,
											rest = [],
											dy = getLineHeight(tspan),
											softLineNo = 1,
											rotation = wrapper.rotation,
											wordStr = span, // for ellipsis
											cursor = wordStr.length, // binary search cursor
											bBox;

										while ((hasWhiteSpace || ellipsis) && (words.length || rest.length)) {
											wrapper.rotation = 0; // discard rotation when computing box
											bBox = wrapper.getBBox(true);
											actualWidth = bBox.width;

											// Old IE cannot measure the actualWidth for SVG elements (#2314)
											if (!hasSVG && renderer.forExport) {
												actualWidth = renderer.measureSpanWidth(tspan.firstChild.data, wrapper.styles);
											}

											tooLong = actualWidth > width;

											// For ellipsis, do a binary search for the correct string length
											if (wasTooLong === undefined) {
												wasTooLong = tooLong; // First time
											}
											if (ellipsis && wasTooLong) {
												cursor /= 2;

												if (wordStr === '' || (!tooLong && cursor < 0.5)) {
													words = []; // All ok, break out
												} else {
													if (tooLong) {
														wasTooLong = true;
													}
													wordStr = span.substring(0, wordStr.length + (tooLong ? -1 : 1) * mathCeil(cursor));
													words = [wordStr + (width > 3 ? '\u2026' : '')];
													tspan.removeChild(tspan.firstChild);
												}

											// Looping down, this is the first word sequence that is not too long,
											// so we can move on to build the next line.
											} else if (!tooLong || words.length === 1) {
												words = rest;
												rest = [];
														
												if (words.length) {
													softLineNo++;
													
													tspan = doc.createElementNS(SVG_NS, 'tspan');
													attr(tspan, {
														dy: dy,
														x: parentX
													});
													if (spanStyle) { // #390
														attr(tspan, 'style', spanStyle);
													}
													textNode.appendChild(tspan);
												}
												if (actualWidth > width) { // a single word is pressing it out
													width = actualWidth;
												}
											} else { // append to existing line tspan
												tspan.removeChild(tspan.firstChild);
												rest.unshift(words.pop());
											}
											if (words.length) {
												tspan.appendChild(doc.createTextNode(words.join(' ').replace(/- /g, '-')));
											}
										}
										if (wasTooLong) {
											wrapper.attr('title', wrapper.textStr);
										}
										wrapper.rotation = rotation;
									}

									spanNo++;
								}
							}
						});
					});
					if (tempParent) {
						tempParent.removeChild(textNode); // attach it to the DOM to read offset width
					}

					// Apply the text shadow
					if (textShadow && wrapper.applyTextShadow) {
						wrapper.applyTextShadow(textShadow);
					}
				}
			},

			

			/*
			breakText: function (wrapper, width) {
				var bBox = wrapper.getBBox(),
					node = wrapper.element,
					textLength = node.textContent.length,
					pos = mathRound(width * textLength / bBox.width), // try this position first, based on average character width
					increment = 0,
					finalPos;

				if (bBox.width > width) {
					while (finalPos === undefined) {
						textLength = node.getSubStringLength(0, pos);

						if (textLength <= width) {
							if (increment === -1) {
								finalPos = pos;
							} else {
								increment = 1;
							}
						} else {
							if (increment === 1) {
								finalPos = pos - 1;
							} else {
								increment = -1;
							}
						}
						pos += increment;
					}
				}
				console.log(finalPos, node.getSubStringLength(0, finalPos))
			},
			*/

			/** 
			 * Returns white for dark colors and black for bright colors
			 */
			getContrast: function (color) {
				color = Color(color).rgba;
				return color[0] + color[1] + color[2] > 384 ? '#000000' : '#FFFFFF';
			},

			/**
			 * Create a button with preset states
			 * @param {String} text
			 * @param {Number} x
			 * @param {Number} y
			 * @param {Function} callback
			 * @param {Object} normalState
			 * @param {Object} hoverState
			 * @param {Object} pressedState
			 */
			button: function (text, x, y, callback, normalState, hoverState, pressedState, disabledState, shape) {
				var label = this.label(text, x, y, shape, null, null, null, null, 'button'),
					curState = 0,
					stateOptions,
					stateStyle,
					normalStyle,
					hoverStyle,
					pressedStyle,
					disabledStyle,
					verticalGradient = { x1: 0, y1: 0, x2: 0, y2: 1 };

				// Normal state - prepare the attributes
				normalState = merge({
					'stroke-width': 1,
					stroke: '#CCCCCC',
					fill: {
						linearGradient: verticalGradient,
						stops: [
							[0, '#FEFEFE'],
							[1, '#F6F6F6']
						]
					},
					r: 2,
					padding: 5,
					style: {
						color: 'black'
					}
				}, normalState);
				normalStyle = normalState.style;
				delete normalState.style;

				// Hover state
				hoverState = merge(normalState, {
					stroke: '#68A',
					fill: {
						linearGradient: verticalGradient,
						stops: [
							[0, '#FFF'],
							[1, '#ACF']
						]
					}
				}, hoverState);
				hoverStyle = hoverState.style;
				delete hoverState.style;

				// Pressed state
				pressedState = merge(normalState, {
					stroke: '#68A',
					fill: {
						linearGradient: verticalGradient,
						stops: [
							[0, '#9BD'],
							[1, '#CDF']
						]
					}
				}, pressedState);
				pressedStyle = pressedState.style;
				delete pressedState.style;

				// Disabled state
				disabledState = merge(normalState, {
					style: {
						color: '#CCC'
					}
				}, disabledState);
				disabledStyle = disabledState.style;
				delete disabledState.style;

				// Add the events. IE9 and IE10 need mouseover and mouseout to funciton (#667).
				addEvent(label.element, isIE ? 'mouseover' : 'mouseenter', function () {
					if (curState !== 3) {
						label.attr(hoverState)
							.css(hoverStyle);
					}
				});
				addEvent(label.element, isIE ? 'mouseout' : 'mouseleave', function () {
					if (curState !== 3) {
						stateOptions = [normalState, hoverState, pressedState][curState];
						stateStyle = [normalStyle, hoverStyle, pressedStyle][curState];
						label.attr(stateOptions)
							.css(stateStyle);
					}
				});

				label.setState = function (state) {
					label.state = curState = state;
					if (!state) {
						label.attr(normalState)
							.css(normalStyle);
					} else if (state === 2) {
						label.attr(pressedState)
							.css(pressedStyle);
					} else if (state === 3) {
						label.attr(disabledState)
							.css(disabledStyle);
					}
				};

				return label
					.on('click', function (e) {
						if (curState !== 3) {
							callback.call(label, e);
						}
					})
					.attr(normalState)
					.css(extend({ cursor: 'default' }, normalStyle));
			},

			/**
			 * Make a straight line crisper by not spilling out to neighbour pixels
			 * @param {Array} points
			 * @param {Number} width
			 */
			crispLine: function (points, width) {
				// points format: [M, 0, 0, L, 100, 0]
				// normalize to a crisp line
				if (points[1] === points[4]) {
					// Substract due to #1129. Now bottom and left axis gridlines behave the same.
					points[1] = points[4] = mathRound(points[1]) - (width % 2 / 2);
				}
				if (points[2] === points[5]) {
					points[2] = points[5] = mathRound(points[2]) + (width % 2 / 2);
				}
				return points;
			},


			/**
			 * Draw a path
			 * @param {Array} path An SVG path in array form
			 */
			path: function (path) {
				var attr = {
					fill: NONE
				};
				if (isArray(path)) {
					attr.d = path;
				} else if (isObject(path)) { // attributes
					extend(attr, path);
				}
				return this.createElement('path').attr(attr);
			},

			/**
			 * Draw and return an SVG circle
			 * @param {Number} x The x position
			 * @param {Number} y The y position
			 * @param {Number} r The radius
			 */
			circle: function (x, y, r) {
				var attr = isObject(x) ?
					x :
					{
						x: x,
						y: y,
						r: r
					},
					wrapper = this.createElement('circle');

				wrapper.xSetter = function (value) {
					this.element.setAttribute('cx', value);
				};
				wrapper.ySetter = function (value) {
					this.element.setAttribute('cy', value);
				};
				return wrapper.attr(attr);
			},

			/**
			 * Draw and return an arc
			 * @param {Number} x X position
			 * @param {Number} y Y position
			 * @param {Number} r Radius
			 * @param {Number} innerR Inner radius like used in donut charts
			 * @param {Number} start Starting angle
			 * @param {Number} end Ending angle
			 */
			arc: function (x, y, r, innerR, start, end) {
				var arc;

				if (isObject(x)) {
					y = x.y;
					r = x.r;
					innerR = x.innerR;
					start = x.start;
					end = x.end;
					x = x.x;
				}

				// Arcs are defined as symbols for the ability to set
				// attributes in attr and animate
				arc = this.symbol('arc', x || 0, y || 0, r || 0, r || 0, {
					innerR: innerR || 0,
					start: start || 0,
					end: end || 0
				});
				arc.r = r; // #959
				return arc;
			},

			/**
			 * Draw and return a rectangle
			 * @param {Number} x Left position
			 * @param {Number} y Top position
			 * @param {Number} width
			 * @param {Number} height
			 * @param {Number} r Border corner radius
			 * @param {Number} strokeWidth A stroke width can be supplied to allow crisp drawing
			 */
			rect: function (x, y, width, height, r, strokeWidth) {

				r = isObject(x) ? x.r : r;

				var wrapper = this.createElement('rect'),
					attribs = isObject(x) ? x : x === UNDEFINED ? {} : {
						x: x,
						y: y,
						width: mathMax(width, 0),
						height: mathMax(height, 0)
					};

				if (strokeWidth !== UNDEFINED) {
					attribs.strokeWidth = strokeWidth;
					attribs = wrapper.crisp(attribs);
				}

				if (r) {
					attribs.r = r;
				}

				wrapper.rSetter = function (value) {
					attr(this.element, {
						rx: value,
						ry: value
					});
				};
				
				return wrapper.attr(attribs);
			},

			/**
			 * Resize the box and re-align all aligned elements
			 * @param {Object} width
			 * @param {Object} height
			 * @param {Boolean} animate
			 *
			 */
			setSize: function (width, height, animate) {
				var renderer = this,
					alignedObjects = renderer.alignedObjects,
					i = alignedObjects.length;

				renderer.width = width;
				renderer.height = height;

				renderer.boxWrapper[pick(animate, true) ? 'animate' : 'attr']({
					width: width,
					height: height
				});

				while (i--) {
					alignedObjects[i].align();
				}
			},

			/**
			 * Create a group
			 * @param {String} name The group will be given a class name of 'highcharts-{name}'.
			 *	 This can be used for styling and scripting.
			 */
			g: function (name) {
				var elem = this.createElement('g');
				return defined(name) ? elem.attr({ 'class': PREFIX + name }) : elem;
			},

			/**
			 * Display an image
			 * @param {String} src
			 * @param {Number} x
			 * @param {Number} y
			 * @param {Number} width
			 * @param {Number} height
			 */
			image: function (src, x, y, width, height) {
				var attribs = {
						preserveAspectRatio: NONE
					},
					elemWrapper;

				// optional properties
				if (arguments.length > 1) {
					extend(attribs, {
						x: x,
						y: y,
						width: width,
						height: height
					});
				}

				elemWrapper = this.createElement('image').attr(attribs);

				// set the href in the xlink namespace
				if (elemWrapper.element.setAttributeNS) {
					elemWrapper.element.setAttributeNS('http://www.w3.org/1999/xlink',
						'href', src);
				} else {
					// could be exporting in IE
					// using href throws "not supported" in ie7 and under, requries regex shim to fix later
					elemWrapper.element.setAttribute('hc-svg-href', src);
				}
				return elemWrapper;
			},

			/**
			 * Draw a symbol out of pre-defined shape paths from the namespace 'symbol' object.
			 *
			 * @param {Object} symbol
			 * @param {Object} x
			 * @param {Object} y
			 * @param {Object} radius
			 * @param {Object} options
			 */
			symbol: function (symbol, x, y, width, height, options) {

				var obj,

					// get the symbol definition function
					symbolFn = this.symbols[symbol],

					// check if there's a path defined for this symbol
					path = symbolFn && symbolFn(
						mathRound(x),
						mathRound(y),
						width,
						height,
						options
					),

					imageElement,
					imageRegex = /^url\((.*?)\)$/,
					imageSrc,
					imageSize,
					centerImage;

				if (path) {

					obj = this.path(path);
					// expando properties for use in animate and attr
					extend(obj, {
						symbolName: symbol,
						x: x,
						y: y,
						width: width,
						height: height
					});
					if (options) {
						extend(obj, options);
					}


				// image symbols
				} else if (imageRegex.test(symbol)) {

					// On image load, set the size and position
					centerImage = function (img, size) {
						if (img.element) { // it may be destroyed in the meantime (#1390)
							img.attr({
								width: size[0],
								height: size[1]
							});

							if (!img.alignByTranslate) { // #185
								img.translate(
									mathRound((width - size[0]) / 2), // #1378
									mathRound((height - size[1]) / 2)
								);
							}
						}
					};

					imageSrc = symbol.match(imageRegex)[1];
					imageSize = symbolSizes[imageSrc] || (options && options.width && options.height && [options.width, options.height]);

					// Ireate the image synchronously, add attribs async
					obj = this.image(imageSrc)
						.attr({
							x: x,
							y: y
						});
					obj.isImg = true;

					if (imageSize) {
						centerImage(obj, imageSize);
					} else {
						// Initialize image to be 0 size so export will still function if there's no cached sizes.
						obj.attr({ width: 0, height: 0 });

						// Create a dummy JavaScript image to get the width and height. Due to a bug in IE < 8,
						// the created element must be assigned to a variable in order to load (#292).
						imageElement = createElement('img', {
							onload: function () {
								centerImage(obj, symbolSizes[imageSrc] = [this.width, this.height]);
							},
							src: imageSrc
						});
					}
				}

				return obj;
			},

			/**
			 * An extendable collection of functions for defining symbol paths.
			 */
			symbols: {
				'circle': function (x, y, w, h) {
					var cpw = 0.166 * w;
					return [
						M, x + w / 2, y,
						'C', x + w + cpw, y, x + w + cpw, y + h, x + w / 2, y + h,
						'C', x - cpw, y + h, x - cpw, y, x + w / 2, y,
						'Z'
					];
				},

				'square': function (x, y, w, h) {
					return [
						M, x, y,
						L, x + w, y,
						x + w, y + h,
						x, y + h,
						'Z'
					];
				},

				'triangle': function (x, y, w, h) {
					return [
						M, x + w / 2, y,
						L, x + w, y + h,
						x, y + h,
						'Z'
					];
				},

				'triangle-down': function (x, y, w, h) {
					return [
						M, x, y,
						L, x + w, y,
						x + w / 2, y + h,
						'Z'
					];
				},
				'diamond': function (x, y, w, h) {
					return [
						M, x + w / 2, y,
						L, x + w, y + h / 2,
						x + w / 2, y + h,
						x, y + h / 2,
						'Z'
					];
				},
				'arc': function (x, y, w, h, options) {
					var start = options.start,
						radius = options.r || w || h,
						end = options.end - 0.001, // to prevent cos and sin of start and end from becoming equal on 360 arcs (related: #1561)
						innerRadius = options.innerR,
						open = options.open,
						cosStart = mathCos(start),
						sinStart = mathSin(start),
						cosEnd = mathCos(end),
						sinEnd = mathSin(end),
						longArc = options.end - start < mathPI ? 0 : 1;

					return [
						M,
						x + radius * cosStart,
						y + radius * sinStart,
						'A', // arcTo
						radius, // x radius
						radius, // y radius
						0, // slanting
						longArc, // long or short arc
						1, // clockwise
						x + radius * cosEnd,
						y + radius * sinEnd,
						open ? M : L,
						x + innerRadius * cosEnd,
						y + innerRadius * sinEnd,
						'A', // arcTo
						innerRadius, // x radius
						innerRadius, // y radius
						0, // slanting
						longArc, // long or short arc
						0, // clockwise
						x + innerRadius * cosStart,
						y + innerRadius * sinStart,

						open ? '' : 'Z' // close
					];
				},

				/**
				 * Callout shape used for default tooltips, also used for rounded rectangles in VML
				 */
				callout: function (x, y, w, h, options) {
					var arrowLength = 6,
						halfDistance = 6,
						r = mathMin((options && options.r) || 0, w, h),
						safeDistance = r + halfDistance,
						anchorX = options && options.anchorX,
						anchorY = options && options.anchorY,
						path;

					path = [
						'M', x + r, y, 
						'L', x + w - r, y, // top side
						'C', x + w, y, x + w, y, x + w, y + r, // top-right corner
						'L', x + w, y + h - r, // right side
						'C', x + w, y + h, x + w, y + h, x + w - r, y + h, // bottom-right corner
						'L', x + r, y + h, // bottom side
						'C', x, y + h, x, y + h, x, y + h - r, // bottom-left corner
						'L', x, y + r, // left side
						'C', x, y, x, y, x + r, y // top-right corner
					];
					
					if (anchorX && anchorX > w && anchorY > y + safeDistance && anchorY < y + h - safeDistance) { // replace right side
						path.splice(13, 3,
							'L', x + w, anchorY - halfDistance, 
							x + w + arrowLength, anchorY,
							x + w, anchorY + halfDistance,
							x + w, y + h - r
						);
					} else if (anchorX && anchorX < 0 && anchorY > y + safeDistance && anchorY < y + h - safeDistance) { // replace left side
						path.splice(33, 3, 
							'L', x, anchorY + halfDistance, 
							x - arrowLength, anchorY,
							x, anchorY - halfDistance,
							x, y + r
						);
					} else if (anchorY && anchorY > h && anchorX > x + safeDistance && anchorX < x + w - safeDistance) { // replace bottom
						path.splice(23, 3,
							'L', anchorX + halfDistance, y + h,
							anchorX, y + h + arrowLength,
							anchorX - halfDistance, y + h,
							x + r, y + h
						);
					} else if (anchorY && anchorY < 0 && anchorX > x + safeDistance && anchorX < x + w - safeDistance) { // replace top
						path.splice(3, 3,
							'L', anchorX - halfDistance, y,
							anchorX, y - arrowLength,
							anchorX + halfDistance, y,
							w - r, y
						);
					}
					return path;
				}
			},

			/**
			 * Define a clipping rectangle
			 * @param {String} id
			 * @param {Number} x
			 * @param {Number} y
			 * @param {Number} width
			 * @param {Number} height
			 */
			clipRect: function (x, y, width, height) {
				var wrapper,
					id = PREFIX + idCounter++,

					clipPath = this.createElement('clipPath').attr({
						id: id
					}).add(this.defs);

				wrapper = this.rect(x, y, width, height, 0).add(clipPath);
				wrapper.id = id;
				wrapper.clipPath = clipPath;
				wrapper.count = 0;

				return wrapper;
			},


			


			/**
			 * Add text to the SVG object
			 * @param {String} str
			 * @param {Number} x Left position
			 * @param {Number} y Top position
			 * @param {Boolean} useHTML Use HTML to render the text
			 */
			text: function (str, x, y, useHTML) {

				// declare variables
				var renderer = this,
					fakeSVG = useCanVG || (!hasSVG && renderer.forExport),
					wrapper,
					attr = {};

				if (useHTML && !renderer.forExport) {
					return renderer.html(str, x, y);
				}

				attr.x = Math.round(x || 0); // X is always needed for line-wrap logic
				if (y) {
					attr.y = Math.round(y);
				}
				if (str || str === 0) {
					attr.text = str;
				}

				wrapper = renderer.createElement('text')
					.attr(attr);

				// Prevent wrapping from creating false offsetWidths in export in legacy IE (#1079, #1063)
				if (fakeSVG) {
					wrapper.css({
						position: ABSOLUTE
					});
				}

				if (!useHTML) {
					wrapper.xSetter = function (value, key, element) {
						var tspans = element.getElementsByTagName('tspan'),
							tspan,
							parentVal = element.getAttribute(key),
							i;
						for (i = 0; i < tspans.length; i++) {
							tspan = tspans[i];
							// If the x values are equal, the tspan represents a linebreak
							if (tspan.getAttribute(key) === parentVal) {
								tspan.setAttribute(key, value);
							}
						}
						element.setAttribute(key, value);
					};
				}
				
				return wrapper;
			},

			/**
			 * Utility to return the baseline offset and total line height from the font size
			 */
			fontMetrics: function (fontSize, elem) {
				var lineHeight,
					baseline,
					style;

				fontSize = fontSize || this.style.fontSize;
				if (elem && win.getComputedStyle) {
					elem = elem.element || elem; // SVGElement
					style = win.getComputedStyle(elem, "");
					fontSize = style && style.fontSize; // #4309, the style doesn't exist inside a hidden iframe in Firefox
				}
				fontSize = /px/.test(fontSize) ? pInt(fontSize) : /em/.test(fontSize) ? parseFloat(fontSize) * 12 : 12;

				// Empirical values found by comparing font size and bounding box height.
				// Applies to the default font family. http://jsfiddle.net/highcharts/7xvn7/
				lineHeight = fontSize < 24 ? fontSize + 3 : mathRound(fontSize * 1.2);
				baseline = mathRound(lineHeight * 0.8);

				return {
					h: lineHeight,
					b: baseline,
					f: fontSize
				};
			},

			/**
			 * Correct X and Y positioning of a label for rotation (#1764)
			 */
			rotCorr: function (baseline, rotation, alterY) {
				var y = baseline;
				if (rotation && alterY) {
					y = mathMax(y * mathCos(rotation * deg2rad), 4);
				}
				return {
					x: (-baseline / 3) * mathSin(rotation * deg2rad),
					y: y
				};
			},

			/**
			 * Add a label, a text item that can hold a colored or gradient background
			 * as well as a border and shadow.
			 * @param {string} str
			 * @param {Number} x
			 * @param {Number} y
			 * @param {String} shape
			 * @param {Number} anchorX In case the shape has a pointer, like a flag, this is the
			 *	coordinates it should be pinned to
			 * @param {Number} anchorY
			 * @param {Boolean} baseline Whether to position the label relative to the text baseline,
			 *	like renderer.text, or to the upper border of the rectangle.
			 * @param {String} className Class name for the group
			 */
			label: function (str, x, y, shape, anchorX, anchorY, useHTML, baseline, className) {

				var renderer = this,
					wrapper = renderer.g(className),
					text = renderer.text('', 0, 0, useHTML)
						.attr({
							zIndex: 1
						}),
						//.add(wrapper),
					box,
					bBox,
					alignFactor = 0,
					padding = 3,
					paddingLeft = 0,
					width,
					height,
					wrapperX,
					wrapperY,
					crispAdjust = 0,
					deferredAttr = {},
					baselineOffset,
					needsBox;

				/**
				 * This function runs after the label is added to the DOM (when the bounding box is
				 * available), and after the text of the label is updated to detect the new bounding
				 * box and reflect it in the border box.
				 */
				function updateBoxSize() {
					var boxX,
						boxY,
						style = text.element.style;

					bBox = (width === undefined || height === undefined || wrapper.styles.textAlign) && defined(text.textStr) && 
						text.getBBox(); //#3295 && 3514 box failure when string equals 0
					wrapper.width = (width || bBox.width || 0) + 2 * padding + paddingLeft;
					wrapper.height = (height || bBox.height || 0) + 2 * padding;

					// update the label-scoped y offset
					baselineOffset = padding + renderer.fontMetrics(style && style.fontSize, text).b;

					
					if (needsBox) {

						// create the border box if it is not already present
						if (!box) {
							boxX = mathRound(-alignFactor * padding) + crispAdjust;
							boxY = (baseline ? -baselineOffset : 0) + crispAdjust;

							wrapper.box = box = shape ?
								renderer.symbol(shape, boxX, boxY, wrapper.width, wrapper.height, deferredAttr) :
								renderer.rect(boxX, boxY, wrapper.width, wrapper.height, 0, deferredAttr[STROKE_WIDTH]);

							if (!box.isImg) { // #4324, fill "none" causes it to be ignored by mouse events in IE
								box.attr('fill', NONE);
							}
							box.add(wrapper);
						}

						// apply the box attributes
						if (!box.isImg) { // #1630
							box.attr(extend({
								width: mathRound(wrapper.width),
								height: mathRound(wrapper.height)
							}, deferredAttr));
						}
						deferredAttr = null;
					}
				}

				/**
				 * This function runs after setting text or padding, but only if padding is changed
				 */
				function updateTextPadding() {
					var styles = wrapper.styles,
						textAlign = styles && styles.textAlign,
						x = paddingLeft + padding * (1 - alignFactor),
						y;

					// determin y based on the baseline
					y = baseline ? 0 : baselineOffset;

					// compensate for alignment
					if (defined(width) && bBox && (textAlign === 'center' || textAlign === 'right')) {
						x += { center: 0.5, right: 1 }[textAlign] * (width - bBox.width);
					}

					// update if anything changed
					if (x !== text.x || y !== text.y) {
						text.attr('x', x);
						if (y !== UNDEFINED) {
							text.attr('y', y);
						}
					}

					// record current values
					text.x = x;
					text.y = y;
				}

				/**
				 * Set a box attribute, or defer it if the box is not yet created
				 * @param {Object} key
				 * @param {Object} value
				 */
				function boxAttr(key, value) {
					if (box) {
						box.attr(key, value);
					} else {
						deferredAttr[key] = value;
					}
				}

				/**
				 * After the text element is added, get the desired size of the border box
				 * and add it before the text in the DOM.
				 */
				wrapper.onAdd = function () {
					text.add(wrapper);
					wrapper.attr({
						text: (str || str === 0) ? str : '', // alignment is available now // #3295: 0 not rendered if given as a value
						x: x,
						y: y
					});

					if (box && defined(anchorX)) {
						wrapper.attr({
							anchorX: anchorX,
							anchorY: anchorY
						});
					}
				};

				/*
				 * Add specific attribute setters.
				 */

				// only change local variables
				wrapper.widthSetter = function (value) {
					width = value;
				};
				wrapper.heightSetter = function (value) {
					height = value;
				};
				wrapper.paddingSetter =  function (value) {
					if (defined(value) && value !== padding) {
						padding = wrapper.padding = value;
						updateTextPadding();
					}
				};
				wrapper.paddingLeftSetter =  function (value) {
					if (defined(value) && value !== paddingLeft) {
						paddingLeft = value;
						updateTextPadding();
					}
				};


				// change local variable and prevent setting attribute on the group
				wrapper.alignSetter = function (value) {
					alignFactor = { left: 0, center: 0.5, right: 1 }[value];
				};

				// apply these to the box and the text alike
				wrapper.textSetter = function (value) {
					if (value !== UNDEFINED) {
						text.textSetter(value);
					}
					updateBoxSize();
					updateTextPadding();
				};

				// apply these to the box but not to the text
				wrapper['stroke-widthSetter'] = function (value, key) {
					if (value) {
						needsBox = true;
					}
					crispAdjust = value % 2 / 2;
					boxAttr(key, value);
				};
				wrapper.strokeSetter = wrapper.fillSetter = wrapper.rSetter = function (value, key) {
					if (key === 'fill' && value) {
						needsBox = true;
					}
					boxAttr(key, value);
				};
				wrapper.anchorXSetter = function (value, key) {
					anchorX = value;
					boxAttr(key, mathRound(value) - crispAdjust - wrapperX);
				};
				wrapper.anchorYSetter = function (value, key) {
					anchorY = value;
					boxAttr(key, value - wrapperY);
				};

				// rename attributes
				wrapper.xSetter = function (value) {
					wrapper.x = value; // for animation getter
					if (alignFactor) {
						value -= alignFactor * ((width || bBox.width) + padding);
					}
					wrapperX = mathRound(value);
					wrapper.attr('translateX', wrapperX);
				};
				wrapper.ySetter = function (value) {
					wrapperY = wrapper.y = mathRound(value);
					wrapper.attr('translateY', wrapperY);
				};

				// Redirect certain methods to either the box or the text
				var baseCss = wrapper.css;
				return extend(wrapper, {
					/**
					 * Pick up some properties and apply them to the text instead of the wrapper
					 */
					css: function (styles) {
						if (styles) {
							var textStyles = {};
							styles = merge(styles); // create a copy to avoid altering the original object (#537)
							each(wrapper.textProps, function (prop) {
								if (styles[prop] !== UNDEFINED) {
									textStyles[prop] = styles[prop];
									delete styles[prop];
								}
							});
							text.css(textStyles);
						}
						return baseCss.call(wrapper, styles);
					},
					/**
					 * Return the bounding box of the box, not the group
					 */
					getBBox: function () {
						return {
							width: bBox.width + 2 * padding,
							height: bBox.height + 2 * padding,
							x: bBox.x - padding,
							y: bBox.y - padding
						};
					},
					/**
					 * Apply the shadow to the box
					 */
					shadow: function (b) {
						if (box) {
							box.shadow(b);
						}
						return wrapper;
					},
					/**
					 * Destroy and release memory.
					 */
					destroy: function () {

						// Added by button implementation
						removeEvent(wrapper.element, 'mouseenter');
						removeEvent(wrapper.element, 'mouseleave');

						if (text) {
							text = text.destroy();
						}
						if (box) {
							box = box.destroy();
						}
						// Call base implementation to destroy the rest
						SVGElement.prototype.destroy.call(wrapper);

						// Release local pointers (#1298)
						wrapper = renderer = updateBoxSize = updateTextPadding = boxAttr = null;
					}
				});
			}
		}; // end SVGRenderer


		// general renderer
		Renderer = SVGRenderer;
		// extend SvgElement for useHTML option
		extend(SVGElement.prototype, {
			/**
			 * Apply CSS to HTML elements. This is used in text within SVG rendering and
			 * by the VML renderer
			 */
			htmlCss: function (styles) {
				var wrapper = this,
					element = wrapper.element,
					textWidth = styles && element.tagName === 'SPAN' && styles.width;

				if (textWidth) {
					delete styles.width;
					wrapper.textWidth = textWidth;
					wrapper.updateTransform();
				}
				if (styles && styles.textOverflow === 'ellipsis') {
					styles.whiteSpace = 'nowrap';
					styles.overflow = 'hidden';
				}
				wrapper.styles = extend(wrapper.styles, styles);
				css(wrapper.element, styles);

				return wrapper;
			},

			/**
			 * VML and useHTML method for calculating the bounding box based on offsets
			 * @param {Boolean} refresh Whether to force a fresh value from the DOM or to
			 * use the cached value
			 *
			 * @return {Object} A hash containing values for x, y, width and height
			 */

			htmlGetBBox: function () {
				var wrapper = this,
					element = wrapper.element;

				// faking getBBox in exported SVG in legacy IE
				// faking getBBox in exported SVG in legacy IE (is this a duplicate of the fix for #1079?)
				if (element.nodeName === 'text') {
					element.style.position = ABSOLUTE;
				}

				return {
					x: element.offsetLeft,
					y: element.offsetTop,
					width: element.offsetWidth,
					height: element.offsetHeight
				};
			},

			/**
			 * VML override private method to update elements based on internal
			 * properties based on SVG transform
			 */
			htmlUpdateTransform: function () {
				// aligning non added elements is expensive
				if (!this.added) {
					this.alignOnAdd = true;
					return;
				}

				var wrapper = this,
					renderer = wrapper.renderer,
					elem = wrapper.element,
					translateX = wrapper.translateX || 0,
					translateY = wrapper.translateY || 0,
					x = wrapper.x || 0,
					y = wrapper.y || 0,
					align = wrapper.textAlign || 'left',
					alignCorrection = { left: 0, center: 0.5, right: 1 }[align],
					shadows = wrapper.shadows,
					styles = wrapper.styles;

				// apply translate
				css(elem, {
					marginLeft: translateX,
					marginTop: translateY
				});
				if (shadows) { // used in labels/tooltip
					each(shadows, function (shadow) {
						css(shadow, {
							marginLeft: translateX + 1,
							marginTop: translateY + 1
						});
					});
				}

				// apply inversion
				if (wrapper.inverted) { // wrapper is a group
					each(elem.childNodes, function (child) {
						renderer.invertChild(child, elem);
					});
				}

				if (elem.tagName === 'SPAN') {

					var width,
						rotation = wrapper.rotation,
						baseline,
						textWidth = pInt(wrapper.textWidth),
						currentTextTransform = [rotation, align, elem.innerHTML, wrapper.textWidth, wrapper.textAlign].join(',');

					if (currentTextTransform !== wrapper.cTT) { // do the calculations and DOM access only if properties changed


						baseline = renderer.fontMetrics(elem.style.fontSize).b;

						// Renderer specific handling of span rotation
						if (defined(rotation)) {
							wrapper.setSpanRotation(rotation, alignCorrection, baseline);
						}

						width = pick(wrapper.elemWidth, elem.offsetWidth);

						// Update textWidth
						if (width > textWidth && /[ \-]/.test(elem.textContent || elem.innerText)) { // #983, #1254
							css(elem, {
								width: textWidth + PX,
								display: 'block',
								whiteSpace: (styles && styles.whiteSpace) || 'normal' // #3331
							});
							width = textWidth;
						}

						wrapper.getSpanCorrection(width, baseline, alignCorrection, rotation, align);
					}

					// apply position with correction
					css(elem, {
						left: (x + (wrapper.xCorr || 0)) + PX,
						top: (y + (wrapper.yCorr || 0)) + PX
					});

					// force reflow in webkit to apply the left and top on useHTML element (#1249)
					if (isWebKit) {
						baseline = elem.offsetHeight; // assigned to baseline for JSLint purpose
					}

					// record current text transform
					wrapper.cTT = currentTextTransform;
				}
			},

			/**
			 * Set the rotation of an individual HTML span
			 */
			setSpanRotation: function (rotation, alignCorrection, baseline) {
				var rotationStyle = {},
					cssTransformKey = isIE ? '-ms-transform' : isWebKit ? '-webkit-transform' : isFirefox ? 'MozTransform' : isOpera ? '-o-transform' : '';

				rotationStyle[cssTransformKey] = rotationStyle.transform = 'rotate(' + rotation + 'deg)';
				rotationStyle[cssTransformKey + (isFirefox ? 'Origin' : '-origin')] = rotationStyle.transformOrigin = (alignCorrection * 100) + '% ' + baseline + 'px';
				css(this.element, rotationStyle);
			},

			/**
			 * Get the correction in X and Y positioning as the element is rotated.
			 */
			getSpanCorrection: function (width, baseline, alignCorrection) {
				this.xCorr = -width * alignCorrection;
				this.yCorr = -baseline;
			}
		});

		// Extend SvgRenderer for useHTML option.
		extend(SVGRenderer.prototype, {
			/**
			 * Create HTML text node. This is used by the VML renderer as well as the SVG
			 * renderer through the useHTML option.
			 *
			 * @param {String} str
			 * @param {Number} x
			 * @param {Number} y
			 */
			html: function (str, x, y) {
				var wrapper = this.createElement('span'),
					element = wrapper.element,
					renderer = wrapper.renderer;

				// Text setter
				wrapper.textSetter = function (value) {
					if (value !== element.innerHTML) {
						delete this.bBox;
					}
					element.innerHTML = this.textStr = value;
					wrapper.htmlUpdateTransform();
				};

				// Various setters which rely on update transform
				wrapper.xSetter = wrapper.ySetter = wrapper.alignSetter = wrapper.rotationSetter = function (value, key) {
					if (key === 'align') {
						key = 'textAlign'; // Do not overwrite the SVGElement.align method. Same as VML.
					}
					wrapper[key] = value;
					wrapper.htmlUpdateTransform();
				};

				// Set the default attributes
				wrapper.attr({
						text: str,
						x: mathRound(x),
						y: mathRound(y)
					})
					.css({
						position: ABSOLUTE,
						fontFamily: this.style.fontFamily,
						fontSize: this.style.fontSize
					});

				// Keep the whiteSpace style outside the wrapper.styles collection
				element.style.whiteSpace = 'nowrap';

				// Use the HTML specific .css method
				wrapper.css = wrapper.htmlCss;

				// This is specific for HTML within SVG
				if (renderer.isSVG) {
					wrapper.add = function (svgGroupWrapper) {

						var htmlGroup,
							container = renderer.box.parentNode,
							parentGroup,
							parents = [];

						this.parentGroup = svgGroupWrapper;

						// Create a mock group to hold the HTML elements
						if (svgGroupWrapper) {
							htmlGroup = svgGroupWrapper.div;
							if (!htmlGroup) {

								// Read the parent chain into an array and read from top down
								parentGroup = svgGroupWrapper;
								while (parentGroup) {

									parents.push(parentGroup);

									// Move up to the next parent group
									parentGroup = parentGroup.parentGroup;
								}

								// Ensure dynamically updating position when any parent is translated
								each(parents.reverse(), function (parentGroup) {
									var htmlGroupStyle,
										cls = attr(parentGroup.element, 'class');

									if (cls) {
										cls = { className: cls };
									} // else null

									// Create a HTML div and append it to the parent div to emulate
									// the SVG group structure
									htmlGroup = parentGroup.div = parentGroup.div || createElement(DIV, cls, {
										position: ABSOLUTE,
										left: (parentGroup.translateX || 0) + PX,
										top: (parentGroup.translateY || 0) + PX
									}, htmlGroup || container); // the top group is appended to container

									// Shortcut
									htmlGroupStyle = htmlGroup.style;

									// Set listeners to update the HTML div's position whenever the SVG group
									// position is changed
									extend(parentGroup, {
										translateXSetter: function (value, key) {
											htmlGroupStyle.left = value + PX;
											parentGroup[key] = value;
											parentGroup.doTransform = true;
										},
										translateYSetter: function (value, key) {
											htmlGroupStyle.top = value + PX;
											parentGroup[key] = value;
											parentGroup.doTransform = true;
										}
									});
									wrap(parentGroup, 'visibilitySetter', function (proceed, value, key, elem) {
										proceed.call(this, value, key, elem);
										htmlGroupStyle[key] = value;
									});
								});

							}
						} else {
							htmlGroup = container;
						}

						htmlGroup.appendChild(element);

						// Shared with VML:
						wrapper.added = true;
						if (wrapper.alignOnAdd) {
							wrapper.htmlUpdateTransform();
						}

						return wrapper;
					};
				}
				return wrapper;
			}
		});

		/* ****************************************************************************
		 *                                                                            *
		 * START OF INTERNET EXPLORER <= 8 SPECIFIC CODE                              *
		 *                                                                            *
		 * For applications and websites that don't need IE support, like platform    *
		 * targeted mobile apps and web apps, this code can be removed.               *
		 *                                                                            *
		 *****************************************************************************/

		/**
		 * @constructor
		 */
		var VMLRenderer, VMLElement;
		if (!hasSVG && !useCanVG) {

		/**
		 * The VML element wrapper.
		 */
		VMLElement = {

			/**
			 * Initialize a new VML element wrapper. It builds the markup as a string
			 * to minimize DOM traffic.
			 * @param {Object} renderer
			 * @param {Object} nodeName
			 */
			init: function (renderer, nodeName) {
				var wrapper = this,
					markup =  ['<', nodeName, ' filled="f" stroked="f"'],
					style = ['position: ', ABSOLUTE, ';'],
					isDiv = nodeName === DIV;

				// divs and shapes need size
				if (nodeName === 'shape' || isDiv) {
					style.push('left:0;top:0;width:1px;height:1px;');
				}
				style.push('visibility: ', isDiv ? HIDDEN : VISIBLE);

				markup.push(' style="', style.join(''), '"/>');

				// create element with default attributes and style
				if (nodeName) {
					markup = isDiv || nodeName === 'span' || nodeName === 'img' ?
						markup.join('')
						: renderer.prepVML(markup);
					wrapper.element = createElement(markup);
				}

				wrapper.renderer = renderer;
			},

			/**
			 * Add the node to the given parent
			 * @param {Object} parent
			 */
			add: function (parent) {
				var wrapper = this,
					renderer = wrapper.renderer,
					element = wrapper.element,
					box = renderer.box,
					inverted = parent && parent.inverted,

					// get the parent node
					parentNode = parent ?
						parent.element || parent :
						box;


				// if the parent group is inverted, apply inversion on all children
				if (inverted) { // only on groups
					renderer.invertChild(element, parentNode);
				}

				// append it
				parentNode.appendChild(element);

				// align text after adding to be able to read offset
				wrapper.added = true;
				if (wrapper.alignOnAdd && !wrapper.deferUpdateTransform) {
					wrapper.updateTransform();
				}

				// fire an event for internal hooks
				if (wrapper.onAdd) {
					wrapper.onAdd();
				}

				return wrapper;
			},

			/**
			 * VML always uses htmlUpdateTransform
			 */
			updateTransform: SVGElement.prototype.htmlUpdateTransform,

			/**
			 * Set the rotation of a span with oldIE's filter
			 */
			setSpanRotation: function () {
				// Adjust for alignment and rotation. Rotation of useHTML content is not yet implemented
				// but it can probably be implemented for Firefox 3.5+ on user request. FF3.5+
				// has support for CSS3 transform. The getBBox method also needs to be updated
				// to compensate for the rotation, like it currently does for SVG.
				// Test case: http://jsfiddle.net/highcharts/Ybt44/

				var rotation = this.rotation,
					costheta = mathCos(rotation * deg2rad),
					sintheta = mathSin(rotation * deg2rad);
							
				css(this.element, {
					filter: rotation ? ['progid:DXImageTransform.Microsoft.Matrix(M11=', costheta,
						', M12=', -sintheta, ', M21=', sintheta, ', M22=', costheta,
						', sizingMethod=\'auto expand\')'].join('') : NONE
				});
			},

			/**
			 * Get the positioning correction for the span after rotating. 
			 */
			getSpanCorrection: function (width, baseline, alignCorrection, rotation, align) {

				var costheta = rotation ? mathCos(rotation * deg2rad) : 1,
					sintheta = rotation ? mathSin(rotation * deg2rad) : 0,
					height = pick(this.elemHeight, this.element.offsetHeight),
					quad,
					nonLeft = align && align !== 'left';

				// correct x and y
				this.xCorr = costheta < 0 && -width;
				this.yCorr = sintheta < 0 && -height;

				// correct for baseline and corners spilling out after rotation
				quad = costheta * sintheta < 0;
				this.xCorr += sintheta * baseline * (quad ? 1 - alignCorrection : alignCorrection);
				this.yCorr -= costheta * baseline * (rotation ? (quad ? alignCorrection : 1 - alignCorrection) : 1);
				// correct for the length/height of the text
				if (nonLeft) {
					this.xCorr -= width * alignCorrection * (costheta < 0 ? -1 : 1);
					if (rotation) {
						this.yCorr -= height * alignCorrection * (sintheta < 0 ? -1 : 1);
					}
					css(this.element, {
						textAlign: align
					});
				}
			},

			/**
			 * Converts a subset of an SVG path definition to its VML counterpart. Takes an array
			 * as the parameter and returns a string.
			 */
			pathToVML: function (value) {
				// convert paths
				var i = value.length,
					path = [];

				while (i--) {

					// Multiply by 10 to allow subpixel precision.
					// Substracting half a pixel seems to make the coordinates
					// align with SVG, but this hasn't been tested thoroughly
					if (isNumber(value[i])) {
						path[i] = mathRound(value[i] * 10) - 5;
					} else if (value[i] === 'Z') { // close the path
						path[i] = 'x';
					} else {
						path[i] = value[i];

						// When the start X and end X coordinates of an arc are too close,
						// they are rounded to the same value above. In this case, substract or 
						// add 1 from the end X and Y positions. #186, #760, #1371, #1410.
						if (value.isArc && (value[i] === 'wa' || value[i] === 'at')) {
							// Start and end X
							if (path[i + 5] === path[i + 7]) {
								path[i + 7] += value[i + 7] > value[i + 5] ? 1 : -1;
							}
							// Start and end Y
							if (path[i + 6] === path[i + 8]) {
								path[i + 8] += value[i + 8] > value[i + 6] ? 1 : -1;
							}
						}
					}
				}

				
				// Loop up again to handle path shortcuts (#2132)
				/*while (i++ < path.length) {
					if (path[i] === 'H') { // horizontal line to
						path[i] = 'L';
						path.splice(i + 2, 0, path[i - 1]);
					} else if (path[i] === 'V') { // vertical line to
						path[i] = 'L';
						path.splice(i + 1, 0, path[i - 2]);
					}
				}*/
				return path.join(' ') || 'x';
			},

			/**
			 * Set the element's clipping to a predefined rectangle
			 *
			 * @param {String} id The id of the clip rectangle
			 */
			clip: function (clipRect) {
				var wrapper = this,
					clipMembers,
					cssRet;

				if (clipRect) {
					clipMembers = clipRect.members;
					erase(clipMembers, wrapper); // Ensure unique list of elements (#1258)
					clipMembers.push(wrapper);
					wrapper.destroyClip = function () {
						erase(clipMembers, wrapper);
					};
					cssRet = clipRect.getCSS(wrapper);

				} else {
					if (wrapper.destroyClip) {
						wrapper.destroyClip();
					}
					cssRet = { clip: docMode8 ? 'inherit' : 'rect(auto)' }; // #1214
				}

				return wrapper.css(cssRet);

			},

			/**
			 * Set styles for the element
			 * @param {Object} styles
			 */
			css: SVGElement.prototype.htmlCss,

			/**
			 * Removes a child either by removeChild or move to garbageBin.
			 * Issue 490; in VML removeChild results in Orphaned nodes according to sIEve, discardElement does not.
			 */
			safeRemoveChild: function (element) {
				// discardElement will detach the node from its parent before attaching it
				// to the garbage bin. Therefore it is important that the node is attached and have parent.
				if (element.parentNode) {
					discardElement(element);
				}
			},

			/**
			 * Extend element.destroy by removing it from the clip members array
			 */
			destroy: function () {
				if (this.destroyClip) {
					this.destroyClip();
				}

				return SVGElement.prototype.destroy.apply(this);
			},

			/**
			 * Add an event listener. VML override for normalizing event parameters.
			 * @param {String} eventType
			 * @param {Function} handler
			 */
			on: function (eventType, handler) {
				// simplest possible event model for internal use
				this.element['on' + eventType] = function () {
					var evt = win.event;
					evt.target = evt.srcElement;
					handler(evt);
				};
				return this;
			},

			/**
			 * In stacked columns, cut off the shadows so that they don't overlap
			 */
			cutOffPath: function (path, length) {

				var len;

				path = path.split(/[ ,]/);
				len = path.length;

				if (len === 9 || len === 11) {
					path[len - 4] = path[len - 2] = pInt(path[len - 2]) - 10 * length;
				}
				return path.join(' ');
			},

			/**
			 * Apply a drop shadow by copying elements and giving them different strokes
			 * @param {Boolean|Object} shadowOptions
			 */
			shadow: function (shadowOptions, group, cutOff) {
				var shadows = [],
					i,
					element = this.element,
					renderer = this.renderer,
					shadow,
					elemStyle = element.style,
					markup,
					path = element.path,
					strokeWidth,
					modifiedPath,
					shadowWidth,
					shadowElementOpacity;

				// some times empty paths are not strings
				if (path && typeof path.value !== 'string') {
					path = 'x';
				}
				modifiedPath = path;

				if (shadowOptions) {
					shadowWidth = pick(shadowOptions.width, 3);
					shadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;
					for (i = 1; i <= 3; i++) {

						strokeWidth = (shadowWidth * 2) + 1 - (2 * i);

						// Cut off shadows for stacked column items
						if (cutOff) {
							modifiedPath = this.cutOffPath(path.value, strokeWidth + 0.5);
						}

						markup = ['<shape isShadow="true" strokeweight="', strokeWidth,
							'" filled="false" path="', modifiedPath,
							'" coordsize="10 10" style="', element.style.cssText, '" />'];

						shadow = createElement(renderer.prepVML(markup),
							null, {
								left: pInt(elemStyle.left) + pick(shadowOptions.offsetX, 1),
								top: pInt(elemStyle.top) + pick(shadowOptions.offsetY, 1)
							}
						);
						if (cutOff) {
							shadow.cutOff = strokeWidth + 1;
						}

						// apply the opacity
						markup = ['<stroke color="', shadowOptions.color || 'black', '" opacity="', shadowElementOpacity * i, '"/>'];
						createElement(renderer.prepVML(markup), null, null, shadow);


						// insert it
						if (group) {
							group.element.appendChild(shadow);
						} else {
							element.parentNode.insertBefore(shadow, element);
						}

						// record it
						shadows.push(shadow);

					}

					this.shadows = shadows;
				}
				return this;
			},
			updateShadows: noop, // Used in SVG only

			setAttr: function (key, value) {
				if (docMode8) { // IE8 setAttribute bug
					this.element[key] = value;
				} else {
					this.element.setAttribute(key, value);
				}
			},
			classSetter: function (value) {
				// IE8 Standards mode has problems retrieving the className unless set like this
				this.element.className = value;
			},
			dashstyleSetter: function (value, key, element) {
				var strokeElem = element.getElementsByTagName('stroke')[0] ||
					createElement(this.renderer.prepVML(['<stroke/>']), null, null, element);
				strokeElem[key] = value || 'solid';
				this[key] = value; /* because changing stroke-width will change the dash length
					and cause an epileptic effect */
			},
			dSetter: function (value, key, element) {
				var i,
					shadows = this.shadows;
				value = value || [];
				this.d = value.join && value.join(' '); // used in getter for animation

				element.path = value = this.pathToVML(value);

				// update shadows
				if (shadows) {
					i = shadows.length;
					while (i--) {
						shadows[i].path = shadows[i].cutOff ? this.cutOffPath(value, shadows[i].cutOff) : value;
					}
				}
				this.setAttr(key, value);
			},
			fillSetter: function (value, key, element) {
				var nodeName = element.nodeName;
				if (nodeName === 'SPAN') { // text color
					element.style.color = value;
				} else if (nodeName !== 'IMG') { // #1336
					element.filled = value !== NONE;
					this.setAttr('fillcolor', this.renderer.color(value, element, key, this));
				}
			},
			opacitySetter: noop, // Don't bother - animation is too slow and filters introduce artifacts
			rotationSetter: function (value, key, element) {
				var style = element.style;
				this[key] = style[key] = value; // style is for #1873

				// Correction for the 1x1 size of the shape container. Used in gauge needles.
				style.left = -mathRound(mathSin(value * deg2rad) + 1) + PX;
				style.top = mathRound(mathCos(value * deg2rad)) + PX;
			},
			strokeSetter: function (value, key, element) {
				this.setAttr('strokecolor', this.renderer.color(value, element, key));
			},
			'stroke-widthSetter': function (value, key, element) {
				element.stroked = !!value; // VML "stroked" attribute
				this[key] = value; // used in getter, issue #113
				if (isNumber(value)) {
					value += PX;
				}
				this.setAttr('strokeweight', value);
			},
			titleSetter: function (value, key) {
				this.setAttr(key, value);
			},
			visibilitySetter: function (value, key, element) {

				// Handle inherited visibility
				if (value === 'inherit') {
					value = VISIBLE;
				}
				
				// Let the shadow follow the main element
				if (this.shadows) {
					each(this.shadows, function (shadow) {
						shadow.style[key] = value;
					});
				}

				// Instead of toggling the visibility CSS property, move the div out of the viewport.
				// This works around #61 and #586
				if (element.nodeName === 'DIV') {
					value = value === HIDDEN ? '-999em' : 0;

					// In order to redraw, IE7 needs the div to be visible when tucked away
					// outside the viewport. So the visibility is actually opposite of
					// the expected value. This applies to the tooltip only.
					if (!docMode8) {
						element.style[key] = value ? VISIBLE : HIDDEN;
					}
					key = 'top';
				}
				element.style[key] = value;
			},
			xSetter: function (value, key, element) {
				this[key] = value; // used in getter

				if (key === 'x') {
					key = 'left';
				} else if (key === 'y') {
					key = 'top';
				}/* else {
					value = mathMax(0, value); // don't set width or height below zero (#311)
				}*/

				// clipping rectangle special
				if (this.updateClipping) {
					this[key] = value; // the key is now 'left' or 'top' for 'x' and 'y'
					this.updateClipping();
				} else {
					// normal
					element.style[key] = value;
				}
			},
			zIndexSetter: function (value, key, element) {
				element.style[key] = value;
			}
		};
		Highcharts.VMLElement = VMLElement = extendClass(SVGElement, VMLElement);

		// Some shared setters
		VMLElement.prototype.ySetter =
			VMLElement.prototype.widthSetter = 
			VMLElement.prototype.heightSetter = 
			VMLElement.prototype.xSetter;


		/**
		 * The VML renderer
		 */
		var VMLRendererExtension = { // inherit SVGRenderer

			Element: VMLElement,
			isIE8: userAgent.indexOf('MSIE 8.0') > -1,


			/**
			 * Initialize the VMLRenderer
			 * @param {Object} container
			 * @param {Number} width
			 * @param {Number} height
			 */
			init: function (container, width, height, style) {
				var renderer = this,
					boxWrapper,
					box,
					css;

				renderer.alignedObjects = [];

				boxWrapper = renderer.createElement(DIV)
					.css(extend(this.getStyle(style), { position: RELATIVE}));
				box = boxWrapper.element;
				container.appendChild(boxWrapper.element);


				// generate the containing box
				renderer.isVML = true;
				renderer.box = box;
				renderer.boxWrapper = boxWrapper;
				renderer.cache = {};


				renderer.setSize(width, height, false);

				// The only way to make IE6 and IE7 print is to use a global namespace. However,
				// with IE8 the only way to make the dynamic shapes visible in screen and print mode
				// seems to be to add the xmlns attribute and the behaviour style inline.
				if (!doc.namespaces.hcv) {

					doc.namespaces.add('hcv', 'urn:schemas-microsoft-com:vml');

					// Setup default CSS (#2153, #2368, #2384)
					css = 'hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke' +
						'{ behavior:url(#default#VML); display: inline-block; } ';
					try {
						doc.createStyleSheet().cssText = css;
					} catch (e) {
						doc.styleSheets[0].cssText += css;
					}

				}
			},


			/**
			 * Detect whether the renderer is hidden. This happens when one of the parent elements
			 * has display: none
			 */
			isHidden: function () {
				return !this.box.offsetWidth;
			},

			/**
			 * Define a clipping rectangle. In VML it is accomplished by storing the values
			 * for setting the CSS style to all associated members.
			 *
			 * @param {Number} x
			 * @param {Number} y
			 * @param {Number} width
			 * @param {Number} height
			 */
			clipRect: function (x, y, width, height) {

				// create a dummy element
				var clipRect = this.createElement(),
					isObj = isObject(x);

				// mimic a rectangle with its style object for automatic updating in attr
				return extend(clipRect, {
					members: [],
					count: 0,
					left: (isObj ? x.x : x) + 1,
					top: (isObj ? x.y : y) + 1,
					width: (isObj ? x.width : width) - 1,
					height: (isObj ? x.height : height) - 1,
					getCSS: function (wrapper) {
						var element = wrapper.element,
							nodeName = element.nodeName,
							isShape = nodeName === 'shape',
							inverted = wrapper.inverted,
							rect = this,
							top = rect.top - (isShape ? element.offsetTop : 0),
							left = rect.left,
							right = left + rect.width,
							bottom = top + rect.height,
							ret = {
								clip: 'rect(' +
									mathRound(inverted ? left : top) + 'px,' +
									mathRound(inverted ? bottom : right) + 'px,' +
									mathRound(inverted ? right : bottom) + 'px,' +
									mathRound(inverted ? top : left) + 'px)'
							};

						// issue 74 workaround
						if (!inverted && docMode8 && nodeName === 'DIV') {
							extend(ret, {
								width: right + PX,
								height: bottom + PX
							});
						}
						return ret;
					},

					// used in attr and animation to update the clipping of all members
					updateClipping: function () {
						each(clipRect.members, function (member) {
							if (member.element) { // Deleted series, like in stock/members/series-remove demo. Should be removed from members, but this will do.
								member.css(clipRect.getCSS(member));
							}
						});
					}
				});

			},


			/**
			 * Take a color and return it if it's a string, make it a gradient if it's a
			 * gradient configuration object, and apply opacity.
			 *
			 * @param {Object} color The color or config object
			 */
			color: function (color, elem, prop, wrapper) {
				var renderer = this,
					colorObject,
					regexRgba = /^rgba/,
					markup,
					fillType,
					ret = NONE;

				// Check for linear or radial gradient
				if (color && color.linearGradient) {
					fillType = 'gradient';
				} else if (color && color.radialGradient) {
					fillType = 'pattern';
				}


				if (fillType) {

					var stopColor,
						stopOpacity,
						gradient = color.linearGradient || color.radialGradient,
						x1,
						y1,
						x2,
						y2,
						opacity1,
						opacity2,
						color1,
						color2,
						fillAttr = '',
						stops = color.stops,
						firstStop,
						lastStop,
						colors = [],
						addFillNode = function () {
							// Add the fill subnode. When colors attribute is used, the meanings of opacity and o:opacity2
							// are reversed.
							markup = ['<fill colors="' + colors.join(',') + '" opacity="', opacity2, '" o:opacity2="', opacity1,
								'" type="', fillType, '" ', fillAttr, 'focus="100%" method="any" />'];
							createElement(renderer.prepVML(markup), null, null, elem);
						};

					// Extend from 0 to 1
					firstStop = stops[0];
					lastStop = stops[stops.length - 1];
					if (firstStop[0] > 0) {
						stops.unshift([
							0,
							firstStop[1]
						]);
					}
					if (lastStop[0] < 1) {
						stops.push([
							1,
							lastStop[1]
						]);
					}

					// Compute the stops
					each(stops, function (stop, i) {
						if (regexRgba.test(stop[1])) {
							colorObject = Color(stop[1]);
							stopColor = colorObject.get('rgb');
							stopOpacity = colorObject.get('a');
						} else {
							stopColor = stop[1];
							stopOpacity = 1;
						}

						// Build the color attribute
						colors.push((stop[0] * 100) + '% ' + stopColor);

						// Only start and end opacities are allowed, so we use the first and the last
						if (!i) {
							opacity1 = stopOpacity;
							color2 = stopColor;
						} else {
							opacity2 = stopOpacity;
							color1 = stopColor;
						}
					});

					// Apply the gradient to fills only.
					if (prop === 'fill') {

						// Handle linear gradient angle
						if (fillType === 'gradient') {
							x1 = gradient.x1 || gradient[0] || 0;
							y1 = gradient.y1 || gradient[1] || 0;
							x2 = gradient.x2 || gradient[2] || 0;
							y2 = gradient.y2 || gradient[3] || 0;
							fillAttr = 'angle="' + (90  - math.atan(
								(y2 - y1) / // y vector
								(x2 - x1) // x vector
								) * 180 / mathPI) + '"';

							addFillNode();

						// Radial (circular) gradient
						} else {

							var r = gradient.r,
								sizex = r * 2,
								sizey = r * 2,
								cx = gradient.cx,
								cy = gradient.cy,
								radialReference = elem.radialReference,
								bBox,
								applyRadialGradient = function () {
									if (radialReference) {
										bBox = wrapper.getBBox();
										cx += (radialReference[0] - bBox.x) / bBox.width - 0.5;
										cy += (radialReference[1] - bBox.y) / bBox.height - 0.5;
										sizex *= radialReference[2] / bBox.width;
										sizey *= radialReference[2] / bBox.height;
									}
									fillAttr = 'src="' + defaultOptions.global.VMLRadialGradientURL + '" ' +
										'size="' + sizex + ',' + sizey + '" ' +
										'origin="0.5,0.5" ' +
										'position="' + cx + ',' + cy + '" ' +
										'color2="' + color2 + '" ';

									addFillNode();
								};

							// Apply radial gradient
							if (wrapper.added) {
								applyRadialGradient();
							} else {
								// We need to know the bounding box to get the size and position right
								wrapper.onAdd = applyRadialGradient;
							}

							// The fill element's color attribute is broken in IE8 standards mode, so we
							// need to set the parent shape's fillcolor attribute instead.
							ret = color1;
						}

					// Gradients are not supported for VML stroke, return the first color. #722.
					} else {
						ret = stopColor;
					}

				// if the color is an rgba color, split it and add a fill node
				// to hold the opacity component
				} else if (regexRgba.test(color) && elem.tagName !== 'IMG') {

					colorObject = Color(color);

					markup = ['<', prop, ' opacity="', colorObject.get('a'), '"/>'];
					createElement(this.prepVML(markup), null, null, elem);

					ret = colorObject.get('rgb');


				} else {
					var propNodes = elem.getElementsByTagName(prop); // 'stroke' or 'fill' node
					if (propNodes.length) {
						propNodes[0].opacity = 1;
						propNodes[0].type = 'solid';
					}
					ret = color;
				}

				return ret;
			},

			/**
			 * Take a VML string and prepare it for either IE8 or IE6/IE7.
			 * @param {Array} markup A string array of the VML markup to prepare
			 */
			prepVML: function (markup) {
				var vmlStyle = 'display:inline-block;behavior:url(#default#VML);',
					isIE8 = this.isIE8;

				markup = markup.join('');

				if (isIE8) { // add xmlns and style inline
					markup = markup.replace('/>', ' xmlns="urn:schemas-microsoft-com:vml" />');
					if (markup.indexOf('style="') === -1) {
						markup = markup.replace('/>', ' style="' + vmlStyle + '" />');
					} else {
						markup = markup.replace('style="', 'style="' + vmlStyle);
					}

				} else { // add namespace
					markup = markup.replace('<', '<hcv:');
				}

				return markup;
			},

			/**
			 * Create rotated and aligned text
			 * @param {String} str
			 * @param {Number} x
			 * @param {Number} y
			 */
			text: SVGRenderer.prototype.html,

			/**
			 * Create and return a path element
			 * @param {Array} path
			 */
			path: function (path) {
				var attr = {
					// subpixel precision down to 0.1 (width and height = 1px)
					coordsize: '10 10'
				};
				if (isArray(path)) {
					attr.d = path;
				} else if (isObject(path)) { // attributes
					extend(attr, path);
				}
				// create the shape
				return this.createElement('shape').attr(attr);
			},

			/**
			 * Create and return a circle element. In VML circles are implemented as
			 * shapes, which is faster than v:oval
			 * @param {Number} x
			 * @param {Number} y
			 * @param {Number} r
			 */
			circle: function (x, y, r) {
				var circle = this.symbol('circle');
				if (isObject(x)) {
					r = x.r;
					y = x.y;
					x = x.x;
				}
				circle.isCircle = true; // Causes x and y to mean center (#1682)
				circle.r = r;
				return circle.attr({ x: x, y: y });
			},

			/**
			 * Create a group using an outer div and an inner v:group to allow rotating
			 * and flipping. A simple v:group would have problems with positioning
			 * child HTML elements and CSS clip.
			 *
			 * @param {String} name The name of the group
			 */
			g: function (name) {
				var wrapper,
					attribs;

				// set the class name
				if (name) {
					attribs = { 'className': PREFIX + name, 'class': PREFIX + name };
				}

				// the div to hold HTML and clipping
				wrapper = this.createElement(DIV).attr(attribs);

				return wrapper;
			},

			/**
			 * VML override to create a regular HTML image
			 * @param {String} src
			 * @param {Number} x
			 * @param {Number} y
			 * @param {Number} width
			 * @param {Number} height
			 */
			image: function (src, x, y, width, height) {
				var obj = this.createElement('img')
					.attr({ src: src });

				if (arguments.length > 1) {
					obj.attr({
						x: x,
						y: y,
						width: width,
						height: height
					});
				}
				return obj;
			},

			/**
			 * For rectangles, VML uses a shape for rect to overcome bugs and rotation problems
			 */
			createElement: function (nodeName) {
				return nodeName === 'rect' ? this.symbol(nodeName) : SVGRenderer.prototype.createElement.call(this, nodeName);	
			},

			/**
			 * In the VML renderer, each child of an inverted div (group) is inverted
			 * @param {Object} element
			 * @param {Object} parentNode
			 */
			invertChild: function (element, parentNode) {
				var ren = this,
					parentStyle = parentNode.style,
					imgStyle = element.tagName === 'IMG' && element.style; // #1111

				css(element, {
					flip: 'x',
					left: pInt(parentStyle.width) - (imgStyle ? pInt(imgStyle.top) : 1),
					top: pInt(parentStyle.height) - (imgStyle ? pInt(imgStyle.left) : 1),
					rotation: -90
				});

				// Recursively invert child elements, needed for nested composite shapes like box plots and error bars. #1680, #1806.
				each(element.childNodes, function (child) {
					ren.invertChild(child, element);
				});
			},

			/**
			 * Symbol definitions that override the parent SVG renderer's symbols
			 *
			 */
			symbols: {
				// VML specific arc function
				arc: function (x, y, w, h, options) {
					var start = options.start,
						end = options.end,
						radius = options.r || w || h,
						innerRadius = options.innerR,
						cosStart = mathCos(start),
						sinStart = mathSin(start),
						cosEnd = mathCos(end),
						sinEnd = mathSin(end),
						ret;

					if (end - start === 0) { // no angle, don't show it.
						return ['x'];
					}

					ret = [
						'wa', // clockwise arc to
						x - radius, // left
						y - radius, // top
						x + radius, // right
						y + radius, // bottom
						x + radius * cosStart, // start x
						y + radius * sinStart, // start y
						x + radius * cosEnd, // end x
						y + radius * sinEnd  // end y
					];

					if (options.open && !innerRadius) {
						ret.push(
							'e',
							M,
							x,// - innerRadius,
							y// - innerRadius
						);
					}

					ret.push(
						'at', // anti clockwise arc to
						x - innerRadius, // left
						y - innerRadius, // top
						x + innerRadius, // right
						y + innerRadius, // bottom
						x + innerRadius * cosEnd, // start x
						y + innerRadius * sinEnd, // start y
						x + innerRadius * cosStart, // end x
						y + innerRadius * sinStart, // end y
						'x', // finish path
						'e' // close
					);

					ret.isArc = true;
					return ret;

				},
				// Add circle symbol path. This performs significantly faster than v:oval.
				circle: function (x, y, w, h, wrapper) {

					if (wrapper) {
						w = h = 2 * wrapper.r;
					}

					// Center correction, #1682
					if (wrapper && wrapper.isCircle) {
						x -= w / 2;
						y -= h / 2;
					}

					// Return the path
					return [
						'wa', // clockwisearcto
						x, // left
						y, // top
						x + w, // right
						y + h, // bottom
						x + w, // start x
						y + h / 2,     // start y
						x + w, // end x
						y + h / 2,     // end y
						//'x', // finish path
						'e' // close
					];
				},
				/**
				 * Add rectangle symbol path which eases rotation and omits arcsize problems
				 * compared to the built-in VML roundrect shape. When borders are not rounded,
				 * use the simpler square path, else use the callout path without the arrow.
				 */
				rect: function (x, y, w, h, options) {
					return SVGRenderer.prototype.symbols[
						!defined(options) || !options.r ? 'square' : 'callout'
					].call(0, x, y, w, h, options);
				}
			}
		};
		Highcharts.VMLRenderer = VMLRenderer = function () {
			this.init.apply(this, arguments);
		};
		VMLRenderer.prototype = merge(SVGRenderer.prototype, VMLRendererExtension);

			// general renderer
			Renderer = VMLRenderer;
		}

		// This method is used with exporting in old IE, when emulating SVG (see #2314)
		SVGRenderer.prototype.measureSpanWidth = function (text, styles) {
			var measuringSpan = doc.createElement('span'),
				offsetWidth,
			textNode = doc.createTextNode(text);

			measuringSpan.appendChild(textNode);
			css(measuringSpan, styles);
			this.box.appendChild(measuringSpan);
			offsetWidth = measuringSpan.offsetWidth;
			discardElement(measuringSpan); // #2463
			return offsetWidth;
		};


		/* ****************************************************************************
		 *                                                                            *
		 * END OF INTERNET EXPLORER <= 8 SPECIFIC CODE                                *
		 *                                                                            *
		 *****************************************************************************/
		/* ****************************************************************************
		 *                                                                            *
		 * START OF ANDROID < 3 SPECIFIC CODE. THIS CAN BE REMOVED IF YOU'RE NOT      *
		 * TARGETING THAT SYSTEM.                                                     *
		 *                                                                            *
		 *****************************************************************************/
		var CanVGRenderer,
			CanVGController;

		if (useCanVG) {
			/**
			 * The CanVGRenderer is empty from start to keep the source footprint small.
			 * When requested, the CanVGController downloads the rest of the source packaged
			 * together with the canvg library.
			 */
			Highcharts.CanVGRenderer = CanVGRenderer = function () {
				// Override the global SVG namespace to fake SVG/HTML that accepts CSS
				SVG_NS = 'http://www.w3.org/1999/xhtml';
			};

			/**
			 * Start with an empty symbols object. This is needed when exporting is used (exporting.src.js will add a few symbols), but 
			 * the implementation from SvgRenderer will not be merged in until first render.
			 */
			CanVGRenderer.prototype.symbols = {};

			/**
			 * Handles on demand download of canvg rendering support.
			 */
			CanVGController = (function () {
				// List of renderering calls
				var deferredRenderCalls = [];

				/**
				 * When downloaded, we are ready to draw deferred charts.
				 */
				function drawDeferred() {
					var callLength = deferredRenderCalls.length,
						callIndex;

					// Draw all pending render calls
					for (callIndex = 0; callIndex < callLength; callIndex++) {
						deferredRenderCalls[callIndex]();
					}
					// Clear the list
					deferredRenderCalls = [];
				}

				return {
					push: function (func, scriptLocation) {
						// Only get the script once
						if (deferredRenderCalls.length === 0) {
							getScript(scriptLocation, drawDeferred);
						}
						// Register render call
						deferredRenderCalls.push(func);
					}
				};
			}());

			Renderer = CanVGRenderer;
		} // end CanVGRenderer

		/* ****************************************************************************
		 *                                                                            *
		 * END OF ANDROID < 3 SPECIFIC CODE                                           *
		 *                                                                            *
		 *****************************************************************************/

		/**
		 * The Tick class
		 */
		function Tick(axis, pos, type, noLabel) {
			this.axis = axis;
			this.pos = pos;
			this.type = type || '';
			this.isNew = true;

			if (!type && !noLabel) {
				this.addLabel();
			}
		}

		Tick.prototype = {
			/**
			 * Write the tick label
			 */
			addLabel: function () {
				var tick = this,
					axis = tick.axis,
					options = axis.options,
					chart = axis.chart,
					categories = axis.categories,
					names = axis.names,
					pos = tick.pos,
					labelOptions = options.labels,
					str,
					tickPositions = axis.tickPositions,
					isFirst = pos === tickPositions[0],
					isLast = pos === tickPositions[tickPositions.length - 1],
					value = categories ?
						pick(categories[pos], names[pos], pos) :
						pos,
					label = tick.label,
					tickPositionInfo = tickPositions.info,
					dateTimeLabelFormat;

				// Set the datetime label format. If a higher rank is set for this position, use that. If not,
				// use the general format.
				if (axis.isDatetimeAxis && tickPositionInfo) {
					dateTimeLabelFormat = options.dateTimeLabelFormats[tickPositionInfo.higherRanks[pos] || tickPositionInfo.unitName];
				}
				// set properties for access in render method
				tick.isFirst = isFirst;
				tick.isLast = isLast;

				// get the string
				str = axis.labelFormatter.call({
					axis: axis,
					chart: chart,
					isFirst: isFirst,
					isLast: isLast,
					dateTimeLabelFormat: dateTimeLabelFormat,
					value: axis.isLog ? correctFloat(lin2log(value)) : value
				});

				// prepare CSS
				//css = width && { width: mathMax(1, mathRound(width - 2 * (labelOptions.padding || 10))) + PX };
				
				// first call
				if (!defined(label)) {

					tick.label = label =
						defined(str) && labelOptions.enabled ?
							chart.renderer.text(
									str,
									0,
									0,
									labelOptions.useHTML
								)
								//.attr(attr)
								// without position absolute, IE export sometimes is wrong
								.css(merge(labelOptions.style))
								.add(axis.labelGroup) :
							null;
					tick.labelLength = label && label.getBBox().width; // Un-rotated length
					tick.rotation = 0; // Base value to detect change for new calls to getBBox

				// update
				} else if (label) {
					label.attr({ text: str });
				}
			},

			/**
			 * Get the offset height or width of the label
			 */
			getLabelSize: function () {
				return this.label ?
					this.label.getBBox()[this.axis.horiz ? 'height' : 'width'] :
					0;
			},

			/**
			 * Handle the label overflow by adjusting the labels to the left and right edge, or
			 * hide them if they collide into the neighbour label.
			 */
			handleOverflow: function (xy) {
				var axis = this.axis,
					pxPos = xy.x,
					chartWidth = axis.chart.chartWidth,
					spacing = axis.chart.spacing,
					leftBound = pick(axis.labelLeft, mathMin(axis.pos, spacing[3])),
					rightBound = pick(axis.labelRight, mathMax(axis.pos + axis.len, chartWidth - spacing[1])),
					label = this.label,
					rotation = this.rotation,
					factor = { left: 0, center: 0.5, right: 1 }[axis.labelAlign],
					labelWidth = label.getBBox().width,
					slotWidth = axis.slotWidth,
					xCorrection = factor,
					goRight = 1,
					leftPos,
					rightPos,
					textWidth,
					css = {};

				// Check if the label overshoots the chart spacing box. If it does, move it.
				// If it now overshoots the slotWidth, add ellipsis.
				if (!rotation) {
					leftPos = pxPos - factor * labelWidth;
					rightPos = pxPos + (1 - factor) * labelWidth;

					if (leftPos < leftBound) {
						slotWidth = xy.x + slotWidth * (1 - factor) - leftBound;
					} else if (rightPos > rightBound) {
						slotWidth = rightBound - xy.x + slotWidth * factor;
						goRight = -1;
					}

					slotWidth = mathMin(axis.slotWidth, slotWidth); // #4177
					if (slotWidth < axis.slotWidth && axis.labelAlign === 'center') {
						xy.x += goRight * (axis.slotWidth - slotWidth - xCorrection * (axis.slotWidth - mathMin(labelWidth, slotWidth)));				
					}
					// If the label width exceeds the available space, set a text width to be 
					// picked up below. Also, if a width has been set before, we need to set a new
					// one because the reported labelWidth will be limited by the box (#3938).
					if (labelWidth > slotWidth || (axis.autoRotation && label.styles.width)) {
						textWidth = slotWidth;
					}

				// Add ellipsis to prevent rotated labels to be clipped against the edge of the chart
				} else if (rotation < 0 && pxPos - factor * labelWidth < leftBound) {
					textWidth = mathRound(pxPos / mathCos(rotation * deg2rad) - leftBound);
				} else if (rotation > 0 && pxPos + factor * labelWidth > rightBound) {
					textWidth = mathRound((chartWidth - pxPos) / mathCos(rotation * deg2rad));
				}

				if (textWidth) {
					css.width = textWidth;
					if (!axis.options.labels.style.textOverflow) {
						css.textOverflow = 'ellipsis';
					}
					label.css(css);
				}
			},

			/**
			 * Get the x and y position for ticks and labels
			 */
			getPosition: function (horiz, pos, tickmarkOffset, old) {
				var axis = this.axis,
					chart = axis.chart,
					cHeight = (old && chart.oldChartHeight) || chart.chartHeight;

				return {
					x: horiz ?
						axis.translate(pos + tickmarkOffset, null, null, old) + axis.transB :
						axis.left + axis.offset + (axis.opposite ? ((old && chart.oldChartWidth) || chart.chartWidth) - axis.right - axis.left : 0),

					y: horiz ?
						cHeight - axis.bottom + axis.offset - (axis.opposite ? axis.height : 0) :
						cHeight - axis.translate(pos + tickmarkOffset, null, null, old) - axis.transB
				};

			},

			/**
			 * Get the x, y position of the tick label
			 */
			getLabelPosition: function (x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {
				var axis = this.axis,
					transA = axis.transA,
					reversed = axis.reversed,
					staggerLines = axis.staggerLines,
					rotCorr = axis.tickRotCorr || { x: 0, y: 0 },
					yOffset = pick(labelOptions.y, rotCorr.y + (axis.side === 2 ? 8 : -(label.getBBox().height / 2))),
					line;

				x = x + labelOptions.x + rotCorr.x - (tickmarkOffset && horiz ?
					tickmarkOffset * transA * (reversed ? -1 : 1) : 0);
				y = y + yOffset - (tickmarkOffset && !horiz ?
					tickmarkOffset * transA * (reversed ? 1 : -1) : 0);

				// Correct for staggered labels
				if (staggerLines) {
					line = (index / (step || 1) % staggerLines);
					y += line * (axis.labelOffset / staggerLines);
				}

				return {
					x: x,
					y: mathRound(y)
				};
			},

			/**
			 * Extendible method to return the path of the marker
			 */
			getMarkPath: function (x, y, tickLength, tickWidth, horiz, renderer) {
				return renderer.crispLine([
						M,
						x,
						y,
						L,
						x + (horiz ? 0 : -tickLength),
						y + (horiz ? tickLength : 0)
					], tickWidth);
			},

			/**
			 * Put everything in place
			 *
			 * @param index {Number}
			 * @param old {Boolean} Use old coordinates to prepare an animation into new position
			 */
			render: function (index, old, opacity) {
				var tick = this,
					axis = tick.axis,
					options = axis.options,
					chart = axis.chart,
					renderer = chart.renderer,
					horiz = axis.horiz,
					type = tick.type,
					label = tick.label,
					pos = tick.pos,
					labelOptions = options.labels,
					gridLine = tick.gridLine,
					gridPrefix = type ? type + 'Grid' : 'grid',
					tickPrefix = type ? type + 'Tick' : 'tick',
					gridLineWidth = options[gridPrefix + 'LineWidth'],
					gridLineColor = options[gridPrefix + 'LineColor'],
					dashStyle = options[gridPrefix + 'LineDashStyle'],
					tickLength = options[tickPrefix + 'Length'],
					tickWidth = pick(options[tickPrefix + 'Width'], !type && axis.isXAxis ? 1 : 0), // X axis defaults to 1
					tickColor = options[tickPrefix + 'Color'],
					tickPosition = options[tickPrefix + 'Position'],
					gridLinePath,
					mark = tick.mark,
					markPath,
					step = /*axis.labelStep || */labelOptions.step,
					attribs,
					show = true,
					tickmarkOffset = axis.tickmarkOffset,
					xy = tick.getPosition(horiz, pos, tickmarkOffset, old),
					x = xy.x,
					y = xy.y,
					reverseCrisp = ((horiz && x === axis.pos + axis.len) || (!horiz && y === axis.pos)) ? -1 : 1; // #1480, #1687

				opacity = pick(opacity, 1);
				this.isActive = true;

				// create the grid line
				if (gridLineWidth) {
					gridLinePath = axis.getPlotLinePath(pos + tickmarkOffset, gridLineWidth * reverseCrisp, old, true);

					if (gridLine === UNDEFINED) {
						attribs = {
							stroke: gridLineColor,
							'stroke-width': gridLineWidth
						};
						if (dashStyle) {
							attribs.dashstyle = dashStyle;
						}
						if (!type) {
							attribs.zIndex = 1;
						}
						if (old) {
							attribs.opacity = 0;
						}
						tick.gridLine = gridLine =
							gridLineWidth ?
								renderer.path(gridLinePath)
									.attr(attribs).add(axis.gridGroup) :
								null;
					}

					// If the parameter 'old' is set, the current call will be followed
					// by another call, therefore do not do any animations this time
					if (!old && gridLine && gridLinePath) {
						gridLine[tick.isNew ? 'attr' : 'animate']({
							d: gridLinePath,
							opacity: opacity
						});
					}
				}

				// create the tick mark
				if (tickWidth && tickLength) {

					// negate the length
					if (tickPosition === 'inside') {
						tickLength = -tickLength;
					}
					if (axis.opposite) {
						tickLength = -tickLength;
					}

					markPath = tick.getMarkPath(x, y, tickLength, tickWidth * reverseCrisp, horiz, renderer);
					if (mark) { // updating
						mark.animate({
							d: markPath,
							opacity: opacity
						});
					} else { // first time
						tick.mark = renderer.path(
							markPath
						).attr({
							stroke: tickColor,
							'stroke-width': tickWidth,
							opacity: opacity
						}).add(axis.axisGroup);
					}
				}

				// the label is created on init - now move it into place
				if (label && !isNaN(x)) {
					label.xy = xy = tick.getLabelPosition(x, y, label, horiz, labelOptions, tickmarkOffset, index, step);

					// Apply show first and show last. If the tick is both first and last, it is
					// a single centered tick, in which case we show the label anyway (#2100).
					if ((tick.isFirst && !tick.isLast && !pick(options.showFirstLabel, 1)) ||
							(tick.isLast && !tick.isFirst && !pick(options.showLastLabel, 1))) {
						show = false;

					// Handle label overflow and show or hide accordingly
					} else if (horiz && !axis.isRadial && !labelOptions.step && !labelOptions.rotation && !old && opacity !== 0) {
						tick.handleOverflow(xy);
					}

					// apply step
					if (step && index % step) {
						// show those indices dividable by step
						show = false;
					}

					// Set the new position, and show or hide
					if (show && !isNaN(xy.y)) {
						xy.opacity = opacity;
						label[tick.isNew ? 'attr' : 'animate'](xy);
						tick.isNew = false;
					} else {
						label.attr('y', -9999); // #1338
					}
				}
			},

			/**
			 * Destructor for the tick prototype
			 */
			destroy: function () {
				destroyObjectProperties(this, this.axis);
			}
		};

		/**
		 * The object wrapper for plot lines and plot bands
		 * @param {Object} options
		 */
		Highcharts.PlotLineOrBand = function (axis, options) {
			this.axis = axis;

			if (options) {
				this.options = options;
				this.id = options.id;
			}
		};

		Highcharts.PlotLineOrBand.prototype = {
			
			/**
			 * Render the plot line or plot band. If it is already existing,
			 * move it.
			 */
			render: function () {
				var plotLine = this,
					axis = plotLine.axis,
					horiz = axis.horiz,
					options = plotLine.options,
					optionsLabel = options.label,
					label = plotLine.label,
					width = options.width,
					to = options.to,
					from = options.from,
					isBand = defined(from) && defined(to),
					value = options.value,
					dashStyle = options.dashStyle,
					svgElem = plotLine.svgElem,
					path = [],
					addEvent,
					eventType,
					xs,
					ys,
					x,
					y,
					color = options.color,
					zIndex = options.zIndex,
					events = options.events,
					attribs = {},
					renderer = axis.chart.renderer;

				// logarithmic conversion
				if (axis.isLog) {
					from = log2lin(from);
					to = log2lin(to);
					value = log2lin(value);
				}

				// plot line
				if (width) {
					path = axis.getPlotLinePath(value, width);
					attribs = {
						stroke: color,
						'stroke-width': width
					};
					if (dashStyle) {
						attribs.dashstyle = dashStyle;
					}
				} else if (isBand) { // plot band

					path = axis.getPlotBandPath(from, to, options);
					if (color) {
						attribs.fill = color;
					}
					if (options.borderWidth) {
						attribs.stroke = options.borderColor;
						attribs['stroke-width'] = options.borderWidth;
					}
				} else {
					return;
				}
				// zIndex
				if (defined(zIndex)) {
					attribs.zIndex = zIndex;
				}

				// common for lines and bands
				if (svgElem) {
					if (path) {
						svgElem.animate({
							d: path
						}, null, svgElem.onGetPath);
					} else {
						svgElem.hide();
						svgElem.onGetPath = function () {
							svgElem.show();
						};
						if (label) {
							plotLine.label = label = label.destroy();
						}
					}
				} else if (path && path.length) {
					plotLine.svgElem = svgElem = renderer.path(path)
						.attr(attribs).add();

					// events
					if (events) {
						addEvent = function (eventType) {
							svgElem.on(eventType, function (e) {
								events[eventType].apply(plotLine, [e]);
							});
						};
						for (eventType in events) {
							addEvent(eventType);
						}
					}
				}

				// the plot band/line label
				if (optionsLabel && defined(optionsLabel.text) && path && path.length && axis.width > 0 && axis.height > 0) {
					// apply defaults
					optionsLabel = merge({
						align: horiz && isBand && 'center',
						x: horiz ? !isBand && 4 : 10,
						verticalAlign : !horiz && isBand && 'middle',
						y: horiz ? isBand ? 16 : 10 : isBand ? 6 : -4,
						rotation: horiz && !isBand && 90
					}, optionsLabel);

					// add the SVG element
					if (!label) {
						attribs = {
							align: optionsLabel.textAlign || optionsLabel.align,
							rotation: optionsLabel.rotation
						};
						if (defined(zIndex)) {
							attribs.zIndex = zIndex;
						}
						plotLine.label = label = renderer.text(
								optionsLabel.text,
								0,
								0,
								optionsLabel.useHTML
							)
							.attr(attribs)
							.css(optionsLabel.style)
							.add();
					}

					// get the bounding box and align the label
					// #3000 changed to better handle choice between plotband or plotline
					xs = [path[1], path[4], (isBand ? path[6] : path[1])];
					ys = [path[2], path[5], (isBand ? path[7] : path[2])];
					x = arrayMin(xs);
					y = arrayMin(ys);

					label.align(optionsLabel, false, {
						x: x,
						y: y,
						width: arrayMax(xs) - x,
						height: arrayMax(ys) - y
					});
					label.show();

				} else if (label) { // move out of sight
					label.hide();
				}

				// chainable
				return plotLine;
			},

			/**
			 * Remove the plot line or band
			 */
			destroy: function () {
				// remove it from the lookup
				erase(this.axis.plotLinesAndBands, this);
				
				delete this.axis;
				destroyObjectProperties(this);
			}
		};

		/**
		 * Object with members for extending the Axis prototype
		 */

		AxisPlotLineOrBandExtension = {

			/**
			 * Create the path for a plot band
			 */ 
			getPlotBandPath: function (from, to) {
				var toPath = this.getPlotLinePath(to, null, null, true),
					path = this.getPlotLinePath(from, null, null, true);

				if (path && toPath && path.toString() !== toPath.toString()) { // #3836
					path.push(
						toPath[4],
						toPath[5],
						toPath[1],
						toPath[2]
					);
				} else { // outside the axis area
					path = null;
				}
				
				return path;
			},

			addPlotBand: function (options) {
				return this.addPlotBandOrLine(options, 'plotBands');
			},
			
			addPlotLine: function (options) {
				return this.addPlotBandOrLine(options, 'plotLines');
			},

			/**
			 * Add a plot band or plot line after render time
			 *
			 * @param options {Object} The plotBand or plotLine configuration object
			 */
			addPlotBandOrLine: function (options, coll) {
				var obj = new Highcharts.PlotLineOrBand(this, options).render(),
					userOptions = this.userOptions;

				if (obj) { // #2189
					// Add it to the user options for exporting and Axis.update
					if (coll) {
						userOptions[coll] = userOptions[coll] || [];
						userOptions[coll].push(options); 
					}
					this.plotLinesAndBands.push(obj); 
				}
				
				return obj;
			},

			/**
			 * Remove a plot band or plot line from the chart by id
			 * @param {Object} id
			 */
			removePlotBandOrLine: function (id) {
				var plotLinesAndBands = this.plotLinesAndBands,
					options = this.options,
					userOptions = this.userOptions,
					i = plotLinesAndBands.length;
				while (i--) {
					if (plotLinesAndBands[i].id === id) {
						plotLinesAndBands[i].destroy();
					}
				}
				each([options.plotLines || [], userOptions.plotLines || [], options.plotBands || [], userOptions.plotBands || []], function (arr) {
					i = arr.length;
					while (i--) {
						if (arr[i].id === id) {
							erase(arr, arr[i]);
						}
					}
				});
			}
		};

		/**
		 * Create a new axis object
		 * @param {Object} chart
		 * @param {Object} options
		 */
		var Axis = Highcharts.Axis = function () {
			this.init.apply(this, arguments);
		};

		Axis.prototype = {

			/**
			 * Default options for the X axis - the Y axis has extended defaults
			 */
			defaultOptions: {
				// allowDecimals: null,
				// alternateGridColor: null,
				// categories: [],
				dateTimeLabelFormats: {
					millisecond: '%H:%M:%S.%L',
					second: '%H:%M:%S',
					minute: '%H:%M',
					hour: '%H:%M',
					day: '%e. %b',
					week: '%e. %b',
					month: '%b \'%y',
					year: '%Y'
				},
				endOnTick: false,
				gridLineColor: '#D8D8D8',
				// gridLineDashStyle: 'solid',
				// gridLineWidth: 0,
				// reversed: false,

				labels: {
					enabled: true,
					// rotation: 0,
					// align: 'center',
					// step: null,
					style: {
						color: '#606060',
						cursor: 'default',
						fontSize: '11px'
					},
					x: 0,
					y: 15
					/*formatter: function () {
						return this.value;
					},*/
				},
				lineColor: '#C0D0E0',
				lineWidth: 1,
				//linkedTo: null,
				//max: undefined,
				//min: undefined,
				minPadding: 0.01,
				maxPadding: 0.01,
				//minRange: null,
				minorGridLineColor: '#E0E0E0',
				// minorGridLineDashStyle: null,
				minorGridLineWidth: 1,
				minorTickColor: '#A0A0A0',
				//minorTickInterval: null,
				minorTickLength: 2,
				minorTickPosition: 'outside', // inside or outside
				//minorTickWidth: 0,
				//opposite: false,
				//offset: 0,
				//plotBands: [{
				//	events: {},
				//	zIndex: 1,
				//	labels: { align, x, verticalAlign, y, style, rotation, textAlign }
				//}],
				//plotLines: [{
				//	events: {}
				//  dashStyle: {}
				//	zIndex:
				//	labels: { align, x, verticalAlign, y, style, rotation, textAlign }
				//}],
				//reversed: false,
				// showFirstLabel: true,
				// showLastLabel: true,
				startOfWeek: 1,
				startOnTick: false,
				tickColor: '#C0D0E0',
				//tickInterval: null,
				tickLength: 10,
				tickmarkPlacement: 'between', // on or between
				tickPixelInterval: 100,
				tickPosition: 'outside',
				//tickWidth: 1,
				title: {
					//text: null,
					align: 'middle', // low, middle or high
					//margin: 0 for horizontal, 10 for vertical axes,
					//rotation: 0,
					//side: 'outside',
					style: {
						color: '#707070'
					}
					//x: 0,
					//y: 0
				},
				type: 'linear' // linear, logarithmic or datetime
			},

			/**
			 * This options set extends the defaultOptions for Y axes
			 */
			defaultYAxisOptions: {
				endOnTick: true,
				gridLineWidth: 1,
				tickPixelInterval: 72,
				showLastLabel: true,
				labels: {
					x: -8,
					y: 3
				},
				lineWidth: 0,
				maxPadding: 0.05,
				minPadding: 0.05,
				startOnTick: true,
				//tickWidth: 0,
				title: {
					rotation: 270,
					text: 'Values'
				},
				stackLabels: {
					enabled: false,
					//align: dynamic,
					//y: dynamic,
					//x: dynamic,
					//verticalAlign: dynamic,
					//textAlign: dynamic,
					//rotation: 0,
					formatter: function () {
						return Highcharts.numberFormat(this.total, -1);
					},
					style: merge(defaultPlotOptions.line.dataLabels.style, { color: '#000000' })
				}
			},

			/**
			 * These options extend the defaultOptions for left axes
			 */
			defaultLeftAxisOptions: {
				labels: {
					x: -15,
					y: null
				},
				title: {
					rotation: 270
				}
			},

			/**
			 * These options extend the defaultOptions for right axes
			 */
			defaultRightAxisOptions: {
				labels: {
					x: 15,
					y: null
				},
				title: {
					rotation: 90
				}
			},

			/**
			 * These options extend the defaultOptions for bottom axes
			 */
			defaultBottomAxisOptions: {
				labels: {
					autoRotation: [-45],
					x: 0,
					y: null // based on font size
					// overflow: undefined,
					// staggerLines: null
				},
				title: {
					rotation: 0
				}
			},
			/**
			 * These options extend the defaultOptions for top axes
			 */
			defaultTopAxisOptions: {
				labels: {
					autoRotation: [-45],
					x: 0,
					y: -15
					// overflow: undefined
					// staggerLines: null
				},
				title: {
					rotation: 0
				}
			},

			/**
			 * Initialize the axis
			 */
			init: function (chart, userOptions) {


				var isXAxis = userOptions.isX,
					axis = this;

				axis.chart = chart;

				// Flag, is the axis horizontal
				axis.horiz = chart.inverted ? !isXAxis : isXAxis;

				// Flag, isXAxis
				axis.isXAxis = isXAxis;
				axis.coll = isXAxis ? 'xAxis' : 'yAxis';

				axis.opposite = userOptions.opposite; // needed in setOptions
				axis.side = userOptions.side || (axis.horiz ?
						(axis.opposite ? 0 : 2) : // top : bottom
						(axis.opposite ? 1 : 3));  // right : left

				axis.setOptions(userOptions);


				var options = this.options,
					type = options.type,
					isDatetimeAxis = type === 'datetime';

				axis.labelFormatter = options.labels.formatter || axis.defaultLabelFormatter; // can be overwritten by dynamic format


				// Flag, stagger lines or not
				axis.userOptions = userOptions;

				//axis.axisTitleMargin = UNDEFINED,// = options.title.margin,
				axis.minPixelPadding = 0;
				//axis.ignoreMinPadding = UNDEFINED; // can be set to true by a column or bar series
				//axis.ignoreMaxPadding = UNDEFINED;

				axis.reversed = options.reversed;
				axis.zoomEnabled = options.zoomEnabled !== false;

				// Initial categories
				axis.categories = options.categories || type === 'category';
				axis.names = axis.names || []; // Preserve on update (#3830)

				// Elements
				//axis.axisGroup = UNDEFINED;
				//axis.gridGroup = UNDEFINED;
				//axis.axisTitle = UNDEFINED;
				//axis.axisLine = UNDEFINED;

				// Shorthand types
				axis.isLog = type === 'logarithmic';
				axis.isDatetimeAxis = isDatetimeAxis;

				// Flag, if axis is linked to another axis
				axis.isLinked = defined(options.linkedTo);
				// Linked axis.
				//axis.linkedParent = UNDEFINED;

				// Tick positions
				//axis.tickPositions = UNDEFINED; // array containing predefined positions
				// Tick intervals
				//axis.tickInterval = UNDEFINED;
				//axis.minorTickInterval = UNDEFINED;

				
				// Major ticks
				axis.ticks = {};
				axis.labelEdge = [];
				// Minor ticks
				axis.minorTicks = {};

				// List of plotLines/Bands
				axis.plotLinesAndBands = [];

				// Alternate bands
				axis.alternateBands = {};

				// Axis metrics
				//axis.left = UNDEFINED;
				//axis.top = UNDEFINED;
				//axis.width = UNDEFINED;
				//axis.height = UNDEFINED;
				//axis.bottom = UNDEFINED;
				//axis.right = UNDEFINED;
				//axis.transA = UNDEFINED;
				//axis.transB = UNDEFINED;
				//axis.oldTransA = UNDEFINED;
				axis.len = 0;
				//axis.oldMin = UNDEFINED;
				//axis.oldMax = UNDEFINED;
				//axis.oldUserMin = UNDEFINED;
				//axis.oldUserMax = UNDEFINED;
				//axis.oldAxisLength = UNDEFINED;
				axis.minRange = axis.userMinRange = options.minRange || options.maxZoom;
				axis.range = options.range;
				axis.offset = options.offset || 0;


				// Dictionary for stacks
				axis.stacks = {};
				axis.oldStacks = {};
				axis.stacksTouched = 0;

				// Min and max in the data
				//axis.dataMin = UNDEFINED,
				//axis.dataMax = UNDEFINED,

				// The axis range
				axis.max = null;
				axis.min = null;

				// User set min and max
				//axis.userMin = UNDEFINED,
				//axis.userMax = UNDEFINED,

				// Crosshair options
				axis.crosshair = pick(options.crosshair, splat(chart.options.tooltip.crosshairs)[isXAxis ? 0 : 1], false);
				// Run Axis

				var eventType,
					events = axis.options.events;

				// Register
				if (inArray(axis, chart.axes) === -1) { // don't add it again on Axis.update()
					if (isXAxis && !this.isColorAxis) { // #2713
						chart.axes.splice(chart.xAxis.length, 0, axis);
					} else {
						chart.axes.push(axis);
					}

					chart[axis.coll].push(axis);
				}

				axis.series = axis.series || []; // populated by Series

				// inverted charts have reversed xAxes as default
				if (chart.inverted && isXAxis && axis.reversed === UNDEFINED) {
					axis.reversed = true;
				}

				axis.removePlotBand = axis.removePlotBandOrLine;
				axis.removePlotLine = axis.removePlotBandOrLine;


				// register event listeners
				for (eventType in events) {
					addEvent(axis, eventType, events[eventType]);
				}

				// extend logarithmic axis
				if (axis.isLog) {
					axis.val2lin = log2lin;
					axis.lin2val = lin2log;
				}
			},

			/**
			 * Merge and set options
			 */
			setOptions: function (userOptions) {
				this.options = merge(
					this.defaultOptions,
					this.isXAxis ? {} : this.defaultYAxisOptions,
					[this.defaultTopAxisOptions, this.defaultRightAxisOptions,
						this.defaultBottomAxisOptions, this.defaultLeftAxisOptions][this.side],
					merge(
						defaultOptions[this.coll], // if set in setOptions (#1053)
						userOptions
					)
				);
			},

			/**
			 * The default label formatter. The context is a special config object for the label.
			 */
			defaultLabelFormatter: function () {
				var axis = this.axis,
					value = this.value,
					categories = axis.categories,
					dateTimeLabelFormat = this.dateTimeLabelFormat,
					numericSymbols = defaultOptions.lang.numericSymbols,
					i = numericSymbols && numericSymbols.length,
					multi,
					ret,
					formatOption = axis.options.labels.format,

					// make sure the same symbol is added for all labels on a linear axis
					numericSymbolDetector = axis.isLog ? value : axis.tickInterval;

				if (formatOption) {
					ret = format(formatOption, this);

				} else if (categories) {
					ret = value;

				} else if (dateTimeLabelFormat) { // datetime axis
					ret = dateFormat(dateTimeLabelFormat, value);

				} else if (i && numericSymbolDetector >= 1000) {
					// Decide whether we should add a numeric symbol like k (thousands) or M (millions).
					// If we are to enable this in tooltip or other places as well, we can move this
					// logic to the numberFormatter and enable it by a parameter.
					while (i-- && ret === UNDEFINED) {
						multi = Math.pow(1000, i + 1);
						if (numericSymbolDetector >= multi && (value * 10) % multi === 0 && numericSymbols[i] !== null) {
							ret = Highcharts.numberFormat(value / multi, -1) + numericSymbols[i];
						}
					}
				}

				if (ret === UNDEFINED) {
					if (mathAbs(value) >= 10000) { // add thousands separators
						ret = Highcharts.numberFormat(value, -1);

					} else { // small numbers
						ret = Highcharts.numberFormat(value, -1, UNDEFINED, ''); // #2466
					}
				}

				return ret;
			},

			/**
			 * Get the minimum and maximum for the series of each axis
			 */
			getSeriesExtremes: function () {
				var axis = this,
					chart = axis.chart;

				axis.hasVisibleSeries = false;

				// Reset properties in case we're redrawing (#3353)
				axis.dataMin = axis.dataMax = axis.ignoreMinPadding = axis.ignoreMaxPadding = null;
				
				if (axis.buildStacks) {
					axis.buildStacks();
				}

				// loop through this axis' series
				each(axis.series, function (series) {

					if (series.visible || !chart.options.chart.ignoreHiddenSeries) {

						var seriesOptions = series.options,
							xData,
							threshold = seriesOptions.threshold,
							seriesDataMin,
							seriesDataMax;

						axis.hasVisibleSeries = true;

						// Validate threshold in logarithmic axes
						if (axis.isLog && threshold <= 0) {
							threshold = null;
						}

						// Get dataMin and dataMax for X axes
						if (axis.isXAxis) {
							xData = series.xData;
							if (xData.length) {
								axis.dataMin = mathMin(pick(axis.dataMin, xData[0]), arrayMin(xData));
								axis.dataMax = mathMax(pick(axis.dataMax, xData[0]), arrayMax(xData));
							}

						// Get dataMin and dataMax for Y axes, as well as handle stacking and processed data
						} else {

							// Get this particular series extremes
							series.getExtremes();
							seriesDataMax = series.dataMax;
							seriesDataMin = series.dataMin;

							// Get the dataMin and dataMax so far. If percentage is used, the min and max are
							// always 0 and 100. If seriesDataMin and seriesDataMax is null, then series
							// doesn't have active y data, we continue with nulls
							if (defined(seriesDataMin) && defined(seriesDataMax)) {
								axis.dataMin = mathMin(pick(axis.dataMin, seriesDataMin), seriesDataMin);
								axis.dataMax = mathMax(pick(axis.dataMax, seriesDataMax), seriesDataMax);
							}

							// Adjust to threshold
							if (defined(threshold)) {
								if (axis.dataMin >= threshold) {
									axis.dataMin = threshold;
									axis.ignoreMinPadding = true;
								} else if (axis.dataMax < threshold) {
									axis.dataMax = threshold;
									axis.ignoreMaxPadding = true;
								}
							}
						}
					}
				});
			},

			/**
			 * Translate from axis value to pixel position on the chart, or back
			 *
			 */
			translate: function (val, backwards, cvsCoord, old, handleLog, pointPlacement) {
				var axis = this.linkedParent || this, // #1417
					sign = 1,
					cvsOffset = 0,
					localA = old ? axis.oldTransA : axis.transA,
					localMin = old ? axis.oldMin : axis.min,
					returnValue,
					minPixelPadding = axis.minPixelPadding,
					doPostTranslate = (axis.doPostTranslate || (axis.isLog && handleLog)) && axis.lin2val;

				if (!localA) {
					localA = axis.transA;
				}

				// In vertical axes, the canvas coordinates start from 0 at the top like in
				// SVG.
				if (cvsCoord) {
					sign *= -1; // canvas coordinates inverts the value
					cvsOffset = axis.len;
				}

				// Handle reversed axis
				if (axis.reversed) {
					sign *= -1;
					cvsOffset -= sign * (axis.sector || axis.len);
				}

				// From pixels to value
				if (backwards) { // reverse translation

					val = val * sign + cvsOffset;
					val -= minPixelPadding;
					returnValue = val / localA + localMin; // from chart pixel to value
					if (doPostTranslate) { // log and ordinal axes
						returnValue = axis.lin2val(returnValue);
					}

				// From value to pixels
				} else {
					if (doPostTranslate) { // log and ordinal axes
						val = axis.val2lin(val);
					}
					if (pointPlacement === 'between') {
						pointPlacement = 0.5;
					}
					returnValue = sign * (val - localMin) * localA + cvsOffset + (sign * minPixelPadding) +
						(isNumber(pointPlacement) ? localA * pointPlacement * axis.pointRange : 0);
				}

				return returnValue;
			},

			/**
			 * Utility method to translate an axis value to pixel position.
			 * @param {Number} value A value in terms of axis units
			 * @param {Boolean} paneCoordinates Whether to return the pixel coordinate relative to the chart
			 *        or just the axis/pane itself.
			 */
			toPixels: function (value, paneCoordinates) {
				return this.translate(value, false, !this.horiz, null, true) + (paneCoordinates ? 0 : this.pos);
			},

			/*
			 * Utility method to translate a pixel position in to an axis value
			 * @param {Number} pixel The pixel value coordinate
			 * @param {Boolean} paneCoordiantes Whether the input pixel is relative to the chart or just the
			 *        axis/pane itself.
			 */
			toValue: function (pixel, paneCoordinates) {
				return this.translate(pixel - (paneCoordinates ? 0 : this.pos), true, !this.horiz, null, true);
			},

			/**
			 * Create the path for a plot line that goes from the given value on
			 * this axis, across the plot to the opposite side
			 * @param {Number} value
			 * @param {Number} lineWidth Used for calculation crisp line
			 * @param {Number] old Use old coordinates (for resizing and rescaling)
			 */
			getPlotLinePath: function (value, lineWidth, old, force, translatedValue) {
				var axis = this,
					chart = axis.chart,
					axisLeft = axis.left,
					axisTop = axis.top,
					x1,
					y1,
					x2,
					y2,
					cHeight = (old && chart.oldChartHeight) || chart.chartHeight,
					cWidth = (old && chart.oldChartWidth) || chart.chartWidth,
					skip,
					transB = axis.transB,
					/**
					 * Check if x is between a and b. If not, either move to a/b or skip, 
					 * depending on the force parameter.
					 */
					between = function (x, a, b) {
						if (x < a || x > b) {
							if (force) {
								x = mathMin(mathMax(a, x), b);
							} else {
								skip = true;
							}
						}
						return x;
					};

				translatedValue = pick(translatedValue, axis.translate(value, null, null, old));
				x1 = x2 = mathRound(translatedValue + transB);
				y1 = y2 = mathRound(cHeight - translatedValue - transB);

				if (isNaN(translatedValue)) { // no min or max
					skip = true;

				} else if (axis.horiz) {
					y1 = axisTop;
					y2 = cHeight - axis.bottom;
					x1 = x2 = between(x1, axisLeft, axisLeft + axis.width);
				} else {
					x1 = axisLeft;
					x2 = cWidth - axis.right;
					y1 = y2 = between(y1, axisTop, axisTop + axis.height);
				}
				return skip && !force ?
					null :
					chart.renderer.crispLine([M, x1, y1, L, x2, y2], lineWidth || 1);
			},

			/**
			 * Set the tick positions of a linear axis to round values like whole tens or every five.
			 */
			getLinearTickPositions: function (tickInterval, min, max) {
				var pos,
					lastPos,
					roundedMin = correctFloat(mathFloor(min / tickInterval) * tickInterval),
					roundedMax = correctFloat(mathCeil(max / tickInterval) * tickInterval),
					tickPositions = [];

				// For single points, add a tick regardless of the relative position (#2662)
				if (min === max && isNumber(min)) {
					return [min];
				}

				// Populate the intermediate values
				pos = roundedMin;
				while (pos <= roundedMax) {

					// Place the tick on the rounded value
					tickPositions.push(pos);

					// Always add the raw tickInterval, not the corrected one.
					pos = correctFloat(pos + tickInterval);

					// If the interval is not big enough in the current min - max range to actually increase
					// the loop variable, we need to break out to prevent endless loop. Issue #619
					if (pos === lastPos) {
						break;
					}

					// Record the last value
					lastPos = pos;
				}
				return tickPositions;
			},

			/**
			 * Return the minor tick positions. For logarithmic axes, reuse the same logic
			 * as for major ticks.
			 */
			getMinorTickPositions: function () {
				var axis = this,
					options = axis.options,
					tickPositions = axis.tickPositions,
					minorTickInterval = axis.minorTickInterval,
					minorTickPositions = [],
					pos,
					i,
					pointRangePadding = axis.pointRangePadding || 0, 
					min = axis.min - pointRangePadding, // #1498
					max = axis.max + pointRangePadding, // #1498
					range = max - min,
					len;

				// If minor ticks get too dense, they are hard to read, and may cause long running script. So we don't draw them.
				if (range && range / minorTickInterval < axis.len / 3) { // #3875

					if (axis.isLog) {
						len = tickPositions.length;
						for (i = 1; i < len; i++) {
							minorTickPositions = minorTickPositions.concat(
								axis.getLogTickPositions(minorTickInterval, tickPositions[i - 1], tickPositions[i], true)
							);
						}
					} else if (axis.isDatetimeAxis && options.minorTickInterval === 'auto') { // #1314
						minorTickPositions = minorTickPositions.concat(
							axis.getTimeTicks(
								axis.normalizeTimeTickInterval(minorTickInterval),
								min,
								max,
								options.startOfWeek
							)
						);
					} else {
						for (pos = min + (tickPositions[0] - min) % minorTickInterval; pos <= max; pos += minorTickInterval) {
							minorTickPositions.push(pos);
						}
					}
				}

				if(minorTickPositions.length !== 0) { // don't change the extremes, when there is no minor ticks
					axis.trimTicks(minorTickPositions, options.startOnTick, options.endOnTick); // #3652 #3743 #1498
				}
				return minorTickPositions;
			},

			/**
			 * Adjust the min and max for the minimum range. Keep in mind that the series data is
			 * not yet processed, so we don't have information on data cropping and grouping, or
			 * updated axis.pointRange or series.pointRange. The data can't be processed until
			 * we have finally established min and max.
			 */
			adjustForMinRange: function () {
				var axis = this,
					options = axis.options,
					min = axis.min,
					max = axis.max,
					zoomOffset,
					spaceAvailable = axis.dataMax - axis.dataMin >= axis.minRange,
					closestDataRange,
					i,
					distance,
					xData,
					loopLength,
					minArgs,
					maxArgs;

				// Set the automatic minimum range based on the closest point distance
				if (axis.isXAxis && axis.minRange === UNDEFINED && !axis.isLog) {

					if (defined(options.min) || defined(options.max)) {
						axis.minRange = null; // don't do this again

					} else {

						// Find the closest distance between raw data points, as opposed to
						// closestPointRange that applies to processed points (cropped and grouped)
						each(axis.series, function (series) {
							xData = series.xData;
							loopLength = series.xIncrement ? 1 : xData.length - 1;
							for (i = loopLength; i > 0; i--) {
								distance = xData[i] - xData[i - 1];
								if (closestDataRange === UNDEFINED || distance < closestDataRange) {
									closestDataRange = distance;
								}
							}
						});
						axis.minRange = mathMin(closestDataRange * 5, axis.dataMax - axis.dataMin);
					}
				}

				// if minRange is exceeded, adjust
				if (max - min < axis.minRange) {
					var minRange = axis.minRange;
					zoomOffset = (minRange - max + min) / 2;

					// if min and max options have been set, don't go beyond it
					minArgs = [min - zoomOffset, pick(options.min, min - zoomOffset)];
					if (spaceAvailable) { // if space is available, stay within the data range
						minArgs[2] = axis.dataMin;
					}
					min = arrayMax(minArgs);

					maxArgs = [min + minRange, pick(options.max, min + minRange)];
					if (spaceAvailable) { // if space is availabe, stay within the data range
						maxArgs[2] = axis.dataMax;
					}

					max = arrayMin(maxArgs);

					// now if the max is adjusted, adjust the min back
					if (max - min < minRange) {
						minArgs[0] = max - minRange;
						minArgs[1] = pick(options.min, max - minRange);
						min = arrayMax(minArgs);
					}
				}

				// Record modified extremes
				axis.min = min;
				axis.max = max;
			},

			/**
			 * Update translation information
			 */
			setAxisTranslation: function (saveOld) {
				var axis = this,
					range = axis.max - axis.min,
					pointRange = axis.axisPointRange || 0,
					closestPointRange,
					minPointOffset = 0,
					pointRangePadding = 0,
					linkedParent = axis.linkedParent,
					ordinalCorrection,
					hasCategories = !!axis.categories,
					transA = axis.transA,
					isXAxis = axis.isXAxis;

				// Adjust translation for padding. Y axis with categories need to go through the same (#1784).
				if (isXAxis || hasCategories || pointRange) {
					if (linkedParent) {
						minPointOffset = linkedParent.minPointOffset;
						pointRangePadding = linkedParent.pointRangePadding;

					} else {
						each(axis.series, function (series) {
							var seriesPointRange = hasCategories ? 1 : (isXAxis ? series.pointRange : (axis.axisPointRange || 0)), // #2806
								pointPlacement = series.options.pointPlacement,
								seriesClosestPointRange = series.closestPointRange;

							if (seriesPointRange > range) { // #1446
								seriesPointRange = 0;
							}
							pointRange = mathMax(pointRange, seriesPointRange);

							if (!axis.single) {
								// minPointOffset is the value padding to the left of the axis in order to make
								// room for points with a pointRange, typically columns. When the pointPlacement option
								// is 'between' or 'on', this padding does not apply.
								minPointOffset = mathMax(
									minPointOffset,
									isString(pointPlacement) ? 0 : seriesPointRange / 2
								);

								// Determine the total padding needed to the length of the axis to make room for the
								// pointRange. If the series' pointPlacement is 'on', no padding is added.
								pointRangePadding = mathMax(
									pointRangePadding,
									pointPlacement === 'on' ? 0 : seriesPointRange
								);
							}

							// Set the closestPointRange
							if (!series.noSharedTooltip && defined(seriesClosestPointRange)) {
								closestPointRange = defined(closestPointRange) ?
									mathMin(closestPointRange, seriesClosestPointRange) :
									seriesClosestPointRange;
							}
						});
					}

					// Record minPointOffset and pointRangePadding
					ordinalCorrection = axis.ordinalSlope && closestPointRange ? axis.ordinalSlope / closestPointRange : 1; // #988, #1853
					axis.minPointOffset = minPointOffset = minPointOffset * ordinalCorrection;
					axis.pointRangePadding = pointRangePadding = pointRangePadding * ordinalCorrection;

					// pointRange means the width reserved for each point, like in a column chart
					axis.pointRange = mathMin(pointRange, range);

					// closestPointRange means the closest distance between points. In columns
					// it is mostly equal to pointRange, but in lines pointRange is 0 while closestPointRange
					// is some other value
					if (isXAxis) {
						axis.closestPointRange = closestPointRange;
					}
				}

				// Secondary values
				if (saveOld) {
					axis.oldTransA = transA;
				}
				axis.translationSlope = axis.transA = transA = axis.len / ((range + pointRangePadding) || 1);
				axis.transB = axis.horiz ? axis.left : axis.bottom; // translation addend
				axis.minPixelPadding = transA * minPointOffset;
			},

			minFromRange: function () {
				return this.max - this.range;
			},

			/**
			 * Set the tick positions to round values and optionally extend the extremes
			 * to the nearest tick
			 */
			setTickInterval: function (secondPass) {
				var axis = this,
					chart = axis.chart,
					options = axis.options,
					isLog = axis.isLog,
					isDatetimeAxis = axis.isDatetimeAxis,
					isXAxis = axis.isXAxis,
					isLinked = axis.isLinked,
					maxPadding = options.maxPadding,
					minPadding = options.minPadding,
					length,
					linkedParentExtremes,
					tickIntervalOption = options.tickInterval,
					minTickInterval,
					tickPixelIntervalOption = options.tickPixelInterval,
					categories = axis.categories;

				if (!isDatetimeAxis && !categories && !isLinked) {
					this.getTickAmount();
				}

				// linked axis gets the extremes from the parent axis
				if (isLinked) {
					axis.linkedParent = chart[axis.coll][options.linkedTo];
					linkedParentExtremes = axis.linkedParent.getExtremes();
					axis.min = pick(linkedParentExtremes.min, linkedParentExtremes.dataMin);
					axis.max = pick(linkedParentExtremes.max, linkedParentExtremes.dataMax);
					if (options.type !== axis.linkedParent.options.type) {
						error(11, 1); // Can't link axes of different type
					}
				} else { // initial min and max from the extreme data values
					axis.min = pick(axis.userMin, options.min, axis.dataMin);
					axis.max = pick(axis.userMax, options.max, axis.dataMax);
				}

				if (isLog) {
					if (!secondPass && mathMin(axis.min, pick(axis.dataMin, axis.min)) <= 0) { // #978
						error(10, 1); // Can't plot negative values on log axis
					}
					// The correctFloat cures #934, float errors on full tens. But it
					// was too aggressive for #4360 because of conversion back to lin,
					// therefore use precision 15.
					axis.min = correctFloat(log2lin(axis.min), 15);
					axis.max = correctFloat(log2lin(axis.max), 15);
				}

				// handle zoomed range
				if (axis.range && defined(axis.max)) {
					axis.userMin = axis.min = mathMax(axis.min, axis.minFromRange()); // #618
					axis.userMax = axis.max;

					axis.range = null;  // don't use it when running setExtremes
				}

				// Hook for adjusting this.min and this.max. Used by bubble series.
				if (axis.beforePadding) {
					axis.beforePadding();
				}

				// adjust min and max for the minimum range
				axis.adjustForMinRange();

				// Pad the values to get clear of the chart's edges. To avoid tickInterval taking the padding
				// into account, we do this after computing tick interval (#1337).
				if (!categories && !axis.axisPointRange && !axis.usePercentage && !isLinked && defined(axis.min) && defined(axis.max)) {
					length = axis.max - axis.min;
					if (length) {
						if (!defined(options.min) && !defined(axis.userMin) && minPadding && (axis.dataMin < 0 || !axis.ignoreMinPadding)) {
							axis.min -= length * minPadding;
						}
						if (!defined(options.max) && !defined(axis.userMax)  && maxPadding && (axis.dataMax > 0 || !axis.ignoreMaxPadding)) {
							axis.max += length * maxPadding;
						}
					}
				}

				// Stay within floor and ceiling
				if (isNumber(options.floor)) {
					axis.min = mathMax(axis.min, options.floor);
				}
				if (isNumber(options.ceiling)) {
					axis.max = mathMin(axis.max, options.ceiling);
				}

				// get tickInterval
				if (axis.min === axis.max || axis.min === undefined || axis.max === undefined) {
					axis.tickInterval = 1;
				} else if (isLinked && !tickIntervalOption &&
						tickPixelIntervalOption === axis.linkedParent.options.tickPixelInterval) {
					axis.tickInterval = tickIntervalOption = axis.linkedParent.tickInterval;
				} else {
					axis.tickInterval = pick(
						tickIntervalOption,
						this.tickAmount ? ((axis.max - axis.min) / mathMax(this.tickAmount - 1, 1)) : undefined,
						categories ? // for categoried axis, 1 is default, for linear axis use tickPix
							1 :
							// don't let it be more than the data range
							(axis.max - axis.min) * tickPixelIntervalOption / mathMax(axis.len, tickPixelIntervalOption)
					);
				}

				// Now we're finished detecting min and max, crop and group series data. This
				// is in turn needed in order to find tick positions in ordinal axes.
				if (isXAxis && !secondPass) {
					each(axis.series, function (series) {
						series.processData(axis.min !== axis.oldMin || axis.max !== axis.oldMax);
					});
				}

				// set the translation factor used in translate function
				axis.setAxisTranslation(true);

				// hook for ordinal axes and radial axes
				if (axis.beforeSetTickPositions) {
					axis.beforeSetTickPositions();
				}

				// hook for extensions, used in Highstock ordinal axes
				if (axis.postProcessTickInterval) {
					axis.tickInterval = axis.postProcessTickInterval(axis.tickInterval);
				}

				// In column-like charts, don't cramp in more ticks than there are points (#1943)
				if (axis.pointRange) {
					axis.tickInterval = mathMax(axis.pointRange, axis.tickInterval);
				}

				// Before normalizing the tick interval, handle minimum tick interval. This applies only if tickInterval is not defined.
				minTickInterval = pick(options.minTickInterval, axis.isDatetimeAxis && axis.closestPointRange);
				if (!tickIntervalOption && axis.tickInterval < minTickInterval) {
					axis.tickInterval = minTickInterval;
				}

				// for linear axes, get magnitude and normalize the interval
				if (!isDatetimeAxis && !isLog && !tickIntervalOption) {
					axis.tickInterval = normalizeTickInterval(
						axis.tickInterval, 
						null, 
						getMagnitude(axis.tickInterval), 
						// If the tick interval is between 0.5 and 5 and the axis max is in the order of
						// thousands, chances are we are dealing with years. Don't allow decimals. #3363.
						pick(options.allowDecimals, !(axis.tickInterval > 0.5 && axis.tickInterval < 5 && axis.max > 1000 && axis.max < 9999)),
						!!this.tickAmount
					);
				}
				
				// Prevent ticks from getting so close that we can't draw the labels
				if (!this.tickAmount && this.len) { // Color axis with disabled legend has no length
					axis.tickInterval = axis.unsquish();
				}

				this.setTickPositions();
			},

			/**
			 * Now we have computed the normalized tickInterval, get the tick positions
			 */
			setTickPositions: function () {

				var options = this.options,
					tickPositions,
					tickPositionsOption = options.tickPositions,
					tickPositioner = options.tickPositioner,
					startOnTick = options.startOnTick,
					endOnTick = options.endOnTick,
					single;

				// Set the tickmarkOffset
				this.tickmarkOffset = (this.categories && options.tickmarkPlacement === 'between' && 
					this.tickInterval === 1) ? 0.5 : 0; // #3202


				// get minorTickInterval
				this.minorTickInterval = options.minorTickInterval === 'auto' && this.tickInterval ?
					this.tickInterval / 5 : options.minorTickInterval;

				// Find the tick positions
				this.tickPositions = tickPositions = tickPositionsOption && tickPositionsOption.slice(); // Work on a copy (#1565)
				if (!tickPositions) {

					if (this.isDatetimeAxis) {
						tickPositions = this.getTimeTicks(
							this.normalizeTimeTickInterval(this.tickInterval, options.units),
							this.min,
							this.max,
							options.startOfWeek,
							this.ordinalPositions,
							this.closestPointRange,
							true
						);
					} else if (this.isLog) {
						tickPositions = this.getLogTickPositions(this.tickInterval, this.min, this.max);
					} else {
						tickPositions = this.getLinearTickPositions(this.tickInterval, this.min, this.max);
					}

					// Too dense ticks, keep only the first and last (#4477)
					if (tickPositions.length > this.len) {
						tickPositions = [tickPositions[0], tickPositions.pop()];
					}

					this.tickPositions = tickPositions;

					// Run the tick positioner callback, that allows modifying auto tick positions.
					if (tickPositioner) {
						tickPositioner = tickPositioner.apply(this, [this.min, this.max]);
						if (tickPositioner) {
							this.tickPositions = tickPositions = tickPositioner;
						}
					}

				}

				if (!this.isLinked) {

					// reset min/max or remove extremes based on start/end on tick
					this.trimTicks(tickPositions, startOnTick, endOnTick);

					// When there is only one point, or all points have the same value on this axis, then min
					// and max are equal and tickPositions.length is 0 or 1. In this case, add some padding
					// in order to center the point, but leave it with one tick. #1337.
					if (this.min === this.max && defined(this.min) && !this.tickAmount) {
						// Substract half a unit (#2619, #2846, #2515, #3390)
						single = true;
						this.min -= 0.5;
						this.max += 0.5;
					}
					this.single = single;

					if (!tickPositionsOption && !tickPositioner) {
						this.adjustTickAmount();
					}
				}
			},

			/**
			 * Handle startOnTick and endOnTick by either adapting to padding min/max or rounded min/max
			 */
			trimTicks: function (tickPositions, startOnTick, endOnTick) {
				var roundedMin = tickPositions[0],
					roundedMax = tickPositions[tickPositions.length - 1],
					minPointOffset = this.minPointOffset || 0;
					
				if (startOnTick) {
					this.min = roundedMin;
				} else if (this.min - minPointOffset > roundedMin) {
					tickPositions.shift();
				}

				if (endOnTick) {
					this.max = roundedMax;
				} else if (this.max + minPointOffset < roundedMax) {
					tickPositions.pop();
				}

				// If no tick are left, set one tick in the middle (#3195) 
				if (tickPositions.length === 0 && defined(roundedMin)) {
					tickPositions.push((roundedMax + roundedMin) / 2);
				}		
			},

			/**
			 * Set the max ticks of either the x and y axis collection
			 */
			getTickAmount: function () {
				var others = {}, // Whether there is another axis to pair with this one
					hasOther,
					options = this.options,
					tickAmount = options.tickAmount,
					tickPixelInterval = options.tickPixelInterval;

				if (!defined(options.tickInterval) && this.len < tickPixelInterval && !this.isRadial &&
						!this.isLog && options.startOnTick && options.endOnTick) {
					tickAmount = 2;
				}

				if (!tickAmount && this.chart.options.chart.alignTicks !== false && options.alignTicks !== false) {
					// Check if there are multiple axes in the same pane
					each(this.chart[this.coll], function (axis) {
						var options = axis.options,
							horiz = axis.horiz,
							key = [horiz ? options.left : options.top, horiz ? options.width : options.height, options.pane].join(',');
						
						if (others[key]) {
							if (axis.series.length) {
								hasOther = true; // #4201
							}
						} else {
							others[key] = 1;
						}
					});

					if (hasOther) {
						// Add 1 because 4 tick intervals require 5 ticks (including first and last)
						tickAmount = mathCeil(this.len / tickPixelInterval) + 1;
					}
				}

				// For tick amounts of 2 and 3, compute five ticks and remove the intermediate ones. This
				// prevents the axis from adding ticks that are too far away from the data extremes.
				if (tickAmount < 4) {
					this.finalTickAmt = tickAmount;
					tickAmount = 5;
				}
				
				this.tickAmount = tickAmount;
			},

			/**
			 * When using multiple axes, adjust the number of ticks to match the highest
			 * number of ticks in that group
			 */
			adjustTickAmount: function () {
				var tickInterval = this.tickInterval,
					tickPositions = this.tickPositions,
					tickAmount = this.tickAmount,
					finalTickAmt = this.finalTickAmt,
					currentTickAmount = tickPositions && tickPositions.length,
					i,
					len;

				if (currentTickAmount < tickAmount) { // TODO: Check #3411
					while (tickPositions.length < tickAmount) {
						tickPositions.push(correctFloat(
							tickPositions[tickPositions.length - 1] + tickInterval
						));
					}
					this.transA *= (currentTickAmount - 1) / (tickAmount - 1);
					this.max = tickPositions[tickPositions.length - 1];

				// We have too many ticks, run second pass to try to reduce ticks
				} else if (currentTickAmount > tickAmount) {
					this.tickInterval *= 2;
					this.setTickPositions();
				}

				// The finalTickAmt property is set in getTickAmount
				if (defined(finalTickAmt)) {
					i = len = tickPositions.length;
					while (i--) {
						if (
							(finalTickAmt === 3 && i % 2 === 1) || // Remove every other tick
							(finalTickAmt <= 2 && i > 0 && i < len - 1) // Remove all but first and last
						) {
							tickPositions.splice(i, 1);
						}	
					}
					this.finalTickAmt = UNDEFINED;
				}
			},

			/**
			 * Set the scale based on data min and max, user set min and max or options
			 *
			 */
			setScale: function () {
				var axis = this,
					isDirtyData,
					isDirtyAxisLength;

				axis.oldMin = axis.min;
				axis.oldMax = axis.max;
				axis.oldAxisLength = axis.len;

				// set the new axisLength
				axis.setAxisSize();
				//axisLength = horiz ? axisWidth : axisHeight;
				isDirtyAxisLength = axis.len !== axis.oldAxisLength;

				// is there new data?
				each(axis.series, function (series) {
					if (series.isDirtyData || series.isDirty ||
							series.xAxis.isDirty) { // when x axis is dirty, we need new data extremes for y as well
						isDirtyData = true;
					}
				});

				// do we really need to go through all this?
				if (isDirtyAxisLength || isDirtyData || axis.isLinked || axis.forceRedraw ||
					axis.userMin !== axis.oldUserMin || axis.userMax !== axis.oldUserMax) {

					if (axis.resetStacks) {
						axis.resetStacks();
					}

					axis.forceRedraw = false;

					// get data extremes if needed
					axis.getSeriesExtremes();

					// get fixed positions based on tickInterval
					axis.setTickInterval();

					// record old values to decide whether a rescale is necessary later on (#540)
					axis.oldUserMin = axis.userMin;
					axis.oldUserMax = axis.userMax;

					// Mark as dirty if it is not already set to dirty and extremes have changed. #595.
					if (!axis.isDirty) {
						axis.isDirty = isDirtyAxisLength || axis.min !== axis.oldMin || axis.max !== axis.oldMax;
					}
				} else if (axis.cleanStacks) {
					axis.cleanStacks();
				}
			},

			/**
			 * Set the extremes and optionally redraw
			 * @param {Number} newMin
			 * @param {Number} newMax
			 * @param {Boolean} redraw
			 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
			 *    configuration
			 * @param {Object} eventArguments
			 *
			 */
			setExtremes: function (newMin, newMax, redraw, animation, eventArguments) {
				var axis = this,
					chart = axis.chart;

				redraw = pick(redraw, true); // defaults to true

				each(axis.series, function (serie) {
					delete serie.kdTree;
				});

				// Extend the arguments with min and max
				eventArguments = extend(eventArguments, {
					min: newMin,
					max: newMax
				});

				// Fire the event
				fireEvent(axis, 'setExtremes', eventArguments, function () { // the default event handler

					axis.userMin = newMin;
					axis.userMax = newMax;
					axis.eventArgs = eventArguments;

					if (redraw) {
						chart.redraw(animation);
					}
				});
			},

			/**
			 * Overridable method for zooming chart. Pulled out in a separate method to allow overriding
			 * in stock charts.
			 */
			zoom: function (newMin, newMax) {
				var dataMin = this.dataMin,
					dataMax = this.dataMax,
					options = this.options,
					min = mathMin(dataMin, pick(options.min, dataMin)),
					max = mathMax(dataMax, pick(options.max, dataMax));

				// Prevent pinch zooming out of range. Check for defined is for #1946. #1734.
				if (!this.allowZoomOutside) {
					if (defined(dataMin) && newMin <= min) {
						newMin = min;
					}
					if (defined(dataMax) && newMax >= max) {
						newMax = max;
					}
				}

				// In full view, displaying the reset zoom button is not required
				this.displayBtn = newMin !== UNDEFINED || newMax !== UNDEFINED;

				// Do it
				this.setExtremes(
					newMin,
					newMax,
					false,
					UNDEFINED,
					{ trigger: 'zoom' }
				);
				return true;
			},

			/**
			 * Update the axis metrics
			 */
			setAxisSize: function () {
				var chart = this.chart,
					options = this.options,
					offsetLeft = options.offsetLeft || 0,
					offsetRight = options.offsetRight || 0,
					horiz = this.horiz,
					width = pick(options.width, chart.plotWidth - offsetLeft + offsetRight),
					height = pick(options.height, chart.plotHeight),
					top = pick(options.top, chart.plotTop),
					left = pick(options.left, chart.plotLeft + offsetLeft),
					percentRegex = /%$/;

				// Check for percentage based input values
				if (percentRegex.test(height)) {
					height = parseFloat(height) / 100 * chart.plotHeight;
				}
				if (percentRegex.test(top)) {
					top = parseFloat(top) / 100 * chart.plotHeight + chart.plotTop;
				}

				// Expose basic values to use in Series object and navigator
				this.left = left;
				this.top = top;
				this.width = width;
				this.height = height;
				this.bottom = chart.chartHeight - height - top;
				this.right = chart.chartWidth - width - left;

				// Direction agnostic properties
				this.len = mathMax(horiz ? width : height, 0); // mathMax fixes #905
				this.pos = horiz ? left : top; // distance from SVG origin
			},

			/**
			 * Get the actual axis extremes
			 */
			getExtremes: function () {
				var axis = this,
					isLog = axis.isLog;

				return {
					min: isLog ? correctFloat(lin2log(axis.min)) : axis.min,
					max: isLog ? correctFloat(lin2log(axis.max)) : axis.max,
					dataMin: axis.dataMin,
					dataMax: axis.dataMax,
					userMin: axis.userMin,
					userMax: axis.userMax
				};
			},

			/**
			 * Get the zero plane either based on zero or on the min or max value.
			 * Used in bar and area plots
			 */
			getThreshold: function (threshold) {
				var axis = this,
					isLog = axis.isLog,
					realMin = isLog ? lin2log(axis.min) : axis.min,
					realMax = isLog ? lin2log(axis.max) : axis.max;

				// With a threshold of null, make the columns/areas rise from the top or bottom 
				// depending on the value, assuming an actual threshold of 0 (#4233).
				if (threshold === null) {
					threshold = realMax < 0 ? realMax : realMin;
				} else if (realMin > threshold) {
					threshold = realMin;
				} else if (realMax < threshold) {
					threshold = realMax;
				}

				return axis.translate(threshold, 0, 1, 0, 1);
			},

			/**
			 * Compute auto alignment for the axis label based on which side the axis is on
			 * and the given rotation for the label
			 */
			autoLabelAlign: function (rotation) {
				var ret,
					angle = (pick(rotation, 0) - (this.side * 90) + 720) % 360;

				if (angle > 15 && angle < 165) {
					ret = 'right';
				} else if (angle > 195 && angle < 345) {
					ret = 'left';
				} else {
					ret = 'center';
				}
				return ret;
			},

			/**
			 * Prevent the ticks from getting so close we can't draw the labels. On a horizontal
			 * axis, this is handled by rotating the labels, removing ticks and adding ellipsis. 
			 * On a vertical axis remove ticks and add ellipsis.
			 */
			unsquish: function () {
				var chart = this.chart,
					ticks = this.ticks,
					labelOptions = this.options.labels,
					horiz = this.horiz,
					tickInterval = this.tickInterval,
					newTickInterval = tickInterval,
					slotSize = this.len / (((this.categories ? 1 : 0) + this.max - this.min) / tickInterval),
					rotation,
					rotationOption = labelOptions.rotation,
					labelMetrics = chart.renderer.fontMetrics(labelOptions.style.fontSize, ticks[0] && ticks[0].label),
					step,
					bestScore = Number.MAX_VALUE,
					autoRotation,
					// Return the multiple of tickInterval that is needed to avoid collision
					getStep = function (spaceNeeded) {
						var step = spaceNeeded / (slotSize || 1);
						step = step > 1 ? mathCeil(step) : 1;
						return step * tickInterval;
					};
				
				if (horiz) {
					autoRotation = defined(rotationOption) ? 
						[rotationOption] :
						slotSize < pick(labelOptions.autoRotationLimit, 80) && !labelOptions.staggerLines && !labelOptions.step && labelOptions.autoRotation;

					if (autoRotation) {

						// Loop over the given autoRotation options, and determine which gives the best score. The 
						// best score is that with the lowest number of steps and a rotation closest to horizontal.
						each(autoRotation, function (rot) {
							var score;

							if (rot === rotationOption || (rot && rot >= -90 && rot <= 90)) { // #3891
							
								step = getStep(mathAbs(labelMetrics.h / mathSin(deg2rad * rot)));

								score = step + mathAbs(rot / 360);

								if (score < bestScore) {
									bestScore = score;
									rotation = rot;
									newTickInterval = step;
								}
							}
						});
					}

				} else if (!labelOptions.step) { // #4411
					newTickInterval = getStep(labelMetrics.h);
				}

				this.autoRotation = autoRotation;
				this.labelRotation = rotation;

				return newTickInterval;
			},

			renderUnsquish: function () {
				var chart = this.chart,
					renderer = chart.renderer,
					tickPositions = this.tickPositions,
					ticks = this.ticks,
					labelOptions = this.options.labels,
					horiz = this.horiz,
					margin = chart.margin,
					slotCount = this.categories ? tickPositions.length : tickPositions.length - 1,
					slotWidth = this.slotWidth = (horiz && !labelOptions.step && !labelOptions.rotation &&
						((this.staggerLines || 1) * chart.plotWidth) / slotCount) ||
						(!horiz && ((margin[3] && (margin[3] - chart.spacing[3])) || chart.chartWidth * 0.33)), // #1580, #1931,
					innerWidth = mathMax(1, mathRound(slotWidth - 2 * (labelOptions.padding || 5))),
					attr = {},
					labelMetrics = renderer.fontMetrics(labelOptions.style.fontSize, ticks[0] && ticks[0].label),
					textOverflowOption = labelOptions.style.textOverflow,
					css,
					labelLength = 0,
					label,
					i,
					pos;

				// Set rotation option unless it is "auto", like in gauges
				if (!isString(labelOptions.rotation)) {
					attr.rotation = labelOptions.rotation || 0; // #4443
				}
				
				// Handle auto rotation on horizontal axis
				if (this.autoRotation) {

					// Get the longest label length
					each(tickPositions, function (tick) {
						tick = ticks[tick];
						if (tick && tick.labelLength > labelLength) {
							labelLength = tick.labelLength;
						}
					});
					
					// Apply rotation only if the label is too wide for the slot, and
					// the label is wider than its height.
					if (labelLength > innerWidth && labelLength > labelMetrics.h) {
						attr.rotation = this.labelRotation;
					} else {
						this.labelRotation = 0;
					}

				// Handle word-wrap or ellipsis on vertical axis
				} else if (slotWidth) {
					// For word-wrap or ellipsis
					css = { width: innerWidth + PX };

					if (!textOverflowOption) {
						css.textOverflow = 'clip';

						// On vertical axis, only allow word wrap if there is room for more lines.
						i = tickPositions.length;
						while (!horiz && i--) {
							pos = tickPositions[i];
							label = ticks[pos].label;
							if (label) {
								// Reset ellipsis in order to get the correct bounding box (#4070)
								if (label.styles.textOverflow === 'ellipsis') {
									label.css({ textOverflow: 'clip' });
								}
								if (label.getBBox().height > this.len / tickPositions.length - (labelMetrics.h - labelMetrics.f)) {
									label.specCss = { textOverflow: 'ellipsis' };
								}
							}
						}
					}
				}


				// Add ellipsis if the label length is significantly longer than ideal
				if (attr.rotation) {
					css = { 
						width: (labelLength > chart.chartHeight * 0.5 ? chart.chartHeight * 0.33 : chart.chartHeight) + PX
					};
					if (!textOverflowOption) {
						css.textOverflow = 'ellipsis';
					}
				}

				// Set the explicit or automatic label alignment
				this.labelAlign = attr.align = labelOptions.align || this.autoLabelAlign(this.labelRotation);

				// Apply general and specific CSS
				each(tickPositions, function (pos) {
					var tick = ticks[pos],
						label = tick && tick.label;
					if (label) {
						if (css) {
							label.css(merge(css, label.specCss));
						}
						delete label.specCss;
						label.attr(attr);
						tick.rotation = attr.rotation;
					}
				});

				// TODO: Why not part of getLabelPosition?
				this.tickRotCorr = renderer.rotCorr(labelMetrics.b, this.labelRotation || 0, this.side === 2);
			},

			/**
			 * Return true if the axis has associated data
			 */
			hasData: function () {
				return this.hasVisibleSeries || (defined(this.min) && defined(this.max) && !!this.tickPositions);
			},

			/**
			 * Render the tick labels to a preliminary position to get their sizes
			 */
			getOffset: function () {
				var axis = this,
					chart = axis.chart,
					renderer = chart.renderer,
					options = axis.options,
					tickPositions = axis.tickPositions,
					ticks = axis.ticks,
					horiz = axis.horiz,
					side = axis.side,
					invertedSide = chart.inverted ? [1, 0, 3, 2][side] : side,
					hasData,
					showAxis,
					titleOffset = 0,
					titleOffsetOption,
					titleMargin = 0,
					axisTitleOptions = options.title,
					labelOptions = options.labels,
					labelOffset = 0, // reset
					labelOffsetPadded,
					axisOffset = chart.axisOffset,
					clipOffset = chart.clipOffset,
					clip,
					directionFactor = [-1, 1, 1, -1][side],
					n,
					lineHeightCorrection;

				// For reuse in Axis.render
				hasData = axis.hasData();
				axis.showAxis = showAxis = hasData || pick(options.showEmpty, true);

				// Set/reset staggerLines
				axis.staggerLines = axis.horiz && labelOptions.staggerLines;

				// Create the axisGroup and gridGroup elements on first iteration
				if (!axis.axisGroup) {
					axis.gridGroup = renderer.g('grid')
						.attr({ zIndex: options.gridZIndex || 1 })
						.add();
					axis.axisGroup = renderer.g('axis')
						.attr({ zIndex: options.zIndex || 2 })
						.add();
					axis.labelGroup = renderer.g('axis-labels')
						.attr({ zIndex: labelOptions.zIndex || 7 })
						.addClass(PREFIX + axis.coll.toLowerCase() + '-labels')
						.add();
				}

				if (hasData || axis.isLinked) {
					
					// Generate ticks
					each(tickPositions, function (pos) {
						if (!ticks[pos]) {
							ticks[pos] = new Tick(axis, pos);
						} else {
							ticks[pos].addLabel(); // update labels depending on tick interval
						}
					});

					axis.renderUnsquish();

					each(tickPositions, function (pos) {
						// left side must be align: right and right side must have align: left for labels
						if (side === 0 || side === 2 || { 1: 'left', 3: 'right' }[side] === axis.labelAlign) {

							// get the highest offset
							labelOffset = mathMax(
								ticks[pos].getLabelSize(),
								labelOffset
							);
						}
					});

					if (axis.staggerLines) {
						labelOffset *= axis.staggerLines;
						axis.labelOffset = labelOffset;
					}


				} else { // doesn't have data
					for (n in ticks) {
						ticks[n].destroy();
						delete ticks[n];
					}
				}

				if (axisTitleOptions && axisTitleOptions.text && axisTitleOptions.enabled !== false) {
					if (!axis.axisTitle) {
						axis.axisTitle = renderer.text(
							axisTitleOptions.text,
							0,
							0,
							axisTitleOptions.useHTML
						)
						.attr({
							zIndex: 7,
							rotation: axisTitleOptions.rotation || 0,
							align:
								axisTitleOptions.textAlign ||
								{ low: 'left', middle: 'center', high: 'right' }[axisTitleOptions.align]
						})
						.addClass(PREFIX + this.coll.toLowerCase() + '-title')
						.css(axisTitleOptions.style)
						.add(axis.axisGroup);
						axis.axisTitle.isNew = true;
					}

					if (showAxis) {
						titleOffset = axis.axisTitle.getBBox()[horiz ? 'height' : 'width'];
						titleOffsetOption = axisTitleOptions.offset;
						titleMargin = defined(titleOffsetOption) ? 0 : pick(axisTitleOptions.margin, horiz ? 5 : 10);
					}

					// hide or show the title depending on whether showEmpty is set
					axis.axisTitle[showAxis ? 'show' : 'hide']();
				}

				// handle automatic or user set offset
				axis.offset = directionFactor * pick(options.offset, axisOffset[side]);

				axis.tickRotCorr = axis.tickRotCorr || { x: 0, y: 0 }; // polar
				lineHeightCorrection = side === 2 ? axis.tickRotCorr.y : 0;
				labelOffsetPadded = labelOffset + titleMargin +
					(labelOffset && (directionFactor * (horiz ? pick(labelOptions.y, axis.tickRotCorr.y + 8) : labelOptions.x) - lineHeightCorrection));
				axis.axisTitleMargin = pick(titleOffsetOption, labelOffsetPadded);

				axisOffset[side] = mathMax(
					axisOffset[side],
					axis.axisTitleMargin + titleOffset + directionFactor * axis.offset,
					labelOffsetPadded // #3027
				);

				// Decide the clipping needed to keep the graph inside the plot area and axis lines
				clip = options.offset ? 0 : mathFloor(options.lineWidth / 2) * 2; // #4308, #4371
				clipOffset[invertedSide] = mathMax(clipOffset[invertedSide], clip);
			},

			/**
			 * Get the path for the axis line
			 */
			getLinePath: function (lineWidth) {
				var chart = this.chart,
					opposite = this.opposite,
					offset = this.offset,
					horiz = this.horiz,
					lineLeft = this.left + (opposite ? this.width : 0) + offset,
					lineTop = chart.chartHeight - this.bottom - (opposite ? this.height : 0) + offset;

				if (opposite) {
					lineWidth *= -1; // crispify the other way - #1480, #1687
				}

				return chart.renderer.crispLine([
						M,
						horiz ?
							this.left :
							lineLeft,
						horiz ?
							lineTop :
							this.top,
						L,
						horiz ?
							chart.chartWidth - this.right :
							lineLeft,
						horiz ?
							lineTop :
							chart.chartHeight - this.bottom
					], lineWidth);
			},

			/**
			 * Position the title
			 */
			getTitlePosition: function () {
				// compute anchor points for each of the title align options
				var horiz = this.horiz,
					axisLeft = this.left,
					axisTop = this.top,
					axisLength = this.len,
					axisTitleOptions = this.options.title,
					margin = horiz ? axisLeft : axisTop,
					opposite = this.opposite,
					offset = this.offset,
					xOption = axisTitleOptions.x || 0,
					yOption = axisTitleOptions.y || 0,
					fontSize = pInt(axisTitleOptions.style.fontSize || 12),

					// the position in the length direction of the axis
					alongAxis = {
						low: margin + (horiz ? 0 : axisLength),
						middle: margin + axisLength / 2,
						high: margin + (horiz ? axisLength : 0)
					}[axisTitleOptions.align],

					// the position in the perpendicular direction of the axis
					offAxis = (horiz ? axisTop + this.height : axisLeft) +
						(horiz ? 1 : -1) * // horizontal axis reverses the margin
						(opposite ? -1 : 1) * // so does opposite axes
						this.axisTitleMargin +
						(this.side === 2 ? fontSize : 0);

				return {
					x: horiz ?
						alongAxis + xOption :
						offAxis + (opposite ? this.width : 0) + offset + xOption,
					y: horiz ?
						offAxis + yOption - (opposite ? this.height : 0) + offset :
						alongAxis + yOption
				};
			},

			/**
			 * Render the axis
			 */
			render: function () {
				var axis = this,
					chart = axis.chart,
					renderer = chart.renderer,
					options = axis.options,
					isLog = axis.isLog,
					isLinked = axis.isLinked,
					tickPositions = axis.tickPositions,
					axisTitle = axis.axisTitle,			
					ticks = axis.ticks,
					minorTicks = axis.minorTicks,
					alternateBands = axis.alternateBands,
					stackLabelOptions = options.stackLabels,
					alternateGridColor = options.alternateGridColor,
					tickmarkOffset = axis.tickmarkOffset,
					lineWidth = options.lineWidth,
					linePath,
					hasRendered = chart.hasRendered,
					slideInTicks = hasRendered && defined(axis.oldMin) && !isNaN(axis.oldMin),
					showAxis = axis.showAxis,
					globalAnimation = renderer.globalAnimation,
					from,
					to;

				// Reset
				axis.labelEdge.length = 0;
				//axis.justifyToPlot = overflow === 'justify';
				axis.overlap = false;

				// Mark all elements inActive before we go over and mark the active ones
				each([ticks, minorTicks, alternateBands], function (coll) {
					var pos;
					for (pos in coll) {
						coll[pos].isActive = false;
					}
				});

				// If the series has data draw the ticks. Else only the line and title
				if (axis.hasData() || isLinked) {

					// minor ticks
					if (axis.minorTickInterval && !axis.categories) {
						each(axis.getMinorTickPositions(), function (pos) {
							if (!minorTicks[pos]) {
								minorTicks[pos] = new Tick(axis, pos, 'minor');
							}

							// render new ticks in old position
							if (slideInTicks && minorTicks[pos].isNew) {
								minorTicks[pos].render(null, true);
							}

							minorTicks[pos].render(null, false, 1);
						});
					}

					// Major ticks. Pull out the first item and render it last so that
					// we can get the position of the neighbour label. #808.
					if (tickPositions.length) { // #1300
						each(tickPositions, function (pos, i) {

							// linked axes need an extra check to find out if
							if (!isLinked || (pos >= axis.min && pos <= axis.max)) {

								if (!ticks[pos]) {
									ticks[pos] = new Tick(axis, pos);
								}

								// render new ticks in old position
								if (slideInTicks && ticks[pos].isNew) {
									ticks[pos].render(i, true, 0.1);
								}

								ticks[pos].render(i);
							}

						});
						// In a categorized axis, the tick marks are displayed between labels. So
						// we need to add a tick mark and grid line at the left edge of the X axis.
						if (tickmarkOffset && (axis.min === 0 || axis.single)) {
							if (!ticks[-1]) {
								ticks[-1] = new Tick(axis, -1, null, true);
							}
							ticks[-1].render(-1);
						}

					}

					// alternate grid color
					if (alternateGridColor) {
						each(tickPositions, function (pos, i) {
							if (i % 2 === 0 && pos < axis.max) {
								if (!alternateBands[pos]) {
									alternateBands[pos] = new Highcharts.PlotLineOrBand(axis);
								}
								from = pos + tickmarkOffset; // #949
								to = tickPositions[i + 1] !== UNDEFINED ? tickPositions[i + 1] + tickmarkOffset : axis.max;
								alternateBands[pos].options = {
									from: isLog ? lin2log(from) : from,
									to: isLog ? lin2log(to) : to,
									color: alternateGridColor
								};
								alternateBands[pos].render();
								alternateBands[pos].isActive = true;
							}
						});
					}

					// custom plot lines and bands
					if (!axis._addedPlotLB) { // only first time
						each((options.plotLines || []).concat(options.plotBands || []), function (plotLineOptions) {
							axis.addPlotBandOrLine(plotLineOptions);
						});
						axis._addedPlotLB = true;
					}

				} // end if hasData

				// Remove inactive ticks
				each([ticks, minorTicks, alternateBands], function (coll) {
					var pos,
						i,
						forDestruction = [],
						delay = globalAnimation ? globalAnimation.duration || 500 : 0,
						destroyInactiveItems = function () {
							i = forDestruction.length;
							while (i--) {
								// When resizing rapidly, the same items may be destroyed in different timeouts,
								// or the may be reactivated
								if (coll[forDestruction[i]] && !coll[forDestruction[i]].isActive) {
									coll[forDestruction[i]].destroy();
									delete coll[forDestruction[i]];
								}
							}

						};

					for (pos in coll) {

						if (!coll[pos].isActive) {
							// Render to zero opacity
							coll[pos].render(pos, false, 0);
							coll[pos].isActive = false;
							forDestruction.push(pos);
						}
					}

					// When the objects are finished fading out, destroy them
					if (coll === alternateBands || !chart.hasRendered || !delay) {
						destroyInactiveItems();
					} else if (delay) {
						setTimeout(destroyInactiveItems, delay);
					}
				});

				// Static items. As the axis group is cleared on subsequent calls
				// to render, these items are added outside the group.
				// axis line
				if (lineWidth) {
					linePath = axis.getLinePath(lineWidth);
					if (!axis.axisLine) {
						axis.axisLine = renderer.path(linePath)
							.attr({
								stroke: options.lineColor,
								'stroke-width': lineWidth,
								zIndex: 7
							})
							.add(axis.axisGroup);
					} else {
						axis.axisLine.animate({ d: linePath });
					}

					// show or hide the line depending on options.showEmpty
					axis.axisLine[showAxis ? 'show' : 'hide']();
				}

				if (axisTitle && showAxis) {

					axisTitle[axisTitle.isNew ? 'attr' : 'animate'](
						axis.getTitlePosition()
					);
					axisTitle.isNew = false;
				}

				// Stacked totals:
				if (stackLabelOptions && stackLabelOptions.enabled) {
					axis.renderStackTotals();
				}
				// End stacked totals

				axis.isDirty = false;
			},

			/**
			 * Redraw the axis to reflect changes in the data or axis extremes
			 */
			redraw: function () {
				
				// render the axis
				this.render();

				// move plot lines and bands
				each(this.plotLinesAndBands, function (plotLine) {
					plotLine.render();
				});

				// mark associated series as dirty and ready for redraw
				each(this.series, function (series) {
					series.isDirty = true;
				});

			},

			/**
			 * Destroys an Axis instance.
			 */
			destroy: function (keepEvents) {
				var axis = this,
					stacks = axis.stacks,
					stackKey,
					plotLinesAndBands = axis.plotLinesAndBands,
					i;

				// Remove the events
				if (!keepEvents) {
					removeEvent(axis);
				}

				// Destroy each stack total
				for (stackKey in stacks) {
					destroyObjectProperties(stacks[stackKey]);

					stacks[stackKey] = null;
				}

				// Destroy collections
				each([axis.ticks, axis.minorTicks, axis.alternateBands], function (coll) {
					destroyObjectProperties(coll);
				});
				i = plotLinesAndBands.length;
				while (i--) { // #1975
					plotLinesAndBands[i].destroy();
				}

				// Destroy local variables
				each(['stackTotalGroup', 'axisLine', 'axisTitle', 'axisGroup', 'cross', 'gridGroup', 'labelGroup'], function (prop) {
					if (axis[prop]) {
						axis[prop] = axis[prop].destroy();
					}
				});

				// Destroy crosshair
				if (this.cross) {
					this.cross.destroy();
				}
			},

			/**
			 * Draw the crosshair
			 */
			drawCrosshair: function (e, point) { // docs: Missing docs for Axis.crosshair. Also for properties.

				var path,
					options = this.crosshair,
					animation = options.animation,
					pos,
					attribs,
					categorized;
				
				if (
					// Disabled in options
					!this.crosshair || 
					// Snap
					((defined(point) || !pick(this.crosshair.snap, true)) === false) || 
					// Not on this axis (#4095, #2888)
					(point && point.series && point.series[this.coll] !== this)
				) {
					this.hideCrosshair();
				
				} else {			

					// Get the path
					if (!pick(options.snap, true)) {
						pos = (this.horiz ? e.chartX - this.pos : this.len - e.chartY + this.pos);
					} else if (defined(point)) {
						/*jslint eqeq: true*/
						pos = this.isXAxis ? point.plotX : this.len - point.plotY; // #3834
						/*jslint eqeq: false*/
					}

					if (this.isRadial) {
						path = this.getPlotLinePath(this.isXAxis ? point.x : pick(point.stackY, point.y)) || null; // #3189
					} else {
						path = this.getPlotLinePath(null, null, null, null, pos) || null; // #3189
					}

					if (path === null) {
						this.hideCrosshair();
						return;
					}

					// Draw the cross
					if (this.cross) {
						this.cross
							.attr({ visibility: VISIBLE })[animation ? 'animate' : 'attr']({ d: path }, animation);
					} else {
						categorized = this.categories && !this.isRadial;
						attribs = {
							'stroke-width': options.width || (categorized ? this.transA : 1),
							stroke: options.color || (categorized ? 'rgba(155,200,255,0.2)' : '#C0C0C0'),
							zIndex: options.zIndex || 2
						};
						if (options.dashStyle) {
							attribs.dashstyle = options.dashStyle;
						}
						this.cross = this.chart.renderer.path(path).attr(attribs).add();
					}

				}

			},

			/**
			 *	Hide the crosshair.
			 */
			hideCrosshair: function () {
				if (this.cross) {
					this.cross.hide();
				}
			}
		}; // end Axis

		extend(Axis.prototype, AxisPlotLineOrBandExtension);

		/**
		 * Set the tick positions to a time unit that makes sense, for example
		 * on the first of each month or on every Monday. Return an array
		 * with the time positions. Used in datetime axes as well as for grouping
		 * data on a datetime axis.
		 *
		 * @param {Object} normalizedInterval The interval in axis values (ms) and the count
		 * @param {Number} min The minimum in axis values
		 * @param {Number} max The maximum in axis values
		 * @param {Number} startOfWeek
		 */
		Axis.prototype.getTimeTicks = function (normalizedInterval, min, max, startOfWeek) {
			var tickPositions = [],
				i,
				higherRanks = {},
				useUTC = defaultOptions.global.useUTC,
				minYear, // used in months and years as a basis for Date.UTC()
				minDate = new Date(min - getTZOffset(min)),
				interval = normalizedInterval.unitRange,
				count = normalizedInterval.count;

			if (defined(min)) { // #1300
				minDate[setMilliseconds](interval >= timeUnits.second ? 0 : // #3935
					count * mathFloor(minDate.getMilliseconds() / count)); // #3652, #3654

				if (interval >= timeUnits.second) { // second
					minDate[setSeconds](interval >= timeUnits.minute ? 0 : // #3935
						count * mathFloor(minDate.getSeconds() / count));
				}
			
				if (interval >= timeUnits.minute) { // minute
					minDate[setMinutes](interval >= timeUnits.hour ? 0 :
						count * mathFloor(minDate[getMinutes]() / count));
				}
			
				if (interval >= timeUnits.hour) { // hour
					minDate[setHours](interval >= timeUnits.day ? 0 :
						count * mathFloor(minDate[getHours]() / count));
				}
			
				if (interval >= timeUnits.day) { // day
					minDate[setDate](interval >= timeUnits.month ? 1 :
						count * mathFloor(minDate[getDate]() / count));
				}
			
				if (interval >= timeUnits.month) { // month
					minDate[setMonth](interval >= timeUnits.year ? 0 :
						count * mathFloor(minDate[getMonth]() / count));
					minYear = minDate[getFullYear]();
				}
			
				if (interval >= timeUnits.year) { // year
					minYear -= minYear % count;
					minDate[setFullYear](minYear);
				}
			
				// week is a special case that runs outside the hierarchy
				if (interval === timeUnits.week) {
					// get start of current week, independent of count
					minDate[setDate](minDate[getDate]() - minDate[getDay]() +
						pick(startOfWeek, 1));
				}
			
			
				// get tick positions
				i = 1;
				if (timezoneOffset || getTimezoneOffset) {
					minDate = minDate.getTime();
					minDate = new Date(minDate + getTZOffset(minDate));
				}
				minYear = minDate[getFullYear]();
				var time = minDate.getTime(),
					minMonth = minDate[getMonth](),
					minDateDate = minDate[getDate](),
					localTimezoneOffset = (timeUnits.day + 
							(useUTC ? getTZOffset(minDate) : minDate.getTimezoneOffset() * 60 * 1000)
						) % timeUnits.day; // #950, #3359
			
				// iterate and add tick positions at appropriate values
				while (time < max) {
					tickPositions.push(time);
			
					// if the interval is years, use Date.UTC to increase years
					if (interval === timeUnits.year) {
						time = makeTime(minYear + i * count, 0);
			
					// if the interval is months, use Date.UTC to increase months
					} else if (interval === timeUnits.month) {
						time = makeTime(minYear, minMonth + i * count);
			
					// if we're using global time, the interval is not fixed as it jumps
					// one hour at the DST crossover
					} else if (!useUTC && (interval === timeUnits.day || interval === timeUnits.week)) {
						time = makeTime(minYear, minMonth, minDateDate +
							i * count * (interval === timeUnits.day ? 1 : 7));
			
					// else, the interval is fixed and we use simple addition
					} else {
						time += interval * count;
					}
			
					i++;
				}
			
				// push the last time
				tickPositions.push(time);


				// mark new days if the time is dividible by day (#1649, #1760)
				each(grep(tickPositions, function (time) {
					return interval <= timeUnits.hour && time % timeUnits.day === localTimezoneOffset;
				}), function (time) {
					higherRanks[time] = 'day';
				});
			}


			// record information on the chosen unit - for dynamic label formatter
			tickPositions.info = extend(normalizedInterval, {
				higherRanks: higherRanks,
				totalRange: interval * count
			});

			return tickPositions;
		};

		/**
		 * Get a normalized tick interval for dates. Returns a configuration object with
		 * unit range (interval), count and name. Used to prepare data for getTimeTicks. 
		 * Previously this logic was part of getTimeTicks, but as getTimeTicks now runs
		 * of segments in stock charts, the normalizing logic was extracted in order to 
		 * prevent it for running over again for each segment having the same interval. 
		 * #662, #697.
		 */
		Axis.prototype.normalizeTimeTickInterval = function (tickInterval, unitsOption) {
			var units = unitsOption || [[
						'millisecond', // unit name
						[1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples
					], [
						'second',
						[1, 2, 5, 10, 15, 30]
					], [
						'minute',
						[1, 2, 5, 10, 15, 30]
					], [
						'hour',
						[1, 2, 3, 4, 6, 8, 12]
					], [
						'day',
						[1, 2]
					], [
						'week',
						[1, 2]
					], [
						'month',
						[1, 2, 3, 4, 6]
					], [
						'year',
						null
					]],
				unit = units[units.length - 1], // default unit is years
				interval = timeUnits[unit[0]],
				multiples = unit[1],
				count,
				i;
				
			// loop through the units to find the one that best fits the tickInterval
			for (i = 0; i < units.length; i++) {
				unit = units[i];
				interval = timeUnits[unit[0]];
				multiples = unit[1];


				if (units[i + 1]) {
					// lessThan is in the middle between the highest multiple and the next unit.
					var lessThan = (interval * multiples[multiples.length - 1] +
								timeUnits[units[i + 1][0]]) / 2;

					// break and keep the current unit
					if (tickInterval <= lessThan) {
						break;
					}
				}
			}

			// prevent 2.5 years intervals, though 25, 250 etc. are allowed
			if (interval === timeUnits.year && tickInterval < 5 * interval) {
				multiples = [1, 2, 5];
			}

			// get the count
			count = normalizeTickInterval(
				tickInterval / interval, 
				multiples,
				unit[0] === 'year' ? mathMax(getMagnitude(tickInterval / interval), 1) : 1 // #1913, #2360
			);
			
			return {
				unitRange: interval,
				count: count,
				unitName: unit[0]
			};
		};/**
		 * Methods defined on the Axis prototype
		 */

		/**
		 * Set the tick positions of a logarithmic axis
		 */
		Axis.prototype.getLogTickPositions = function (interval, min, max, minor) {
			var axis = this,
				options = axis.options,
				axisLength = axis.len,
				// Since we use this method for both major and minor ticks,
				// use a local variable and return the result
				positions = []; 
			
			// Reset
			if (!minor) {
				axis._minorAutoInterval = null;
			}
			
			// First case: All ticks fall on whole logarithms: 1, 10, 100 etc.
			if (interval >= 0.5) {
				interval = mathRound(interval);
				positions = axis.getLinearTickPositions(interval, min, max);
				
			// Second case: We need intermediary ticks. For example 
			// 1, 2, 4, 6, 8, 10, 20, 40 etc. 
			} else if (interval >= 0.08) {
				var roundedMin = mathFloor(min),
					intermediate,
					i,
					j,
					len,
					pos,
					lastPos,
					break2;
					
				if (interval > 0.3) {
					intermediate = [1, 2, 4];
				} else if (interval > 0.15) { // 0.2 equals five minor ticks per 1, 10, 100 etc
					intermediate = [1, 2, 4, 6, 8];
				} else { // 0.1 equals ten minor ticks per 1, 10, 100 etc
					intermediate = [1, 2, 3, 4, 5, 6, 7, 8, 9];
				}
				
				for (i = roundedMin; i < max + 1 && !break2; i++) {
					len = intermediate.length;
					for (j = 0; j < len && !break2; j++) {
						pos = log2lin(lin2log(i) * intermediate[j]);
						if (pos > min && (!minor || lastPos <= max) && lastPos !== UNDEFINED) { // #1670, lastPos is #3113
							positions.push(lastPos);
						}
						
						if (lastPos > max) {
							break2 = true;
						}
						lastPos = pos;
					}
				}
				
			// Third case: We are so deep in between whole logarithmic values that
			// we might as well handle the tick positions like a linear axis. For
			// example 1.01, 1.02, 1.03, 1.04.
			} else {
				var realMin = lin2log(min),
					realMax = lin2log(max),
					tickIntervalOption = options[minor ? 'minorTickInterval' : 'tickInterval'],
					filteredTickIntervalOption = tickIntervalOption === 'auto' ? null : tickIntervalOption,
					tickPixelIntervalOption = options.tickPixelInterval / (minor ? 5 : 1),
					totalPixelLength = minor ? axisLength / axis.tickPositions.length : axisLength;
				
				interval = pick(
					filteredTickIntervalOption,
					axis._minorAutoInterval,
					(realMax - realMin) * tickPixelIntervalOption / (totalPixelLength || 1)
				);
				
				interval = normalizeTickInterval(
					interval, 
					null, 
					getMagnitude(interval)
				);
				
				positions = map(axis.getLinearTickPositions(
					interval, 
					realMin,
					realMax	
				), log2lin);
				
				if (!minor) {
					axis._minorAutoInterval = interval / 5;
				}
			}
			
			// Set the axis-level tickInterval variable 
			if (!minor) {
				axis.tickInterval = interval;
			}
			return positions;
		};/**
		 * The tooltip object
		 * @param {Object} chart The chart instance
		 * @param {Object} options Tooltip options
		 */
		var Tooltip = Highcharts.Tooltip = function () {
			this.init.apply(this, arguments);
		};

		Tooltip.prototype = {

			init: function (chart, options) {

				var borderWidth = options.borderWidth,
					style = options.style,
					padding = pInt(style.padding);

				// Save the chart and options
				this.chart = chart;
				this.options = options;

				// Keep track of the current series
				//this.currentSeries = UNDEFINED;

				// List of crosshairs
				this.crosshairs = [];

				// Current values of x and y when animating
				this.now = { x: 0, y: 0 };

				// The tooltip is initially hidden
				this.isHidden = true;


				// create the label		
				this.label = chart.renderer.label('', 0, 0, options.shape || 'callout', null, null, options.useHTML, null, 'tooltip')
					.attr({
						padding: padding,
						fill: options.backgroundColor,
						'stroke-width': borderWidth,
						r: options.borderRadius,
						zIndex: 8
					})
					.css(style)
					.css({ padding: 0 }) // Remove it from VML, the padding is applied as an attribute instead (#1117)
					.add()
					.attr({ y: -9999 }); // #2301, #2657

				// When using canVG the shadow shows up as a gray circle
				// even if the tooltip is hidden.
				if (!useCanVG) {
					this.label.shadow(options.shadow);
				}

				// Public property for getting the shared state.
				this.shared = options.shared;
			},

			/**
			 * Destroy the tooltip and its elements.
			 */
			destroy: function () {
				// Destroy and clear local variables
				if (this.label) {
					this.label = this.label.destroy();
				}
				clearTimeout(this.hideTimer);
				clearTimeout(this.tooltipTimeout);
			},

			/**
			 * Provide a soft movement for the tooltip
			 *
			 * @param {Number} x
			 * @param {Number} y
			 * @private
			 */
			move: function (x, y, anchorX, anchorY) {
				var tooltip = this,
					now = tooltip.now,
					animate = tooltip.options.animation !== false && !tooltip.isHidden && 
						// When we get close to the target position, abort animation and land on the right place (#3056)
						(mathAbs(x - now.x) > 1 || mathAbs(y - now.y) > 1),
					skipAnchor = tooltip.followPointer || tooltip.len > 1;

				// Get intermediate values for animation
				extend(now, {
					x: animate ? (2 * now.x + x) / 3 : x,
					y: animate ? (now.y + y) / 2 : y,
					anchorX: skipAnchor ? UNDEFINED : animate ? (2 * now.anchorX + anchorX) / 3 : anchorX,
					anchorY: skipAnchor ? UNDEFINED : animate ? (now.anchorY + anchorY) / 2 : anchorY
				});

				// Move to the intermediate value
				tooltip.label.attr(now);

				
				// Run on next tick of the mouse tracker
				if (animate) {
				
					// Never allow two timeouts
					clearTimeout(this.tooltipTimeout);
					
					// Set the fixed interval ticking for the smooth tooltip
					this.tooltipTimeout = setTimeout(function () {
						// The interval function may still be running during destroy, so check that the chart is really there before calling.
						if (tooltip) {
							tooltip.move(x, y, anchorX, anchorY);
						}
					}, 32);
					
				}
			},

			/**
			 * Hide the tooltip
			 */
			hide: function (delay) {
				var tooltip = this,
					hoverPoints;
				
				clearTimeout(this.hideTimer); // disallow duplicate timers (#1728, #1766)
				if (!this.isHidden) {
					hoverPoints = this.chart.hoverPoints;

					this.hideTimer = setTimeout(function () {
						tooltip.label.fadeOut();
						tooltip.isHidden = true;
					}, pick(delay, this.options.hideDelay, 500));
				}
			},
			
			/** 
			 * Extendable method to get the anchor position of the tooltip
			 * from a point or set of points
			 */
			getAnchor: function (points, mouseEvent) {
				var ret,
					chart = this.chart,
					inverted = chart.inverted,
					plotTop = chart.plotTop,
					plotLeft = chart.plotLeft,
					plotX = 0,
					plotY = 0,
					yAxis,
					xAxis;
				
				points = splat(points);
				
				// Pie uses a special tooltipPos
				ret = points[0].tooltipPos;
				
				// When tooltip follows mouse, relate the position to the mouse
				if (this.followPointer && mouseEvent) {
					if (mouseEvent.chartX === UNDEFINED) {
						mouseEvent = chart.pointer.normalize(mouseEvent);
					}
					ret = [
						mouseEvent.chartX - chart.plotLeft,
						mouseEvent.chartY - plotTop
					];
				}
				// When shared, use the average position
				if (!ret) {
					each(points, function (point) {
						yAxis = point.series.yAxis;
						xAxis = point.series.xAxis;
						plotX += point.plotX  + (!inverted && xAxis ? xAxis.left - plotLeft : 0); 
						plotY += (point.plotLow ? (point.plotLow + point.plotHigh) / 2 : point.plotY) +
							(!inverted && yAxis ? yAxis.top - plotTop : 0); // #1151
					});
					
					plotX /= points.length;
					plotY /= points.length;
					
					ret = [
						inverted ? chart.plotWidth - plotY : plotX,
						this.shared && !inverted && points.length > 1 && mouseEvent ? 
							mouseEvent.chartY - plotTop : // place shared tooltip next to the mouse (#424)
							inverted ? chart.plotHeight - plotX : plotY
					];
				}

				return map(ret, mathRound);
			},
			
			/**
			 * Place the tooltip in a chart without spilling over
			 * and not covering the point it self.
			 */
			getPosition: function (boxWidth, boxHeight, point) {
				
				var chart = this.chart,
					distance = this.distance,
					ret = {},
					h = point.h || 0, // #4117
					swapped,
					first = ['y', chart.chartHeight, boxHeight, point.plotY + chart.plotTop, chart.plotTop, chart.plotTop + chart.plotHeight],
					second = ['x', chart.chartWidth, boxWidth, point.plotX + chart.plotLeft, chart.plotLeft, chart.plotLeft + chart.plotWidth],
					// The far side is right or bottom
					preferFarSide = pick(point.ttBelow, (chart.inverted && !point.negative) || (!chart.inverted && point.negative)),
					/**
					 * Handle the preferred dimension. When the preferred dimension is tooltip
					 * on top or bottom of the point, it will look for space there.
					 */
					firstDimension = function (dim, outerSize, innerSize, point, min, max) {
						var roomLeft = innerSize < point - distance,
							roomRight = point + distance + innerSize < outerSize,
							alignedLeft = point - distance - innerSize,
							alignedRight = point + distance;

						if (preferFarSide && roomRight) {
							ret[dim] = alignedRight;
						} else if (!preferFarSide && roomLeft) {
							ret[dim] = alignedLeft;
						} else if (roomLeft) {
							ret[dim] = mathMin(max - innerSize, alignedLeft - h < 0 ? alignedLeft : alignedLeft - h);
						} else if (roomRight) {
							ret[dim] = mathMax(min, alignedRight + h + innerSize > outerSize ? alignedRight : alignedRight + h);
						} else {
							return false;
						}
					},
					/**
					 * Handle the secondary dimension. If the preferred dimension is tooltip
					 * on top or bottom of the point, the second dimension is to align the tooltip
					 * above the point, trying to align center but allowing left or right
					 * align within the chart box.
					 */
					secondDimension = function (dim, outerSize, innerSize, point) {
						// Too close to the edge, return false and swap dimensions
						if (point < distance || point > outerSize - distance) {
							return false;
						
						// Align left/top
						} else if (point < innerSize / 2) {
							ret[dim] = 1;
						// Align right/bottom
						} else if (point > outerSize - innerSize / 2) {
							ret[dim] = outerSize - innerSize - 2;
						// Align center
						} else {
							ret[dim] = point - innerSize / 2;
						}
					},
					/**
					 * Swap the dimensions 
					 */
					swap = function (count) {
						var temp = first;
						first = second;
						second = temp;
						swapped = count;
					},
					run = function () {
						if (firstDimension.apply(0, first) !== false) {
							if (secondDimension.apply(0, second) === false && !swapped) {
								swap(true);
								run();
							}
						} else if (!swapped) {
							swap(true);
							run();
						} else {
							ret.x = ret.y = 0;
						}
					};

				// Under these conditions, prefer the tooltip on the side of the point
				if (chart.inverted || this.len > 1) {
					swap();
				}
				run();

				return ret;
			
			},

			/**
			 * In case no user defined formatter is given, this will be used. Note that the context
			 * here is an object holding point, series, x, y etc.
			 */
			defaultFormatter: function (tooltip) {
				var items = this.points || splat(this),
					s;

				// build the header
				s = [tooltip.tooltipFooterHeaderFormatter(items[0])]; //#3397: abstraction to enable formatting of footer and header

				// build the values
				s = s.concat(tooltip.bodyFormatter(items));

				// footer
				s.push(tooltip.tooltipFooterHeaderFormatter(items[0], true)); //#3397: abstraction to enable formatting of footer and header

				return s.join('');
			},

			/**
			 * Refresh the tooltip's text and position.
			 * @param {Object} point
			 */
			refresh: function (point, mouseEvent) {
				var tooltip = this,
					chart = tooltip.chart,
					label = tooltip.label,
					options = tooltip.options,
					x,
					y,
					anchor,
					textConfig = {},
					text,
					pointConfig = [],
					formatter = options.formatter || tooltip.defaultFormatter,
					hoverPoints = chart.hoverPoints,
					borderColor,
					shared = tooltip.shared,
					currentSeries;
					
				clearTimeout(this.hideTimer);
				
				// get the reference point coordinates (pie charts use tooltipPos)
				tooltip.followPointer = splat(point)[0].series.tooltipOptions.followPointer;
				anchor = tooltip.getAnchor(point, mouseEvent);
				x = anchor[0];
				y = anchor[1];

				// shared tooltip, array is sent over
				if (shared && !(point.series && point.series.noSharedTooltip)) {
					
					// hide previous hoverPoints and set new
					
					chart.hoverPoints = point;
					if (hoverPoints) {
						each(hoverPoints, function (point) {
							point.setState();
						});
					}

					each(point, function (item) {
						item.setState(HOVER_STATE);

						pointConfig.push(item.getLabelConfig());
					});

					textConfig = {
						x: point[0].category,
						y: point[0].y
					};
					textConfig.points = pointConfig;
					this.len = pointConfig.length;
					point = point[0];

				// single point tooltip
				} else {
					textConfig = point.getLabelConfig();
				}
				text = formatter.call(textConfig, tooltip);

				// register the current series
				currentSeries = point.series;
				this.distance = pick(currentSeries.tooltipOptions.distance, 16);

				// update the inner HTML
				if (text === false) {
					this.hide();
				} else {

					// show it
					if (tooltip.isHidden) {
						stop(label);
						label.attr('opacity', 1).show();
					}

					// update text
					label.attr({
						text: text
					});

					// set the stroke color of the box
					borderColor = options.borderColor || point.color || currentSeries.color || '#606060';
					label.attr({
						stroke: borderColor
					});
					tooltip.updatePosition({ 
						plotX: x, 
						plotY: y, 
						negative: point.negative, 
						ttBelow: point.ttBelow, 
						h: anchor[2] || 0
					});
				
					this.isHidden = false;
				}
				fireEvent(chart, 'tooltipRefresh', {
						text: text,
						x: x + chart.plotLeft,
						y: y + chart.plotTop,
						borderColor: borderColor
					});
			},
			
			/**
			 * Find the new position and perform the move
			 */
			updatePosition: function (point) {
				var chart = this.chart,
					label = this.label, 
					pos = (this.options.positioner || this.getPosition).call(
						this,
						label.width,
						label.height,
						point
					);

				// do the move
				this.move(
					mathRound(pos.x), 
					mathRound(pos.y || 0), // can be undefined (#3977) 
					point.plotX + chart.plotLeft, 
					point.plotY + chart.plotTop
				);
			},

			/** 
			 * Get the best X date format based on the closest point range on the axis.
			 */
			getXDateFormat: function (point, options, xAxis) {
				var xDateFormat,
					dateTimeLabelFormats = options.dateTimeLabelFormats,
					closestPointRange = xAxis && xAxis.closestPointRange,
					n,
					blank = '01-01 00:00:00.000',
					strpos = {
						millisecond: 15,
						second: 12,
						minute: 9,
						hour: 6,
						day: 3
					},
					date,
					lastN = 'millisecond'; // for sub-millisecond data, #4223

				if (closestPointRange) {
					date = dateFormat('%m-%d %H:%M:%S.%L', point.x);
					for (n in timeUnits) {

						// If the range is exactly one week and we're looking at a Sunday/Monday, go for the week format
						if (closestPointRange === timeUnits.week && +dateFormat('%w', point.x) === xAxis.options.startOfWeek && 
								date.substr(6) === blank.substr(6)) {
							n = 'week';
							break;

						// The first format that is too great for the range
						} else if (timeUnits[n] > closestPointRange) {
							n = lastN;
							break;
						
						// If the point is placed every day at 23:59, we need to show
						// the minutes as well. #2637.
						} else if (strpos[n] && date.substr(strpos[n]) !== blank.substr(strpos[n])) {
							break;
						}

						// Weeks are outside the hierarchy, only apply them on Mondays/Sundays like in the first condition
						if (n !== 'week') {
							lastN = n;
						}
					}
					
					if (n) {
						xDateFormat = dateTimeLabelFormats[n];
					}
				} else {
					xDateFormat = dateTimeLabelFormats.day;
				}

				return xDateFormat || dateTimeLabelFormats.year; // #2546, 2581
			},

			/**
			 * Format the footer/header of the tooltip
			 * #3397: abstraction to enable formatting of footer and header
			 */
			tooltipFooterHeaderFormatter: function (point, isFooter) {
				var footOrHead = isFooter ? 'footer' : 'header',
					series = point.series,
					tooltipOptions = series.tooltipOptions,
					xDateFormat = tooltipOptions.xDateFormat,
					xAxis = series.xAxis,
					isDateTime = xAxis && xAxis.options.type === 'datetime' && isNumber(point.key),
					formatString = tooltipOptions[footOrHead+'Format'];

				// Guess the best date format based on the closest point distance (#568, #3418)
				if (isDateTime && !xDateFormat) {
					xDateFormat = this.getXDateFormat(point, tooltipOptions, xAxis);
				}

				// Insert the footer date format if any
				if (isDateTime && xDateFormat) {
					formatString = formatString.replace('{point.key}', '{point.key:' + xDateFormat + '}');
				}

				return format(formatString, {
					point: point,
					series: series
				});
			},

			/**
		     * Build the body (lines) of the tooltip by iterating over the items and returning one entry for each item,
		     * abstracting this functionality allows to easily overwrite and extend it. 
			 */
			bodyFormatter: function (items) {
		        return map(items, function (item) {
		            var tooltipOptions = item.series.tooltipOptions;
		            return (tooltipOptions.pointFormatter || item.point.tooltipFormatter).call(item.point, tooltipOptions.pointFormat);
		        });
		    }
		    
		};

		var hoverChartIndex;

		// Global flag for touch support
		hasTouch = doc.documentElement.ontouchstart !== UNDEFINED;

		/**
		 * The mouse tracker object. All methods starting with "on" are primary DOM event handlers. 
		 * Subsequent methods should be named differently from what they are doing.
		 * @param {Object} chart The Chart instance
		 * @param {Object} options The root options object
		 */
		var Pointer = Highcharts.Pointer = function (chart, options) {
			this.init(chart, options);
		};

		Pointer.prototype = {
			/**
			 * Initialize Pointer
			 */
			init: function (chart, options) {
				
				var chartOptions = options.chart,
					chartEvents = chartOptions.events,
					zoomType = useCanVG ? '' : chartOptions.zoomType,
					inverted = chart.inverted,
					zoomX,
					zoomY;

				// Store references
				this.options = options;
				this.chart = chart;
				
				// Zoom status
				this.zoomX = zoomX = /x/.test(zoomType);
				this.zoomY = zoomY = /y/.test(zoomType);
				this.zoomHor = (zoomX && !inverted) || (zoomY && inverted);
				this.zoomVert = (zoomY && !inverted) || (zoomX && inverted);
				this.hasZoom = zoomX || zoomY;

				// Do we need to handle click on a touch device?
				this.runChartClick = chartEvents && !!chartEvents.click;

				this.pinchDown = [];
				this.lastValidTouch = {};

				if (Highcharts.Tooltip && options.tooltip.enabled) {
					chart.tooltip = new Tooltip(chart, options.tooltip);
					this.followTouchMove = pick(options.tooltip.followTouchMove, true);
				}

				this.setDOMEvents();
			}, 

			/**
			 * Add crossbrowser support for chartX and chartY
			 * @param {Object} e The event object in standard browsers
			 */
			normalize: function (e, chartPosition) {
				var chartX,
					chartY,
					ePos;

				// common IE normalizing
				e = e || window.event;

				// Framework specific normalizing (#1165)
				e = washMouseEvent(e);

				// More IE normalizing, needs to go after washMouseEvent
				if (!e.target) {
					e.target = e.srcElement;
				}
				
				// iOS (#2757)
				ePos = e.touches ?  (e.touches.length ? e.touches.item(0) : e.changedTouches[0]) : e;

				// Get mouse position
				if (!chartPosition) {
					this.chartPosition = chartPosition = offset(this.chart.container);
				}

				// chartX and chartY
				if (ePos.pageX === UNDEFINED) { // IE < 9. #886.
					chartX = mathMax(e.x, e.clientX - chartPosition.left); // #2005, #2129: the second case is 
						// for IE10 quirks mode within framesets
					chartY = e.y;
				} else {
					chartX = ePos.pageX - chartPosition.left;
					chartY = ePos.pageY - chartPosition.top;
				}

				return extend(e, {
					chartX: mathRound(chartX),
					chartY: mathRound(chartY)
				});
			},

			/**
			 * Get the click position in terms of axis values.
			 *
			 * @param {Object} e A pointer event
			 */
			getCoordinates: function (e) {
				var coordinates = {
						xAxis: [],
						yAxis: []
					};

				each(this.chart.axes, function (axis) {
					coordinates[axis.isXAxis ? 'xAxis' : 'yAxis'].push({
						axis: axis,
						value: axis.toValue(e[axis.horiz ? 'chartX' : 'chartY'])
					});
				});
				return coordinates;
			},
			
			/**
			 * With line type charts with a single tracker, get the point closest to the mouse.
			 * Run Point.onMouseOver and display tooltip for the point or points.
			 */
			runPointActions: function (e) {

				var pointer = this,
					chart = pointer.chart,
					series = chart.series,
					tooltip = chart.tooltip,
					shared = tooltip ? tooltip.shared : false,
					followPointer,
					hoverPoint = chart.hoverPoint,
					hoverSeries = chart.hoverSeries,
					i,
					distance = chart.chartWidth,
					anchor,
					noSharedTooltip,
					directTouch,
					kdpoints = [],
					kdpoint,
					kdpointT;

				// For hovering over the empty parts of the plot area (hoverSeries is undefined). 
				// If there is one series with point tracking (combo chart), don't go to nearest neighbour.
				if (!shared && !hoverSeries) {
					for (i = 0; i < series.length; i++) {
						if (series[i].directTouch || !series[i].options.stickyTracking) {
							series = [];
						}
					}
				}

				// If it has a hoverPoint and that series requires direct touch (like columns), 
				// use the hoverPoint (#3899). Otherwise, search the k-d tree.
				if (!shared && hoverSeries && hoverSeries.directTouch && hoverPoint) {
					kdpoint = hoverPoint;

				// Handle shared tooltip or cases where a series is not yet hovered
				} else {
					// Find nearest points on all series
					each(series, function (s) {
						// Skip hidden series
						noSharedTooltip = s.noSharedTooltip && shared;
						directTouch = !shared && s.directTouch;
						if (s.visible && !noSharedTooltip && !directTouch && pick(s.options.enableMouseTracking, true)) { // #3821
							kdpointT = s.searchPoint(e, !noSharedTooltip && s.kdDimensions === 1); // #3828
							if (kdpointT) {
								kdpoints.push(kdpointT);
							}
						}
					});
					// Find absolute nearest point
					each(kdpoints, function (p) {
						if (p && typeof p.dist === 'number' && p.dist < distance) {
							distance = p.dist;
							kdpoint = p;
						}
					});
				}

				// Refresh tooltip for kdpoint if new hover point or tooltip was hidden // #3926, #4200
				if (kdpoint && (kdpoint !== this.prevKDPoint || (tooltip && tooltip.isHidden))) {
					// Draw tooltip if necessary
					if (shared && !kdpoint.series.noSharedTooltip) {
						i = kdpoints.length;
						while (i--) {
							if (kdpoints[i].clientX !== kdpoint.clientX || kdpoints[i].series.noSharedTooltip) {
								kdpoints.splice(i, 1);
							}
						}
						if (kdpoints.length && tooltip) {
							tooltip.refresh(kdpoints, e);
						}

						// Do mouseover on all points (#3919, #3985, #4410)
						each(kdpoints, function (point) {
							point.onMouseOver(e, point !== ((hoverSeries && hoverSeries.directTouch && hoverPoint) || kdpoint));
						}); 
					} else {
						if (tooltip) { 
							tooltip.refresh(kdpoint, e);
						}
						if(!hoverSeries || !hoverSeries.directTouch) { // #4448
							kdpoint.onMouseOver(e); 
						}
					}
					this.prevKDPoint = kdpoint;
				
				// Update positions (regardless of kdpoint or hoverPoint)
				} else {
					followPointer = hoverSeries && hoverSeries.tooltipOptions.followPointer;
					if (tooltip && followPointer && !tooltip.isHidden) {
						anchor = tooltip.getAnchor([{}], e);
						tooltip.updatePosition({ plotX: anchor[0], plotY: anchor[1] });			
					}
				}

				// Start the event listener to pick up the tooltip 
				if (tooltip && !pointer._onDocumentMouseMove) {
					pointer._onDocumentMouseMove = function (e) {
						if (charts[hoverChartIndex]) {
							charts[hoverChartIndex].pointer.onDocumentMouseMove(e);
						}
					};
					addEvent(doc, 'mousemove', pointer._onDocumentMouseMove);
				}
				
				// Crosshair
				each(chart.axes, function (axis) {
					axis.drawCrosshair(e, pick(kdpoint, hoverPoint));
				});	
				

			},



			/**
			 * Reset the tracking by hiding the tooltip, the hover series state and the hover point
			 * 
			 * @param allowMove {Boolean} Instead of destroying the tooltip altogether, allow moving it if possible
			 */
			reset: function (allowMove, delay) {
				var pointer = this,
					chart = pointer.chart,
					hoverSeries = chart.hoverSeries,
					hoverPoint = chart.hoverPoint,
					hoverPoints = chart.hoverPoints,
					tooltip = chart.tooltip,
					tooltipPoints = tooltip && tooltip.shared ? hoverPoints : hoverPoint;
					
				// Narrow in allowMove
				allowMove = allowMove && tooltip && tooltipPoints;
					
				// Check if the points have moved outside the plot area, #1003		
				if (allowMove  && splat(tooltipPoints)[0].plotX === UNDEFINED) {
					allowMove = false;
				}	
				// Just move the tooltip, #349
				if (allowMove) {
					tooltip.refresh(tooltipPoints);
					if (hoverPoint) { // #2500
						hoverPoint.setState(hoverPoint.state, true);
						each(chart.axes, function (axis) {
							if (pick(axis.options.crosshair && axis.options.crosshair.snap, true)) {
								axis.drawCrosshair(null, hoverPoint);
							}  else {
								axis.hideCrosshair();
							}
						});
						
					}

				// Full reset
				} else {

					if (hoverPoint) {
						hoverPoint.onMouseOut();
					}

					if (hoverPoints) {
						each(hoverPoints, function (point) {
							point.setState();
						});
					}

					if (hoverSeries) {
						hoverSeries.onMouseOut();
					}

					if (tooltip) {
						tooltip.hide(delay);
					}

					if (pointer._onDocumentMouseMove) {
						removeEvent(doc, 'mousemove', pointer._onDocumentMouseMove);
						pointer._onDocumentMouseMove = null;
					}

					// Remove crosshairs
					each(chart.axes, function (axis) {
						axis.hideCrosshair();
					});
					
					pointer.hoverX = chart.hoverPoints = chart.hoverPoint = null;

				}
			},

			/**
			 * Scale series groups to a certain scale and translation
			 */
			scaleGroups: function (attribs, clip) {

				var chart = this.chart,
					seriesAttribs;

				// Scale each series
				each(chart.series, function (series) {
					seriesAttribs = attribs || series.getPlotBox(); // #1701
					if (series.xAxis && series.xAxis.zoomEnabled) {
						series.group.attr(seriesAttribs);
						if (series.markerGroup) {
							series.markerGroup.attr(seriesAttribs);
							series.markerGroup.clip(clip ? chart.clipRect : null);
						}
						if (series.dataLabelsGroup) {
							series.dataLabelsGroup.attr(seriesAttribs);
						}
					}
				});
				
				// Clip
				chart.clipRect.attr(clip || chart.clipBox);
			},

			/**
			 * Start a drag operation
			 */
			dragStart: function (e) {
				var chart = this.chart;

				// Record the start position
				chart.mouseIsDown = e.type;
				chart.cancelClick = false;
				chart.mouseDownX = this.mouseDownX = e.chartX;
				chart.mouseDownY = this.mouseDownY = e.chartY;
			},

			/**
			 * Perform a drag operation in response to a mousemove event while the mouse is down
			 */
			drag: function (e) {

				var chart = this.chart,
					chartOptions = chart.options.chart,
					chartX = e.chartX,
					chartY = e.chartY,
					zoomHor = this.zoomHor,
					zoomVert = this.zoomVert,
					plotLeft = chart.plotLeft,
					plotTop = chart.plotTop,
					plotWidth = chart.plotWidth,
					plotHeight = chart.plotHeight,
					clickedInside,
					size,
					selectionMarker = this.selectionMarker,
					mouseDownX = this.mouseDownX,
					mouseDownY = this.mouseDownY,
					panKey = chartOptions.panKey && e[chartOptions.panKey + 'Key'];

				// If the device supports both touch and mouse (like IE11), and we are touch-dragging
				// inside the plot area, don't handle the mouse event. #4339.
				if (selectionMarker && selectionMarker.touch) {
					return;
				}

				// If the mouse is outside the plot area, adjust to cooordinates
				// inside to prevent the selection marker from going outside
				if (chartX < plotLeft) {
					chartX = plotLeft;
				} else if (chartX > plotLeft + plotWidth) {
					chartX = plotLeft + plotWidth;
				}

				if (chartY < plotTop) {
					chartY = plotTop;
				} else if (chartY > plotTop + plotHeight) {
					chartY = plotTop + plotHeight;
				}
				
				// determine if the mouse has moved more than 10px
				this.hasDragged = Math.sqrt(
					Math.pow(mouseDownX - chartX, 2) +
					Math.pow(mouseDownY - chartY, 2)
				);
				
				if (this.hasDragged > 10) {
					clickedInside = chart.isInsidePlot(mouseDownX - plotLeft, mouseDownY - plotTop);

					// make a selection
					if (chart.hasCartesianSeries && (this.zoomX || this.zoomY) && clickedInside && !panKey) {
						if (!selectionMarker) {
							this.selectionMarker = selectionMarker = chart.renderer.rect(
								plotLeft,
								plotTop,
								zoomHor ? 1 : plotWidth,
								zoomVert ? 1 : plotHeight,
								0
							)
							.attr({
								fill: chartOptions.selectionMarkerFill || 'rgba(69,114,167,0.25)',
								zIndex: 7
							})
							.add();
						}
					}

					// adjust the width of the selection marker
					if (selectionMarker && zoomHor) {
						size = chartX - mouseDownX;
						selectionMarker.attr({
							width: mathAbs(size),
							x: (size > 0 ? 0 : size) + mouseDownX
						});
					}
					// adjust the height of the selection marker
					if (selectionMarker && zoomVert) {
						size = chartY - mouseDownY;
						selectionMarker.attr({
							height: mathAbs(size),
							y: (size > 0 ? 0 : size) + mouseDownY
						});
					}

					// panning
					if (clickedInside && !selectionMarker && chartOptions.panning) {
						chart.pan(e, chartOptions.panning);
					}
				}
			},

			/**
			 * On mouse up or touch end across the entire document, drop the selection.
			 */
			drop: function (e) {
				var pointer = this,
					chart = this.chart,
					hasPinched = this.hasPinched;

				if (this.selectionMarker) {
					var selectionData = {
							xAxis: [],
							yAxis: [],
							originalEvent: e.originalEvent || e
						},
						selectionBox = this.selectionMarker,
						selectionLeft = selectionBox.attr ? selectionBox.attr('x') : selectionBox.x,
						selectionTop = selectionBox.attr ? selectionBox.attr('y') : selectionBox.y,
						selectionWidth = selectionBox.attr ? selectionBox.attr('width') : selectionBox.width,
						selectionHeight = selectionBox.attr ? selectionBox.attr('height') : selectionBox.height,
						runZoom;

					// a selection has been made
					if (this.hasDragged || hasPinched) {

						// record each axis' min and max
						each(chart.axes, function (axis) {
							if (axis.zoomEnabled && defined(axis.min) && (hasPinched || pointer[{ xAxis: 'zoomX', yAxis: 'zoomY' }[axis.coll]])) { // #859, #3569
								var horiz = axis.horiz,
									minPixelPadding = e.type === 'touchend' ? axis.minPixelPadding: 0, // #1207, #3075
									selectionMin = axis.toValue((horiz ? selectionLeft : selectionTop) + minPixelPadding),
									selectionMax = axis.toValue((horiz ? selectionLeft + selectionWidth : selectionTop + selectionHeight) - minPixelPadding);

								selectionData[axis.coll].push({
									axis: axis,
									min: mathMin(selectionMin, selectionMax), // for reversed axes
									max: mathMax(selectionMin, selectionMax)
								});
								runZoom = true;
							}
						});
						if (runZoom) {
							fireEvent(chart, 'selection', selectionData, function (args) { 
								chart.zoom(extend(args, hasPinched ? { animation: false } : null)); 
							});
						}

					}
					this.selectionMarker = this.selectionMarker.destroy();

					// Reset scaling preview
					if (hasPinched) {
						this.scaleGroups();
					}
				}

				// Reset all
				if (chart) { // it may be destroyed on mouse up - #877
					css(chart.container, { cursor: chart._cursor });
					chart.cancelClick = this.hasDragged > 10; // #370
					chart.mouseIsDown = this.hasDragged = this.hasPinched = false;
					this.pinchDown = [];
				}
			},

			onContainerMouseDown: function (e) {

				e = this.normalize(e);

				// issue #295, dragging not always working in Firefox
				if (e.preventDefault) {
					e.preventDefault();
				}
				
				this.dragStart(e);
			},

			

			onDocumentMouseUp: function (e) {
				if (charts[hoverChartIndex]) {
					charts[hoverChartIndex].pointer.drop(e);
				}
			},

			/**
			 * Special handler for mouse move that will hide the tooltip when the mouse leaves the plotarea.
			 * Issue #149 workaround. The mouseleave event does not always fire. 
			 */
			onDocumentMouseMove: function (e) {
				var chart = this.chart,
					chartPosition = this.chartPosition;

				e = this.normalize(e, chartPosition);

				// If we're outside, hide the tooltip
				if (chartPosition && !this.inClass(e.target, 'highcharts-tracker') &&
						!chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) {
					this.reset();
				}
			},

			/**
			 * When mouse leaves the container, hide the tooltip.
			 */
			onContainerMouseLeave: function () {
				var chart = charts[hoverChartIndex];
				if (chart) {
					chart.pointer.reset();
					chart.pointer.chartPosition = null; // also reset the chart position, used in #149 fix
				}
			},

			// The mousemove, touchmove and touchstart event handler
			onContainerMouseMove: function (e) {

				var chart = this.chart;

				hoverChartIndex = chart.index;

				e = this.normalize(e);		
				e.returnValue = false; // #2251, #3224
				
				if (chart.mouseIsDown === 'mousedown') {
					this.drag(e);
				} 
				
				// Show the tooltip and run mouse over events (#977)
				if ((this.inClass(e.target, 'highcharts-tracker') || 
						chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) && !chart.openMenu) {
					this.runPointActions(e);
				}
			},

			/**
			 * Utility to detect whether an element has, or has a parent with, a specific
			 * class name. Used on detection of tracker objects and on deciding whether
			 * hovering the tooltip should cause the active series to mouse out.
			 */
			inClass: function (element, className) {
				var elemClassName;
				while (element) {
					elemClassName = attr(element, 'class');
					if (elemClassName) {
						if (elemClassName.indexOf(className) !== -1) {
							return true;
						} else if (elemClassName.indexOf(PREFIX + 'container') !== -1) {
							return false;
						}
					}
					element = element.parentNode;
				}		
			},

			onTrackerMouseOut: function (e) {
				var series = this.chart.hoverSeries,
					relatedTarget = e.relatedTarget || e.toElement,
					relatedSeries = relatedTarget && relatedTarget.point && relatedTarget.point.series; // #2499
				
				if (series && !series.options.stickyTracking && !this.inClass(relatedTarget, PREFIX + 'tooltip') &&
						relatedSeries !== series) {
					series.onMouseOut();
				}
			},

			onContainerClick: function (e) {
				var chart = this.chart,
					hoverPoint = chart.hoverPoint, 
					plotLeft = chart.plotLeft,
					plotTop = chart.plotTop;
				
				e = this.normalize(e);
				e.originalEvent = e; // #3913

				if (!chart.cancelClick) {
					
					// On tracker click, fire the series and point events. #783, #1583
					if (hoverPoint && this.inClass(e.target, PREFIX + 'tracker')) {

						// the series click event
						fireEvent(hoverPoint.series, 'click', extend(e, {
							point: hoverPoint
						}));

						// the point click event
						if (chart.hoverPoint) { // it may be destroyed (#1844)
							hoverPoint.firePointEvent('click', e);
						}

					// When clicking outside a tracker, fire a chart event
					} else {
						extend(e, this.getCoordinates(e));

						// fire a click event in the chart
						if (chart.isInsidePlot(e.chartX - plotLeft, e.chartY - plotTop)) {
							fireEvent(chart, 'click', e);
						}
					}


				}
			},

			/**
			 * Set the JS DOM events on the container and document. This method should contain
			 * a one-to-one assignment between methods and their handlers. Any advanced logic should
			 * be moved to the handler reflecting the event's name.
			 */
			setDOMEvents: function () {

				var pointer = this,
					container = pointer.chart.container;

				container.onmousedown = function (e) {
					pointer.onContainerMouseDown(e);
				};
				container.onmousemove = function (e) {
					pointer.onContainerMouseMove(e);
				};
				container.onclick = function (e) {
					pointer.onContainerClick(e);
				};
				addEvent(container, 'mouseleave', pointer.onContainerMouseLeave);
				if (chartCount === 1) {
					addEvent(doc, 'mouseup', pointer.onDocumentMouseUp);
				}
				if (hasTouch) {
					container.ontouchstart = function (e) {
						pointer.onContainerTouchStart(e);
					};
					container.ontouchmove = function (e) {
						pointer.onContainerTouchMove(e);
					};
					if (chartCount === 1) {
						addEvent(doc, 'touchend', pointer.onDocumentTouchEnd);
					}
				}
				
			},

			/**
			 * Destroys the Pointer object and disconnects DOM events.
			 */
			destroy: function () {
				var prop;

				removeEvent(this.chart.container, 'mouseleave', this.onContainerMouseLeave);
				if (!chartCount) {
					removeEvent(doc, 'mouseup', this.onDocumentMouseUp);
					removeEvent(doc, 'touchend', this.onDocumentTouchEnd);
				}

				// memory and CPU leak
				clearInterval(this.tooltipTimeout);

				for (prop in this) {
					this[prop] = null;
				}
			}
		};


		/* Support for touch devices */
		extend(Highcharts.Pointer.prototype, {

			/**
			 * Run translation operations
			 */
			pinchTranslate: function (pinchDown, touches, transform, selectionMarker, clip, lastValidTouch) {
				if (this.zoomHor || this.pinchHor) {
					this.pinchTranslateDirection(true, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);
				}
				if (this.zoomVert || this.pinchVert) {
					this.pinchTranslateDirection(false, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);
				}
			},

			/**
			 * Run translation operations for each direction (horizontal and vertical) independently
			 */
			pinchTranslateDirection: function (horiz, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch, forcedScale) {
				var chart = this.chart,
					xy = horiz ? 'x' : 'y',
					XY = horiz ? 'X' : 'Y',
					sChartXY = 'chart' + XY,
					wh = horiz ? 'width' : 'height',
					plotLeftTop = chart['plot' + (horiz ? 'Left' : 'Top')],
					selectionWH,
					selectionXY,
					clipXY,
					scale = forcedScale || 1,
					inverted = chart.inverted,
					bounds = chart.bounds[horiz ? 'h' : 'v'],
					singleTouch = pinchDown.length === 1,
					touch0Start = pinchDown[0][sChartXY],
					touch0Now = touches[0][sChartXY],
					touch1Start = !singleTouch && pinchDown[1][sChartXY],
					touch1Now = !singleTouch && touches[1][sChartXY],
					outOfBounds,
					transformScale,
					scaleKey,
					setScale = function () {
						if (!singleTouch && mathAbs(touch0Start - touch1Start) > 20) { // Don't zoom if fingers are too close on this axis
							scale = forcedScale || mathAbs(touch0Now - touch1Now) / mathAbs(touch0Start - touch1Start); 
						}
						
						clipXY = ((plotLeftTop - touch0Now) / scale) + touch0Start;
						selectionWH = chart['plot' + (horiz ? 'Width' : 'Height')] / scale;
					};

				// Set the scale, first pass
				setScale();

				selectionXY = clipXY; // the clip position (x or y) is altered if out of bounds, the selection position is not

				// Out of bounds
				if (selectionXY < bounds.min) {
					selectionXY = bounds.min;
					outOfBounds = true;
				} else if (selectionXY + selectionWH > bounds.max) {
					selectionXY = bounds.max - selectionWH;
					outOfBounds = true;
				}
				
				// Is the chart dragged off its bounds, determined by dataMin and dataMax?
				if (outOfBounds) {

					// Modify the touchNow position in order to create an elastic drag movement. This indicates
					// to the user that the chart is responsive but can't be dragged further.
					touch0Now -= 0.8 * (touch0Now - lastValidTouch[xy][0]);
					if (!singleTouch) {
						touch1Now -= 0.8 * (touch1Now - lastValidTouch[xy][1]);
					}

					// Set the scale, second pass to adapt to the modified touchNow positions
					setScale();

				} else {
					lastValidTouch[xy] = [touch0Now, touch1Now];
				}

				// Set geometry for clipping, selection and transformation
				if (!inverted) { // TODO: implement clipping for inverted charts
					clip[xy] = clipXY - plotLeftTop;
					clip[wh] = selectionWH;
				}
				scaleKey = inverted ? (horiz ? 'scaleY' : 'scaleX') : 'scale' + XY;
				transformScale = inverted ? 1 / scale : scale;

				selectionMarker[wh] = selectionWH;
				selectionMarker[xy] = selectionXY;
				transform[scaleKey] = scale;
				transform['translate' + XY] = (transformScale * plotLeftTop) + (touch0Now - (transformScale * touch0Start));
			},
			
			/**
			 * Handle touch events with two touches
			 */
			pinch: function (e) {

				var self = this,
					chart = self.chart,
					pinchDown = self.pinchDown,
					touches = e.touches,
					touchesLength = touches.length,
					lastValidTouch = self.lastValidTouch,
					hasZoom = self.hasZoom,
					selectionMarker = self.selectionMarker,
					transform = {},
					fireClickEvent = touchesLength === 1 && ((self.inClass(e.target, PREFIX + 'tracker') && 
						chart.runTrackerClick) || self.runChartClick),
					clip = {};

				// Don't initiate panning until the user has pinched. This prevents us from 
				// blocking page scrolling as users scroll down a long page (#4210).
				if (touchesLength > 1) {
					self.initiated = true;
				}

				// On touch devices, only proceed to trigger click if a handler is defined
				if (hasZoom && self.initiated && !fireClickEvent) {
					e.preventDefault();
				}
				
				// Normalize each touch
				map(touches, function (e) {
					return self.normalize(e);
				});
				
				// Register the touch start position
				if (e.type === 'touchstart') {
					each(touches, function (e, i) {
						pinchDown[i] = { chartX: e.chartX, chartY: e.chartY };
					});
					lastValidTouch.x = [pinchDown[0].chartX, pinchDown[1] && pinchDown[1].chartX];
					lastValidTouch.y = [pinchDown[0].chartY, pinchDown[1] && pinchDown[1].chartY];

					// Identify the data bounds in pixels
					each(chart.axes, function (axis) {
						if (axis.zoomEnabled) {
							var bounds = chart.bounds[axis.horiz ? 'h' : 'v'],
								minPixelPadding = axis.minPixelPadding,
								min = axis.toPixels(pick(axis.options.min, axis.dataMin)),
								max = axis.toPixels(pick(axis.options.max, axis.dataMax)),
								absMin = mathMin(min, max),
								absMax = mathMax(min, max);

							// Store the bounds for use in the touchmove handler
							bounds.min = mathMin(axis.pos, absMin - minPixelPadding);
							bounds.max = mathMax(axis.pos + axis.len, absMax + minPixelPadding);
						}
					});
					self.res = true; // reset on next move
				
				// Event type is touchmove, handle panning and pinching
				} else if (pinchDown.length) { // can be 0 when releasing, if touchend fires first
					

					// Set the marker
					if (!selectionMarker) {
						self.selectionMarker = selectionMarker = extend({
							destroy: noop,
							touch: true
						}, chart.plotBox);
					}
					
					self.pinchTranslate(pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);

					self.hasPinched = hasZoom;

					// Scale and translate the groups to provide visual feedback during pinching
					self.scaleGroups(transform, clip);
					
					// Optionally move the tooltip on touchmove
					if (!hasZoom && self.followTouchMove && touchesLength === 1) {
						this.runPointActions(self.normalize(e));
					} else if (self.res) {
						self.res = false;
						this.reset(false, 0);
					}
				}
			},

			/**
			 * General touch handler shared by touchstart and touchmove.
			 */
			touch: function (e, start) {
				var chart = this.chart;

				hoverChartIndex = chart.index;

				if (e.touches.length === 1) {

					e = this.normalize(e);

					if (chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop) && !chart.openMenu) {

						// Run mouse events and display tooltip etc
						if (start) {
							this.runPointActions(e);
						}

						this.pinch(e);

					} else if (start) {
						// Hide the tooltip on touching outside the plot area (#1203)
						this.reset();
					}

				} else if (e.touches.length === 2) {
					this.pinch(e);
				}
			},

			onContainerTouchStart: function (e) {
				this.touch(e, true);
			},

			onContainerTouchMove: function (e) {
				this.touch(e);
			},

			onDocumentTouchEnd: function (e) {
				if (charts[hoverChartIndex]) {
					charts[hoverChartIndex].pointer.drop(e);
				}
			}

		});
		if (win.PointerEvent || win.MSPointerEvent) {
			
			// The touches object keeps track of the points being touched at all times
			var touches = {},
				hasPointerEvent = !!win.PointerEvent,
				getWebkitTouches = function () {
					var key, fake = [];
					fake.item = function (i) { return this[i]; };
					for (key in touches) {
						if (touches.hasOwnProperty(key)) {
							fake.push({
								pageX: touches[key].pageX,
								pageY: touches[key].pageY,
								target: touches[key].target
							});
						}
					}
					return fake;
				},
				translateMSPointer = function (e, method, wktype, callback) {
					var p;
					e = e.originalEvent || e;
					if ((e.pointerType === 'touch' || e.pointerType === e.MSPOINTER_TYPE_TOUCH) && charts[hoverChartIndex]) {
						callback(e);
						p = charts[hoverChartIndex].pointer;
						p[method]({
							type: wktype,
							target: e.currentTarget,
							preventDefault: noop,
							touches: getWebkitTouches()
						});				
					}
				};

			/**
			 * Extend the Pointer prototype with methods for each event handler and more
			 */
			extend(Pointer.prototype, {
				onContainerPointerDown: function (e) {
					translateMSPointer(e, 'onContainerTouchStart', 'touchstart', function (e) {
						touches[e.pointerId] = { pageX: e.pageX, pageY: e.pageY, target: e.currentTarget };
					});
				},
				onContainerPointerMove: function (e) {
					translateMSPointer(e, 'onContainerTouchMove', 'touchmove', function (e) {
						touches[e.pointerId] = { pageX: e.pageX, pageY: e.pageY };
						if (!touches[e.pointerId].target) {
							touches[e.pointerId].target = e.currentTarget;
						}
					});
				},
				onDocumentPointerUp: function (e) {
					translateMSPointer(e, 'onDocumentTouchEnd', 'touchend', function (e) {
						delete touches[e.pointerId];
					});
				},

				/**
				 * Add or remove the MS Pointer specific events
				 */
				batchMSEvents: function (fn) {
					fn(this.chart.container, hasPointerEvent ? 'pointerdown' : 'MSPointerDown', this.onContainerPointerDown);
					fn(this.chart.container, hasPointerEvent ? 'pointermove' : 'MSPointerMove', this.onContainerPointerMove);
					fn(doc, hasPointerEvent ? 'pointerup' : 'MSPointerUp', this.onDocumentPointerUp);
				}
			});

			// Disable default IE actions for pinch and such on chart element
			wrap(Pointer.prototype, 'init', function (proceed, chart, options) {
				proceed.call(this, chart, options);
				if (this.hasZoom) { // #4014
					css(chart.container, {
						'-ms-touch-action': NONE,
						'touch-action': NONE
					});
				}
			});

			// Add IE specific touch events to chart
			wrap(Pointer.prototype, 'setDOMEvents', function (proceed) {
				proceed.apply(this);
				if (this.hasZoom || this.followTouchMove) {
					this.batchMSEvents(addEvent);
				}
			});
			// Destroy MS events also
			wrap(Pointer.prototype, 'destroy', function (proceed) {
				this.batchMSEvents(removeEvent);
				proceed.call(this);
			});
		}
		/**
		 * The overview of the chart's series
		 */
		var Legend = Highcharts.Legend = function (chart, options) {
			this.init(chart, options);
		};

		Legend.prototype = {
			
			/**
			 * Initialize the legend
			 */
			init: function (chart, options) {
				
				var legend = this,
					itemStyle = options.itemStyle,
					padding,
					itemMarginTop = options.itemMarginTop || 0;
			
				this.options = options;

				if (!options.enabled) {
					return;
				}
			
				legend.itemStyle = itemStyle;
				legend.itemHiddenStyle = merge(itemStyle, options.itemHiddenStyle);
				legend.itemMarginTop = itemMarginTop;
				legend.padding = padding = pick(options.padding, 8);
				legend.initialItemX = padding;
				legend.initialItemY = padding - 5; // 5 is the number of pixels above the text
				legend.maxItemWidth = 0;
				legend.chart = chart;
				legend.itemHeight = 0;
				legend.symbolWidth = pick(options.symbolWidth, 16);
				legend.pages = [];


				// Render it
				legend.render();

				// move checkboxes
				addEvent(legend.chart, 'endResize', function () { 
					legend.positionCheckboxes();
				});

			},

			/**
			 * Set the colors for the legend item
			 * @param {Object} item A Series or Point instance
			 * @param {Object} visible Dimmed or colored
			 */
			colorizeItem: function (item, visible) {
				var legend = this,
					options = legend.options,
					legendItem = item.legendItem,
					legendLine = item.legendLine,
					legendSymbol = item.legendSymbol,
					hiddenColor = legend.itemHiddenStyle.color,
					textColor = visible ? options.itemStyle.color : hiddenColor,
					symbolColor = visible ? (item.legendColor || item.color || '#CCC') : hiddenColor,
					markerOptions = item.options && item.options.marker,
					symbolAttr = { fill: symbolColor },
					key,
					val;
				
				if (legendItem) {
					legendItem.css({ fill: textColor, color: textColor }); // color for #1553, oldIE
				}
				if (legendLine) {
					legendLine.attr({ stroke: symbolColor });
				}
				
				if (legendSymbol) {
					
					// Apply marker options
					if (markerOptions && legendSymbol.isMarker) { // #585
						symbolAttr.stroke = symbolColor;
						markerOptions = item.convertAttribs(markerOptions);
						for (key in markerOptions) {
							val = markerOptions[key];
							if (val !== UNDEFINED) {
								symbolAttr[key] = val;
							}
						}
					}

					legendSymbol.attr(symbolAttr);
				}
			},

			/**
			 * Position the legend item
			 * @param {Object} item A Series or Point instance
			 */
			positionItem: function (item) {
				var legend = this,
					options = legend.options,
					symbolPadding = options.symbolPadding,
					ltr = !options.rtl,
					legendItemPos = item._legendItemPos,
					itemX = legendItemPos[0],
					itemY = legendItemPos[1],
					checkbox = item.checkbox,
					legendGroup = item.legendGroup;

				if (legendGroup && legendGroup.element) {
					legendGroup.translate(
						ltr ? itemX : legend.legendWidth - itemX - 2 * symbolPadding - 4,
						itemY
					);
				}

				if (checkbox) {
					checkbox.x = itemX;
					checkbox.y = itemY;
				}
			},

			/**
			 * Destroy a single legend item
			 * @param {Object} item The series or point
			 */
			destroyItem: function (item) {
				var checkbox = item.checkbox;

				// destroy SVG elements
				each(['legendItem', 'legendLine', 'legendSymbol', 'legendGroup'], function (key) {
					if (item[key]) {
						item[key] = item[key].destroy();
					}
				});

				if (checkbox) {
					discardElement(item.checkbox);
				}
			},

			/**
			 * Destroys the legend.
			 */
			destroy: function () {
				var legend = this,
					legendGroup = legend.group,
					box = legend.box;

				if (box) {
					legend.box = box.destroy();
				}

				if (legendGroup) {
					legend.group = legendGroup.destroy();
				}
			},

			/**
			 * Position the checkboxes after the width is determined
			 */
			positionCheckboxes: function (scrollOffset) {
				var alignAttr = this.group.alignAttr,
					translateY,
					clipHeight = this.clipHeight || this.legendHeight;

				if (alignAttr) {
					translateY = alignAttr.translateY;
					each(this.allItems, function (item) {
						var checkbox = item.checkbox,
							top;
						
						if (checkbox) {
							top = (translateY + checkbox.y + (scrollOffset || 0) + 3);
							css(checkbox, {
								left: (alignAttr.translateX + item.checkboxOffset + checkbox.x - 20) + PX,
								top: top + PX,
								display: top > translateY - 6 && top < translateY + clipHeight - 6 ? '' : NONE
							});
						}
					});
				}
			},
			
			/**
			 * Render the legend title on top of the legend
			 */
			renderTitle: function () {
				var options = this.options,
					padding = this.padding,
					titleOptions = options.title,
					titleHeight = 0,
					bBox;
				
				if (titleOptions.text) {
					if (!this.title) {
						this.title = this.chart.renderer.label(titleOptions.text, padding - 3, padding - 4, null, null, null, null, null, 'legend-title')
							.attr({ zIndex: 1 })
							.css(titleOptions.style)
							.add(this.group);
					}
					bBox = this.title.getBBox();
					titleHeight = bBox.height;
					this.offsetWidth = bBox.width; // #1717
					this.contentGroup.attr({ translateY: titleHeight });
				}
				this.titleHeight = titleHeight;
			},

			/**
			 * Set the legend item text
			 */
			setText: function (item) {
				var options = this.options;
				item.legendItem.attr({
					text: options.labelFormat ? format(options.labelFormat, item) : options.labelFormatter.call(item)
				});
			},

			/**
			 * Render a single specific legend item
			 * @param {Object} item A series or point
			 */
			renderItem: function (item) {
				var legend = this,
					chart = legend.chart,
					renderer = chart.renderer,
					options = legend.options,
					horizontal = options.layout === 'horizontal',
					symbolWidth = legend.symbolWidth,
					symbolPadding = options.symbolPadding,
					itemStyle = legend.itemStyle,
					itemHiddenStyle = legend.itemHiddenStyle,
					padding = legend.padding,
					itemDistance = horizontal ? pick(options.itemDistance, 20) : 0,
					ltr = !options.rtl,
					itemHeight,
					widthOption = options.width,
					itemMarginBottom = options.itemMarginBottom || 0,
					itemMarginTop = legend.itemMarginTop,
					initialItemX = legend.initialItemX,
					bBox,
					itemWidth,
					li = item.legendItem,
					series = item.series && item.series.drawLegendSymbol ? item.series : item,
					seriesOptions = series.options,
					showCheckbox = legend.createCheckboxForItem && seriesOptions && seriesOptions.showCheckbox,
					useHTML = options.useHTML;

				if (!li) { // generate it once, later move it

					// Generate the group box
					// A group to hold the symbol and text. Text is to be appended in Legend class.
					item.legendGroup = renderer.g('legend-item')
						.attr({ zIndex: 1 })
						.add(legend.scrollGroup);

					// Generate the list item text and add it to the group
					item.legendItem = li = renderer.text(
							'',
							ltr ? symbolWidth + symbolPadding : -symbolPadding,
							legend.baseline || 0,
							useHTML
						)
						.css(merge(item.visible ? itemStyle : itemHiddenStyle)) // merge to prevent modifying original (#1021)
						.attr({
							align: ltr ? 'left' : 'right',
							zIndex: 2
						})
						.add(item.legendGroup);

					// Get the baseline for the first item - the font size is equal for all
					if (!legend.baseline) {
						legend.fontMetrics = renderer.fontMetrics(itemStyle.fontSize, li);
						legend.baseline = legend.fontMetrics.f + 3 + itemMarginTop;
						li.attr('y', legend.baseline);
					}

					// Draw the legend symbol inside the group box
					series.drawLegendSymbol(legend, item);

					if (legend.setItemEvents) {
						legend.setItemEvents(item, li, useHTML, itemStyle, itemHiddenStyle);
					}			

					// Colorize the items
					legend.colorizeItem(item, item.visible);

					// add the HTML checkbox on top
					if (showCheckbox) {
						legend.createCheckboxForItem(item);				
					}
				}

				// Always update the text
				legend.setText(item);

				// calculate the positions for the next line
				bBox = li.getBBox();

				itemWidth = item.checkboxOffset = 
					options.itemWidth || 
					item.legendItemWidth || 
					symbolWidth + symbolPadding + bBox.width + itemDistance + (showCheckbox ? 20 : 0);
				legend.itemHeight = itemHeight = mathRound(item.legendItemHeight || bBox.height);

				// if the item exceeds the width, start a new line
				if (horizontal && legend.itemX - initialItemX + itemWidth >
						(widthOption || (chart.chartWidth - 2 * padding - initialItemX - options.x))) {
					legend.itemX = initialItemX;
					legend.itemY += itemMarginTop + legend.lastLineHeight + itemMarginBottom;
					legend.lastLineHeight = 0; // reset for next line (#915, #3976)
				}

				// If the item exceeds the height, start a new column
				/*if (!horizontal && legend.itemY + options.y + itemHeight > chart.chartHeight - spacingTop - spacingBottom) {
					legend.itemY = legend.initialItemY;
					legend.itemX += legend.maxItemWidth;
					legend.maxItemWidth = 0;
				}*/

				// Set the edge positions
				legend.maxItemWidth = mathMax(legend.maxItemWidth, itemWidth);
				legend.lastItemY = itemMarginTop + legend.itemY + itemMarginBottom;
				legend.lastLineHeight = mathMax(itemHeight, legend.lastLineHeight); // #915

				// cache the position of the newly generated or reordered items
				item._legendItemPos = [legend.itemX, legend.itemY];

				// advance
				if (horizontal) {
					legend.itemX += itemWidth;

				} else {
					legend.itemY += itemMarginTop + itemHeight + itemMarginBottom;
					legend.lastLineHeight = itemHeight;
				}

				// the width of the widest item
				legend.offsetWidth = widthOption || mathMax(
					(horizontal ? legend.itemX - initialItemX - itemDistance : itemWidth) + padding,
					legend.offsetWidth
				);
			},

			/**
			 * Get all items, which is one item per series for normal series and one item per point
			 * for pie series.
			 */
			getAllItems: function () {
				var allItems = [];
				each(this.chart.series, function (series) {
					var seriesOptions = series.options;

					// Handle showInLegend. If the series is linked to another series, defaults to false.
					if (!pick(seriesOptions.showInLegend, !defined(seriesOptions.linkedTo) ? UNDEFINED : false, true)) {
						return;
					}

					// use points or series for the legend item depending on legendType
					allItems = allItems.concat(
							series.legendItems ||
							(seriesOptions.legendType === 'point' ?
									series.data :
									series)
					);
				});
				return allItems;
			},

			/**
			 * Adjust the chart margins by reserving space for the legend on only one side
			 * of the chart. If the position is set to a corner, top or bottom is reserved
			 * for horizontal legends and left or right for vertical ones.
			 */
			adjustMargins: function (margin, spacing) {
				var chart = this.chart, 
					options = this.options,
					// Use the first letter of each alignment option in order to detect the side 
					alignment = options.align.charAt(0) + options.verticalAlign.charAt(0) + options.layout.charAt(0); // #4189 - use charAt(x) notation instead of [x] for IE7
					
				if (this.display && !options.floating) {

					each([
						/(lth|ct|rth)/,
						/(rtv|rm|rbv)/,
						/(rbh|cb|lbh)/,
						/(lbv|lm|ltv)/
					], function (alignments, side) {
						if (alignments.test(alignment) && !defined(margin[side])) {
							// Now we have detected on which side of the chart we should reserve space for the legend
							chart[marginNames[side]] = mathMax(
								chart[marginNames[side]],
								chart.legend[(side + 1) % 2 ? 'legendHeight' : 'legendWidth'] + 
									[1, -1, -1, 1][side] * options[(side % 2) ? 'x' : 'y'] + 
									pick(options.margin, 12) +
									spacing[side]
							);
						}
					});
				}
			},

			/**
			 * Render the legend. This method can be called both before and after
			 * chart.render. If called after, it will only rearrange items instead
			 * of creating new ones.
			 */
			render: function () {
				var legend = this,
					chart = legend.chart,
					renderer = chart.renderer,
					legendGroup = legend.group,
					allItems,
					display,
					legendWidth,
					legendHeight,
					box = legend.box,
					options = legend.options,
					padding = legend.padding,
					legendBorderWidth = options.borderWidth,
					legendBackgroundColor = options.backgroundColor;

				legend.itemX = legend.initialItemX;
				legend.itemY = legend.initialItemY;
				legend.offsetWidth = 0;
				legend.lastItemY = 0;

				if (!legendGroup) {
					legend.group = legendGroup = renderer.g('legend')
						.attr({ zIndex: 7 }) 
						.add();
					legend.contentGroup = renderer.g()
						.attr({ zIndex: 1 }) // above background
						.add(legendGroup);
					legend.scrollGroup = renderer.g()
						.add(legend.contentGroup);
				}
				
				legend.renderTitle();

				// add each series or point
				allItems = legend.getAllItems();

				// sort by legendIndex
				stableSort(allItems, function (a, b) {
					return ((a.options && a.options.legendIndex) || 0) - ((b.options && b.options.legendIndex) || 0);
				});

				// reversed legend
				if (options.reversed) {
					allItems.reverse();
				}

				legend.allItems = allItems;
				legend.display = display = !!allItems.length;

				// render the items
				legend.lastLineHeight = 0;
				each(allItems, function (item) {
					legend.renderItem(item); 
				});

				// Get the box
				legendWidth = (options.width || legend.offsetWidth) + padding;
				legendHeight = legend.lastItemY + legend.lastLineHeight + legend.titleHeight;
				legendHeight = legend.handleOverflow(legendHeight);
				legendHeight += padding;

				// Draw the border and/or background
				if (legendBorderWidth || legendBackgroundColor) {

					if (!box) {
						legend.box = box = renderer.rect(
							0,
							0,
							legendWidth,
							legendHeight,
							options.borderRadius,
							legendBorderWidth || 0
						).attr({
							stroke: options.borderColor,
							'stroke-width': legendBorderWidth || 0,
							fill: legendBackgroundColor || NONE
						})
						.add(legendGroup)
						.shadow(options.shadow);
						box.isNew = true;

					} else if (legendWidth > 0 && legendHeight > 0) {
						box[box.isNew ? 'attr' : 'animate'](
							box.crisp({ width: legendWidth, height: legendHeight })
						);
						box.isNew = false;
					}

					// hide the border if no items
					box[display ? 'show' : 'hide']();
				}
				
				legend.legendWidth = legendWidth;
				legend.legendHeight = legendHeight;

				// Now that the legend width and height are established, put the items in the 
				// final position
				each(allItems, function (item) {
					legend.positionItem(item);
				});

				// 1.x compatibility: positioning based on style
				/*var props = ['left', 'right', 'top', 'bottom'],
					prop,
					i = 4;
				while (i--) {
					prop = props[i];
					if (options.style[prop] && options.style[prop] !== 'auto') {
						options[i < 2 ? 'align' : 'verticalAlign'] = prop;
						options[i < 2 ? 'x' : 'y'] = pInt(options.style[prop]) * (i % 2 ? -1 : 1);
					}
				}*/

				if (display) {
					legendGroup.align(extend({
						width: legendWidth,
						height: legendHeight
					}, options), true, 'spacingBox');
				}

				if (!chart.isResizing) {
					this.positionCheckboxes();
				}
			},
			
			/**
			 * Set up the overflow handling by adding navigation with up and down arrows below the
			 * legend.
			 */
			handleOverflow: function (legendHeight) {
				var legend = this,
					chart = this.chart,
					renderer = chart.renderer,
					options = this.options,
					optionsY = options.y,
					alignTop = options.verticalAlign === 'top',
					spaceHeight = chart.spacingBox.height + (alignTop ? -optionsY : optionsY) - this.padding,
					maxHeight = options.maxHeight,
					clipHeight,
					clipRect = this.clipRect,
					navOptions = options.navigation,
					animation = pick(navOptions.animation, true),
					arrowSize = navOptions.arrowSize || 12,
					nav = this.nav,
					pages = this.pages,
					padding = this.padding,
					lastY,
					allItems = this.allItems,
					clipToHeight = function (height) {
						clipRect.attr({
							height: height
						});

						// useHTML
						if (legend.contentGroup.div) {
							legend.contentGroup.div.style.clip = 'rect(' + padding + 'px,9999px,' + (padding + height) + 'px,0)';
						}
					};

					
				// Adjust the height
				if (options.layout === 'horizontal') {
					spaceHeight /= 2;
				}
				if (maxHeight) {
					spaceHeight = mathMin(spaceHeight, maxHeight);
				}
				
				// Reset the legend height and adjust the clipping rectangle
				pages.length = 0;
				if (legendHeight > spaceHeight) {

					this.clipHeight = clipHeight = mathMax(spaceHeight - 20 - this.titleHeight - padding, 0);
					this.currentPage = pick(this.currentPage, 1);
					this.fullHeight = legendHeight;
					
					// Fill pages with Y positions so that the top of each a legend item defines
					// the scroll top for each page (#2098)
					each(allItems, function (item, i) {
						var y = item._legendItemPos[1],
							h = mathRound(item.legendItem.getBBox().height),
							len = pages.length;
						
						if (!len || (y - pages[len - 1] > clipHeight && (lastY || y) !== pages[len - 1])) {
							pages.push(lastY || y);
							len++;
						}
						
						if (i === allItems.length - 1 && y + h - pages[len - 1] > clipHeight) {
							pages.push(y);
						}
						if (y !== lastY) {
							lastY = y;
						}
					});

					// Only apply clipping if needed. Clipping causes blurred legend in PDF export (#1787)
					if (!clipRect) {
						clipRect = legend.clipRect = renderer.clipRect(0, padding, 9999, 0);
						legend.contentGroup.clip(clipRect);
					}
						
					clipToHeight(clipHeight);

					// Add navigation elements
					if (!nav) {
						this.nav = nav = renderer.g().attr({ zIndex: 1 }).add(this.group);
						this.up = renderer.symbol('triangle', 0, 0, arrowSize, arrowSize)
							.on('click', function () {
								legend.scroll(-1, animation);
							})
							.add(nav);
						this.pager = renderer.text('', 15, 10)
							.css(navOptions.style)
							.add(nav);
						this.down = renderer.symbol('triangle-down', 0, 0, arrowSize, arrowSize)
							.on('click', function () {
								legend.scroll(1, animation);
							})
							.add(nav);
					}
					
					// Set initial position
					legend.scroll(0);
					
					legendHeight = spaceHeight;
					
				} else if (nav) {
					clipToHeight(chart.chartHeight);
					nav.hide();
					this.scrollGroup.attr({
						translateY: 1
					});
					this.clipHeight = 0; // #1379
				}
				
				return legendHeight;
			},
			
			/**
			 * Scroll the legend by a number of pages
			 * @param {Object} scrollBy
			 * @param {Object} animation
			 */
			scroll: function (scrollBy, animation) {
				var pages = this.pages,
					pageCount = pages.length,
					currentPage = this.currentPage + scrollBy,
					clipHeight = this.clipHeight,
					navOptions = this.options.navigation,
					activeColor = navOptions.activeColor,
					inactiveColor = navOptions.inactiveColor,
					pager = this.pager,
					padding = this.padding,
					scrollOffset;
				
				// When resizing while looking at the last page
				if (currentPage > pageCount) {
					currentPage = pageCount;
				}
				
				if (currentPage > 0) {
					
					if (animation !== UNDEFINED) {
						setAnimation(animation, this.chart);
					}
					
					this.nav.attr({
						translateX: padding,
						translateY: clipHeight + this.padding + 7 + this.titleHeight,
						visibility: VISIBLE
					});
					this.up.attr({
							fill: currentPage === 1 ? inactiveColor : activeColor
						})
						.css({
							cursor: currentPage === 1 ? 'default' : 'pointer'
						});
					pager.attr({
						text: currentPage + '/' + pageCount
					});
					this.down.attr({
							x: 18 + this.pager.getBBox().width, // adjust to text width
							fill: currentPage === pageCount ? inactiveColor : activeColor
						})
						.css({
							cursor: currentPage === pageCount ? 'default' : 'pointer'
						});
					
					scrollOffset = -pages[currentPage - 1] + this.initialItemY;

					this.scrollGroup.animate({
						translateY: scrollOffset
					});			
					
					this.currentPage = currentPage;
					this.positionCheckboxes(scrollOffset);
				}
					
			}
			
		};

		/*
		 * LegendSymbolMixin
		 */ 

		var LegendSymbolMixin = Highcharts.LegendSymbolMixin = {

			/**
			 * Get the series' symbol in the legend
			 * 
			 * @param {Object} legend The legend object
			 * @param {Object} item The series (this) or point
			 */
			drawRectangle: function (legend, item) {
				var symbolHeight = legend.options.symbolHeight || legend.fontMetrics.f;

				item.legendSymbol = this.chart.renderer.rect(
					0,
					legend.baseline - symbolHeight + 1, // #3988
					legend.symbolWidth,
					symbolHeight,
					legend.options.symbolRadius || 0
				).attr({
					zIndex: 3
				}).add(item.legendGroup);		
				
			},

			/**
			 * Get the series' symbol in the legend. This method should be overridable to create custom 
			 * symbols through Highcharts.seriesTypes[type].prototype.drawLegendSymbols.
			 * 
			 * @param {Object} legend The legend object
			 */
			drawLineMarker: function (legend) {

				var options = this.options,
					markerOptions = options.marker,
					radius,
					legendSymbol,
					symbolWidth = legend.symbolWidth,
					renderer = this.chart.renderer,
					legendItemGroup = this.legendGroup,
					verticalCenter = legend.baseline - mathRound(legend.fontMetrics.b * 0.3),
					attr;

				// Draw the line
				if (options.lineWidth) {
					attr = {
						'stroke-width': options.lineWidth
					};
					if (options.dashStyle) {
						attr.dashstyle = options.dashStyle;
					}
					this.legendLine = renderer.path([
						M,
						0,
						verticalCenter,
						L,
						symbolWidth,
						verticalCenter
					])
					.attr(attr)
					.add(legendItemGroup);
				}
				
				// Draw the marker
				if (markerOptions && markerOptions.enabled !== false) {
					radius = markerOptions.radius;
					this.legendSymbol = legendSymbol = renderer.symbol(
						this.symbol,
						(symbolWidth / 2) - radius,
						verticalCenter - radius,
						2 * radius,
						2 * radius
					)
					.add(legendItemGroup);
					legendSymbol.isMarker = true;
				}
			}
		};

		// Workaround for #2030, horizontal legend items not displaying in IE11 Preview,
		// and for #2580, a similar drawing flaw in Firefox 26.
		// TODO: Explore if there's a general cause for this. The problem may be related 
		// to nested group elements, as the legend item texts are within 4 group elements.
		if (/Trident\/7\.0/.test(userAgent) || isFirefox) {
			wrap(Legend.prototype, 'positionItem', function (proceed, item) {
				var legend = this,
					runPositionItem = function () { // If chart destroyed in sync, this is undefined (#2030)
						if (item._legendItemPos) {
							proceed.call(legend, item);
						}
					};

				// Do it now, for export and to get checkbox placement
				runPositionItem();
				
				// Do it after to work around the core issue
				setTimeout(runPositionItem);
			});
		}
		/**
		 * The chart class
		 * @param {Object} options
		 * @param {Function} callback Function to run when the chart has loaded
		 */
		var Chart = Highcharts.Chart = function () {
			this.init.apply(this, arguments);
		};

		Chart.prototype = {

			/**
			 * Hook for modules
			 */
			callbacks: [],

			/**
			 * Initialize the chart
			 */
			init: function (userOptions, callback) {

				// Handle regular options
				var options,
					seriesOptions = userOptions.series; // skip merging data points to increase performance

				userOptions.series = null;
				options = merge(defaultOptions, userOptions); // do the merge
				options.series = userOptions.series = seriesOptions; // set back the series data
				this.userOptions = userOptions;

				var optionsChart = options.chart;
				
				// Create margin & spacing array
				this.margin = this.splashArray('margin', optionsChart);
				this.spacing = this.splashArray('spacing', optionsChart);

				var chartEvents = optionsChart.events;

				//this.runChartClick = chartEvents && !!chartEvents.click;
				this.bounds = { h: {}, v: {} }; // Pixel data bounds for touch zoom

				this.callback = callback;
				this.isResizing = 0;
				this.options = options;
				//chartTitleOptions = UNDEFINED;
				//chartSubtitleOptions = UNDEFINED;

				this.axes = [];
				this.series = [];
				this.hasCartesianSeries = optionsChart.showAxes;
				//this.axisOffset = UNDEFINED;
				//this.maxTicks = UNDEFINED; // handle the greatest amount of ticks on grouped axes
				//this.inverted = UNDEFINED;
				//this.loadingShown = UNDEFINED;
				//this.container = UNDEFINED;
				//this.chartWidth = UNDEFINED;
				//this.chartHeight = UNDEFINED;
				//this.marginRight = UNDEFINED;
				//this.marginBottom = UNDEFINED;
				//this.containerWidth = UNDEFINED;
				//this.containerHeight = UNDEFINED;
				//this.oldChartWidth = UNDEFINED;
				//this.oldChartHeight = UNDEFINED;

				//this.renderTo = UNDEFINED;
				//this.renderToClone = UNDEFINED;

				//this.spacingBox = UNDEFINED

				//this.legend = UNDEFINED;

				// Elements
				//this.chartBackground = UNDEFINED;
				//this.plotBackground = UNDEFINED;
				//this.plotBGImage = UNDEFINED;
				//this.plotBorder = UNDEFINED;
				//this.loadingDiv = UNDEFINED;
				//this.loadingSpan = UNDEFINED;

				var chart = this,
					eventType;

				// Add the chart to the global lookup
				chart.index = charts.length;
				charts.push(chart);
				chartCount++;

				// Set up auto resize
				if (optionsChart.reflow !== false) {
					addEvent(chart, 'load', function () {
						chart.initReflow();
					});
				}

				// Chart event handlers
				if (chartEvents) {
					for (eventType in chartEvents) {
						addEvent(chart, eventType, chartEvents[eventType]);
					}
				}

				chart.xAxis = [];
				chart.yAxis = [];

				// Expose methods and variables
				chart.animation = useCanVG ? false : pick(optionsChart.animation, true);
				chart.pointCount = chart.colorCounter = chart.symbolCounter = 0;

				chart.firstRender();
			},

			/**
			 * Initialize an individual series, called internally before render time
			 */
			initSeries: function (options) {
				var chart = this,
					optionsChart = chart.options.chart,
					type = options.type || optionsChart.type || optionsChart.defaultSeriesType,
					series,
					constr = seriesTypes[type];

				// No such series type
				if (!constr) {
					error(17, true);
				}

				series = new constr();
				series.init(this, options);
				return series;
			},

			/**
			 * Check whether a given point is within the plot area
			 *
			 * @param {Number} plotX Pixel x relative to the plot area
			 * @param {Number} plotY Pixel y relative to the plot area
			 * @param {Boolean} inverted Whether the chart is inverted
			 */
			isInsidePlot: function (plotX, plotY, inverted) {
				var x = inverted ? plotY : plotX,
					y = inverted ? plotX : plotY;
					
				return x >= 0 &&
					x <= this.plotWidth &&
					y >= 0 &&
					y <= this.plotHeight;
			},

			/**
			 * Redraw legend, axes or series based on updated data
			 *
			 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
			 *    configuration
			 */
			redraw: function (animation) {
				var chart = this,
					axes = chart.axes,
					series = chart.series,
					pointer = chart.pointer,
					legend = chart.legend,
					redrawLegend = chart.isDirtyLegend,
					hasStackedSeries,
					hasDirtyStacks,
					hasCartesianSeries = chart.hasCartesianSeries,
					isDirtyBox = chart.isDirtyBox, // todo: check if it has actually changed?
					seriesLength = series.length,
					i = seriesLength,
					serie,
					renderer = chart.renderer,
					isHiddenChart = renderer.isHidden(),
					afterRedraw = [];
					
				setAnimation(animation, chart);
				
				if (isHiddenChart) {
					chart.cloneRenderTo();
				}

				// Adjust title layout (reflow multiline text)
				chart.layOutTitles();

				// link stacked series
				while (i--) {
					serie = series[i];

					if (serie.options.stacking) {
						hasStackedSeries = true;
						
						if (serie.isDirty) {
							hasDirtyStacks = true;
							break;
						}
					}
				}
				if (hasDirtyStacks) { // mark others as dirty
					i = seriesLength;
					while (i--) {
						serie = series[i];
						if (serie.options.stacking) {
							serie.isDirty = true;
						}
					}
				}

				// Handle updated data in the series
				each(series, function (serie) {
					if (serie.isDirty) {
						if (serie.options.legendType === 'point') {
							if (serie.updateTotals) {
								serie.updateTotals();
							}
							redrawLegend = true;
						}
					}
				});

				// handle added or removed series
				if (redrawLegend && legend.options.enabled) { // series or pie points are added or removed
					// draw legend graphics
					legend.render();

					chart.isDirtyLegend = false;
				}

				// reset stacks
				if (hasStackedSeries) {
					chart.getStacks();
				}


				if (hasCartesianSeries) {
					if (!chart.isResizing) {

						// reset maxTicks
						chart.maxTicks = null;

						// set axes scales
						each(axes, function (axis) {
							axis.setScale();
						});
					}
				}

				chart.getMargins(); // #3098

				if (hasCartesianSeries) {
					// If one axis is dirty, all axes must be redrawn (#792, #2169)
					each(axes, function (axis) {
						if (axis.isDirty) {
							isDirtyBox = true;
						}
					});

					// redraw axes
					each(axes, function (axis) {

						// Fire 'afterSetExtremes' only if extremes are set
						var key = axis.min + ',' + axis.max;
						if (axis.extKey !== key) { // #821, #4452
							axis.extKey = key;
							afterRedraw.push(function () { // prevent a recursive call to chart.redraw() (#1119)
								fireEvent(axis, 'afterSetExtremes', extend(axis.eventArgs, axis.getExtremes())); // #747, #751
								delete axis.eventArgs;
							});
						}
						if (isDirtyBox || hasStackedSeries) {
							axis.redraw();
						}
					});
				}
				
				// the plot areas size has changed
				if (isDirtyBox) {
					chart.drawChartBox();
				}


				// redraw affected series
				each(series, function (serie) {
					if (serie.isDirty && serie.visible &&
							(!serie.isCartesian || serie.xAxis)) { // issue #153
						serie.redraw();
					}
				});

				// move tooltip or reset
				if (pointer) {
					pointer.reset(true);
				}

				// redraw if canvas
				renderer.draw();

				// fire the event
				fireEvent(chart, 'redraw'); // jQuery breaks this when calling it from addEvent. Overwrites chart.redraw
				
				if (isHiddenChart) {
					chart.cloneRenderTo(true);
				}
				
				// Fire callbacks that are put on hold until after the redraw
				each(afterRedraw, function (callback) {
					callback.call();
				});
			},

			/**
			 * Get an axis, series or point object by id.
			 * @param id {String} The id as given in the configuration options
			 */
			get: function (id) {
				var chart = this,
					axes = chart.axes,
					series = chart.series;

				var i,
					j,
					points;

				// search axes
				for (i = 0; i < axes.length; i++) {
					if (axes[i].options.id === id) {
						return axes[i];
					}
				}

				// search series
				for (i = 0; i < series.length; i++) {
					if (series[i].options.id === id) {
						return series[i];
					}
				}

				// search points
				for (i = 0; i < series.length; i++) {
					points = series[i].points || [];
					for (j = 0; j < points.length; j++) {
						if (points[j].id === id) {
							return points[j];
						}
					}
				}
				return null;
			},

			/**
			 * Create the Axis instances based on the config options
			 */
			getAxes: function () {
				var chart = this,
					options = this.options,
					xAxisOptions = options.xAxis = splat(options.xAxis || {}),
					yAxisOptions = options.yAxis = splat(options.yAxis || {}),
					optionsArray,
					axis;

				// make sure the options are arrays and add some members
				each(xAxisOptions, function (axis, i) {
					axis.index = i;
					axis.isX = true;
				});

				each(yAxisOptions, function (axis, i) {
					axis.index = i;
				});

				// concatenate all axis options into one array
				optionsArray = xAxisOptions.concat(yAxisOptions);

				each(optionsArray, function (axisOptions) {
					axis = new Axis(chart, axisOptions);
				});
			},


			/**
			 * Get the currently selected points from all series
			 */
			getSelectedPoints: function () {
				var points = [];
				each(this.series, function (serie) {
					points = points.concat(grep(serie.points || [], function (point) {
						return point.selected;
					}));
				});
				return points;
			},

			/**
			 * Get the currently selected series
			 */
			getSelectedSeries: function () {
				return grep(this.series, function (serie) {
					return serie.selected;
				});
			},

			/**
			 * Show the title and subtitle of the chart
			 *
			 * @param titleOptions {Object} New title options
			 * @param subtitleOptions {Object} New subtitle options
			 *
			 */
			setTitle: function (titleOptions, subtitleOptions, redraw) {
				var chart = this,
					options = chart.options,
					chartTitleOptions,
					chartSubtitleOptions;

				chartTitleOptions = options.title = merge(options.title, titleOptions);
				chartSubtitleOptions = options.subtitle = merge(options.subtitle, subtitleOptions);

				// add title and subtitle
				each([
					['title', titleOptions, chartTitleOptions],
					['subtitle', subtitleOptions, chartSubtitleOptions]
				], function (arr) {
					var name = arr[0],
						title = chart[name],
						titleOptions = arr[1],
						chartTitleOptions = arr[2];

					if (title && titleOptions) {
						chart[name] = title = title.destroy(); // remove old
					}
					
					if (chartTitleOptions && chartTitleOptions.text && !title) {
						chart[name] = chart.renderer.text(
							chartTitleOptions.text,
							0,
							0,
							chartTitleOptions.useHTML
						)
						.attr({
							align: chartTitleOptions.align,
							'class': PREFIX + name,
							zIndex: chartTitleOptions.zIndex || 4
						})
						.css(chartTitleOptions.style)
						.add();
					}	
				});
				chart.layOutTitles(redraw);
			},

			/**
			 * Lay out the chart titles and cache the full offset height for use in getMargins
			 */
			layOutTitles: function (redraw) {
				var titleOffset = 0,
					title = this.title,
					subtitle = this.subtitle,
					options = this.options,
					titleOptions = options.title,
					subtitleOptions = options.subtitle,
					requiresDirtyBox,
					renderer = this.renderer,
					autoWidth = this.spacingBox.width - 44; // 44 makes room for default context button

				if (title) {
					title
						.css({ width: (titleOptions.width || autoWidth) + PX })
						.align(extend({ 
							y: renderer.fontMetrics(titleOptions.style.fontSize, title).b - 3
						}, titleOptions), false, 'spacingBox');
					
					if (!titleOptions.floating && !titleOptions.verticalAlign) {
						titleOffset = title.getBBox().height;
					}
				}
				if (subtitle) {
					subtitle
						.css({ width: (subtitleOptions.width || autoWidth) + PX })
						.align(extend({ 
							y: titleOffset + (titleOptions.margin - 13) + renderer.fontMetrics(titleOptions.style.fontSize, subtitle).b 
						}, subtitleOptions), false, 'spacingBox');
					
					if (!subtitleOptions.floating && !subtitleOptions.verticalAlign) {
						titleOffset = mathCeil(titleOffset + subtitle.getBBox().height);
					}
				}

				requiresDirtyBox = this.titleOffset !== titleOffset;				
				this.titleOffset = titleOffset; // used in getMargins

				if (!this.isDirtyBox && requiresDirtyBox) {
					this.isDirtyBox = requiresDirtyBox;
					// Redraw if necessary (#2719, #2744)		
					if (this.hasRendered && pick(redraw, true) && this.isDirtyBox) {
						this.redraw();
					}
				}
			},

			/**
			 * Get chart width and height according to options and container size
			 */
			getChartSize: function () {
				var chart = this,
					optionsChart = chart.options.chart,
					widthOption = optionsChart.width,
					heightOption = optionsChart.height,
					renderTo = chart.renderToClone || chart.renderTo;

				// get inner width and height from jQuery (#824)
				if (!defined(widthOption)) {
					chart.containerWidth = adapterRun(renderTo, 'width');
				}
				if (!defined(heightOption)) {
					chart.containerHeight = adapterRun(renderTo, 'height');
				}
				
				chart.chartWidth = mathMax(0, widthOption || chart.containerWidth || 600); // #1393, 1460
				chart.chartHeight = mathMax(0, pick(heightOption,
					// the offsetHeight of an empty container is 0 in standard browsers, but 19 in IE7:
					chart.containerHeight > 19 ? chart.containerHeight : 400));
			},

			/**
			 * Create a clone of the chart's renderTo div and place it outside the viewport to allow
			 * size computation on chart.render and chart.redraw
			 */
			cloneRenderTo: function (revert) {
				var clone = this.renderToClone,
					container = this.container;
				
				// Destroy the clone and bring the container back to the real renderTo div
				if (revert) {
					if (clone) {
						this.renderTo.appendChild(container);
						discardElement(clone);
						delete this.renderToClone;
					}
				
				// Set up the clone
				} else {
					if (container && container.parentNode === this.renderTo) {
						this.renderTo.removeChild(container); // do not clone this
					}
					this.renderToClone = clone = this.renderTo.cloneNode(0);
					css(clone, {
						position: ABSOLUTE,
						top: '-9999px',
						display: 'block' // #833
					});
					if (clone.style.setProperty) { // #2631
						clone.style.setProperty('display', 'block', 'important');
					}
					doc.body.appendChild(clone);
					if (container) {
						clone.appendChild(container);
					}
				}
			},

			/**
			 * Get the containing element, determine the size and create the inner container
			 * div to hold the chart
			 */
			getContainer: function () {
				var chart = this,
					container,
					optionsChart = chart.options.chart,
					chartWidth,
					chartHeight,
					renderTo,
					indexAttrName = 'data-highcharts-chart',
					oldChartIndex,
					containerId;

				chart.renderTo = renderTo = optionsChart.renderTo;
				containerId = PREFIX + idCounter++;

				if (isString(renderTo)) {
					chart.renderTo = renderTo = doc.getElementById(renderTo);
				}
				
				// Display an error if the renderTo is wrong
				if (!renderTo) {
					error(13, true);
				}
				
				// If the container already holds a chart, destroy it. The check for hasRendered is there
				// because web pages that are saved to disk from the browser, will preserve the data-highcharts-chart
				// attribute and the SVG contents, but not an interactive chart. So in this case,
				// charts[oldChartIndex] will point to the wrong chart if any (#2609).
				oldChartIndex = pInt(attr(renderTo, indexAttrName));
				if (!isNaN(oldChartIndex) && charts[oldChartIndex] && charts[oldChartIndex].hasRendered) {
					charts[oldChartIndex].destroy();
				}		
				
				// Make a reference to the chart from the div
				attr(renderTo, indexAttrName, chart.index);

				// remove previous chart
				renderTo.innerHTML = '';

				// If the container doesn't have an offsetWidth, it has or is a child of a node
				// that has display:none. We need to temporarily move it out to a visible
				// state to determine the size, else the legend and tooltips won't render
				// properly. The allowClone option is used in sparklines as a micro optimization,
				// saving about 1-2 ms each chart.
				if (!optionsChart.skipClone && !renderTo.offsetWidth) {
					chart.cloneRenderTo();
				}

				// get the width and height
				chart.getChartSize();
				chartWidth = chart.chartWidth;
				chartHeight = chart.chartHeight;

				// create the inner container
				chart.container = container = createElement(DIV, {
						className: PREFIX + 'container' +
							(optionsChart.className ? ' ' + optionsChart.className : ''),
						id: containerId
					}, extend({
						position: RELATIVE,
						overflow: HIDDEN, // needed for context menu (avoid scrollbars) and
							// content overflow in IE
						width: chartWidth + PX,
						height: chartHeight + PX,
						textAlign: 'left',
						lineHeight: 'normal', // #427
						zIndex: 0, // #1072
						'-webkit-tap-highlight-color': 'rgba(0,0,0,0)'
					}, optionsChart.style),
					chart.renderToClone || renderTo
				);

				// cache the cursor (#1650)
				chart._cursor = container.style.cursor;

				// Initialize the renderer
				chart.renderer =
					optionsChart.forExport ? // force SVG, used for SVG export
						new SVGRenderer(container, chartWidth, chartHeight, optionsChart.style, true) :
						new Renderer(container, chartWidth, chartHeight, optionsChart.style);

				if (useCanVG) {
					// If we need canvg library, extend and configure the renderer
					// to get the tracker for translating mouse events
					chart.renderer.create(chart, container, chartWidth, chartHeight);
				}
				// Add a reference to the charts index
				chart.renderer.chartIndex = chart.index;
			},

			/**
			 * Calculate margins by rendering axis labels in a preliminary position. Title,
			 * subtitle and legend have already been rendered at this stage, but will be
			 * moved into their final positions
			 */
			getMargins: function (skipAxes) {
				var chart = this,
					spacing = chart.spacing,
					margin = chart.margin,
					titleOffset = chart.titleOffset;

				chart.resetMargins();

				// Adjust for title and subtitle
				if (titleOffset && !defined(margin[0])) {
					chart.plotTop = mathMax(chart.plotTop, titleOffset + chart.options.title.margin + spacing[0]);
				}
				
				// Adjust for legend
				chart.legend.adjustMargins(margin, spacing);

				// adjust for scroller
				if (chart.extraBottomMargin) {
					chart.marginBottom += chart.extraBottomMargin;
				}
				if (chart.extraTopMargin) {
					chart.plotTop += chart.extraTopMargin;
				}
				if (!skipAxes) {
					this.getAxisMargins();
				}
			},

			getAxisMargins: function () {

				var chart = this,
					axisOffset = chart.axisOffset = [0, 0, 0, 0], // top, right, bottom, left
					margin = chart.margin;
				
				// pre-render axes to get labels offset width
				if (chart.hasCartesianSeries) {
					each(chart.axes, function (axis) {
						axis.getOffset();
					});
				}

				// Add the axis offsets
				each(marginNames, function (m, side) {
					if (!defined(margin[side])) {
						chart[m] += axisOffset[side];
					}		
				});

				chart.setChartSize();

			},

			/**
			 * Resize the chart to its container if size is not explicitly set
			 */
			reflow: function (e) {
				var chart = this,
					optionsChart = chart.options.chart,
					renderTo = chart.renderTo,
					width = optionsChart.width || adapterRun(renderTo, 'width'),
					height = optionsChart.height || adapterRun(renderTo, 'height'),
					target = e ? e.target : win, // #805 - MooTools doesn't supply e
					doReflow = function () {
						if (chart.container) { // It may have been destroyed in the meantime (#1257)
							chart.setSize(width, height, false);
							chart.hasUserSize = null;
						}
					};
					
				// Width and height checks for display:none. Target is doc in IE8 and Opera,
				// win in Firefox, Chrome and IE9.
				if (!chart.hasUserSize && !chart.isPrinting && width && height && (target === win || target === doc)) { // #1093
					if (width !== chart.containerWidth || height !== chart.containerHeight) {
						clearTimeout(chart.reflowTimeout);
						if (e) { // Called from window.resize
							chart.reflowTimeout = setTimeout(doReflow, 100);
						} else { // Called directly (#2224)
							doReflow();
						}
					}
					chart.containerWidth = width;
					chart.containerHeight = height;
				}
			},

			/**
			 * Add the event handlers necessary for auto resizing
			 */
			initReflow: function () {
				var chart = this,
					reflow = function (e) {
						chart.reflow(e);
					};
					
				
				addEvent(win, 'resize', reflow);
				addEvent(chart, 'destroy', function () {
					removeEvent(win, 'resize', reflow);
				});
			},

			/**
			 * Resize the chart to a given width and height
			 * @param {Number} width
			 * @param {Number} height
			 * @param {Object|Boolean} animation
			 */
			setSize: function (width, height, animation) {
				var chart = this,
					chartWidth,
					chartHeight,
					fireEndResize,
					renderer = chart.renderer,
					globalAnimation = renderer.globalAnimation;

				// Handle the isResizing counter
				chart.isResizing += 1;
				fireEndResize = function () {
					if (chart) {
						fireEvent(chart, 'endResize', null, function () {
							chart.isResizing -= 1;
						});
					}
				};

				// set the animation for the current process
				setAnimation(animation, chart);

				chart.oldChartHeight = chart.chartHeight;
				chart.oldChartWidth = chart.chartWidth;
				if (defined(width)) {
					chart.chartWidth = chartWidth = mathMax(0, mathRound(width));
					chart.hasUserSize = !!chartWidth;
				}
				if (defined(height)) {
					chart.chartHeight = chartHeight = mathMax(0, mathRound(height));
				}

				// Resize the container with the global animation applied if enabled (#2503)
				(globalAnimation ? animate : css)(chart.container, {
					width: chartWidth + PX,
					height: chartHeight + PX
				}, globalAnimation);

				chart.setChartSize(true);
				renderer.setSize(chartWidth, chartHeight, animation);

				// handle axes
				chart.maxTicks = null;
				each(chart.axes, function (axis) {
					axis.isDirty = true;
					axis.setScale();
				});

				// make sure non-cartesian series are also handled
				each(chart.series, function (serie) {
					serie.isDirty = true;
				});

				chart.isDirtyLegend = true; // force legend redraw
				chart.isDirtyBox = true; // force redraw of plot and chart border

				chart.layOutTitles(); // #2857
				chart.getMargins();

				chart.redraw(animation);


				chart.oldChartHeight = null;
				fireEvent(chart, 'resize');

				// fire endResize and set isResizing back
				// If animation is disabled, fire without delay
				if (globalAnimation === false) {
					fireEndResize();
				} else { // else set a timeout with the animation duration
					setTimeout(fireEndResize, (globalAnimation && globalAnimation.duration) || 500);
				}
			},

			/**
			 * Set the public chart properties. This is done before and after the pre-render
			 * to determine margin sizes
			 */
			setChartSize: function (skipAxes) {
				var chart = this,
					inverted = chart.inverted,
					renderer = chart.renderer,
					chartWidth = chart.chartWidth,
					chartHeight = chart.chartHeight,
					optionsChart = chart.options.chart,
					spacing = chart.spacing,
					clipOffset = chart.clipOffset,
					clipX,
					clipY,
					plotLeft,
					plotTop,
					plotWidth,
					plotHeight,
					plotBorderWidth;

				chart.plotLeft = plotLeft = mathRound(chart.plotLeft);
				chart.plotTop = plotTop = mathRound(chart.plotTop);
				chart.plotWidth = plotWidth = mathMax(0, mathRound(chartWidth - plotLeft - chart.marginRight));
				chart.plotHeight = plotHeight = mathMax(0, mathRound(chartHeight - plotTop - chart.marginBottom));

				chart.plotSizeX = inverted ? plotHeight : plotWidth;
				chart.plotSizeY = inverted ? plotWidth : plotHeight;
				
				chart.plotBorderWidth = optionsChart.plotBorderWidth || 0;

				// Set boxes used for alignment
				chart.spacingBox = renderer.spacingBox = {
					x: spacing[3],
					y: spacing[0],
					width: chartWidth - spacing[3] - spacing[1],
					height: chartHeight - spacing[0] - spacing[2]
				};
				chart.plotBox = renderer.plotBox = {
					x: plotLeft,
					y: plotTop,
					width: plotWidth,
					height: plotHeight
				};

				plotBorderWidth = 2 * mathFloor(chart.plotBorderWidth / 2);
				clipX = mathCeil(mathMax(plotBorderWidth, clipOffset[3]) / 2);
				clipY = mathCeil(mathMax(plotBorderWidth, clipOffset[0]) / 2);
				chart.clipBox = {
					x: clipX, 
					y: clipY, 
					width: mathFloor(chart.plotSizeX - mathMax(plotBorderWidth, clipOffset[1]) / 2 - clipX), 
					height: mathMax(0, mathFloor(chart.plotSizeY - mathMax(plotBorderWidth, clipOffset[2]) / 2 - clipY))
				};

				if (!skipAxes) {
					each(chart.axes, function (axis) {
						axis.setAxisSize();
						axis.setAxisTranslation();
					});
				}
			},

			/**
			 * Initial margins before auto size margins are applied
			 */
			resetMargins: function () {
				var chart = this;

				each(marginNames, function (m, side) {
					chart[m] = pick(chart.margin[side], chart.spacing[side]);
				});
				chart.axisOffset = [0, 0, 0, 0]; // top, right, bottom, left
				chart.clipOffset = [0, 0, 0, 0];
			},

			/**
			 * Draw the borders and backgrounds for chart and plot area
			 */
			drawChartBox: function () {
				var chart = this,
					optionsChart = chart.options.chart,
					renderer = chart.renderer,
					chartWidth = chart.chartWidth,
					chartHeight = chart.chartHeight,
					chartBackground = chart.chartBackground,
					plotBackground = chart.plotBackground,
					plotBorder = chart.plotBorder,
					plotBGImage = chart.plotBGImage,
					chartBorderWidth = optionsChart.borderWidth || 0,
					chartBackgroundColor = optionsChart.backgroundColor,
					plotBackgroundColor = optionsChart.plotBackgroundColor,
					plotBackgroundImage = optionsChart.plotBackgroundImage,
					plotBorderWidth = optionsChart.plotBorderWidth || 0,
					mgn,
					bgAttr,
					plotLeft = chart.plotLeft,
					plotTop = chart.plotTop,
					plotWidth = chart.plotWidth,
					plotHeight = chart.plotHeight,
					plotBox = chart.plotBox,
					clipRect = chart.clipRect,
					clipBox = chart.clipBox;

				// Chart area
				mgn = chartBorderWidth + (optionsChart.shadow ? 8 : 0);

				if (chartBorderWidth || chartBackgroundColor) {
					if (!chartBackground) {
						
						bgAttr = {
							fill: chartBackgroundColor || NONE
						};
						if (chartBorderWidth) { // #980
							bgAttr.stroke = optionsChart.borderColor;
							bgAttr['stroke-width'] = chartBorderWidth;
						}
						chart.chartBackground = renderer.rect(mgn / 2, mgn / 2, chartWidth - mgn, chartHeight - mgn,
								optionsChart.borderRadius, chartBorderWidth)
							.attr(bgAttr)
							.addClass(PREFIX + 'background')
							.add()
							.shadow(optionsChart.shadow);

					} else { // resize
						chartBackground.animate(
							chartBackground.crisp({ width: chartWidth - mgn, height: chartHeight - mgn })
						);
					}
				}


				// Plot background
				if (plotBackgroundColor) {
					if (!plotBackground) {
						chart.plotBackground = renderer.rect(plotLeft, plotTop, plotWidth, plotHeight, 0)
							.attr({
								fill: plotBackgroundColor
							})
							.add()
							.shadow(optionsChart.plotShadow);
					} else {
						plotBackground.animate(plotBox);
					}
				}
				if (plotBackgroundImage) {
					if (!plotBGImage) {
						chart.plotBGImage = renderer.image(plotBackgroundImage, plotLeft, plotTop, plotWidth, plotHeight)
							.add();
					} else {
						plotBGImage.animate(plotBox);
					}
				}
				
				// Plot clip
				if (!clipRect) {
					chart.clipRect = renderer.clipRect(clipBox);
				} else {
					clipRect.animate({
						width: clipBox.width,
						height: clipBox.height
					});
				}

				// Plot area border
				if (plotBorderWidth) {
					if (!plotBorder) {
						chart.plotBorder = renderer.rect(plotLeft, plotTop, plotWidth, plotHeight, 0, -plotBorderWidth)
							.attr({
								stroke: optionsChart.plotBorderColor,
								'stroke-width': plotBorderWidth,
								fill: NONE,
								zIndex: 1
							})
							.add();
					} else {
						plotBorder.animate(
							plotBorder.crisp({ x: plotLeft, y: plotTop, width: plotWidth, height: plotHeight, strokeWidth: -plotBorderWidth }) //#3282 plotBorder should be negative
						);
					}
				}

				// reset
				chart.isDirtyBox = false;
			},

			/**
			 * Detect whether a certain chart property is needed based on inspecting its options
			 * and series. This mainly applies to the chart.invert property, and in extensions to 
			 * the chart.angular and chart.polar properties.
			 */
			propFromSeries: function () {
				var chart = this,
					optionsChart = chart.options.chart,
					klass,
					seriesOptions = chart.options.series,
					i,
					value;
					
					
				each(['inverted', 'angular', 'polar'], function (key) {
					
					// The default series type's class
					klass = seriesTypes[optionsChart.type || optionsChart.defaultSeriesType];
					
					// Get the value from available chart-wide properties
					value = (
						chart[key] || // 1. it is set before
						optionsChart[key] || // 2. it is set in the options
						(klass && klass.prototype[key]) // 3. it's default series class requires it
					);
			
					// 4. Check if any the chart's series require it
					i = seriesOptions && seriesOptions.length;
					while (!value && i--) {
						klass = seriesTypes[seriesOptions[i].type];
						if (klass && klass.prototype[key]) {
							value = true;
						}
					}
			
					// Set the chart property
					chart[key] = value;	
				});
				
			},

			/**
			 * Link two or more series together. This is done initially from Chart.render,
			 * and after Chart.addSeries and Series.remove.
			 */
			linkSeries: function () {
				var chart = this,
					chartSeries = chart.series;

				// Reset links
				each(chartSeries, function (series) {
					series.linkedSeries.length = 0;
				});

				// Apply new links
				each(chartSeries, function (series) {
					var linkedTo = series.options.linkedTo;
					if (isString(linkedTo)) {
						if (linkedTo === ':previous') {
							linkedTo = chart.series[series.index - 1];
						} else {
							linkedTo = chart.get(linkedTo);
						}
						if (linkedTo) {
							linkedTo.linkedSeries.push(series);
							series.linkedParent = linkedTo;
							series.visible = pick(series.options.visible, linkedTo.options.visible, series.visible); // #3879
						}
					}
				});
			},

			/**
			 * Render series for the chart
			 */
			renderSeries: function () {
				each(this.series, function (serie) {
					serie.translate();
					serie.render();
				});
			},
				
			/**
			 * Render labels for the chart
			 */
			renderLabels: function () {
				var chart = this,
					labels = chart.options.labels;
				if (labels.items) {
					each(labels.items, function (label) {
						var style = extend(labels.style, label.style),
							x = pInt(style.left) + chart.plotLeft,
							y = pInt(style.top) + chart.plotTop + 12;

						// delete to prevent rewriting in IE
						delete style.left;
						delete style.top;

						chart.renderer.text(
							label.html,
							x,
							y
						)
						.attr({ zIndex: 2 })
						.css(style)
						.add();

					});
				}
			},

			/**
			 * Render all graphics for the chart
			 */
			render: function () {
				var chart = this,
					axes = chart.axes,
					renderer = chart.renderer,
					options = chart.options,
					tempWidth,
					tempHeight,
					redoHorizontal,
					redoVertical;

				// Title
				chart.setTitle();


				// Legend
				chart.legend = new Legend(chart, options.legend);

				// Get stacks
				if (chart.getStacks) {
					chart.getStacks();
				}

				// Get chart margins
				chart.getMargins(true);
				chart.setChartSize();

				// Record preliminary dimensions for later comparison
				tempWidth = chart.plotWidth;
				tempHeight = chart.plotHeight = chart.plotHeight - 13; // 13 is the most common height of X axis labels

				// Get margins by pre-rendering axes
				each(axes, function (axis) {
					axis.setScale();
				});
				chart.getAxisMargins();

				// If the plot area size has changed significantly, calculate tick positions again
				redoHorizontal = tempWidth / chart.plotWidth > 1.1;
				redoVertical = tempHeight / chart.plotHeight > 1.1;

				if (redoHorizontal || redoVertical) {

					chart.maxTicks = null; // reset for second pass
					each(axes, function (axis) {
						if ((axis.horiz && redoHorizontal) || (!axis.horiz && redoVertical)) {
							axis.setTickInterval(true); // update to reflect the new margins
						}
					});
					chart.getMargins(); // second pass to check for new labels
				}

				// Draw the borders and backgrounds
				chart.drawChartBox();		


				// Axes
				if (chart.hasCartesianSeries) {
					each(axes, function (axis) {
						axis.render();
					});
				}

				// The series
				if (!chart.seriesGroup) {
					chart.seriesGroup = renderer.g('series-group')
						.attr({ zIndex: 3 })
						.add();
				}
				chart.renderSeries();

				// Labels
				chart.renderLabels();

				// Credits
				chart.showCredits(options.credits);

				// Set flag
				chart.hasRendered = true;

			},

			/**
			 * Show chart credits based on config options
			 */
			showCredits: function (credits) {
				if (credits.enabled && !this.credits) {
					this.credits = this.renderer.text(
						credits.text,
						0,
						0
					)
					.on('click', function () {
						if (credits.href) {
							location.href = credits.href;
						}
					})
					.attr({
						align: credits.position.align,
						zIndex: 8
					})
					.css(credits.style)
					.add()
					.align(credits.position);
				}
			},

			/**
			 * Clean up memory usage
			 */
			destroy: function () {
				var chart = this,
					axes = chart.axes,
					series = chart.series,
					container = chart.container,
					i,
					parentNode = container && container.parentNode;
					
				// fire the chart.destoy event
				fireEvent(chart, 'destroy');
				
				// Delete the chart from charts lookup array
				charts[chart.index] = UNDEFINED;
				chartCount--;
				chart.renderTo.removeAttribute('data-highcharts-chart');

				// remove events
				removeEvent(chart);

				// ==== Destroy collections:
				// Destroy axes
				i = axes.length;
				while (i--) {
					axes[i] = axes[i].destroy();
				}

				// Destroy each series
				i = series.length;
				while (i--) {
					series[i] = series[i].destroy();
				}

				// ==== Destroy chart properties:
				each(['title', 'subtitle', 'chartBackground', 'plotBackground', 'plotBGImage', 
						'plotBorder', 'seriesGroup', 'clipRect', 'credits', 'pointer', 'scroller', 
						'rangeSelector', 'legend', 'resetZoomButton', 'tooltip', 'renderer'], function (name) {
					var prop = chart[name];

					if (prop && prop.destroy) {
						chart[name] = prop.destroy();
					}
				});

				// remove container and all SVG
				if (container) { // can break in IE when destroyed before finished loading
					container.innerHTML = '';
					removeEvent(container);
					if (parentNode) {
						discardElement(container);
					}

				}

				// clean it all up
				for (i in chart) {
					delete chart[i];
				}

			},


			/**
			 * VML namespaces can't be added until after complete. Listening
			 * for Perini's doScroll hack is not enough.
			 */
			isReadyToRender: function () {
				var chart = this;

				// Note: in spite of JSLint's complaints, win == win.top is required
				/*jslint eqeq: true*/
				if ((!hasSVG && (win == win.top && doc.readyState !== 'complete')) || (useCanVG && !win.canvg)) {
				/*jslint eqeq: false*/
					if (useCanVG) {
						// Delay rendering until canvg library is downloaded and ready
						CanVGController.push(function () { chart.firstRender(); }, chart.options.global.canvasToolsURL);
					} else {
						doc.attachEvent('onreadystatechange', function () {
							doc.detachEvent('onreadystatechange', chart.firstRender);
							if (doc.readyState === 'complete') {
								chart.firstRender();
							}
						});
					}
					return false;
				}
				return true;
			},

			/**
			 * Prepare for first rendering after all data are loaded
			 */
			firstRender: function () {
				var chart = this,
					options = chart.options,
					callback = chart.callback;

				// Check whether the chart is ready to render
				if (!chart.isReadyToRender()) {
					return;
				}

				// Create the container
				chart.getContainer();

				// Run an early event after the container and renderer are established
				fireEvent(chart, 'init');

				
				chart.resetMargins();
				chart.setChartSize();

				// Set the common chart properties (mainly invert) from the given series
				chart.propFromSeries();

				// get axes
				chart.getAxes();

				// Initialize the series
				each(options.series || [], function (serieOptions) {
					chart.initSeries(serieOptions);
				});

				chart.linkSeries();

				// Run an event after axes and series are initialized, but before render. At this stage,
				// the series data is indexed and cached in the xData and yData arrays, so we can access
				// those before rendering. Used in Highstock. 
				fireEvent(chart, 'beforeRender'); 

				// depends on inverted and on margins being set
				if (Highcharts.Pointer) {
					chart.pointer = new Pointer(chart, options);
				}

				chart.render();

				// add canvas
				chart.renderer.draw();
				// run callbacks
				if (callback) {
					callback.apply(chart, [chart]);
				}
				each(chart.callbacks, function (fn) {
					if (chart.index !== UNDEFINED) { // Chart destroyed in its own callback (#3600)
						fn.apply(chart, [chart]);
					}
				});
				
				// Fire the load event
				fireEvent(chart, 'load');		
				
				// If the chart was rendered outside the top container, put it back in (#3679)
				chart.cloneRenderTo(true);

			},

			/**
			* Creates arrays for spacing and margin from given options.
			*/
			splashArray: function (target, options) {
				var oVar = options[target],
					tArray = isObject(oVar) ? oVar : [oVar, oVar, oVar, oVar];

				return [pick(options[target + 'Top'], tArray[0]),
						pick(options[target + 'Right'], tArray[1]),
						pick(options[target + 'Bottom'], tArray[2]),
						pick(options[target + 'Left'], tArray[3])];
			}
		}; // end Chart

		var CenteredSeriesMixin = Highcharts.CenteredSeriesMixin = {
			/**
			 * Get the center of the pie based on the size and center options relative to the  
			 * plot area. Borrowed by the polar and gauge series types.
			 */
			getCenter: function () {
				
				var options = this.options,
					chart = this.chart,
					slicingRoom = 2 * (options.slicedOffset || 0),
					handleSlicingRoom,
					plotWidth = chart.plotWidth - 2 * slicingRoom,
					plotHeight = chart.plotHeight - 2 * slicingRoom,
					centerOption = options.center,
					positions = [pick(centerOption[0], '50%'), pick(centerOption[1], '50%'), options.size || '100%', options.innerSize || 0],
					smallestSize = mathMin(plotWidth, plotHeight),
					i,
					value;

				for (i = 0; i < 4; ++i) {
					value = positions[i];
					handleSlicingRoom = i < 2 || (i === 2 && /%$/.test(value));
					
					// i == 0: centerX, relative to width
					// i == 1: centerY, relative to height
					// i == 2: size, relative to smallestSize
					// i == 3: innerSize, relative to size
					positions[i] = relativeLength(value, [plotWidth, plotHeight, smallestSize, positions[2]][i]) +
						(handleSlicingRoom ? slicingRoom : 0);

				}
				return positions;
			}
		};

		/**
		 * The Point object and prototype. Inheritable and used as base for PiePoint
		 */
		var Point = function () {};
		Point.prototype = {

			/**
			 * Initialize the point
			 * @param {Object} series The series object containing this point
			 * @param {Object} options The data in either number, array or object format
			 */
			init: function (series, options, x) {

				var point = this,
					colors;
				point.series = series;
				point.color = series.color; // #3445
				point.applyOptions(options, x);
				point.pointAttr = {};

				if (series.options.colorByPoint) {
					colors = series.options.colors || series.chart.options.colors;
					point.color = point.color || colors[series.colorCounter++];
					// loop back to zero
					if (series.colorCounter === colors.length) {
						series.colorCounter = 0;
					}
				}

				series.chart.pointCount++;
				return point;
			},
			/**
			 * Apply the options containing the x and y data and possible some extra properties.
			 * This is called on point init or from point.update.
			 *
			 * @param {Object} options
			 */
			applyOptions: function (options, x) {
				var point = this,
					series = point.series,
					pointValKey = series.options.pointValKey || series.pointValKey;

				options = Point.prototype.optionsToObject.call(this, options);

				// copy options directly to point
				extend(point, options);
				point.options = point.options ? extend(point.options, options) : options;

				// For higher dimension series types. For instance, for ranges, point.y is mapped to point.low.
				if (pointValKey) {
					point.y = point[pointValKey];
				}

				// If no x is set by now, get auto incremented value. All points must have an
				// x value, however the y value can be null to create a gap in the series
				if (point.x === UNDEFINED && series) {
					point.x = x === UNDEFINED ? series.autoIncrement() : x;
				}

				return point;
			},

			/**
			 * Transform number or array configs into objects
			 */
			optionsToObject: function (options) {
				var ret = {},
					series = this.series,
					keys = series.options.keys,
					pointArrayMap = keys || series.pointArrayMap || ['y'],
					valueCount = pointArrayMap.length,
					firstItemType,
					i = 0,
					j = 0;

				if (typeof options === 'number' || options === null) {
					ret[pointArrayMap[0]] = options;

				} else if (isArray(options)) {
					// with leading x value
					if (!keys && options.length > valueCount) {
						firstItemType = typeof options[0];
						if (firstItemType === 'string') {
							ret.name = options[0];
						} else if (firstItemType === 'number') {
							ret.x = options[0];
						}
						i++;
					}
					while (j < valueCount) {
						ret[pointArrayMap[j++]] = options[i++];
					}
				} else if (typeof options === 'object') {
					ret = options;

					// This is the fastest way to detect if there are individual point dataLabels that need
					// to be considered in drawDataLabels. These can only occur in object configs.
					if (options.dataLabels) {
						series._hasPointLabels = true;
					}

					// Same approach as above for markers
					if (options.marker) {
						series._hasPointMarkers = true;
					}
				}
				return ret;
			},

			/**
			 * Destroy a point to clear memory. Its reference still stays in series.data.
			 */
			destroy: function () {
				var point = this,
					series = point.series,
					chart = series.chart,
					hoverPoints = chart.hoverPoints,
					prop;

				chart.pointCount--;

				if (hoverPoints) {
					point.setState();
					erase(hoverPoints, point);
					if (!hoverPoints.length) {
						chart.hoverPoints = null;
					}

				}
				if (point === chart.hoverPoint) {
					point.onMouseOut();
				}

				// remove all events
				if (point.graphic || point.dataLabel) { // removeEvent and destroyElements are performance expensive
					removeEvent(point);
					point.destroyElements();
				}

				if (point.legendItem) { // pies have legend items
					chart.legend.destroyItem(point);
				}

				for (prop in point) {
					point[prop] = null;
				}


			},

			/**
			 * Destroy SVG elements associated with the point
			 */
			destroyElements: function () {
				var point = this,
					props = ['graphic', 'dataLabel', 'dataLabelUpper', 'group', 'connector', 'shadowGroup'],
					prop,
					i = 6;
				while (i--) {
					prop = props[i];
					if (point[prop]) {
						point[prop] = point[prop].destroy();
					}
				}
			},

			/**
			 * Return the configuration hash needed for the data label and tooltip formatters
			 */
			getLabelConfig: function () {
				return {
					x: this.category,
					y: this.y,
					color: this.color,
					key: this.name || this.category,
					series: this.series,
					point: this,
					percentage: this.percentage,
					total: this.total || this.stackTotal
				};
			},	

			/**
			 * Extendable method for formatting each point's tooltip line
			 *
			 * @return {String} A string to be concatenated in to the common tooltip text
			 */
			tooltipFormatter: function (pointFormat) {

				// Insert options for valueDecimals, valuePrefix, and valueSuffix
				var series = this.series,
					seriesTooltipOptions = series.tooltipOptions,
					valueDecimals = pick(seriesTooltipOptions.valueDecimals, ''),
					valuePrefix = seriesTooltipOptions.valuePrefix || '',
					valueSuffix = seriesTooltipOptions.valueSuffix || '';

				// Loop over the point array map and replace unformatted values with sprintf formatting markup
				each(series.pointArrayMap || ['y'], function (key) {
					key = '{point.' + key; // without the closing bracket
					if (valuePrefix || valueSuffix) {
						pointFormat = pointFormat.replace(key + '}', valuePrefix + key + '}' + valueSuffix);
					}
					pointFormat = pointFormat.replace(key + '}', key + ':,.' + valueDecimals + 'f}');
				});

				return format(pointFormat, {
					point: this,
					series: this.series
				});
			},

			/**
			 * Fire an event on the Point object. Must not be renamed to fireEvent, as this
			 * causes a name clash in MooTools
			 * @param {String} eventType
			 * @param {Object} eventArgs Additional event arguments
			 * @param {Function} defaultFunction Default event handler
			 */
			firePointEvent: function (eventType, eventArgs, defaultFunction) {
				var point = this,
					series = this.series,
					seriesOptions = series.options;

				// load event handlers on demand to save time on mouseover/out
				if (seriesOptions.point.events[eventType] || (point.options && point.options.events && point.options.events[eventType])) {
					this.importEvents();
				}

				// add default handler if in selection mode
				if (eventType === 'click' && seriesOptions.allowPointSelect) {
					defaultFunction = function (event) {
						// Control key is for Windows, meta (= Cmd key) for Mac, Shift for Opera
						if (point.select) { // Could be destroyed by prior event handlers (#2911)
							point.select(null, event.ctrlKey || event.metaKey || event.shiftKey);
						}
					};
				}

				fireEvent(this, eventType, eventArgs, defaultFunction);
			}
		};/**
		 * @classDescription The base function which all other series types inherit from. The data in the series is stored
		 * in various arrays.
		 *
		 * - First, series.options.data contains all the original config options for
		 * each point whether added by options or methods like series.addPoint.
		 * - Next, series.data contains those values converted to points, but in case the series data length
		 * exceeds the cropThreshold, or if the data is grouped, series.data doesn't contain all the points. It
		 * only contains the points that have been created on demand.
		 * - Then there's series.points that contains all currently visible point objects. In case of cropping,
		 * the cropped-away points are not part of this array. The series.points array starts at series.cropStart
		 * compared to series.data and series.options.data. If however the series data is grouped, these can't
		 * be correlated one to one.
		 * - series.xData and series.processedXData contain clean x values, equivalent to series.data and series.points.
		 * - series.yData and series.processedYData contain clean x values, equivalent to series.data and series.points.
		 *
		 * @param {Object} chart
		 * @param {Object} options
		 */
		var Series = Highcharts.Series = function () {};

		Series.prototype = {

			isCartesian: true,
			type: 'line',
			pointClass: Point,
			sorted: true, // requires the data to be sorted
			requireSorting: true,
			pointAttrToOptions: { // mapping between SVG attributes and the corresponding options
				stroke: 'lineColor',
				'stroke-width': 'lineWidth',
				fill: 'fillColor',
				r: 'radius'
			},
			axisTypes: ['xAxis', 'yAxis'],
			colorCounter: 0,
			parallelArrays: ['x', 'y'], // each point's x and y values are stored in this.xData and this.yData
			init: function (chart, options) {
				var series = this,
					eventType,
					events,
					chartSeries = chart.series,
					sortByIndex = function (a, b) {
						return pick(a.options.index, a._i) - pick(b.options.index, b._i);
					};

				series.chart = chart;
				series.options = options = series.setOptions(options); // merge with plotOptions
				series.linkedSeries = [];

				// bind the axes
				series.bindAxes();

				// set some variables
				extend(series, {
					name: options.name,
					state: NORMAL_STATE,
					pointAttr: {},
					visible: options.visible !== false, // true by default
					selected: options.selected === true // false by default
				});

				// special
				if (useCanVG) {
					options.animation = false;
				}

				// register event listeners
				events = options.events;
				for (eventType in events) {
					addEvent(series, eventType, events[eventType]);
				}
				if (
					(events && events.click) ||
					(options.point && options.point.events && options.point.events.click) ||
					options.allowPointSelect
				) {
					chart.runTrackerClick = true;
				}

				series.getColor();
				series.getSymbol();

				// Set the data
				each(series.parallelArrays, function (key) {
					series[key + 'Data'] = [];
				});
				series.setData(options.data, false);

				// Mark cartesian
				if (series.isCartesian) {
					chart.hasCartesianSeries = true;
				}

				// Register it in the chart
				chartSeries.push(series);
				series._i = chartSeries.length - 1;

				// Sort series according to index option (#248, #1123, #2456)
				stableSort(chartSeries, sortByIndex);
				if (this.yAxis) {
					stableSort(this.yAxis.series, sortByIndex);
				}

				each(chartSeries, function (series, i) {
					series.index = i;
					series.name = series.name || 'Series ' + (i + 1);
				});

			},

			/**
			 * Set the xAxis and yAxis properties of cartesian series, and register the series
			 * in the axis.series array
			 */
			bindAxes: function () {
				var series = this,
					seriesOptions = series.options,
					chart = series.chart,
					axisOptions;

				each(series.axisTypes || [], function (AXIS) { // repeat for xAxis and yAxis

					each(chart[AXIS], function (axis) { // loop through the chart's axis objects
						axisOptions = axis.options;

						// apply if the series xAxis or yAxis option mathches the number of the
						// axis, or if undefined, use the first axis
						if ((seriesOptions[AXIS] === axisOptions.index) ||
								(seriesOptions[AXIS] !== UNDEFINED && seriesOptions[AXIS] === axisOptions.id) ||
								(seriesOptions[AXIS] === UNDEFINED && axisOptions.index === 0)) {

							// register this series in the axis.series lookup
							axis.series.push(series);

							// set this series.xAxis or series.yAxis reference
							series[AXIS] = axis;

							// mark dirty for redraw
							axis.isDirty = true;
						}
					});

					// The series needs an X and an Y axis
					if (!series[AXIS] && series.optionalAxis !== AXIS) {
						error(18, true);
					}

				});
			},

			/**
			 * For simple series types like line and column, the data values are held in arrays like
			 * xData and yData for quick lookup to find extremes and more. For multidimensional series
			 * like bubble and map, this can be extended with arrays like zData and valueData by
			 * adding to the series.parallelArrays array.
			 */
			updateParallelArrays: function (point, i) {
				var series = point.series,
					args = arguments,
					fn = typeof i === 'number' ?
						 // Insert the value in the given position
						function (key) {
							var val = key === 'y' && series.toYData ? series.toYData(point) : point[key];
							series[key + 'Data'][i] = val;
						} :
						// Apply the method specified in i with the following arguments as arguments
						function (key) {
							Array.prototype[i].apply(series[key + 'Data'], Array.prototype.slice.call(args, 2));
						};

				each(series.parallelArrays, fn);
			},

			/**
			 * Return an auto incremented x value based on the pointStart and pointInterval options.
			 * This is only used if an x value is not given for the point that calls autoIncrement.
			 */
			autoIncrement: function () {

				var options = this.options,
					xIncrement = this.xIncrement,
					date,
					pointInterval,
					pointIntervalUnit = options.pointIntervalUnit;
				
				xIncrement = pick(xIncrement, options.pointStart, 0);
				
				this.pointInterval = pointInterval = pick(this.pointInterval, options.pointInterval, 1);
				
				// Added code for pointInterval strings
				if (pointIntervalUnit === 'month' || pointIntervalUnit === 'year') {
					date = new Date(xIncrement);
					date = (pointIntervalUnit === 'month') ?
						+date[setMonth](date[getMonth]() + pointInterval) :
						+date[setFullYear](date[getFullYear]() + pointInterval);
					pointInterval = date - xIncrement;
				}
				
				this.xIncrement = xIncrement + pointInterval;
				return xIncrement;
			},

			/**
			 * Divide the series data into segments divided by null values.
			 */
			getSegments: function () {
				var series = this,
					lastNull = -1,
					segments = [],
					i,
					points = series.points,
					pointsLength = points.length;

				if (pointsLength) { // no action required for []

					// if connect nulls, just remove null points
					if (series.options.connectNulls) {
						i = pointsLength;
						while (i--) {
							if (points[i].y === null) {
								points.splice(i, 1);
							}
						}
						if (points.length) {
							segments = [points];
						}

					// else, split on null points
					} else {
						each(points, function (point, i) {
							if (point.y === null) {
								if (i > lastNull + 1) {
									segments.push(points.slice(lastNull + 1, i));
								}
								lastNull = i;
							} else if (i === pointsLength - 1) { // last value
								segments.push(points.slice(lastNull + 1, i + 1));
							}
						});
					}
				}

				// register it
				series.segments = segments;
			},

			/**
			 * Set the series options by merging from the options tree
			 * @param {Object} itemOptions
			 */
			setOptions: function (itemOptions) {
				var chart = this.chart,
					chartOptions = chart.options,
					plotOptions = chartOptions.plotOptions,
					userOptions = chart.userOptions || {},
					userPlotOptions = userOptions.plotOptions || {},
					typeOptions = plotOptions[this.type],
					options,
					zones;

				this.userOptions = itemOptions;

				// General series options take precedence over type options because otherwise, default
				// type options like column.animation would be overwritten by the general option.
				// But issues have been raised here (#3881), and the solution may be to distinguish 
				// between default option and userOptions like in the tooltip below.
				options = merge(
					typeOptions,
					plotOptions.series,
					itemOptions
				);

				// The tooltip options are merged between global and series specific options
				this.tooltipOptions = merge(
					defaultOptions.tooltip,
					defaultOptions.plotOptions[this.type].tooltip,
					userOptions.tooltip,
					userPlotOptions.series && userPlotOptions.series.tooltip,
					userPlotOptions[this.type] && userPlotOptions[this.type].tooltip,
					itemOptions.tooltip
				);

				// Delete marker object if not allowed (#1125)
				if (typeOptions.marker === null) {
					delete options.marker;
				}

				// Handle color zones
				this.zoneAxis = options.zoneAxis;
				zones = this.zones = (options.zones || []).slice();
				if ((options.negativeColor || options.negativeFillColor) && !options.zones) {
					zones.push({
						value: options[this.zoneAxis + 'Threshold'] || options.threshold || 0,
						color: options.negativeColor,
						fillColor: options.negativeFillColor
					});
				}
				if (zones.length) { // Push one extra zone for the rest
					if (defined(zones[zones.length - 1].value)) {
						zones.push({
							color: this.color,
							fillColor: this.fillColor
						});
					}
				}
				return options;
			},

			getCyclic: function (prop, value, defaults) {
				var i,
					userOptions = this.userOptions,
					indexName = '_' + prop + 'Index',
					counterName = prop + 'Counter';

				if (!value) {
					if (defined(userOptions[indexName])) { // after Series.update()
						i = userOptions[indexName];
					} else {
						userOptions[indexName] = i = this.chart[counterName] % defaults.length;
						this.chart[counterName] += 1;
					}
					value = defaults[i];
				}
				this[prop] = value;
			},

			/**
			 * Get the series' color
			 */
			getColor: function () {
				if (this.options.colorByPoint) {
					this.options.color = null; // #4359, selected slice got series.color even when colorByPoint was set.
				} else {
					this.getCyclic('color', this.options.color || defaultPlotOptions[this.type].color, this.chart.options.colors);
				}
			},
			/**
			 * Get the series' symbol
			 */
			getSymbol: function () {
				var seriesMarkerOption = this.options.marker;

				this.getCyclic('symbol', seriesMarkerOption.symbol, this.chart.options.symbols);

				// don't substract radius in image symbols (#604)
				if (/^url/.test(this.symbol)) {
					seriesMarkerOption.radius = 0;
				}
			},

			drawLegendSymbol: LegendSymbolMixin.drawLineMarker,

			/**
			 * Replace the series data with a new set of data
			 * @param {Object} data
			 * @param {Object} redraw
			 */
			setData: function (data, redraw, animation, updatePoints) {
				var series = this,
					oldData = series.points,
					oldDataLength = (oldData && oldData.length) || 0,
					dataLength,
					options = series.options,
					chart = series.chart,
					firstPoint = null,
					xAxis = series.xAxis,
					hasCategories = xAxis && !!xAxis.categories,
					i,
					turboThreshold = options.turboThreshold,
					pt,
					xData = this.xData,
					yData = this.yData,
					pointArrayMap = series.pointArrayMap,
					valueCount = pointArrayMap && pointArrayMap.length;

				data = data || [];
				dataLength = data.length;
				redraw = pick(redraw, true);

				// If the point count is the same as is was, just run Point.update which is
				// cheaper, allows animation, and keeps references to points.
				if (updatePoints !== false && dataLength && oldDataLength === dataLength && !series.cropped && !series.hasGroupedData && series.visible) {
					each(data, function (point, i) {
						if (oldData[i].update) { // Linked, previously hidden series (#3709)
							oldData[i].update(point, false, null, false);
						}
					});

				} else {

					// Reset properties
					series.xIncrement = null;
					series.pointRange = hasCategories ? 1 : options.pointRange;

					series.colorCounter = 0; // for series with colorByPoint (#1547)
					
					// Update parallel arrays
					each(this.parallelArrays, function (key) {
						series[key + 'Data'].length = 0;
					});

					// In turbo mode, only one- or twodimensional arrays of numbers are allowed. The
					// first value is tested, and we assume that all the rest are defined the same
					// way. Although the 'for' loops are similar, they are repeated inside each
					// if-else conditional for max performance.
					if (turboThreshold && dataLength > turboThreshold) {

						// find the first non-null point
						i = 0;
						while (firstPoint === null && i < dataLength) {
							firstPoint = data[i];
							i++;
						}


						if (isNumber(firstPoint)) { // assume all points are numbers
							var x = pick(options.pointStart, 0),
								pointInterval = pick(options.pointInterval, 1);

							for (i = 0; i < dataLength; i++) {
								xData[i] = x;
								yData[i] = data[i];
								x += pointInterval;
							}
							series.xIncrement = x;
						} else if (isArray(firstPoint)) { // assume all points are arrays
							if (valueCount) { // [x, low, high] or [x, o, h, l, c]
								for (i = 0; i < dataLength; i++) {
									pt = data[i];
									xData[i] = pt[0];
									yData[i] = pt.slice(1, valueCount + 1);
								}
							} else { // [x, y]
								for (i = 0; i < dataLength; i++) {
									pt = data[i];
									xData[i] = pt[0];
									yData[i] = pt[1];
								}
							}
						} else {
							error(12); // Highcharts expects configs to be numbers or arrays in turbo mode
						}
					} else {
						for (i = 0; i < dataLength; i++) {
							if (data[i] !== UNDEFINED) { // stray commas in oldIE
								pt = { series: series };
								series.pointClass.prototype.applyOptions.apply(pt, [data[i]]);
								series.updateParallelArrays(pt, i);
								if (hasCategories && defined(pt.name)) { // #4401
									xAxis.names[pt.x] = pt.name; // #2046
								}
							}
						}
					}

					// Forgetting to cast strings to numbers is a common caveat when handling CSV or JSON
					if (isString(yData[0])) {
						error(14, true);
					}

					series.data = [];
					series.options.data = data;
					//series.zData = zData;

					// destroy old points
					i = oldDataLength;
					while (i--) {
						if (oldData[i] && oldData[i].destroy) {
							oldData[i].destroy();
						}
					}

					// reset minRange (#878)
					if (xAxis) {
						xAxis.minRange = xAxis.userMinRange;
					}

					// redraw
					series.isDirty = series.isDirtyData = chart.isDirtyBox = true;
					animation = false;
				}

				if (redraw) {
					chart.redraw(animation);
				}
			},

			/**
			 * Process the data by cropping away unused data points if the series is longer
			 * than the crop threshold. This saves computing time for lage series.
			 */
			processData: function (force) {
				var series = this,
					processedXData = series.xData, // copied during slice operation below
					processedYData = series.yData,
					dataLength = processedXData.length,
					croppedData,
					cropStart = 0,
					cropped,
					distance,
					closestPointRange,
					xAxis = series.xAxis,
					i, // loop variable
					options = series.options,
					cropThreshold = options.cropThreshold,
					isCartesian = series.isCartesian,
					xExtremes,
					min,
					max;

				// If the series data or axes haven't changed, don't go through this. Return false to pass
				// the message on to override methods like in data grouping.
				if (isCartesian && !series.isDirty && !xAxis.isDirty && !series.yAxis.isDirty && !force) {
					return false;
				}

				if (xAxis) {
					xExtremes = xAxis.getExtremes(); // corrected for log axis (#3053)
					min = xExtremes.min;
					max = xExtremes.max;
				}

				// optionally filter out points outside the plot area
				if (isCartesian && series.sorted && (!cropThreshold || dataLength > cropThreshold || series.forceCrop)) {
					
					// it's outside current extremes
					if (processedXData[dataLength - 1] < min || processedXData[0] > max) {
						processedXData = [];
						processedYData = [];

					// only crop if it's actually spilling out
					} else if (processedXData[0] < min || processedXData[dataLength - 1] > max) {
						croppedData = this.cropData(series.xData, series.yData, min, max);
						processedXData = croppedData.xData;
						processedYData = croppedData.yData;
						cropStart = croppedData.start;
						cropped = true;
					}
				}


				// Find the closest distance between processed points
				for (i = processedXData.length - 1; i >= 0; i--) {
					distance = processedXData[i] - processedXData[i - 1];
					
					if (distance > 0 && (closestPointRange === UNDEFINED || distance < closestPointRange)) {
						closestPointRange = distance;

					// Unsorted data is not supported by the line tooltip, as well as data grouping and
					// navigation in Stock charts (#725) and width calculation of columns (#1900)
					} else if (distance < 0 && series.requireSorting) {
						error(15);
					}
				}

				// Record the properties
				series.cropped = cropped; // undefined or true
				series.cropStart = cropStart;
				series.processedXData = processedXData;
				series.processedYData = processedYData;

				if (options.pointRange === null) { // null means auto, as for columns, candlesticks and OHLC
					series.pointRange = closestPointRange || 1;
				}
				series.closestPointRange = closestPointRange;

			},

			/**
			 * Iterate over xData and crop values between min and max. Returns object containing crop start/end
			 * cropped xData with corresponding part of yData, dataMin and dataMax within the cropped range
			 */
			cropData: function (xData, yData, min, max) {
				var dataLength = xData.length,
					cropStart = 0,
					cropEnd = dataLength,
					cropShoulder = pick(this.cropShoulder, 1), // line-type series need one point outside
					i;

				// iterate up to find slice start
				for (i = 0; i < dataLength; i++) {
					if (xData[i] >= min) {
						cropStart = mathMax(0, i - cropShoulder);
						break;
					}
				}

				// proceed to find slice end
				for (; i < dataLength; i++) {
					if (xData[i] > max) {
						cropEnd = i + cropShoulder;
						break;
					}
				}

				return {
					xData: xData.slice(cropStart, cropEnd),
					yData: yData.slice(cropStart, cropEnd),
					start: cropStart,
					end: cropEnd
				};
			},


			/**
			 * Generate the data point after the data has been processed by cropping away
			 * unused points and optionally grouped in Highcharts Stock.
			 */
			generatePoints: function () {
				var series = this,
					options = series.options,
					dataOptions = options.data,
					data = series.data,
					dataLength,
					processedXData = series.processedXData,
					processedYData = series.processedYData,
					pointClass = series.pointClass,
					processedDataLength = processedXData.length,
					cropStart = series.cropStart || 0,
					cursor,
					hasGroupedData = series.hasGroupedData,
					point,
					points = [],
					i;

				if (!data && !hasGroupedData) {
					var arr = [];
					arr.length = dataOptions.length;
					data = series.data = arr;
				}

				for (i = 0; i < processedDataLength; i++) {
					cursor = cropStart + i;
					if (!hasGroupedData) {
						if (data[cursor]) {
							point = data[cursor];
						} else if (dataOptions[cursor] !== UNDEFINED) { // #970
							data[cursor] = point = (new pointClass()).init(series, dataOptions[cursor], processedXData[i]);
						}
						points[i] = point;
					} else {
						// splat the y data in case of ohlc data array
						points[i] = (new pointClass()).init(series, [processedXData[i]].concat(splat(processedYData[i])));
					}
					points[i].index = cursor; // For faster access in Point.update
				}

				// Hide cropped-away points - this only runs when the number of points is above cropThreshold, or when
				// swithching view from non-grouped data to grouped data (#637)
				if (data && (processedDataLength !== (dataLength = data.length) || hasGroupedData)) {
					for (i = 0; i < dataLength; i++) {
						if (i === cropStart && !hasGroupedData) { // when has grouped data, clear all points
							i += processedDataLength;
						}
						if (data[i]) {
							data[i].destroyElements();
							data[i].plotX = UNDEFINED; // #1003
						}
					}
				}

				series.data = data;
				series.points = points;
			},

			/**
			 * Calculate Y extremes for visible data
			 */
			getExtremes: function (yData) {
				var xAxis = this.xAxis,
					yAxis = this.yAxis,
					xData = this.processedXData,
					yDataLength,
					activeYData = [],
					activeCounter = 0,
					xExtremes = xAxis.getExtremes(), // #2117, need to compensate for log X axis
					xMin = xExtremes.min,
					xMax = xExtremes.max,
					validValue,
					withinRange,
					x,
					y,
					i,
					j;

				yData = yData || this.stackedYData || this.processedYData;
				yDataLength = yData.length;

				for (i = 0; i < yDataLength; i++) {

					x = xData[i];
					y = yData[i];

					// For points within the visible range, including the first point outside the
					// visible range, consider y extremes
					validValue = y !== null && y !== UNDEFINED && (!yAxis.isLog || (y.length || y > 0));
					withinRange = this.getExtremesFromAll || this.options.getExtremesFromAll || this.cropped ||
						((xData[i + 1] || x) >= xMin &&	(xData[i - 1] || x) <= xMax);

					if (validValue && withinRange) {

						j = y.length;
						if (j) { // array, like ohlc or range data
							while (j--) {
								if (y[j] !== null) {
									activeYData[activeCounter++] = y[j];
								}
							}
						} else {
							activeYData[activeCounter++] = y;
						}
					}
				}
				this.dataMin = arrayMin(activeYData);
				this.dataMax = arrayMax(activeYData);
			},

			/**
			 * Translate data points from raw data values to chart specific positioning data
			 * needed later in drawPoints, drawGraph and drawTracker.
			 */
			translate: function () {
				if (!this.processedXData) { // hidden series
					this.processData();
				}
				this.generatePoints();
				var series = this,
					options = series.options,
					stacking = options.stacking,
					xAxis = series.xAxis,
					categories = xAxis.categories,
					yAxis = series.yAxis,
					points = series.points,
					dataLength = points.length,
					hasModifyValue = !!series.modifyValue,
					i,
					pointPlacement = options.pointPlacement,
					dynamicallyPlaced = pointPlacement === 'between' || isNumber(pointPlacement),
					threshold = options.threshold,
					stackThreshold = options.startFromThreshold ? threshold : 0,
					plotX,
					plotY,
					lastPlotX,
					closestPointRangePx = Number.MAX_VALUE;

				// Translate each point
				for (i = 0; i < dataLength; i++) {
					var point = points[i],
						xValue = point.x,
						yValue = point.y,
						yBottom = point.low,
						stack = stacking && yAxis.stacks[(series.negStacks && yValue < (stackThreshold ? 0 : threshold) ? '-' : '') + series.stackKey],
						pointStack,
						stackValues;

					// Discard disallowed y values for log axes (#3434)
					if (yAxis.isLog && yValue !== null && yValue <= 0) {
						point.y = yValue = null;
						error(10);
					}

					// Get the plotX translation
					point.plotX = plotX = mathMin(mathMax(-1e5, xAxis.translate(xValue, 0, 0, 0, 1, pointPlacement, this.type === 'flags')), 1e5); // #3923


					// Calculate the bottom y value for stacked series
					if (stacking && series.visible && stack && stack[xValue]) {

						pointStack = stack[xValue];
						stackValues = pointStack.points[series.index + ',' + i];
						yBottom = stackValues[0];
						yValue = stackValues[1];

						if (yBottom === stackThreshold) {
							yBottom = pick(threshold, yAxis.min);
						}
						if (yAxis.isLog && yBottom <= 0) { // #1200, #1232
							yBottom = null;
						}

						point.total = point.stackTotal = pointStack.total;
						point.percentage = pointStack.total && (point.y / pointStack.total * 100);
						point.stackY = yValue;

						// Place the stack label
						pointStack.setOffset(series.pointXOffset || 0, series.barW || 0);

					}

					// Set translated yBottom or remove it
					point.yBottom = defined(yBottom) ?
						yAxis.translate(yBottom, 0, 1, 0, 1) :
						null;

					// general hook, used for Highstock compare mode
					if (hasModifyValue) {
						yValue = series.modifyValue(yValue, point);
					}

					// Set the the plotY value, reset it for redraws
					point.plotY = plotY = (typeof yValue === 'number' && yValue !== Infinity) ?
						mathMin(mathMax(-1e5, yAxis.translate(yValue, 0, 1, 0, 1)), 1e5) : // #3201
						UNDEFINED;
					point.isInside = plotY !== UNDEFINED && plotY >= 0 && plotY <= yAxis.len && // #3519
						plotX >= 0 && plotX <= xAxis.len;


					// Set client related positions for mouse tracking
					point.clientX = dynamicallyPlaced ? xAxis.translate(xValue, 0, 0, 0, 1) : plotX; // #1514

					point.negative = point.y < (threshold || 0);

					// some API data
					point.category = categories && categories[point.x] !== UNDEFINED ?
						categories[point.x] : point.x;

					// Determine auto enabling of markers (#3635)
					if (i) {
						closestPointRangePx = mathMin(closestPointRangePx, mathAbs(plotX - lastPlotX));
					}
					lastPlotX = plotX;

				}

				series.closestPointRangePx = closestPointRangePx;

				// now that we have the cropped data, build the segments
				series.getSegments();
			},

			/**
			 * Set the clipping for the series. For animated series it is called twice, first to initiate
			 * animating the clip then the second time without the animation to set the final clip.
			 */
			setClip: function (animation) {
				var chart = this.chart,
					renderer = chart.renderer,
					inverted = chart.inverted,
					seriesClipBox = this.clipBox,
					clipBox = seriesClipBox || chart.clipBox,
					sharedClipKey = this.sharedClipKey || ['_sharedClip', animation && animation.duration, animation && animation.easing, clipBox.height].join(','),
					clipRect = chart[sharedClipKey],
					markerClipRect = chart[sharedClipKey + 'm'];

				// If a clipping rectangle with the same properties is currently present in the chart, use that.
				if (!clipRect) {

					// When animation is set, prepare the initial positions
					if (animation) { 
						clipBox.width = 0;

						chart[sharedClipKey + 'm'] = markerClipRect = renderer.clipRect(
							-99, // include the width of the first marker
							inverted ? -chart.plotLeft : -chart.plotTop,
							99,
							inverted ? chart.chartWidth : chart.chartHeight
						);
					}
					chart[sharedClipKey] = clipRect = renderer.clipRect(clipBox);
					
				}
				if (animation) {
					clipRect.count += 1;
				}

				if (this.options.clip !== false) {
					this.group.clip(animation || seriesClipBox ? clipRect : chart.clipRect);
					this.markerGroup.clip(markerClipRect);
					this.sharedClipKey = sharedClipKey;
				}

				// Remove the shared clipping rectangle when all series are shown
				if (!animation) {
					clipRect.count -= 1;
					if (clipRect.count <= 0 && sharedClipKey && chart[sharedClipKey]) {
						if (!seriesClipBox) {
							chart[sharedClipKey] = chart[sharedClipKey].destroy();
						}
						if (chart[sharedClipKey + 'm']) {
							chart[sharedClipKey + 'm'] = chart[sharedClipKey + 'm'].destroy();
						}
					}
				}
			},

			/**
			 * Animate in the series
			 */
			animate: function (init) {
				var series = this,
					chart = series.chart,
					clipRect,
					animation = series.options.animation,
					sharedClipKey;

				// Animation option is set to true
				if (animation && !isObject(animation)) {
					animation = defaultPlotOptions[series.type].animation;
				}

				// Initialize the animation. Set up the clipping rectangle.
				if (init) {

					series.setClip(animation);

				// Run the animation
				} else {
					sharedClipKey = this.sharedClipKey;
					clipRect = chart[sharedClipKey];
					if (clipRect) {
						clipRect.animate({
							width: chart.plotSizeX
						}, animation);
					}
					if (chart[sharedClipKey + 'm']) {
						chart[sharedClipKey + 'm'].animate({
							width: chart.plotSizeX + 99
						}, animation);
					}

					// Delete this function to allow it only once
					series.animate = null;
		 
				}
			},

			/**
			 * This runs after animation to land on the final plot clipping
			 */
			afterAnimate: function () {
				this.setClip();
				fireEvent(this, 'afterAnimate');
			},

			/**
			 * Draw the markers
			 */
			drawPoints: function () {
				var series = this,
					pointAttr,
					points = series.points,
					chart = series.chart,
					plotX,
					plotY,
					i,
					point,
					radius,
					symbol,
					isImage,
					graphic,
					options = series.options,
					seriesMarkerOptions = options.marker,
					seriesPointAttr = series.pointAttr[''],
					pointMarkerOptions,
					hasPointMarker,
					enabled,
					isInside,
					markerGroup = series.markerGroup,
					xAxis = series.xAxis,
					globallyEnabled = pick(
						seriesMarkerOptions.enabled, 
						xAxis.isRadial,
						series.closestPointRangePx > 2 * seriesMarkerOptions.radius
					);

				if (seriesMarkerOptions.enabled !== false || series._hasPointMarkers) {

					i = points.length;
					while (i--) {
						point = points[i];
						plotX = mathFloor(point.plotX); // #1843
						plotY = point.plotY;
						graphic = point.graphic;
						pointMarkerOptions = point.marker || {};
						hasPointMarker = !!point.marker;
						enabled = (globallyEnabled && pointMarkerOptions.enabled === UNDEFINED) || pointMarkerOptions.enabled;
						isInside = point.isInside;

						// only draw the point if y is defined
						if (enabled && plotY !== UNDEFINED && !isNaN(plotY) && point.y !== null) {

							// shortcuts
							pointAttr = point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE] || seriesPointAttr;
							radius = pointAttr.r;
							symbol = pick(pointMarkerOptions.symbol, series.symbol);
							isImage = symbol.indexOf('url') === 0;

							if (graphic) { // update
								graphic[isInside ? 'show' : 'hide'](true) // Since the marker group isn't clipped, each individual marker must be toggled
									.animate(extend({
										x: plotX - radius,
										y: plotY - radius
									}, graphic.symbolName ? { // don't apply to image symbols #507
										width: 2 * radius,
										height: 2 * radius
									} : {}));
							} else if (isInside && (radius > 0 || isImage)) {
								point.graphic = graphic = chart.renderer.symbol(
									symbol,
									plotX - radius,
									plotY - radius,
									2 * radius,
									2 * radius,
									hasPointMarker ? pointMarkerOptions : seriesMarkerOptions
								)
								.attr(pointAttr)
								.add(markerGroup);
							}

						} else if (graphic) {
							point.graphic = graphic.destroy(); // #1269
						}
					}
				}

			},

			/**
			 * Convert state properties from API naming conventions to SVG attributes
			 *
			 * @param {Object} options API options object
			 * @param {Object} base1 SVG attribute object to inherit from
			 * @param {Object} base2 Second level SVG attribute object to inherit from
			 */
			convertAttribs: function (options, base1, base2, base3) {
				var conversion = this.pointAttrToOptions,
					attr,
					option,
					obj = {};

				options = options || {};
				base1 = base1 || {};
				base2 = base2 || {};
				base3 = base3 || {};

				for (attr in conversion) {
					option = conversion[attr];
					obj[attr] = pick(options[option], base1[attr], base2[attr], base3[attr]);
				}
				return obj;
			},

			/**
			 * Get the state attributes. Each series type has its own set of attributes
			 * that are allowed to change on a point's state change. Series wide attributes are stored for
			 * all series, and additionally point specific attributes are stored for all
			 * points with individual marker options. If such options are not defined for the point,
			 * a reference to the series wide attributes is stored in point.pointAttr.
			 */
			getAttribs: function () {
				var series = this,
					seriesOptions = series.options,
					normalOptions = defaultPlotOptions[series.type].marker ? seriesOptions.marker : seriesOptions,
					stateOptions = normalOptions.states,
					stateOptionsHover = stateOptions[HOVER_STATE],
					pointStateOptionsHover,
					seriesColor = series.color,
					seriesNegativeColor = series.options.negativeColor,
					normalDefaults = {
						stroke: seriesColor,
						fill: seriesColor
					},
					points = series.points || [], // #927
					i,
					j,
					threshold,
					point,
					seriesPointAttr = [],
					pointAttr,
					pointAttrToOptions = series.pointAttrToOptions,
					hasPointSpecificOptions = series.hasPointSpecificOptions,
					defaultLineColor = normalOptions.lineColor,
					defaultFillColor = normalOptions.fillColor,
					turboThreshold = seriesOptions.turboThreshold,
					zones = series.zones,
					zoneAxis = series.zoneAxis || 'y',
					attr,
					key;

				// series type specific modifications
				if (seriesOptions.marker) { // line, spline, area, areaspline, scatter

					// if no hover radius is given, default to normal radius + 2
					stateOptionsHover.radius = stateOptionsHover.radius || normalOptions.radius + stateOptionsHover.radiusPlus;
					stateOptionsHover.lineWidth = stateOptionsHover.lineWidth || normalOptions.lineWidth + stateOptionsHover.lineWidthPlus;

				} else { // column, bar, pie

					// if no hover color is given, brighten the normal color
					stateOptionsHover.color = stateOptionsHover.color ||
						Color(stateOptionsHover.color || seriesColor)
							.brighten(stateOptionsHover.brightness).get();

					// if no hover negativeColor is given, brighten the normal negativeColor
					stateOptionsHover.negativeColor = stateOptionsHover.negativeColor ||
						Color(stateOptionsHover.negativeColor || seriesNegativeColor)
							.brighten(stateOptionsHover.brightness).get();
				}

				// general point attributes for the series normal state
				seriesPointAttr[NORMAL_STATE] = series.convertAttribs(normalOptions, normalDefaults);

				// HOVER_STATE and SELECT_STATE states inherit from normal state except the default radius
				each([HOVER_STATE, SELECT_STATE], function (state) {
					seriesPointAttr[state] =
							series.convertAttribs(stateOptions[state], seriesPointAttr[NORMAL_STATE]);
				});

				// set it
				series.pointAttr = seriesPointAttr;


				// Generate the point-specific attribute collections if specific point
				// options are given. If not, create a referance to the series wide point
				// attributes
				i = points.length;
				if (!turboThreshold || i < turboThreshold || hasPointSpecificOptions) {
					while (i--) {
						point = points[i];
						normalOptions = (point.options && point.options.marker) || point.options;
						if (normalOptions && normalOptions.enabled === false) {
							normalOptions.radius = 0;
						}

						if (zones.length) {
							j = 0;
							threshold = zones[j];
							while (point[zoneAxis] >= threshold.value) {				
								threshold = zones[++j];
							}
							
							if (threshold.color) {
								point.color = point.fillColor = threshold.color;
							}
						}

						hasPointSpecificOptions = seriesOptions.colorByPoint || point.color; // #868

						// check if the point has specific visual options
						if (point.options) {
							for (key in pointAttrToOptions) {
								if (defined(normalOptions[pointAttrToOptions[key]])) {
									hasPointSpecificOptions = true;
								}
							}
						}

						// a specific marker config object is defined for the individual point:
						// create it's own attribute collection
						if (hasPointSpecificOptions) {
							normalOptions = normalOptions || {};
							pointAttr = [];
							stateOptions = normalOptions.states || {}; // reassign for individual point
							pointStateOptionsHover = stateOptions[HOVER_STATE] = stateOptions[HOVER_STATE] || {};

							// Handle colors for column and pies
							if (!seriesOptions.marker) { // column, bar, point
								// If no hover color is given, brighten the normal color. #1619, #2579
								pointStateOptionsHover.color = pointStateOptionsHover.color || (!point.options.color && stateOptionsHover[(point.negative && seriesNegativeColor ? 'negativeColor' : 'color')]) ||
									Color(point.color)
										.brighten(pointStateOptionsHover.brightness || stateOptionsHover.brightness)
										.get();
							}

							// normal point state inherits series wide normal state
							attr = { color: point.color }; // #868
							if (!defaultFillColor) { // Individual point color or negative color markers (#2219)
								attr.fillColor = point.color;
							}
							if (!defaultLineColor) {
								attr.lineColor = point.color; // Bubbles take point color, line markers use white
							}
							// Color is explicitly set to null or undefined (#1288, #4068)
							if (normalOptions.hasOwnProperty('color') && !normalOptions.color) {
								delete normalOptions.color;
							}
							pointAttr[NORMAL_STATE] = series.convertAttribs(extend(attr, normalOptions), seriesPointAttr[NORMAL_STATE]);

							// inherit from point normal and series hover
							pointAttr[HOVER_STATE] = series.convertAttribs(
								stateOptions[HOVER_STATE],
								seriesPointAttr[HOVER_STATE],
								pointAttr[NORMAL_STATE]
							);

							// inherit from point normal and series hover
							pointAttr[SELECT_STATE] = series.convertAttribs(
								stateOptions[SELECT_STATE],
								seriesPointAttr[SELECT_STATE],
								pointAttr[NORMAL_STATE]
							);


						// no marker config object is created: copy a reference to the series-wide
						// attribute collection
						} else {
							pointAttr = seriesPointAttr;
						}

						point.pointAttr = pointAttr;
					}
				}
			},

			/**
			 * Clear DOM objects and free up memory
			 */
			destroy: function () {
				var series = this,
					chart = series.chart,
					issue134 = /AppleWebKit\/533/.test(userAgent),
					destroy,
					i,
					data = series.data || [],
					point,
					prop,
					axis;

				// add event hook
				fireEvent(series, 'destroy');

				// remove all events
				removeEvent(series);

				// erase from axes
				each(series.axisTypes || [], function (AXIS) {
					axis = series[AXIS];
					if (axis) {
						erase(axis.series, series);
						axis.isDirty = axis.forceRedraw = true;
					}
				});

				// remove legend items
				if (series.legendItem) {
					series.chart.legend.destroyItem(series);
				}

				// destroy all points with their elements
				i = data.length;
				while (i--) {
					point = data[i];
					if (point && point.destroy) {
						point.destroy();
					}
				}
				series.points = null;

				// Clear the animation timeout if we are destroying the series during initial animation
				clearTimeout(series.animationTimeout);

				// Destroy all SVGElements associated to the series
				for (prop in series) {
					if (series[prop] instanceof SVGElement && !series[prop].survive) { // Survive provides a hook for not destroying

						// issue 134 workaround
						destroy = issue134 && prop === 'group' ?
							'hide' :
							'destroy';

						series[prop][destroy]();
					}
				}

				// remove from hoverSeries
				if (chart.hoverSeries === series) {
					chart.hoverSeries = null;
				}
				erase(chart.series, series);

				// clear all members
				for (prop in series) {
					delete series[prop];
				}
			},

			/**
			 * Return the graph path of a segment
			 */
			getSegmentPath: function (segment) {
				var series = this,
					segmentPath = [],
					step = series.options.step;

				// build the segment line
				each(segment, function (point, i) {

					var plotX = point.plotX,
						plotY = point.plotY,
						lastPoint;

					if (series.getPointSpline) { // generate the spline as defined in the SplineSeries object
						segmentPath.push.apply(segmentPath, series.getPointSpline(segment, point, i));

					} else {

						// moveTo or lineTo
						segmentPath.push(i ? L : M);

						// step line?
						if (step && i) {
							lastPoint = segment[i - 1];
							if (step === 'right') {
								segmentPath.push(
									lastPoint.plotX,
									plotY
								);

							} else if (step === 'center') {
								segmentPath.push(
									(lastPoint.plotX + plotX) / 2,
									lastPoint.plotY,
									(lastPoint.plotX + plotX) / 2,
									plotY
								);

							} else {
								segmentPath.push(
									plotX,
									lastPoint.plotY
								);
							}
						}

						// normal line to next point
						segmentPath.push(
							point.plotX,
							point.plotY
						);
					}
				});

				return segmentPath;
			},

			/**
			 * Get the graph path
			 */
			getGraphPath: function () {
				var series = this,
					graphPath = [],
					segmentPath,
					singlePoints = []; // used in drawTracker

				// Divide into segments and build graph and area paths
				each(series.segments, function (segment) {

					segmentPath = series.getSegmentPath(segment);

					// add the segment to the graph, or a single point for tracking
					if (segment.length > 1) {
						graphPath = graphPath.concat(segmentPath);
					} else {
						singlePoints.push(segment[0]);
					}
				});

				// Record it for use in drawGraph and drawTracker, and return graphPath
				series.singlePoints = singlePoints;
				series.graphPath = graphPath;

				return graphPath;

			},

			/**
			 * Draw the actual graph
			 */
			drawGraph: function () {
				var series = this,
					options = this.options,
					props = [['graph', options.lineColor || this.color, options.dashStyle]],
					lineWidth = options.lineWidth,
					roundCap = options.linecap !== 'square',
					graphPath = this.getGraphPath(),
					fillColor = (this.fillGraph && this.color) || NONE, // polygon series use filled graph
					zones = this.zones;

				each(zones, function (threshold, i) {
					props.push(['zoneGraph' + i, threshold.color || series.color, threshold.dashStyle || options.dashStyle]);
				});
				
				// Draw the graph
				each(props, function (prop, i) {
					var graphKey = prop[0],
						graph = series[graphKey],
						attribs;

					if (graph) {
						graph.animate({ d: graphPath });

					} else if ((lineWidth || fillColor) && graphPath.length) { // #1487
						attribs = {
							stroke: prop[1],
							'stroke-width': lineWidth,
							fill: fillColor,
							zIndex: 1 // #1069
						};
						if (prop[2]) {
							attribs.dashstyle = prop[2];
						} else if (roundCap) {
							attribs['stroke-linecap'] = attribs['stroke-linejoin'] = 'round';
						}

						series[graphKey] = series.chart.renderer.path(graphPath)
							.attr(attribs)
							.add(series.group)
							.shadow((i < 2) && options.shadow); // add shadow to normal series (0) or to first zone (1) #3932
					}
				});
			},

			/**
			 * Clip the graphs into the positive and negative coloured graphs
			 */
			applyZones: function () {
				var series = this,
					chart = this.chart,
					renderer = chart.renderer,
					zones = this.zones,
					translatedFrom,
					translatedTo,
					clips = this.clips || [],
					clipAttr,
					graph = this.graph,
					area = this.area,
					chartSizeMax = mathMax(chart.chartWidth, chart.chartHeight),
					axis = this[(this.zoneAxis || 'y') + 'Axis'],
					extremes,
					reversed = axis.reversed,
					inverted = chart.inverted,
					horiz = axis.horiz,
					pxRange,
					pxPosMin,
					pxPosMax,
					ignoreZones = false;

				if (zones.length && (graph || area) && axis.min !== UNDEFINED) {
					// The use of the Color Threshold assumes there are no gaps
					// so it is safe to hide the original graph and area
					if (graph) {
						graph.hide();
					}
					if (area) { 
						area.hide(); 
					}

					// Create the clips
					extremes = axis.getExtremes();
					each(zones, function (threshold, i) {

						translatedFrom = reversed ? 
							(horiz ? chart.plotWidth : 0) : 
							(horiz ? 0 : axis.toPixels(extremes.min));
						translatedFrom = mathMin(mathMax(pick(translatedTo, translatedFrom), 0), chartSizeMax);
						translatedTo = mathMin(mathMax(mathRound(axis.toPixels(pick(threshold.value, extremes.max), true)), 0), chartSizeMax);
						
						if (ignoreZones) {
							translatedFrom = translatedTo = axis.toPixels(extremes.max);
						}

						pxRange = Math.abs(translatedFrom - translatedTo);
						pxPosMin = mathMin(translatedFrom, translatedTo);
						pxPosMax = mathMax(translatedFrom, translatedTo);
						if (axis.isXAxis) {
							clipAttr = {
								x: inverted ? pxPosMax : pxPosMin,
								y: 0,
								width: pxRange, 
								height: chartSizeMax
							};
							if (!horiz) {
								clipAttr.x = chart.plotHeight - clipAttr.x;
							}
						} else {
							clipAttr = {
								x: 0,
								y: inverted ? pxPosMax : pxPosMin,
								width: chartSizeMax, 
								height: pxRange
							};					
							if (horiz) {
								clipAttr.y = chart.plotWidth - clipAttr.y;
							}
						}

						/// VML SUPPPORT
						if (chart.inverted && renderer.isVML) {
							if (axis.isXAxis) {			
								clipAttr = {
									x: 0,
									y: reversed ? pxPosMin : pxPosMax,
									height: clipAttr.width,
									width: chart.chartWidth
								};		
							} else {				
								clipAttr = {
									x: clipAttr.y - chart.plotLeft - chart.spacingBox.x,
									y: 0,
									width: clipAttr.height,
									height: chart.chartHeight
								};	
							}				
						}
						/// END OF VML SUPPORT

						if (clips[i]) {
							clips[i].animate(clipAttr);
						} else {
							clips[i] = renderer.clipRect(clipAttr);

							if (graph) {
								series['zoneGraph' + i].clip(clips[i]);
							}

							if (area) {
								series['zoneArea' + i].clip(clips[i]);
							}
						}
						// if this zone extends out of the axis, ignore the others
						ignoreZones = threshold.value > extremes.max;
					});
					this.clips = clips;
				}
			},

			/**
			 * Initialize and perform group inversion on series.group and series.markerGroup
			 */
			invertGroups: function () {
				var series = this,
					chart = series.chart;

				// Pie, go away (#1736)
				if (!series.xAxis) {
					return;
				}

				// A fixed size is needed for inversion to work
				function setInvert() {
					var size = {
						width: series.yAxis.len,
						height: series.xAxis.len
					};

					each(['group', 'markerGroup'], function (groupName) {
						if (series[groupName]) {
							series[groupName].attr(size).invert();
						}
					});
				}

				addEvent(chart, 'resize', setInvert); // do it on resize
				addEvent(series, 'destroy', function () {
					removeEvent(chart, 'resize', setInvert);
				});

				// Do it now
				setInvert(); // do it now

				// On subsequent render and redraw, just do setInvert without setting up events again
				series.invertGroups = setInvert;
			},

			/**
			 * General abstraction for creating plot groups like series.group, series.dataLabelsGroup and
			 * series.markerGroup. On subsequent calls, the group will only be adjusted to the updated plot size.
			 */
			plotGroup: function (prop, name, visibility, zIndex, parent) {
				var group = this[prop],
					isNew = !group;

				// Generate it on first call
				if (isNew) {
					this[prop] = group = this.chart.renderer.g(name)
						.attr({
							visibility: visibility,
							zIndex: zIndex || 0.1 // IE8 needs this
						})
						.add(parent);
				}
				// Place it on first and subsequent (redraw) calls
				group[isNew ? 'attr' : 'animate'](this.getPlotBox());
				return group;
			},

			/**
			 * Get the translation and scale for the plot area of this series
			 */
			getPlotBox: function () {
				var chart = this.chart,
					xAxis = this.xAxis,
					yAxis = this.yAxis;

				// Swap axes for inverted (#2339)
				if (chart.inverted) {
					xAxis = yAxis;
					yAxis = this.xAxis;
				}
				return {
					translateX: xAxis ? xAxis.left : chart.plotLeft,
					translateY: yAxis ? yAxis.top : chart.plotTop,
					scaleX: 1, // #1623
					scaleY: 1
				};
			},

			/**
			 * Render the graph and markers
			 */
			render: function () {
				var series = this,
					chart = series.chart,
					group,
					options = series.options,
					animation = options.animation,
					// Animation doesn't work in IE8 quirks when the group div is hidden,
					// and looks bad in other oldIE
					animDuration = (animation && !!series.animate && chart.renderer.isSVG && pick(animation.duration, 500)) || 0,
					visibility = series.visible ? VISIBLE : HIDDEN,
					zIndex = options.zIndex,
					hasRendered = series.hasRendered,
					chartSeriesGroup = chart.seriesGroup;

				// the group
				group = series.plotGroup(
					'group',
					'series',
					visibility,
					zIndex,
					chartSeriesGroup
				);

				series.markerGroup = series.plotGroup(
					'markerGroup',
					'markers',
					visibility,
					zIndex,
					chartSeriesGroup
				);

				// initiate the animation
				if (animDuration) {
					series.animate(true);
				}

				// cache attributes for shapes
				series.getAttribs();

				// SVGRenderer needs to know this before drawing elements (#1089, #1795)
				group.inverted = series.isCartesian ? chart.inverted : false;

				// draw the graph if any
				if (series.drawGraph) {
					series.drawGraph();
					series.applyZones();
				}

				each(series.points, function (point) {
					if (point.redraw) {
						point.redraw();
					}
				});

				// draw the data labels (inn pies they go before the points)
				if (series.drawDataLabels) {
					series.drawDataLabels();
				}

				// draw the points
				if (series.visible) {
					series.drawPoints();
				}


				// draw the mouse tracking area
				if (series.drawTracker && series.options.enableMouseTracking !== false) {
					series.drawTracker();
				}

				// Handle inverted series and tracker groups
				if (chart.inverted) {
					series.invertGroups();
				}

				// Initial clipping, must be defined after inverting groups for VML. Applies to columns etc. (#3839).
				if (options.clip !== false && !series.sharedClipKey && !hasRendered) {
					group.clip(chart.clipRect);
				}

				// Run the animation
				if (animDuration) {
					series.animate();
				} 

				// Call the afterAnimate function on animation complete (but don't overwrite the animation.complete option
				// which should be available to the user).
				if (!hasRendered) {
					if (animDuration) {
						series.animationTimeout = setTimeout(function () {
							series.afterAnimate();
						}, animDuration);
					} else {
						series.afterAnimate();
					}
				}

				series.isDirty = series.isDirtyData = false; // means data is in accordance with what you see
				// (See #322) series.isDirty = series.isDirtyData = false; // means data is in accordance with what you see
				series.hasRendered = true;
			},

			/**
			 * Redraw the series after an update in the axes.
			 */
			redraw: function () {
				var series = this,
					chart = series.chart,
					wasDirtyData = series.isDirtyData, // cache it here as it is set to false in render, but used after
					wasDirty = series.isDirty,
					group = series.group,
					xAxis = series.xAxis,
					yAxis = series.yAxis;

				// reposition on resize
				if (group) {
					if (chart.inverted) {
						group.attr({
							width: chart.plotWidth,
							height: chart.plotHeight
						});
					}

					group.animate({
						translateX: pick(xAxis && xAxis.left, chart.plotLeft),
						translateY: pick(yAxis && yAxis.top, chart.plotTop)
					});
				}

				series.translate();
				series.render();
				if (wasDirtyData) {
					fireEvent(series, 'updatedData');
				}
				if (wasDirty || wasDirtyData) {			// #3945 recalculate the kdtree when dirty
					delete this.kdTree; // #3868 recalculate the kdtree with dirty data
				}
			},

			/**
			 * KD Tree && PointSearching Implementation
			 */

			kdDimensions: 1,
			kdAxisArray: ['clientX', 'plotY'],

			searchPoint: function (e, compareX) {
				var series = this,
					xAxis = series.xAxis,
					yAxis = series.yAxis,
					inverted = series.chart.inverted;
				
				return this.searchKDTree({
					clientX: inverted ? xAxis.len - e.chartY + xAxis.pos : e.chartX - xAxis.pos,
					plotY: inverted ? yAxis.len - e.chartX + yAxis.pos : e.chartY - yAxis.pos
				}, compareX);
			},

			buildKDTree: function () {
				var series = this,
					dimensions = series.kdDimensions;

				// Internal function
				function _kdtree(points, depth, dimensions) {
					var axis, median, length = points && points.length;

					if (length) {

						// alternate between the axis
						axis = series.kdAxisArray[depth % dimensions];

						// sort point array
						points.sort(function(a, b) {
							return a[axis] - b[axis];
						});
					
						median = Math.floor(length / 2);
						
						// build and return nod
						return {
							point: points[median],
							left: _kdtree(points.slice(0, median), depth + 1, dimensions),
							right: _kdtree(points.slice(median + 1), depth + 1, dimensions)
						};
					
					}
				}

				// Start the recursive build process with a clone of the points array and null points filtered out (#3873)
				function startRecursive() {
					var points = grep(series.points || [], function (point) { // #4390
						return point.y !== null;
					});

					series.kdTree = _kdtree(points, dimensions, dimensions);
				}
				delete series.kdTree;
				
				if (series.options.kdSync) {  // For testing tooltips, don't build async
					startRecursive();
				} else {
					setTimeout(startRecursive);
				}
			},

			searchKDTree: function (point, compareX) {
				var series = this,
					kdX = this.kdAxisArray[0],
					kdY = this.kdAxisArray[1],
					kdComparer = compareX ? 'distX' : 'dist';

				// Set the one and two dimensional distance on the point object
				function setDistance(p1, p2) {
					var x = (defined(p1[kdX]) && defined(p2[kdX])) ? Math.pow(p1[kdX] - p2[kdX], 2) : null,
						y = (defined(p1[kdY]) && defined(p2[kdY])) ? Math.pow(p1[kdY] - p2[kdY], 2) : null,
						r = (x || 0) + (y || 0);

					p2.dist = defined(r) ? Math.sqrt(r) : Number.MAX_VALUE;
					p2.distX = defined(x) ? Math.sqrt(x) : Number.MAX_VALUE;
				}
				function _search(search, tree, depth, dimensions) {
					var point = tree.point,
						axis = series.kdAxisArray[depth % dimensions],
						tdist,
						sideA,
						sideB,
						ret = point,
						nPoint1,
						nPoint2;
					
					setDistance(search, point);

					// Pick side based on distance to splitting point
					tdist = search[axis] - point[axis];
					sideA = tdist < 0 ? 'left' : 'right';
					sideB = tdist < 0 ? 'right' : 'left';

					// End of tree
					if (tree[sideA]) {
						nPoint1 =_search(search, tree[sideA], depth + 1, dimensions);

						ret = (nPoint1[kdComparer] < ret[kdComparer] ? nPoint1 : point);
					} 
					if (tree[sideB]) {
						// compare distance to current best to splitting point to decide wether to check side B or not
						if (Math.sqrt(tdist * tdist) < ret[kdComparer]) {
							nPoint2 = _search(search, tree[sideB], depth + 1, dimensions);
							ret = (nPoint2[kdComparer] < ret[kdComparer] ? nPoint2 : ret);
						}
					}
					
					return ret;
				}

				if (!this.kdTree) {
					this.buildKDTree();
				}

				if (this.kdTree) {
					return _search(point, 
						this.kdTree, this.kdDimensions, this.kdDimensions);
				}
			}

		}; // end Series prototype

		/**
		 * The class for stack items
		 */
		function StackItem(axis, options, isNegative, x, stackOption) {
			
			var inverted = axis.chart.inverted;

			this.axis = axis;

			// Tells if the stack is negative
			this.isNegative = isNegative;

			// Save the options to be able to style the label
			this.options = options;

			// Save the x value to be able to position the label later
			this.x = x;

			// Initialize total value
			this.total = null;

			// This will keep each points' extremes stored by series.index and point index
			this.points = {};

			// Save the stack option on the series configuration object, and whether to treat it as percent
			this.stack = stackOption;

			// The align options and text align varies on whether the stack is negative and
			// if the chart is inverted or not.
			// First test the user supplied value, then use the dynamic.
			this.alignOptions = {
				align: options.align || (inverted ? (isNegative ? 'left' : 'right') : 'center'),
				verticalAlign: options.verticalAlign || (inverted ? 'middle' : (isNegative ? 'bottom' : 'top')),
				y: pick(options.y, inverted ? 4 : (isNegative ? 14 : -6)),
				x: pick(options.x, inverted ? (isNegative ? -6 : 6) : 0)
			};

			this.textAlign = options.textAlign || (inverted ? (isNegative ? 'right' : 'left') : 'center');
		}

		StackItem.prototype = {
			destroy: function () {
				destroyObjectProperties(this, this.axis);
			},

			/**
			 * Renders the stack total label and adds it to the stack label group.
			 */
			render: function (group) {
				var options = this.options,
					formatOption = options.format,
					str = formatOption ?
						format(formatOption, this) : 
						options.formatter.call(this);  // format the text in the label

				// Change the text to reflect the new total and set visibility to hidden in case the serie is hidden
				if (this.label) {
					this.label.attr({text: str, visibility: HIDDEN});
				// Create new label
				} else {
					this.label =
						this.axis.chart.renderer.text(str, null, null, options.useHTML)		// dummy positions, actual position updated with setOffset method in columnseries
							.css(options.style)				// apply style
							.attr({
								align: this.textAlign,				// fix the text-anchor
								rotation: options.rotation,	// rotation
								visibility: HIDDEN					// hidden until setOffset is called
							})				
							.add(group);							// add to the labels-group
				}
			},

			/**
			 * Sets the offset that the stack has from the x value and repositions the label.
			 */
			setOffset: function (xOffset, xWidth) {
				var stackItem = this,
					axis = stackItem.axis,
					chart = axis.chart,
					inverted = chart.inverted,
					reversed = axis.reversed,
					neg = (this.isNegative && !reversed) || (!this.isNegative && reversed), // #4056
					y = axis.translate(axis.usePercentage ? 100 : this.total, 0, 0, 0, 1), // stack value translated mapped to chart coordinates
					yZero = axis.translate(0),						// stack origin
					h = mathAbs(y - yZero),							// stack height
					x = chart.xAxis[0].translate(this.x) + xOffset,	// stack x position
					plotHeight = chart.plotHeight,
					stackBox = {	// this is the box for the complete stack
						x: inverted ? (neg ? y : y - h) : x,
						y: inverted ? plotHeight - x - xWidth : (neg ? (plotHeight - y - h) : plotHeight - y),
						width: inverted ? h : xWidth,
						height: inverted ? xWidth : h
					},
					label = this.label,
					alignAttr;
				
				if (label) {
					label.align(this.alignOptions, null, stackBox);	// align the label to the box
						
					// Set visibility (#678)
					alignAttr = label.alignAttr;
					label[this.options.crop === false || chart.isInsidePlot(alignAttr.x, alignAttr.y) ? 'show' : 'hide'](true);
				}
			}
		};

		/**
		 * Generate stacks for each series and calculate stacks total values
		 */
		Chart.prototype.getStacks = function () {
			var chart = this;

			// reset stacks for each yAxis
			each(chart.yAxis, function (axis) {
				if (axis.stacks && axis.hasVisibleSeries) {
					axis.oldStacks = axis.stacks;
				}
			});

			each(chart.series, function (series) {
				if (series.options.stacking && (series.visible === true || chart.options.chart.ignoreHiddenSeries === false)) {
					series.stackKey = series.type + pick(series.options.stack, '');
				}
			});
		};


		// Stacking methods defined on the Axis prototype

		/**
		 * Build the stacks from top down
		 */
		Axis.prototype.buildStacks = function () {
			var series = this.series,
				reversedStacks = pick(this.options.reversedStacks, true),
				i = series.length;
			if (!this.isXAxis) {
				this.usePercentage = false;
				while (i--) {
					series[reversedStacks ? i : series.length - i - 1].setStackedPoints();
				}
				// Loop up again to compute percent stack
				if (this.usePercentage) {
					for (i = 0; i < series.length; i++) {
						series[i].setPercentStacks();
					}
				}
			}
		};

		Axis.prototype.renderStackTotals = function () {
			var axis = this,
				chart = axis.chart,
				renderer = chart.renderer,
				stacks = axis.stacks,
				stackKey, 
				oneStack, 
				stackCategory,
				stackTotalGroup = axis.stackTotalGroup;

			// Create a separate group for the stack total labels
			if (!stackTotalGroup) {
				axis.stackTotalGroup = stackTotalGroup =
					renderer.g('stack-labels')
						.attr({
							visibility: VISIBLE,
							zIndex: 6
						})
						.add();
			}

			// plotLeft/Top will change when y axis gets wider so we need to translate the
			// stackTotalGroup at every render call. See bug #506 and #516
			stackTotalGroup.translate(chart.plotLeft, chart.plotTop);

			// Render each stack total
			for (stackKey in stacks) {
				oneStack = stacks[stackKey];
				for (stackCategory in oneStack) {
					oneStack[stackCategory].render(stackTotalGroup);
				}
			}
		};

		/**
		 * Set all the stacks to initial states and destroy unused ones.
		 */
		Axis.prototype.resetStacks = function () {
			var stacks = this.stacks,
				type,
				i;
			if (!this.isXAxis) {
				for (type in stacks) {
					for (i in stacks[type]) {

						// Clean up memory after point deletion (#1044, #4320)
						if (stacks[type][i].touched < this.stacksTouched) {
							stacks[type][i].destroy();
							delete stacks[type][i];

						// Reset stacks
						} else {
							stacks[type][i].total = null;
							stacks[type][i].cum = 0;
						}
					}
				}
			}
		};

		Axis.prototype.cleanStacks = function () {
			var stacks, type, i;

			if (!this.isXAxis) {
				if (this.oldStacks) {
					stacks = this.stacks = this.oldStacks;
				}

				// reset stacks
				for (type in stacks) {
					for (i in stacks[type]) {
						stacks[type][i].cum = stacks[type][i].total;
					}
				}
			}
		};


		// Stacking methods defnied for Series prototype

		/**
		 * Adds series' points value to corresponding stack
		 */
		Series.prototype.setStackedPoints = function () {
			if (!this.options.stacking || (this.visible !== true && this.chart.options.chart.ignoreHiddenSeries !== false)) {
				return;
			}

			var series = this,
				xData = series.processedXData,
				yData = series.processedYData,
				stackedYData = [],
				yDataLength = yData.length,
				seriesOptions = series.options,
				threshold = seriesOptions.threshold,
				stackThreshold = seriesOptions.startFromThreshold ? threshold : 0,
				stackOption = seriesOptions.stack,
				stacking = seriesOptions.stacking,
				stackKey = series.stackKey,
				negKey = '-' + stackKey,
				negStacks = series.negStacks,
				yAxis = series.yAxis,
				stacks = yAxis.stacks,
				oldStacks = yAxis.oldStacks,
				isNegative,
				stack,
				other,
				key,
				pointKey,
				i,
				x,
				y;


			yAxis.stacksTouched += 1;

			// loop over the non-null y values and read them into a local array
			for (i = 0; i < yDataLength; i++) {
				x = xData[i];
				y = yData[i];
				pointKey = series.index + ',' + i;

				// Read stacked values into a stack based on the x value,
				// the sign of y and the stack key. Stacking is also handled for null values (#739)
				isNegative = negStacks && y < (stackThreshold ? 0 : threshold);
				key = isNegative ? negKey : stackKey;

				// Create empty object for this stack if it doesn't exist yet
				if (!stacks[key]) {
					stacks[key] = {};
				}

				// Initialize StackItem for this x
				if (!stacks[key][x]) {
					if (oldStacks[key] && oldStacks[key][x]) {
						stacks[key][x] = oldStacks[key][x];
						stacks[key][x].total = null;
					} else {
						stacks[key][x] = new StackItem(yAxis, yAxis.options.stackLabels, isNegative, x, stackOption);
					}
				}

				// If the StackItem doesn't exist, create it first
				stack = stacks[key][x];
				//stack.points[pointKey] = [stack.cum || stackThreshold];
				stack.points[pointKey] = [pick(stack.cum, stackThreshold)];
				stack.touched = yAxis.stacksTouched;
				

				// Add value to the stack total
				if (stacking === 'percent') {

					// Percent stacked column, totals are the same for the positive and negative stacks
					other = isNegative ? stackKey : negKey;
					if (negStacks && stacks[other] && stacks[other][x]) {
						other = stacks[other][x];
						stack.total = other.total = mathMax(other.total, stack.total) + mathAbs(y) || 0;

					// Percent stacked areas
					} else {
						stack.total = correctFloat(stack.total + (mathAbs(y) || 0));
					}
				} else {
					stack.total = correctFloat(stack.total + (y || 0));
				}

				stack.cum = pick(stack.cum, stackThreshold) + (y || 0);

				stack.points[pointKey].push(stack.cum);
				stackedYData[i] = stack.cum;

			}

			if (stacking === 'percent') {
				yAxis.usePercentage = true;
			}

			this.stackedYData = stackedYData; // To be used in getExtremes

			// Reset old stacks
			yAxis.oldStacks = {};
		};

		/**
		 * Iterate over all stacks and compute the absolute values to percent
		 */
		Series.prototype.setPercentStacks = function () {
			var series = this,
				stackKey = series.stackKey,
				stacks = series.yAxis.stacks,
				processedXData = series.processedXData;

			each([stackKey, '-' + stackKey], function (key) {
				var i = processedXData.length,
					x,
					stack,
					pointExtremes,
					totalFactor;

				while (i--) {
					x = processedXData[i];
					stack = stacks[key] && stacks[key][x];
					pointExtremes = stack && stack.points[series.index + ',' + i];
					if (pointExtremes) {
						totalFactor = stack.total ? 100 / stack.total : 0;
						pointExtremes[0] = correctFloat(pointExtremes[0] * totalFactor); // Y bottom value
						pointExtremes[1] = correctFloat(pointExtremes[1] * totalFactor); // Y value
						series.stackedYData[i] = pointExtremes[1];
					}
				}
			});
		};

		// Extend the Chart prototype for dynamic methods
		extend(Chart.prototype, {

			/**
			 * Add a series dynamically after  time
			 *
			 * @param {Object} options The config options
			 * @param {Boolean} redraw Whether to redraw the chart after adding. Defaults to true.
			 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
			 *    configuration
			 *
			 * @return {Object} series The newly created series object
			 */
			addSeries: function (options, redraw, animation) {
				var series,
					chart = this;

				if (options) {
					redraw = pick(redraw, true); // defaults to true

					fireEvent(chart, 'addSeries', { options: options }, function () {
						series = chart.initSeries(options);

						chart.isDirtyLegend = true; // the series array is out of sync with the display
						chart.linkSeries();
						if (redraw) {
							chart.redraw(animation);
						}
					});
				}

				return series;
			},

			/**
		     * Add an axis to the chart
		     * @param {Object} options The axis option
		     * @param {Boolean} isX Whether it is an X axis or a value axis
		     */
			addAxis: function (options, isX, redraw, animation) {
				var key = isX ? 'xAxis' : 'yAxis',
					chartOptions = this.options,
					axis;

				/*jslint unused: false*/
				axis = new Axis(this, merge(options, {
					index: this[key].length,
					isX: isX
				}));
				/*jslint unused: true*/

				// Push the new axis options to the chart options
				chartOptions[key] = splat(chartOptions[key] || {});
				chartOptions[key].push(options);

				if (pick(redraw, true)) {
					this.redraw(animation);
				}
			},

			/**
			 * Dim the chart and show a loading text or symbol
			 * @param {String} str An optional text to show in the loading label instead of the default one
			 */
			showLoading: function (str) {
				var chart = this,
					options = chart.options,
					loadingDiv = chart.loadingDiv,
					loadingOptions = options.loading,
					setLoadingSize = function () {
						if (loadingDiv) {
							css(loadingDiv, {
								left: chart.plotLeft + PX,
								top: chart.plotTop + PX,
								width: chart.plotWidth + PX,
								height: chart.plotHeight + PX
							});
						}
					};

				// create the layer at the first call
				if (!loadingDiv) {
					chart.loadingDiv = loadingDiv = createElement(DIV, {
						className: PREFIX + 'loading'
					}, extend(loadingOptions.style, {
						zIndex: 10,
						display: NONE
					}), chart.container);

					chart.loadingSpan = createElement(
						'span',
						null,
						loadingOptions.labelStyle,
						loadingDiv
					);
					addEvent(chart, 'redraw', setLoadingSize); // #1080
				}

				// update text
				chart.loadingSpan.innerHTML = str || options.lang.loading;

				// show it
				if (!chart.loadingShown) {
					css(loadingDiv, {
						opacity: 0,
						display: ''				
					});
					animate(loadingDiv, {
						opacity: loadingOptions.style.opacity
					}, {
						duration: loadingOptions.showDuration || 0
					});
					chart.loadingShown = true;
				}
				setLoadingSize();
			},

			/**
			 * Hide the loading layer
			 */
			hideLoading: function () {
				var options = this.options,
					loadingDiv = this.loadingDiv;

				if (loadingDiv) {
					animate(loadingDiv, {
						opacity: 0
					}, {
						duration: options.loading.hideDuration || 100,
						complete: function () {
							css(loadingDiv, { display: NONE });
						}
					});
				}
				this.loadingShown = false;
			}
		});

		// extend the Point prototype for dynamic methods
		extend(Point.prototype, {
			/**
			 * Update the point with new options (typically x/y data) and optionally redraw the series.
			 *
			 * @param {Object} options Point options as defined in the series.data array
			 * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
			 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
			 *    configuration
			 *
			 */
			update: function (options, redraw, animation, runEvent) {
				var point = this,
					series = point.series,
					graphic = point.graphic,
					i,
					chart = series.chart,
					seriesOptions = series.options,
					names = series.xAxis && series.xAxis.names;

				redraw = pick(redraw, true);

				function update() {

					point.applyOptions(options);

					// Update visuals
					if (point.y === null && graphic) { // #4146
						point.graphic = graphic.destroy();
					}
					if (isObject(options) && !isArray(options)) {
						// Defer the actual redraw until getAttribs has been called (#3260)
						point.redraw = function () {
							if (graphic && graphic.element) {
								if (options && options.marker && options.marker.symbol) {
									point.graphic = graphic.destroy();
								}
							}
							if (options && options.dataLabels && point.dataLabel) { // #2468
								point.dataLabel = point.dataLabel.destroy();
							}
							point.redraw = null;
						};
					}

					// record changes in the parallel arrays
					i = point.index;
					series.updateParallelArrays(point, i);
					if (names && point.name) {
						names[point.x] = point.name;
					}

					seriesOptions.data[i] = point.options;

					// redraw
					series.isDirty = series.isDirtyData = true;
					if (!series.fixedBox && series.hasCartesianSeries) { // #1906, #2320
						chart.isDirtyBox = true;
					}

					if (seriesOptions.legendType === 'point') { // #1831, #1885
						chart.isDirtyLegend = true;
					}
					if (redraw) {
						chart.redraw(animation);
					}
				}

				// Fire the event with a default handler of doing the update
				if (runEvent === false) { // When called from setData
					update();
				} else {
					point.firePointEvent('update', { options: options }, update);
				}
			},

			/**
			 * Remove a point and optionally redraw the series and if necessary the axes
			 * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
			 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
			 *    configuration
			 */
			remove: function (redraw, animation) {
				this.series.removePoint(inArray(this, this.series.data), redraw, animation);
			}
		});

		// Extend the series prototype for dynamic methods
		extend(Series.prototype, {
			/**
			 * Add a point dynamically after chart load time
			 * @param {Object} options Point options as given in series.data
			 * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
			 * @param {Boolean} shift If shift is true, a point is shifted off the start
			 *    of the series as one is appended to the end.
			 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
			 *    configuration
			 */
			addPoint: function (options, redraw, shift, animation) {
				var series = this,
					seriesOptions = series.options,
					data = series.data,
					graph = series.graph,
					area = series.area,
					chart = series.chart,
					names = series.xAxis && series.xAxis.names,
					currentShift = (graph && graph.shift) || 0,
					shiftShapes = ['graph', 'area'],
					dataOptions = seriesOptions.data,
					point,
					isInTheMiddle,
					xData = series.xData,
					i,
					x;

				setAnimation(animation, chart);

				// Make graph animate sideways
				if (shift) {
					i = series.zones.length;
					while (i--) {
						shiftShapes.push('zoneGraph' + i, 'zoneArea' + i);
					}
					each(shiftShapes, function (shape) {
						if (series[shape]) {
							series[shape].shift = currentShift + 1;
						}
					});
				}
				if (area) {
					area.isArea = true; // needed in animation, both with and without shift
				}

				// Optional redraw, defaults to true
				redraw = pick(redraw, true);

				// Get options and push the point to xData, yData and series.options. In series.generatePoints
				// the Point instance will be created on demand and pushed to the series.data array.
				point = { series: series };
				series.pointClass.prototype.applyOptions.apply(point, [options]);
				x = point.x;

				// Get the insertion point
				i = xData.length;
				if (series.requireSorting && x < xData[i - 1]) {
					isInTheMiddle = true;
					while (i && xData[i - 1] > x) {
						i--;
					}
				}

				series.updateParallelArrays(point, 'splice', i, 0, 0); // insert undefined item
				series.updateParallelArrays(point, i); // update it

				if (names && point.name) {
					names[x] = point.name;
				}
				dataOptions.splice(i, 0, options);

				if (isInTheMiddle) {
					series.data.splice(i, 0, null);
					series.processData();
				}

				// Generate points to be added to the legend (#1329)
				if (seriesOptions.legendType === 'point') {
					series.generatePoints();
				}

				// Shift the first point off the parallel arrays
				// todo: consider series.removePoint(i) method
				if (shift) {
					if (data[0] && data[0].remove) {
						data[0].remove(false);
					} else {
						data.shift();
						series.updateParallelArrays(point, 'shift');

						dataOptions.shift();
					}
				}

				// redraw
				series.isDirty = true;
				series.isDirtyData = true;
				if (redraw) {
					series.getAttribs(); // #1937
					chart.redraw();
				}
			},

			/**
			 * Remove a point (rendered or not), by index
			 */
			removePoint: function (i, redraw, animation) {

				var series = this,
					data = series.data,
					point = data[i],
					points = series.points,
					chart = series.chart,
					remove = function () {

						if (data.length === points.length) {
							points.splice(i, 1);
						}
						data.splice(i, 1);
						series.options.data.splice(i, 1);
						series.updateParallelArrays(point || { series: series }, 'splice', i, 1);

						if (point) {
							point.destroy();
						}

						// redraw
						series.isDirty = true;
						series.isDirtyData = true;
						if (redraw) {
							chart.redraw();
						}
					};

				setAnimation(animation, chart);
				redraw = pick(redraw, true);

				// Fire the event with a default handler of removing the point
				if (point) {
					point.firePointEvent('remove', null, remove);
				} else {
					remove();
				}
			},

			/**
			 * Remove a series and optionally redraw the chart
			 *
			 * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
			 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
			 *    configuration
			 */

			remove: function (redraw, animation) {
				var series = this,
					chart = series.chart;
				redraw = pick(redraw, true);

				if (!series.isRemoving) {  /* prevent triggering native event in jQuery
						(calling the remove function from the remove event) */
					series.isRemoving = true;

					// fire the event with a default handler of removing the point
					fireEvent(series, 'remove', null, function () {


						// destroy elements
						series.destroy();


						// redraw
						chart.isDirtyLegend = chart.isDirtyBox = true;
						chart.linkSeries();

						if (redraw) {
							chart.redraw(animation);
						}
					});

				}
				series.isRemoving = false;
			},

			/**
			 * Update the series with a new set of options
			 */
			update: function (newOptions, redraw) {
				var series = this,
					chart = this.chart,
					// must use user options when changing type because this.options is merged
					// in with type specific plotOptions
					oldOptions = this.userOptions,
					oldType = this.type,
					proto = seriesTypes[oldType].prototype,
					preserve = ['group', 'markerGroup', 'dataLabelsGroup'],
					n;

				// If we're changing type or zIndex, create new groups (#3380, #3404)
				if ((newOptions.type && newOptions.type !== oldType) || newOptions.zIndex !== undefined) {
					preserve.length = 0;
				}

				// Make sure groups are not destroyed (#3094)
				each(preserve, function (prop) {
					preserve[prop] = series[prop];
					delete series[prop];
				});

				// Do the merge, with some forced options
				newOptions = merge(oldOptions, {
					animation: false,
					index: this.index,
					pointStart: this.xData[0] // when updating after addPoint
				}, { data: this.options.data }, newOptions);

				// Destroy the series and delete all properties. Reinsert all methods 
				// and properties from the new type prototype (#2270, #3719)
				this.remove(false);
				for (n in proto) {
					this[n] = UNDEFINED;
				}
				extend(this, seriesTypes[newOptions.type || oldType].prototype);

				// Re-register groups (#3094)
				each(preserve, function (prop) {
					series[prop] = preserve[prop];
				});

				this.init(chart, newOptions);
				chart.linkSeries(); // Links are lost in this.remove (#3028)
				if (pick(redraw, true)) {
					chart.redraw(false);
				}
			}
		});

		// Extend the Axis.prototype for dynamic methods
		extend(Axis.prototype, {

			/**
			 * Update the axis with a new options structure
			 */
			update: function (newOptions, redraw) {
				var chart = this.chart;

				newOptions = chart.options[this.coll][this.options.index] = merge(this.userOptions, newOptions);

				this.destroy(true);
				this._addedPlotLB = this.chart._labelPanes = UNDEFINED; // #1611, #2887, #4314

				this.init(chart, extend(newOptions, { events: UNDEFINED }));

				chart.isDirtyBox = true;
				if (pick(redraw, true)) {
					chart.redraw();
				}
			},

			/**
		     * Remove the axis from the chart
		     */
			remove: function (redraw) {
				var chart = this.chart,
					key = this.coll, // xAxis or yAxis
					axisSeries = this.series,
					i = axisSeries.length;

				// Remove associated series (#2687)
				while (i--) {
					if (axisSeries[i]) {
						axisSeries[i].remove(false);
					}
				}

				// Remove the axis
				erase(chart.axes, this);
				erase(chart[key], this);
				chart.options[key].splice(this.options.index, 1);
				each(chart[key], function (axis, i) { // Re-index, #1706
					axis.options.index = i;
				});
				this.destroy();
				chart.isDirtyBox = true;

				if (pick(redraw, true)) {
					chart.redraw();
				}
			},

			/**
			 * Update the axis title by options
			 */
			setTitle: function (newTitleOptions, redraw) {
				this.update({ title: newTitleOptions }, redraw);
			},

			/**
			 * Set new axis categories and optionally redraw
			 * @param {Array} categories
			 * @param {Boolean} redraw
			 */
			setCategories: function (categories, redraw) {
				this.update({ categories: categories }, redraw);
			}

		});


		/**
		 * LineSeries object
		 */
		var LineSeries = extendClass(Series);
		seriesTypes.line = LineSeries;

		/**
		 * Set the default options for area
		 */
		defaultPlotOptions.area = merge(defaultSeriesOptions, {
			threshold: 0
			// trackByArea: false,
			// lineColor: null, // overrides color, but lets fillColor be unaltered
			// fillOpacity: 0.75,
			// fillColor: null
		});

		/**
		 * AreaSeries object
		 */
		var AreaSeries = extendClass(Series, {
			type: 'area',
			/**
			 * For stacks, don't split segments on null values. Instead, draw null values with 
			 * no marker. Also insert dummy points for any X position that exists in other series
			 * in the stack.
			 */ 
			getSegments: function () {
				var series = this,
					segments = [],
					segment = [],
					keys = [],
					xAxis = this.xAxis,
					yAxis = this.yAxis,
					stack = yAxis.stacks[this.stackKey],
					pointMap = {},
					plotX,
					plotY,
					points = this.points,
					connectNulls = this.options.connectNulls,
					i,
					x;

				if (this.options.stacking && !this.cropped) { // cropped causes artefacts in Stock, and perf issue
					// Create a map where we can quickly look up the points by their X value.
					for (i = 0; i < points.length; i++) {
						pointMap[points[i].x] = points[i];
					}

					// Sort the keys (#1651)
					for (x in stack) {
						if (stack[x].total !== null) { // nulled after switching between grouping and not (#1651, #2336)
							keys.push(+x);
						}
					}
					keys.sort(function (a, b) {
						return a - b;
					});

					each(keys, function (x) {
						var y = 0,
							stackPoint;

						if (connectNulls && (!pointMap[x] || pointMap[x].y === null)) { // #1836
							return;

						// The point exists, push it to the segment
						} else if (pointMap[x]) {
							segment.push(pointMap[x]);

						// There is no point for this X value in this series, so we 
						// insert a dummy point in order for the areas to be drawn
						// correctly.
						} else {

							// Loop down the stack to find the series below this one that has
							// a value (#1991)
							for (i = series.index; i <= yAxis.series.length; i++) {
								stackPoint = stack[x].points[i + ',' + x];
								if (stackPoint) {
									y = stackPoint[1];
									break;
								}
							}

							plotX = xAxis.translate(x);
							plotY = yAxis.toPixels(y, true);
							segment.push({ 
								y: null, 
								plotX: plotX,
								clientX: plotX, 
								plotY: plotY, 
								yBottom: plotY,
								onMouseOver: noop
							});
						}
					});

					if (segment.length) {
						segments.push(segment);
					}

				} else {
					Series.prototype.getSegments.call(this);
					segments = this.segments;
				}

				this.segments = segments;
			},
			
			/**
			 * Extend the base Series getSegmentPath method by adding the path for the area.
			 * This path is pushed to the series.areaPath property.
			 */
			getSegmentPath: function (segment) {
				
				var segmentPath = Series.prototype.getSegmentPath.call(this, segment), // call base method
					areaSegmentPath = [].concat(segmentPath), // work on a copy for the area path
					i,
					options = this.options,
					segLength = segmentPath.length,
					translatedThreshold = this.yAxis.getThreshold(options.threshold), // #2181
					yBottom;
				
				if (segLength === 3) { // for animation from 1 to two points
					areaSegmentPath.push(L, segmentPath[1], segmentPath[2]);
				}
				if (options.stacking && !this.closedStacks) {
					
					// Follow stack back. Todo: implement areaspline. A general solution could be to 
					// reverse the entire graphPath of the previous series, though may be hard with
					// splines and with series with different extremes
					for (i = segment.length - 1; i >= 0; i--) {

						yBottom = pick(segment[i].yBottom, translatedThreshold);
					
						// step line?
						if (i < segment.length - 1 && options.step) {
							areaSegmentPath.push(segment[i + 1].plotX, yBottom);
						}
						
						areaSegmentPath.push(segment[i].plotX, yBottom);
					}

				} else { // follow zero line back
					this.closeSegment(areaSegmentPath, segment, translatedThreshold);
				}
				this.areaPath = this.areaPath.concat(areaSegmentPath);
				return segmentPath;
			},
			
			/**
			 * Extendable method to close the segment path of an area. This is overridden in polar 
			 * charts.
			 */
			closeSegment: function (path, segment, translatedThreshold) {
				path.push(
					L,
					segment[segment.length - 1].plotX,
					translatedThreshold,
					L,
					segment[0].plotX,
					translatedThreshold
				);
			},
			
			/**
			 * Draw the graph and the underlying area. This method calls the Series base
			 * function and adds the area. The areaPath is calculated in the getSegmentPath
			 * method called from Series.prototype.drawGraph.
			 */
			drawGraph: function () {
				
				// Define or reset areaPath
				this.areaPath = [];
				
				// Call the base method
				Series.prototype.drawGraph.apply(this);
				
				// Define local variables
				var series = this,
					areaPath = this.areaPath,
					options = this.options,
					zones = this.zones,
					props = [['area', this.color, options.fillColor]]; // area name, main color, fill color
				
				each(zones, function (threshold, i) {
					props.push(['zoneArea' + i, threshold.color || series.color, threshold.fillColor || options.fillColor]);
				});
				each(props, function (prop) {
					var areaKey = prop[0],
						area = series[areaKey];
						
					// Create or update the area
					if (area) { // update
						area.animate({ d: areaPath });
			
					} else { // create
						series[areaKey] = series.chart.renderer.path(areaPath)
							.attr({
								fill: pick(
									prop[2],
									Color(prop[1]).setOpacity(pick(options.fillOpacity, 0.75)).get()
								),
								zIndex: 0 // #1069
							}).add(series.group);
					}
				});
			},

			drawLegendSymbol: LegendSymbolMixin.drawRectangle
		});

		seriesTypes.area = AreaSeries;
		/**
		 * Set the default options for spline
		 */
		defaultPlotOptions.spline = merge(defaultSeriesOptions);

		/**
		 * SplineSeries object
		 */
		var SplineSeries = extendClass(Series, {
			type: 'spline',

			/**
			 * Get the spline segment from a given point's previous neighbour to the given point
			 */
			getPointSpline: function (segment, point, i) {
				var smoothing = 1.5, // 1 means control points midway between points, 2 means 1/3 from the point, 3 is 1/4 etc
					denom = smoothing + 1,
					plotX = point.plotX,
					plotY = point.plotY,
					lastPoint = segment[i - 1],
					nextPoint = segment[i + 1],
					leftContX,
					leftContY,
					rightContX,
					rightContY,
					ret;

				// find control points
				if (lastPoint && nextPoint) {
				
					var lastX = lastPoint.plotX,
						lastY = lastPoint.plotY,
						nextX = nextPoint.plotX,
						nextY = nextPoint.plotY,
						correction;

					leftContX = (smoothing * plotX + lastX) / denom;
					leftContY = (smoothing * plotY + lastY) / denom;
					rightContX = (smoothing * plotX + nextX) / denom;
					rightContY = (smoothing * plotY + nextY) / denom;

					// have the two control points make a straight line through main point
					correction = ((rightContY - leftContY) * (rightContX - plotX)) /
						(rightContX - leftContX) + plotY - rightContY;

					leftContY += correction;
					rightContY += correction;

					// to prevent false extremes, check that control points are between
					// neighbouring points' y values
					if (leftContY > lastY && leftContY > plotY) {
						leftContY = mathMax(lastY, plotY);
						rightContY = 2 * plotY - leftContY; // mirror of left control point
					} else if (leftContY < lastY && leftContY < plotY) {
						leftContY = mathMin(lastY, plotY);
						rightContY = 2 * plotY - leftContY;
					}
					if (rightContY > nextY && rightContY > plotY) {
						rightContY = mathMax(nextY, plotY);
						leftContY = 2 * plotY - rightContY;
					} else if (rightContY < nextY && rightContY < plotY) {
						rightContY = mathMin(nextY, plotY);
						leftContY = 2 * plotY - rightContY;
					}

					// record for drawing in next point
					point.rightContX = rightContX;
					point.rightContY = rightContY;

				}
				
				// Visualize control points for debugging
				/*
				if (leftContX) {
					this.chart.renderer.circle(leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop, 2)
						.attr({
							stroke: 'red',
							'stroke-width': 1,
							fill: 'none'
						})
						.add();
					this.chart.renderer.path(['M', leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop,
						'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])
						.attr({
							stroke: 'red',
							'stroke-width': 1
						})
						.add();
					this.chart.renderer.circle(rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop, 2)
						.attr({
							stroke: 'green',
							'stroke-width': 1,
							fill: 'none'
						})
						.add();
					this.chart.renderer.path(['M', rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop,
						'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])
						.attr({
							stroke: 'green',
							'stroke-width': 1
						})
						.add();
				}
				*/

				// moveTo or lineTo
				if (!i) {
					ret = [M, plotX, plotY];
				} else { // curve from last point to this
					ret = [
						'C',
						lastPoint.rightContX || lastPoint.plotX,
						lastPoint.rightContY || lastPoint.plotY,
						leftContX || plotX,
						leftContY || plotY,
						plotX,
						plotY
					];
					lastPoint.rightContX = lastPoint.rightContY = null; // reset for updating series later
				}
				return ret;
			}
		});
		seriesTypes.spline = SplineSeries;

		/**
		 * Set the default options for areaspline
		 */
		defaultPlotOptions.areaspline = merge(defaultPlotOptions.area);

		/**
		 * AreaSplineSeries object
		 */
		var areaProto = AreaSeries.prototype,
			AreaSplineSeries = extendClass(SplineSeries, {
				type: 'areaspline',
				closedStacks: true, // instead of following the previous graph back, follow the threshold back
				
				// Mix in methods from the area series
				getSegmentPath: areaProto.getSegmentPath,
				closeSegment: areaProto.closeSegment,
				drawGraph: areaProto.drawGraph,
				drawLegendSymbol: LegendSymbolMixin.drawRectangle
			});

		seriesTypes.areaspline = AreaSplineSeries;

		/**
		 * Set the default options for column
		 */
		defaultPlotOptions.column = merge(defaultSeriesOptions, {
			borderColor: '#FFFFFF',
			//borderWidth: 1,
			borderRadius: 0,
			//colorByPoint: undefined,
			groupPadding: 0.2,
			//grouping: true,
			marker: null, // point options are specified in the base options
			pointPadding: 0.1,
			//pointWidth: null,
			minPointLength: 0,
			cropThreshold: 50, // when there are more points, they will not animate out of the chart on xAxis.setExtremes
			pointRange: null, // null means auto, meaning 1 in a categorized axis and least distance between points if not categories
			states: {
				hover: {
					brightness: 0.1,
					shadow: false,
					halo: false
				},
				select: {
					color: '#C0C0C0',
					borderColor: '#000000',
					shadow: false
				}
			},
			dataLabels: {
				align: null, // auto
				verticalAlign: null, // auto
				y: null
			},
			startFromThreshold: true, // docs: http://jsfiddle.net/highcharts/hz8fopan/14/
			stickyTracking: false,
			tooltip: {
				distance: 6
			},
			threshold: 0
		});

		/**
		 * ColumnSeries object
		 */
		var ColumnSeries = extendClass(Series, {
			type: 'column',
			pointAttrToOptions: { // mapping between SVG attributes and the corresponding options
				stroke: 'borderColor',
				fill: 'color',
				r: 'borderRadius'
			},
			cropShoulder: 0,
			directTouch: true, // When tooltip is not shared, this series (and derivatives) requires direct touch/hover. KD-tree does not apply.
			trackerGroups: ['group', 'dataLabelsGroup'],
			negStacks: true, // use separate negative stacks, unlike area stacks where a negative 
				// point is substracted from previous (#1910)
			
			/**
			 * Initialize the series
			 */
			init: function () {
				Series.prototype.init.apply(this, arguments);

				var series = this,
					chart = series.chart;

				// if the series is added dynamically, force redraw of other
				// series affected by a new column
				if (chart.hasRendered) {
					each(chart.series, function (otherSeries) {
						if (otherSeries.type === series.type) {
							otherSeries.isDirty = true;
						}
					});
				}
			},

			/**
			 * Return the width and x offset of the columns adjusted for grouping, groupPadding, pointPadding,
			 * pointWidth etc. 
			 */
			getColumnMetrics: function () {

				var series = this,
					options = series.options,
					xAxis = series.xAxis,
					yAxis = series.yAxis,
					reversedXAxis = xAxis.reversed,
					stackKey,
					stackGroups = {},
					columnIndex,
					columnCount = 0;

				// Get the total number of column type series.
				// This is called on every series. Consider moving this logic to a
				// chart.orderStacks() function and call it on init, addSeries and removeSeries
				if (options.grouping === false) {
					columnCount = 1;
				} else {
					each(series.chart.series, function (otherSeries) {
						var otherOptions = otherSeries.options,
							otherYAxis = otherSeries.yAxis;
						if (otherSeries.type === series.type && otherSeries.visible &&
								yAxis.len === otherYAxis.len && yAxis.pos === otherYAxis.pos) {  // #642, #2086
							if (otherOptions.stacking) {
								stackKey = otherSeries.stackKey;
								if (stackGroups[stackKey] === UNDEFINED) {
									stackGroups[stackKey] = columnCount++;
								}
								columnIndex = stackGroups[stackKey];
							} else if (otherOptions.grouping !== false) { // #1162
								columnIndex = columnCount++;
							}
							otherSeries.columnIndex = columnIndex;
						}
					});
				}

				var categoryWidth = mathMin(
						mathAbs(xAxis.transA) * (xAxis.ordinalSlope || options.pointRange || xAxis.closestPointRange || xAxis.tickInterval || 1), // #2610
						xAxis.len // #1535
					),
					groupPadding = categoryWidth * options.groupPadding,
					groupWidth = categoryWidth - 2 * groupPadding,
					pointOffsetWidth = groupWidth / columnCount,
					pointWidth = mathMin(
						options.maxPointWidth || xAxis.len,
						pick(options.pointWidth, pointOffsetWidth * (1 - 2 * options.pointPadding))
					),
					pointPadding = (pointOffsetWidth - pointWidth) / 2,
					colIndex = (reversedXAxis ? 
						columnCount - (series.columnIndex || 0) : // #1251
						series.columnIndex) || 0,
					pointXOffset = pointPadding + (groupPadding + colIndex *
						pointOffsetWidth - (categoryWidth / 2)) *
						(reversedXAxis ? -1 : 1);

				// Save it for reading in linked series (Error bars particularly)
				return (series.columnMetrics = { 
					width: pointWidth, 
					offset: pointXOffset 
				});
					
			},

			/**
			 * Translate each point to the plot area coordinate system and find shape positions
			 */
			translate: function () {
				var series = this,
					chart = series.chart,
					options = series.options,
					borderWidth = series.borderWidth = pick(
						options.borderWidth, 
						series.closestPointRange * series.xAxis.transA < 2 ? 0 : 1 // #3635
					),
					yAxis = series.yAxis,
					threshold = options.threshold,
					translatedThreshold = series.translatedThreshold = yAxis.getThreshold(threshold),
					minPointLength = pick(options.minPointLength, 5),
					metrics = series.getColumnMetrics(),
					pointWidth = metrics.width,
					seriesBarW = series.barW = mathMax(pointWidth, 1 + 2 * borderWidth), // postprocessed for border width
					pointXOffset = series.pointXOffset = metrics.offset,
					xCrisp = -(borderWidth % 2 ? 0.5 : 0),
					yCrisp = borderWidth % 2 ? 0.5 : 1;

				if (chart.inverted) {
					translatedThreshold -= 0.5; // #3355
					if (chart.renderer.isVML) {
						yCrisp += 1;
					}
				}

				// When the pointPadding is 0, we want the columns to be packed tightly, so we allow individual
				// columns to have individual sizes. When pointPadding is greater, we strive for equal-width
				// columns (#2694).
				if (options.pointPadding) {
					seriesBarW = mathCeil(seriesBarW);
				}

				Series.prototype.translate.apply(series);

				// Record the new values
				each(series.points, function (point) {
					var yBottom = pick(point.yBottom, translatedThreshold),
						safeDistance = 999 + mathAbs(yBottom),
						plotY = mathMin(mathMax(-safeDistance, point.plotY), yAxis.len + safeDistance), // Don't draw too far outside plot area (#1303, #2241, #4264)
						barX = point.plotX + pointXOffset,
						barW = seriesBarW,
						barY = mathMin(plotY, yBottom),
						right,
						bottom,
						fromTop,
						up,
						barH = mathMax(plotY, yBottom) - barY;

					// Handle options.minPointLength
					if (mathAbs(barH) < minPointLength) {
						if (minPointLength) {
							barH = minPointLength;
							up = (!yAxis.reversed && !point.negative) || (yAxis.reversed && point.negative);
							barY =
								mathRound(mathAbs(barY - translatedThreshold) > minPointLength ? // stacked
									yBottom - minPointLength : // keep position
									translatedThreshold - (up ? minPointLength : 0)); // #1485, #4051
						}
					}

					// Cache for access in polar
					point.barX = barX;
					point.pointWidth = pointWidth;

					// Round off to obtain crisp edges and avoid overlapping with neighbours (#2694)
					right = mathRound(barX + barW) + xCrisp;
					barX = mathRound(barX) + xCrisp;
					barW = right - barX;

					fromTop = mathAbs(barY) < 0.5;
					bottom = mathMin(mathRound(barY + barH) + yCrisp, 9e4); // #3575
					barY = mathRound(barY) + yCrisp;
					barH = bottom - barY;

					// Top edges are exceptions
					if (fromTop) {
						barY -= 1;
						barH += 1;
					}

					// Fix the tooltip on center of grouped columns (#1216, #424, #3648)
					point.tooltipPos = chart.inverted ? 
						[yAxis.len + yAxis.pos - chart.plotLeft - plotY, series.xAxis.len - barX - barW / 2, barH] : 
						[barX + barW / 2, plotY + yAxis.pos - chart.plotTop, barH];

					// Register shape type and arguments to be used in drawPoints
					point.shapeType = 'rect';
					point.shapeArgs = {
						x: barX,
						y: barY,
						width: barW,
						height: barH
					};
				});

			},

			getSymbol: noop,
			
			/**
			 * Use a solid rectangle like the area series types
			 */
			drawLegendSymbol: LegendSymbolMixin.drawRectangle,
			
			
			/**
			 * Columns have no graph
			 */
			drawGraph: noop,

			/**
			 * Draw the columns. For bars, the series.group is rotated, so the same coordinates
			 * apply for columns and bars. This method is inherited by scatter series.
			 *
			 */
			drawPoints: function () {
				var series = this,
					chart = this.chart,
					options = series.options,
					renderer = chart.renderer,
					animationLimit = options.animationLimit || 250,
					shapeArgs,
					pointAttr;

				// draw the columns
				each(series.points, function (point) {
					var plotY = point.plotY,
						graphic = point.graphic,
						borderAttr;

					if (plotY !== UNDEFINED && !isNaN(plotY) && point.y !== null) {
						shapeArgs = point.shapeArgs;

						borderAttr = defined(series.borderWidth) ? {
							'stroke-width': series.borderWidth
						} : {};

						pointAttr = point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE] || series.pointAttr[NORMAL_STATE];
						
						if (graphic) { // update
							stop(graphic);
							graphic.attr(borderAttr)[chart.pointCount < animationLimit ? 'animate' : 'attr'](merge(shapeArgs));

						} else {
							point.graphic = graphic = renderer[point.shapeType](shapeArgs)
								.attr(borderAttr)
								.attr(pointAttr)
								.add(series.group)
								.shadow(options.shadow, null, options.stacking && !options.borderRadius);
						}

					} else if (graphic) {
						point.graphic = graphic.destroy(); // #1269
					}
				});
			},

			/**
			 * Animate the column heights one by one from zero
			 * @param {Boolean} init Whether to initialize the animation or run it
			 */
			animate: function (init) {
				var series = this,
					yAxis = this.yAxis,
					options = series.options,
					inverted = this.chart.inverted,
					attr = {},
					translatedThreshold;

				if (hasSVG) { // VML is too slow anyway
					if (init) {
						attr.scaleY = 0.001;
						translatedThreshold = mathMin(yAxis.pos + yAxis.len, mathMax(yAxis.pos, yAxis.toPixels(options.threshold)));
						if (inverted) {
							attr.translateX = translatedThreshold - yAxis.len;
						} else {
							attr.translateY = translatedThreshold;
						}
						series.group.attr(attr);

					} else { // run the animation
						
						attr.scaleY = 1;
						attr[inverted ? 'translateX' : 'translateY'] = yAxis.pos;
						series.group.animate(attr, series.options.animation);

						// delete this function to allow it only once
						series.animate = null;
					}
				}
			},
			
			/**
			 * Remove this series from the chart
			 */
			remove: function () {
				var series = this,
					chart = series.chart;

				// column and bar series affects other series of the same type
				// as they are either stacked or grouped
				if (chart.hasRendered) {
					each(chart.series, function (otherSeries) {
						if (otherSeries.type === series.type) {
							otherSeries.isDirty = true;
						}
					});
				}

				Series.prototype.remove.apply(series, arguments);
			}
		});
		seriesTypes.column = ColumnSeries;
		/**
		 * Set the default options for bar
		 */
		defaultPlotOptions.bar = merge(defaultPlotOptions.column);
		/**
		 * The Bar series class
		 */
		var BarSeries = extendClass(ColumnSeries, {
			type: 'bar',
			inverted: true
		});
		seriesTypes.bar = BarSeries;

		/**
		 * Set the default options for scatter
		 */
		defaultPlotOptions.scatter = merge(defaultSeriesOptions, {
			lineWidth: 0,
			marker: {
				enabled: true // Overrides auto-enabling in line series (#3647)
			},
			tooltip: {
				headerFormat: '<span style="color:{point.color}">\u25CF</span> <span style="font-size: 10px;"> {series.name}</span><br/>',
				pointFormat: 'x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>'
			}
		});

		/**
		 * The scatter series class
		 */
		var ScatterSeries = extendClass(Series, {
			type: 'scatter',
			sorted: false,
			requireSorting: false,
			noSharedTooltip: true,
			trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],
			takeOrdinalPosition: false, // #2342
			kdDimensions: 2,
			drawGraph: function () {
				if (this.options.lineWidth) {
					Series.prototype.drawGraph.call(this);
				}
			}
		});

		seriesTypes.scatter = ScatterSeries;

		/**
		 * Set the default options for pie
		 */
		defaultPlotOptions.pie = merge(defaultSeriesOptions, {
			borderColor: '#FFFFFF',
			borderWidth: 1,
			center: [null, null],
			clip: false,
			colorByPoint: true, // always true for pies
			dataLabels: {
				// align: null,
				// connectorWidth: 1,
				// connectorColor: point.color,
				// connectorPadding: 5,
				distance: 30,
				enabled: true,
				formatter: function () { // #2945
					return this.y === null ? undefined : this.point.name;
				},
				// softConnector: true,
				x: 0
				// y: 0
			},
			ignoreHiddenPoint: true,
			//innerSize: 0,
			legendType: 'point',
			marker: null, // point options are specified in the base options
			size: null,
			showInLegend: false,
			slicedOffset: 10,
			states: {
				hover: {
					brightness: 0.1,
					shadow: false
				}
			},
			stickyTracking: false,
			tooltip: {
				followPointer: true
			}
		});

		/**
		 * Extended point object for pies
		 */
		var PiePoint = extendClass(Point, {
			/**
			 * Initiate the pie slice
			 */
			init: function () {

				Point.prototype.init.apply(this, arguments);

				var point = this,
					toggleSlice;

				extend(point, {
					visible: point.visible !== false,
					name: pick(point.name, 'Slice')
				});

				// add event listener for select
				toggleSlice = function (e) {
					point.slice(e.type === 'select');
				};
				addEvent(point, 'select', toggleSlice);
				addEvent(point, 'unselect', toggleSlice);

				return point;
			},

			/**
			 * Toggle the visibility of the pie slice
			 * @param {Boolean} vis Whether to show the slice or not. If undefined, the
			 *    visibility is toggled
			 */
			setVisible: function (vis, redraw) {
				var point = this,
					series = point.series,
					chart = series.chart,
					ignoreHiddenPoint = series.options.ignoreHiddenPoint;
				
				redraw = pick(redraw, ignoreHiddenPoint);

				if (vis !== point.visible) {

					// If called without an argument, toggle visibility
					point.visible = point.options.visible = vis = vis === UNDEFINED ? !point.visible : vis;
					series.options.data[inArray(point, series.data)] = point.options; // update userOptions.data

					// Show and hide associated elements. This is performed regardless of redraw or not,
					// because chart.redraw only handles full series.
					each(['graphic', 'dataLabel', 'connector', 'shadowGroup'], function (key) {
						if (point[key]) {
							point[key][vis ? 'show' : 'hide'](true);
						}
					});

					if (point.legendItem) {
						chart.legend.colorizeItem(point, vis);
					}

					// #4170, hide halo after hiding point
					if (!vis && point.state === 'hover') {
						point.setState('');
					}
					
					// Handle ignore hidden slices
					if (ignoreHiddenPoint) {
						series.isDirty = true;
					}

					if (redraw) {
						chart.redraw();
					}
				}
			},

			/**
			 * Set or toggle whether the slice is cut out from the pie
			 * @param {Boolean} sliced When undefined, the slice state is toggled
			 * @param {Boolean} redraw Whether to redraw the chart. True by default.
			 */
			slice: function (sliced, redraw, animation) {
				var point = this,
					series = point.series,
					chart = series.chart,
					translation;

				setAnimation(animation, chart);

				// redraw is true by default
				redraw = pick(redraw, true);

				// if called without an argument, toggle
				point.sliced = point.options.sliced = sliced = defined(sliced) ? sliced : !point.sliced;
				series.options.data[inArray(point, series.data)] = point.options; // update userOptions.data

				translation = sliced ? point.slicedTranslation : {
					translateX: 0,
					translateY: 0
				};

				point.graphic.animate(translation);
				
				if (point.shadowGroup) {
					point.shadowGroup.animate(translation);
				}

			},

			haloPath: function (size) {
				var shapeArgs = this.shapeArgs,
					chart = this.series.chart;

				return this.sliced || !this.visible ? [] : this.series.chart.renderer.symbols.arc(chart.plotLeft + shapeArgs.x, chart.plotTop + shapeArgs.y, shapeArgs.r + size, shapeArgs.r + size, {
					innerR: this.shapeArgs.r,
					start: shapeArgs.start,
					end: shapeArgs.end
				});
			}
		});

		/**
		 * The Pie series class
		 */
		var PieSeries = {
			type: 'pie',
			isCartesian: false,
			pointClass: PiePoint,
			requireSorting: false,
			directTouch: true,
			noSharedTooltip: true,
			trackerGroups: ['group', 'dataLabelsGroup'],
			axisTypes: [],
			pointAttrToOptions: { // mapping between SVG attributes and the corresponding options
				stroke: 'borderColor',
				'stroke-width': 'borderWidth',
				fill: 'color'
			},

			/**
			 * Animate the pies in
			 */
			animate: function (init) {
				var series = this,
					points = series.points,
					startAngleRad = series.startAngleRad;

				if (!init) {
					each(points, function (point) {
						var graphic = point.graphic,
							args = point.shapeArgs;

						if (graphic) {
							// start values
							graphic.attr({
								r: point.startR || (series.center[3] / 2), // animate from inner radius (#779)
								start: startAngleRad,
								end: startAngleRad
							});

							// animate
							graphic.animate({
								r: args.r,
								start: args.start,
								end: args.end
							}, series.options.animation);
						}
					});

					// delete this function to allow it only once
					series.animate = null;
				}
			},

			/**
			 * Extend the basic setData method by running processData and generatePoints immediately,
			 * in order to access the points from the legend.
			 */
			setData: function (data, redraw, animation, updatePoints) {
				Series.prototype.setData.call(this, data, false, animation, updatePoints);
				this.processData();
				this.generatePoints();
				if (pick(redraw, true)) {
					this.chart.redraw(animation);
				} 
			},

			/**
			 * Recompute total chart sum and update percentages of points.
			 */
			updateTotals: function () {
				var i,
					total = 0,
					points = this.points,
					len = points.length,
					point,
					ignoreHiddenPoint = this.options.ignoreHiddenPoint;

				// Get the total sum
				for (i = 0; i < len; i++) {
					point = points[i];
					total += (ignoreHiddenPoint && !point.visible) ? 0 : point.y;
				}
				this.total = total;

				// Set each point's properties
				for (i = 0; i < len; i++) {
					point = points[i];
					point.percentage = (total > 0 && (point.visible || !ignoreHiddenPoint)) ? point.y / total * 100 : 0;
					point.total = total;
				}
			},

			/**
			 * Extend the generatePoints method by adding total and percentage properties to each point
			 */
			generatePoints: function () {
				Series.prototype.generatePoints.call(this);
				this.updateTotals();
			},
			
			/**
			 * Do translation for pie slices
			 */
			translate: function (positions) {
				this.generatePoints();
				
				var series = this,
					cumulative = 0,
					precision = 1000, // issue #172
					options = series.options,
					slicedOffset = options.slicedOffset,
					connectorOffset = slicedOffset + options.borderWidth,
					start,
					end,
					angle,
					startAngle = options.startAngle || 0,
					startAngleRad = series.startAngleRad = mathPI / 180 * (startAngle - 90),
					endAngleRad = series.endAngleRad = mathPI / 180 * ((pick(options.endAngle, startAngle + 360)) - 90),
					circ = endAngleRad - startAngleRad, //2 * mathPI,
					points = series.points,
					radiusX, // the x component of the radius vector for a given point
					radiusY,
					labelDistance = options.dataLabels.distance,
					ignoreHiddenPoint = options.ignoreHiddenPoint,
					i,
					len = points.length,
					point;

				// Get positions - either an integer or a percentage string must be given.
				// If positions are passed as a parameter, we're in a recursive loop for adjusting
				// space for data labels.
				if (!positions) {
					series.center = positions = series.getCenter();
				}

				// utility for getting the x value from a given y, used for anticollision logic in data labels
				series.getX = function (y, left) {

					angle = math.asin(mathMin((y - positions[1]) / (positions[2] / 2 + labelDistance), 1));

					return positions[0] +
						(left ? -1 : 1) *
						(mathCos(angle) * (positions[2] / 2 + labelDistance));
				};

				// Calculate the geometry for each point
				for (i = 0; i < len; i++) {
					
					point = points[i];
					
					// set start and end angle
					start = startAngleRad + (cumulative * circ);
					if (!ignoreHiddenPoint || point.visible) {
						cumulative += point.percentage / 100;
					}
					end = startAngleRad + (cumulative * circ);

					// set the shape
					point.shapeType = 'arc';
					point.shapeArgs = {
						x: positions[0],
						y: positions[1],
						r: positions[2] / 2,
						innerR: positions[3] / 2,
						start: mathRound(start * precision) / precision,
						end: mathRound(end * precision) / precision
					};

					// The angle must stay within -90 and 270 (#2645)
					angle = (end + start) / 2;
					if (angle > 1.5 * mathPI) {
						angle -= 2 * mathPI;
					} else if (angle < -mathPI / 2) {
						angle += 2 * mathPI;
					}

					// Center for the sliced out slice
					point.slicedTranslation = {
						translateX: mathRound(mathCos(angle) * slicedOffset),
						translateY: mathRound(mathSin(angle) * slicedOffset)
					};

					// set the anchor point for tooltips
					radiusX = mathCos(angle) * positions[2] / 2;
					radiusY = mathSin(angle) * positions[2] / 2;
					point.tooltipPos = [
						positions[0] + radiusX * 0.7,
						positions[1] + radiusY * 0.7
					];
					
					point.half = angle < -mathPI / 2 || angle > mathPI / 2 ? 1 : 0;
					point.angle = angle;

					// set the anchor point for data labels
					connectorOffset = mathMin(connectorOffset, labelDistance / 2); // #1678
					point.labelPos = [
						positions[0] + radiusX + mathCos(angle) * labelDistance, // first break of connector
						positions[1] + radiusY + mathSin(angle) * labelDistance, // a/a
						positions[0] + radiusX + mathCos(angle) * connectorOffset, // second break, right outside pie
						positions[1] + radiusY + mathSin(angle) * connectorOffset, // a/a
						positions[0] + radiusX, // landing point for connector
						positions[1] + radiusY, // a/a
						labelDistance < 0 ? // alignment
							'center' :
							point.half ? 'right' : 'left', // alignment
						angle // center angle
					];

				}
			},
			
			drawGraph: null,

			/**
			 * Draw the data points
			 */
			drawPoints: function () {
				var series = this,
					chart = series.chart,
					renderer = chart.renderer,
					groupTranslation,
					//center,
					graphic,
					//group,
					shadow = series.options.shadow,
					shadowGroup,
					shapeArgs,
					attr;

				if (shadow && !series.shadowGroup) {
					series.shadowGroup = renderer.g('shadow')
						.add(series.group);
				}

				// draw the slices
				each(series.points, function (point) {
					if (point.y !== null) {
						graphic = point.graphic;
						shapeArgs = point.shapeArgs;
						shadowGroup = point.shadowGroup;

						// put the shadow behind all points
						if (shadow && !shadowGroup) {
							shadowGroup = point.shadowGroup = renderer.g('shadow')
								.add(series.shadowGroup);
						}

						// if the point is sliced, use special translation, else use plot area traslation
						groupTranslation = point.sliced ? point.slicedTranslation : {
							translateX: 0,
							translateY: 0
						};

						//group.translate(groupTranslation[0], groupTranslation[1]);
						if (shadowGroup) {
							shadowGroup.attr(groupTranslation);
						}

						// draw the slice
						if (graphic) {
							graphic.animate(extend(shapeArgs, groupTranslation));				
						} else {
							attr = { 'stroke-linejoin': 'round' };
							if (!point.visible) {
								attr.visibility = 'hidden';
							}

							point.graphic = graphic = renderer[point.shapeType](shapeArgs)
								.setRadialReference(series.center)
								.attr(
									point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE]
								)
								.attr(attr)
								.attr(groupTranslation)
								.add(series.group)
								.shadow(shadow, shadowGroup);	
						}
					}
				});

			},


			searchPoint: noop,

			/**
			 * Utility for sorting data labels
			 */
			sortByAngle: function (points, sign) {
				points.sort(function (a, b) {
					return a.angle !== undefined && (b.angle - a.angle) * sign;
				});
			},		

			/**
			 * Use a simple symbol from LegendSymbolMixin
			 */
			drawLegendSymbol: LegendSymbolMixin.drawRectangle,

			/**
			 * Use the getCenter method from drawLegendSymbol
			 */
			getCenter: CenteredSeriesMixin.getCenter,

			/**
			 * Pies don't have point marker symbols
			 */
			getSymbol: noop

		};
		PieSeries = extendClass(Series, PieSeries);
		seriesTypes.pie = PieSeries;

		/**
		 * Draw the data labels
		 */
		Series.prototype.drawDataLabels = function () {

			var series = this,
				seriesOptions = series.options,
				cursor = seriesOptions.cursor,
				options = seriesOptions.dataLabels,
				points = series.points,
				pointOptions,
				generalOptions,
				hasRendered = series.hasRendered || 0,
				str,
				dataLabelsGroup,
				renderer = series.chart.renderer;

			if (options.enabled || series._hasPointLabels) {

				// Process default alignment of data labels for columns
				if (series.dlProcessOptions) {
					series.dlProcessOptions(options);
				}

				// Create a separate group for the data labels to avoid rotation
				dataLabelsGroup = series.plotGroup(
					'dataLabelsGroup',
					'data-labels',
					options.defer ? HIDDEN : VISIBLE,
					options.zIndex || 6
				);

				if (pick(options.defer, true)) {
					dataLabelsGroup.attr({ opacity: +hasRendered }); // #3300
					if (!hasRendered) {
						addEvent(series, 'afterAnimate', function () {
							if (series.visible) { // #3023, #3024
								dataLabelsGroup.show();
							}
							dataLabelsGroup[seriesOptions.animation ? 'animate' : 'attr']({ opacity: 1 }, { duration: 200 });
						});
					}
				}

				// Make the labels for each point
				generalOptions = options;
				each(points, function (point) {

					var enabled,
						dataLabel = point.dataLabel,
						labelConfig,
						attr,
						name,
						rotation,
						connector = point.connector,
						isNew = true,
						style,
						moreStyle = {};

					// Determine if each data label is enabled
					pointOptions = point.dlOptions || (point.options && point.options.dataLabels); // dlOptions is used in treemaps
					enabled = pick(pointOptions && pointOptions.enabled, generalOptions.enabled); // #2282


					// If the point is outside the plot area, destroy it. #678, #820
					if (dataLabel && !enabled) {
						point.dataLabel = dataLabel.destroy();

					// Individual labels are disabled if the are explicitly disabled
					// in the point options, or if they fall outside the plot area.
					} else if (enabled) {

						// Create individual options structure that can be extended without
						// affecting others
						options = merge(generalOptions, pointOptions);
						style = options.style;

						rotation = options.rotation;

						// Get the string
						labelConfig = point.getLabelConfig();
						str = options.format ?
							format(options.format, labelConfig) :
							options.formatter.call(labelConfig, options);

						// Determine the color
						style.color = pick(options.color, style.color, series.color, 'black');


						// update existing label
						if (dataLabel) {

							if (defined(str)) {
								dataLabel
									.attr({
										text: str
									});
								isNew = false;

							} else { // #1437 - the label is shown conditionally
								point.dataLabel = dataLabel = dataLabel.destroy();
								if (connector) {
									point.connector = connector.destroy();
								}
							}

						// create new label
						} else if (defined(str)) {
							attr = {
								//align: align,
								fill: options.backgroundColor,
								stroke: options.borderColor,
								'stroke-width': options.borderWidth,
								r: options.borderRadius || 0,
								rotation: rotation,
								padding: options.padding,
								zIndex: 1
							};
							
							// Get automated contrast color
							if (style.color === 'contrast') {
								moreStyle.color = options.inside || options.distance < 0 || !!seriesOptions.stacking ? 
									renderer.getContrast(point.color || series.color) : 
									'#000000';
							}
							if (cursor) {
								moreStyle.cursor = cursor;
							}
							

							// Remove unused attributes (#947)
							for (name in attr) {
								if (attr[name] === UNDEFINED) {
									delete attr[name];
								}
							}

							dataLabel = point.dataLabel = renderer[rotation ? 'text' : 'label']( // labels don't support rotation
								str,
								0,
								-999,
								options.shape,
								null,
								null,
								options.useHTML
							)
							.attr(attr)
							.css(extend(style, moreStyle))
							.add(dataLabelsGroup)
							.shadow(options.shadow);

						}

						if (dataLabel) {
							// Now the data label is created and placed at 0,0, so we need to align it
							series.alignDataLabel(point, dataLabel, options, null, isNew);
						}
					}
				});
			}
		};

		/**
		 * Align each individual data label
		 */
		Series.prototype.alignDataLabel = function (point, dataLabel, options, alignTo, isNew) {
			var chart = this.chart,
				inverted = chart.inverted,
				plotX = pick(point.plotX, -999),
				plotY = pick(point.plotY, -999),
				bBox = dataLabel.getBBox(),
				baseline = chart.renderer.fontMetrics(options.style.fontSize).b,
				rotCorr, // rotation correction
				// Math.round for rounding errors (#2683), alignTo to allow column labels (#2700)
				visible = this.visible && (point.series.forceDL || chart.isInsidePlot(plotX, mathRound(plotY), inverted) ||
					(alignTo && chart.isInsidePlot(plotX, inverted ? alignTo.x + 1 : alignTo.y + alignTo.height - 1, inverted))),
				alignAttr; // the final position;

			if (visible) {

				// The alignment box is a singular point
				alignTo = extend({
					x: inverted ? chart.plotWidth - plotY : plotX,
					y: mathRound(inverted ? chart.plotHeight - plotX : plotY),
					width: 0,
					height: 0
				}, alignTo);

				// Add the text size for alignment calculation
				extend(options, {
					width: bBox.width,
					height: bBox.height
				});

				// Allow a hook for changing alignment in the last moment, then do the alignment
				if (options.rotation) { // Fancy box alignment isn't supported for rotated text
					rotCorr = chart.renderer.rotCorr(baseline, options.rotation); // #3723
					dataLabel[isNew ? 'attr' : 'animate']({
							x: alignTo.x + options.x + alignTo.width / 2 + rotCorr.x,
							y: alignTo.y + options.y + alignTo.height / 2
						})
						.attr({ // #3003
							align: options.align
						});
				} else {
					dataLabel.align(options, null, alignTo);
					alignAttr = dataLabel.alignAttr;

					// Handle justify or crop
					if (pick(options.overflow, 'justify') === 'justify') {
						this.justifyDataLabel(dataLabel, options, alignAttr, bBox, alignTo, isNew);

					} else if (pick(options.crop, true)) {
						// Now check that the data label is within the plot area
						visible = chart.isInsidePlot(alignAttr.x, alignAttr.y) && chart.isInsidePlot(alignAttr.x + bBox.width, alignAttr.y + bBox.height);

					}

					// When we're using a shape, make it possible with a connector or an arrow pointing to thie point
					if (options.shape) {
						dataLabel.attr({
							anchorX: point.plotX,
							anchorY: point.plotY
						});
					}

				}
			}

			// Show or hide based on the final aligned position
			if (!visible) {
				dataLabel.attr({ y: -999 });
				dataLabel.placed = false; // don't animate back in
			}

		};

		/**
		 * If data labels fall partly outside the plot area, align them back in, in a way that
		 * doesn't hide the point.
		 */
		Series.prototype.justifyDataLabel = function (dataLabel, options, alignAttr, bBox, alignTo, isNew) {
			var chart = this.chart,
				align = options.align,
				verticalAlign = options.verticalAlign,
				off,
				justified,
				padding = dataLabel.box ? 0 : (dataLabel.padding || 0);

			// Off left
			off = alignAttr.x + padding;
			if (off < 0) {
				if (align === 'right') {
					options.align = 'left';
				} else {
					options.x = -off;
				}
				justified = true;
			}

			// Off right
			off = alignAttr.x + bBox.width - padding;
			if (off > chart.plotWidth) {
				if (align === 'left') {
					options.align = 'right';
				} else {
					options.x = chart.plotWidth - off;
				}
				justified = true;
			}

			// Off top
			off = alignAttr.y + padding;
			if (off < 0) {
				if (verticalAlign === 'bottom') {
					options.verticalAlign = 'top';
				} else {
					options.y = -off;
				}
				justified = true;
			}

			// Off bottom
			off = alignAttr.y + bBox.height - padding;
			if (off > chart.plotHeight) {
				if (verticalAlign === 'top') {
					options.verticalAlign = 'bottom';
				} else {
					options.y = chart.plotHeight - off;
				}
				justified = true;
			}

			if (justified) {
				dataLabel.placed = !isNew;
				dataLabel.align(options, null, alignTo);
			}
		};

		/**
		 * Override the base drawDataLabels method by pie specific functionality
		 */
		if (seriesTypes.pie) {
			seriesTypes.pie.prototype.drawDataLabels = function () {
				var series = this,
					data = series.data,
					point,
					chart = series.chart,
					options = series.options.dataLabels,
					connectorPadding = pick(options.connectorPadding, 10),
					connectorWidth = pick(options.connectorWidth, 1),
					plotWidth = chart.plotWidth,
					plotHeight = chart.plotHeight,
					connector,
					connectorPath,
					softConnector = pick(options.softConnector, true),
					distanceOption = options.distance,
					seriesCenter = series.center,
					radius = seriesCenter[2] / 2,
					centerY = seriesCenter[1],
					outside = distanceOption > 0,
					dataLabel,
					dataLabelWidth,
					labelPos,
					labelHeight,
					halves = [// divide the points into right and left halves for anti collision
						[], // right
						[]  // left
					],
					x,
					y,
					visibility,
					rankArr,
					i,
					j,
					overflow = [0, 0, 0, 0], // top, right, bottom, left
					sort = function (a, b) {
						return b.y - a.y;
					};

				// get out if not enabled
				if (!series.visible || (!options.enabled && !series._hasPointLabels)) {
					return;
				}

				// run parent method
				Series.prototype.drawDataLabels.apply(series);

				// arrange points for detection collision
				each(data, function (point) {
					if (point.dataLabel && point.visible) { // #407, #2510
						halves[point.half].push(point);
					}
				});

				/* Loop over the points in each half, starting from the top and bottom
				 * of the pie to detect overlapping labels.
				 */
				i = 2;
				while (i--) {

					var slots = [],
						slotsLength,
						usedSlots = [],
						points = halves[i],
						pos,
						bottom,
						length = points.length,
						slotIndex;

					if (!length) {
						continue;
					}

					// Sort by angle
					series.sortByAngle(points, i - 0.5);

					// Assume equal label heights on either hemisphere (#2630)
					j = labelHeight = 0;
					while (!labelHeight && points[j]) { // #1569
						labelHeight = points[j] && points[j].dataLabel && (points[j].dataLabel.getBBox().height || 21); // 21 is for #968
						j++;
					}

					// Only do anti-collision when we are outside the pie and have connectors (#856)
					if (distanceOption > 0) {

						// Build the slots
						bottom = mathMin(centerY + radius + distanceOption, chart.plotHeight);
						for (pos = mathMax(0, centerY - radius - distanceOption); pos <= bottom; pos += labelHeight) {
							slots.push(pos);
						}
						slotsLength = slots.length;


						/* Visualize the slots
						if (!series.slotElements) {
							series.slotElements = [];
						}
						if (i === 1) {
							series.slotElements.forEach(function (elem) {
								elem.destroy();
							});
							series.slotElements.length = 0;
						}
							
						slots.forEach(function (pos, no) {
							var slotX = series.getX(pos, i) + chart.plotLeft - (i ? 100 : 0),
								slotY = pos + chart.plotTop;
							
							if (!isNaN(slotX)) {
								series.slotElements.push(chart.renderer.rect(slotX, slotY - 7, 100, labelHeight, 1)
									.attr({
										'stroke-width': 1,
										stroke: 'silver',
										fill: 'rgba(0,0,255,0.1)'
									})
									.add());
								series.slotElements.push(chart.renderer.text('Slot '+ no, slotX, slotY + 4)
									.attr({
										fill: 'silver'
									}).add());
							}
						});
						// */

						// if there are more values than available slots, remove lowest values
						if (length > slotsLength) {
							// create an array for sorting and ranking the points within each quarter
							rankArr = [].concat(points);
							rankArr.sort(sort);
							j = length;
							while (j--) {
								rankArr[j].rank = j;
							}
							j = length;
							while (j--) {
								if (points[j].rank >= slotsLength) {
									points.splice(j, 1);
								}
							}
							length = points.length;
						}

						// The label goes to the nearest open slot, but not closer to the edge than
						// the label's index.
						for (j = 0; j < length; j++) {

							point = points[j];
							labelPos = point.labelPos;

							var closest = 9999,
								distance,
								slotI;

							// find the closest slot index
							for (slotI = 0; slotI < slotsLength; slotI++) {
								distance = mathAbs(slots[slotI] - labelPos[1]);
								if (distance < closest) {
									closest = distance;
									slotIndex = slotI;
								}
							}

							// if that slot index is closer to the edges of the slots, move it
							// to the closest appropriate slot
							if (slotIndex < j && slots[j] !== null) { // cluster at the top
								slotIndex = j;
							} else if (slotsLength  < length - j + slotIndex && slots[j] !== null) { // cluster at the bottom
								slotIndex = slotsLength - length + j;
								while (slots[slotIndex] === null) { // make sure it is not taken
									slotIndex++;
								}
							} else {
								// Slot is taken, find next free slot below. In the next run, the next slice will find the
								// slot above these, because it is the closest one
								while (slots[slotIndex] === null) { // make sure it is not taken
									slotIndex++;
								}
							}

							usedSlots.push({ i: slotIndex, y: slots[slotIndex] });
							slots[slotIndex] = null; // mark as taken
						}
						// sort them in order to fill in from the top
						usedSlots.sort(sort);
					}

					// now the used slots are sorted, fill them up sequentially
					for (j = 0; j < length; j++) {

						var slot, naturalY;

						point = points[j];
						labelPos = point.labelPos;
						dataLabel = point.dataLabel;
						visibility = point.visible === false ? HIDDEN : 'inherit';
						naturalY = labelPos[1];

						if (distanceOption > 0) {
							slot = usedSlots.pop();
							slotIndex = slot.i;

							// if the slot next to currrent slot is free, the y value is allowed
							// to fall back to the natural position
							y = slot.y;
							if ((naturalY > y && slots[slotIndex + 1] !== null) ||
									(naturalY < y &&  slots[slotIndex - 1] !== null)) {
								y = mathMin(mathMax(0, naturalY), chart.plotHeight);
							}

						} else {
							y = naturalY;
						}

						// get the x - use the natural x position for first and last slot, to prevent the top
						// and botton slice connectors from touching each other on either side
						x = options.justify ?
							seriesCenter[0] + (i ? -1 : 1) * (radius + distanceOption) :
							series.getX(y === centerY - radius - distanceOption || y === centerY + radius + distanceOption ? naturalY : y, i);


						// Record the placement and visibility
						dataLabel._attr = {
							visibility: visibility,
							align: labelPos[6]
						};
						dataLabel._pos = {
							x: x + options.x +
								({ left: connectorPadding, right: -connectorPadding }[labelPos[6]] || 0),
							y: y + options.y - 10 // 10 is for the baseline (label vs text)
						};
						dataLabel.connX = x;
						dataLabel.connY = y;


						// Detect overflowing data labels
						if (this.options.size === null) {
							dataLabelWidth = dataLabel.width;
							// Overflow left
							if (x - dataLabelWidth < connectorPadding) {
								overflow[3] = mathMax(mathRound(dataLabelWidth - x + connectorPadding), overflow[3]);

							// Overflow right
							} else if (x + dataLabelWidth > plotWidth - connectorPadding) {
								overflow[1] = mathMax(mathRound(x + dataLabelWidth - plotWidth + connectorPadding), overflow[1]);
							}

							// Overflow top
							if (y - labelHeight / 2 < 0) {
								overflow[0] = mathMax(mathRound(-y + labelHeight / 2), overflow[0]);

							// Overflow left
							} else if (y + labelHeight / 2 > plotHeight) {
								overflow[2] = mathMax(mathRound(y + labelHeight / 2 - plotHeight), overflow[2]);
							}
						}
					} // for each point
				} // for each half

				// Do not apply the final placement and draw the connectors until we have verified
				// that labels are not spilling over.
				if (arrayMax(overflow) === 0 || this.verifyDataLabelOverflow(overflow)) {

					// Place the labels in the final position
					this.placeDataLabels();

					// Draw the connectors
					if (outside && connectorWidth) {
						each(this.points, function (point) {
							connector = point.connector;
							labelPos = point.labelPos;
							dataLabel = point.dataLabel;

							if (dataLabel && dataLabel._pos && point.visible) {
								visibility = dataLabel._attr.visibility;
								x = dataLabel.connX;
								y = dataLabel.connY;
								connectorPath = softConnector ? [
									M,
									x + (labelPos[6] === 'left' ? 5 : -5), y, // end of the string at the label
									'C',
									x, y, // first break, next to the label
									2 * labelPos[2] - labelPos[4], 2 * labelPos[3] - labelPos[5],
									labelPos[2], labelPos[3], // second break
									L,
									labelPos[4], labelPos[5] // base
								] : [
									M,
									x + (labelPos[6] === 'left' ? 5 : -5), y, // end of the string at the label
									L,
									labelPos[2], labelPos[3], // second break
									L,
									labelPos[4], labelPos[5] // base
								];

								if (connector) {
									connector.animate({ d: connectorPath });
									connector.attr('visibility', visibility);

								} else {
									point.connector = connector = series.chart.renderer.path(connectorPath).attr({
										'stroke-width': connectorWidth,
										stroke: options.connectorColor || point.color || '#606060',
										visibility: visibility
										//zIndex: 0 // #2722 (reversed)
									})
									.add(series.dataLabelsGroup);
								}
							} else if (connector) {
								point.connector = connector.destroy();
							}
						});
					}
				}
			};
			/**
			 * Perform the final placement of the data labels after we have verified that they
			 * fall within the plot area.
			 */
			seriesTypes.pie.prototype.placeDataLabels = function () {
				each(this.points, function (point) {
					var dataLabel = point.dataLabel,
						_pos;

					if (dataLabel && point.visible) {
						_pos = dataLabel._pos;
						if (_pos) {
							dataLabel.attr(dataLabel._attr);
							dataLabel[dataLabel.moved ? 'animate' : 'attr'](_pos);
							dataLabel.moved = true;
						} else if (dataLabel) {
							dataLabel.attr({ y: -999 });
						}
					}
				});
			};

			seriesTypes.pie.prototype.alignDataLabel =  noop;

			/**
			 * Verify whether the data labels are allowed to draw, or we should run more translation and data
			 * label positioning to keep them inside the plot area. Returns true when data labels are ready
			 * to draw.
			 */
			seriesTypes.pie.prototype.verifyDataLabelOverflow = function (overflow) {

				var center = this.center,
					options = this.options,
					centerOption = options.center,
					minSize = options.minSize || 80,
					newSize = minSize,
					ret;

				// Handle horizontal size and center
				if (centerOption[0] !== null) { // Fixed center
					newSize = mathMax(center[2] - mathMax(overflow[1], overflow[3]), minSize);

				} else { // Auto center
					newSize = mathMax(
						center[2] - overflow[1] - overflow[3], // horizontal overflow
						minSize
					);
					center[0] += (overflow[3] - overflow[1]) / 2; // horizontal center
				}

				// Handle vertical size and center
				if (centerOption[1] !== null) { // Fixed center
					newSize = mathMax(mathMin(newSize, center[2] - mathMax(overflow[0], overflow[2])), minSize);

				} else { // Auto center
					newSize = mathMax(
						mathMin(
							newSize,
							center[2] - overflow[0] - overflow[2] // vertical overflow
						),
						minSize
					);
					center[1] += (overflow[0] - overflow[2]) / 2; // vertical center
				}

				// If the size must be decreased, we need to run translate and drawDataLabels again
				if (newSize < center[2]) {
					center[2] = newSize;
					center[3] = relativeLength(options.innerSize || 0, newSize);
					this.translate(center);
					each(this.points, function (point) {
						if (point.dataLabel) {
							point.dataLabel._pos = null; // reset
						}
					});

					if (this.drawDataLabels) {
						this.drawDataLabels();
					}
				// Else, return true to indicate that the pie and its labels is within the plot area
				} else {
					ret = true;
				}
				return ret;
			};
		}

		if (seriesTypes.column) {

			/**
			 * Override the basic data label alignment by adjusting for the position of the column
			 */
			seriesTypes.column.prototype.alignDataLabel = function (point, dataLabel, options,  alignTo, isNew) {
				var inverted = this.chart.inverted,
					series = point.series,
					dlBox = point.dlBox || point.shapeArgs, // data label box for alignment
					below = pick(point.below, point.plotY > pick(this.translatedThreshold, series.yAxis.len)), // point.below is used in range series
					inside = pick(options.inside, !!this.options.stacking); // draw it inside the box?

				// Align to the column itself, or the top of it
				if (dlBox) { // Area range uses this method but not alignTo
					alignTo = merge(dlBox);

					if (inverted) {
						alignTo = {
							x: series.yAxis.len - alignTo.y - alignTo.height,
							y: series.xAxis.len - alignTo.x - alignTo.width,
							width: alignTo.height,
							height: alignTo.width
						};
					}

					// Compute the alignment box
					if (!inside) {
						if (inverted) {
							alignTo.x += below ? 0 : alignTo.width;
							alignTo.width = 0;
						} else {
							alignTo.y += below ? alignTo.height : 0;
							alignTo.height = 0;
						}
					}
				}


				// When alignment is undefined (typically columns and bars), display the individual
				// point below or above the point depending on the threshold
				options.align = pick(
					options.align,
					!inverted || inside ? 'center' : below ? 'right' : 'left'
				);
				options.verticalAlign = pick(
					options.verticalAlign,
					inverted || inside ? 'middle' : below ? 'top' : 'bottom'
				);

				// Call the parent method
				Series.prototype.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);
			};
		}



		/**
		 * Highcharts JS v4.1.8 (2015-08-20)
		 * Highcharts module to hide overlapping data labels. This module is included by default in Highmaps.
		 *
		 * (c) 2010-2014 Torstein Honsi
		 *
		 * License: www.highcharts.com/license
		 */

		/*global Highcharts, HighchartsAdapter */
		(function (H) {
			var Chart = H.Chart,
				each = H.each,
				pick = H.pick,
				addEvent = HighchartsAdapter.addEvent;

			// Collect potensial overlapping data labels. Stack labels probably don't need to be 
			// considered because they are usually accompanied by data labels that lie inside the columns.
			Chart.prototype.callbacks.push(function (chart) {
				function collectAndHide() {
					var labels = [];

					each(chart.series, function (series) {
						var dlOptions = series.options.dataLabels,
							collections = series.dataLabelCollections || ['dataLabel']; // Range series have two collections
						if ((dlOptions.enabled || series._hasPointLabels) && !dlOptions.allowOverlap && series.visible) { // #3866
							each(collections, function (coll) {
								each(series.points, function (point) {
									if (point[coll]) {
										point[coll].labelrank = pick(point.labelrank, point.shapeArgs && point.shapeArgs.height); // #4118
										labels.push(point[coll]);
									}
								});
							});
						}
					});
					chart.hideOverlappingLabels(labels);
				}

				// Do it now ...
				collectAndHide();

				// ... and after each chart redraw
				addEvent(chart, 'redraw', collectAndHide);

			});

			/**
			 * Hide overlapping labels. Labels are moved and faded in and out on zoom to provide a smooth 
			 * visual imression.
			 */		
			Chart.prototype.hideOverlappingLabels = function (labels) {

				var len = labels.length,
					label,
					i,
					j,
					label1,
					label2,
					isIntersecting,
					pos1,
					pos2,
					padding,
					intersectRect = function (x1, y1, w1, h1, x2, y2, w2, h2) {
						return !(
							x2 > x1 + w1 ||
							x2 + w2 < x1 ||
							y2 > y1 + h1 ||
							y2 + h2 < y1
						);
					};
			
				// Mark with initial opacity
				for (i = 0; i < len; i++) {
					label = labels[i];
					if (label) {
						label.oldOpacity = label.opacity;
						label.newOpacity = 1;
					}
				}

				// Prevent a situation in a gradually rising slope, that each label
				// will hide the previous one because the previous one always has
				// lower rank.
				labels.sort(function (a, b) {
					return (b.labelrank || 0) - (a.labelrank || 0);
				});

				// Detect overlapping labels
				for (i = 0; i < len; i++) {
					label1 = labels[i];

					for (j = i + 1; j < len; ++j) {
						label2 = labels[j];
						if (label1 && label2 && label1.placed && label2.placed && label1.newOpacity !== 0 && label2.newOpacity !== 0) {
							pos1 = label1.alignAttr;
							pos2 = label2.alignAttr;
							padding = 2 * (label1.box ? 0 : label1.padding); // Substract the padding if no background or border (#4333)
							isIntersecting = intersectRect(
								pos1.x,
								pos1.y,
								label1.width - padding,
								label1.height - padding,
								pos2.x,
								pos2.y,
								label2.width - padding,
								label2.height - padding
							);

							if (isIntersecting) {
								(label1.labelrank < label2.labelrank ? label1 : label2).newOpacity = 0;
							}
						}
					}
				}

				// Hide or show
				each(labels, function (label) {
					var complete,
						newOpacity;

					if (label) {
						newOpacity = label.newOpacity;

						if (label.oldOpacity !== newOpacity && label.placed) {

							// Make sure the label is completely hidden to avoid catching clicks (#4362)
							if (newOpacity) {
								label.show(true);
							} else {
								complete = function () {
									label.hide();
								};
							}

							// Animate or set the opacity					
							label.alignAttr.opacity = newOpacity;
							label[label.isOld ? 'animate' : 'attr'](label.alignAttr, null, complete);
							
						}
						label.isOld = true;
					}
				});
			};

		}(Highcharts));/**
		 * TrackerMixin for points and graphs
		 */

		var TrackerMixin = Highcharts.TrackerMixin = {

			drawTrackerPoint: function () {
				var series = this,
					chart = series.chart,
					pointer = chart.pointer,
					cursor = series.options.cursor,
					css = cursor && { cursor: cursor },
					onMouseOver = function (e) {
						var target = e.target,
						point;

						while (target && !point) {
							point = target.point;
							target = target.parentNode;
						}

						if (point !== UNDEFINED && point !== chart.hoverPoint) { // undefined on graph in scatterchart
							point.onMouseOver(e);
						}
					};

				// Add reference to the point
				each(series.points, function (point) {
					if (point.graphic) {
						point.graphic.element.point = point;
					}
					if (point.dataLabel) {
						point.dataLabel.element.point = point;
					}
				});

				// Add the event listeners, we need to do this only once
				if (!series._hasTracking) {
					each(series.trackerGroups, function (key) {
						if (series[key]) { // we don't always have dataLabelsGroup
							series[key]
								.addClass(PREFIX + 'tracker')
								.on('mouseover', onMouseOver)
								.on('mouseout', function (e) { pointer.onTrackerMouseOut(e); })
								.css(css);
							if (hasTouch) {
								series[key].on('touchstart', onMouseOver);
							}
						}
					});
					series._hasTracking = true;
				}
			},

			/**
			 * Draw the tracker object that sits above all data labels and markers to
			 * track mouse events on the graph or points. For the line type charts
			 * the tracker uses the same graphPath, but with a greater stroke width
			 * for better control.
			 */
			drawTrackerGraph: function () {
				var series = this,
					options = series.options,
					trackByArea = options.trackByArea,
					trackerPath = [].concat(trackByArea ? series.areaPath : series.graphPath),
					trackerPathLength = trackerPath.length,
					chart = series.chart,
					pointer = chart.pointer,
					renderer = chart.renderer,
					snap = chart.options.tooltip.snap,
					tracker = series.tracker,
					cursor = options.cursor,
					css = cursor && { cursor: cursor },
					singlePoints = series.singlePoints,
					singlePoint,
					i,
					onMouseOver = function () {
						if (chart.hoverSeries !== series) {
							series.onMouseOver();
						}
					},
					/*
					 * Empirical lowest possible opacities for TRACKER_FILL for an element to stay invisible but clickable
					 * IE6: 0.002
					 * IE7: 0.002
					 * IE8: 0.002
					 * IE9: 0.00000000001 (unlimited)
					 * IE10: 0.0001 (exporting only)
					 * FF: 0.00000000001 (unlimited)
					 * Chrome: 0.000001
					 * Safari: 0.000001
					 * Opera: 0.00000000001 (unlimited)
					 */
					TRACKER_FILL = 'rgba(192,192,192,' + (hasSVG ? 0.0001 : 0.002) + ')';

				// Extend end points. A better way would be to use round linecaps,
				// but those are not clickable in VML.
				if (trackerPathLength && !trackByArea) {
					i = trackerPathLength + 1;
					while (i--) {
						if (trackerPath[i] === M) { // extend left side
							trackerPath.splice(i + 1, 0, trackerPath[i + 1] - snap, trackerPath[i + 2], L);
						}
						if ((i && trackerPath[i] === M) || i === trackerPathLength) { // extend right side
							trackerPath.splice(i, 0, L, trackerPath[i - 2] + snap, trackerPath[i - 1]);
						}
					}
				}

				// handle single points
				for (i = 0; i < singlePoints.length; i++) {
					singlePoint = singlePoints[i];
					trackerPath.push(M, singlePoint.plotX - snap, singlePoint.plotY,
					L, singlePoint.plotX + snap, singlePoint.plotY);
				}

				// draw the tracker
				if (tracker) {
					tracker.attr({ d: trackerPath });
				} else { // create

					series.tracker = renderer.path(trackerPath)
					.attr({
						'stroke-linejoin': 'round', // #1225
						visibility: series.visible ? VISIBLE : HIDDEN,
						stroke: TRACKER_FILL,
						fill: trackByArea ? TRACKER_FILL : NONE,
						'stroke-width' : options.lineWidth + (trackByArea ? 0 : 2 * snap),
						zIndex: 2
					})
					.add(series.group);

					// The tracker is added to the series group, which is clipped, but is covered
					// by the marker group. So the marker group also needs to capture events.
					each([series.tracker, series.markerGroup], function (tracker) {
						tracker.addClass(PREFIX + 'tracker')
							.on('mouseover', onMouseOver)
							.on('mouseout', function (e) { pointer.onTrackerMouseOut(e); })
							.css(css);

						if (hasTouch) {
							tracker.on('touchstart', onMouseOver);
						}
					});
				}
			}
		};
		/* End TrackerMixin */


		/**
		 * Add tracking event listener to the series group, so the point graphics
		 * themselves act as trackers
		 */ 

		if (seriesTypes.column) {
			ColumnSeries.prototype.drawTracker = TrackerMixin.drawTrackerPoint;	
		}

		if (seriesTypes.pie) {
			seriesTypes.pie.prototype.drawTracker = TrackerMixin.drawTrackerPoint;
		}

		if (seriesTypes.scatter) {
			ScatterSeries.prototype.drawTracker = TrackerMixin.drawTrackerPoint;
		}

		/* 
		 * Extend Legend for item events 
		 */ 
		extend(Legend.prototype, {

			setItemEvents: function (item, legendItem, useHTML, itemStyle, itemHiddenStyle) {
			var legend = this;
			// Set the events on the item group, or in case of useHTML, the item itself (#1249)
			(useHTML ? legendItem : item.legendGroup).on('mouseover', function () {
					item.setState(HOVER_STATE);
					legendItem.css(legend.options.itemHoverStyle);
				})
				.on('mouseout', function () {
					legendItem.css(item.visible ? itemStyle : itemHiddenStyle);
					item.setState();
				})
				.on('click', function (event) {
					var strLegendItemClick = 'legendItemClick',
						fnLegendItemClick = function () {
							item.setVisible();
						};
						
					// Pass over the click/touch event. #4.
					event = {
						browserEvent: event
					};

					// click the name or symbol
					if (item.firePointEvent) { // point
						item.firePointEvent(strLegendItemClick, event, fnLegendItemClick);
					} else {
						fireEvent(item, strLegendItemClick, event, fnLegendItemClick);
					}
				});
			},

			createCheckboxForItem: function (item) {
				var legend = this;

				item.checkbox = createElement('input', {
					type: 'checkbox',
					checked: item.selected,
					defaultChecked: item.selected // required by IE7
				}, legend.options.itemCheckboxStyle, legend.chart.container);

				addEvent(item.checkbox, 'click', function (event) {
					var target = event.target;
					fireEvent(item.series || item, 'checkboxClick', { // #3712
							checked: target.checked,
							item: item
						},
						function () {
							item.select();
						}
					);
				});
			}	
		});

		/* 
		 * Add pointer cursor to legend itemstyle in defaultOptions
		 */
		defaultOptions.legend.itemStyle.cursor = 'pointer';


		/* 
		 * Extend the Chart object with interaction
		 */

		extend(Chart.prototype, {
			/**
			 * Display the zoom button
			 */
			showResetZoom: function () {
				var chart = this,
					lang = defaultOptions.lang,
					btnOptions = chart.options.chart.resetZoomButton,
					theme = btnOptions.theme,
					states = theme.states,
					alignTo = btnOptions.relativeTo === 'chart' ? null : 'plotBox';
					
				this.resetZoomButton = chart.renderer.button(lang.resetZoom, null, null, function () { chart.zoomOut(); }, theme, states && states.hover)
					.attr({
						align: btnOptions.position.align,
						title: lang.resetZoomTitle
					})
					.add()
					.align(btnOptions.position, false, alignTo);
					
			},

			/**
			 * Zoom out to 1:1
			 */
			zoomOut: function () {
				var chart = this;
				fireEvent(chart, 'selection', { resetSelection: true }, function () { 
					chart.zoom();
				});
			},

			/**
			 * Zoom into a given portion of the chart given by axis coordinates
			 * @param {Object} event
			 */
			zoom: function (event) {
				var chart = this,
					hasZoomed,
					pointer = chart.pointer,
					displayButton = false,
					resetZoomButton;

				// If zoom is called with no arguments, reset the axes
				if (!event || event.resetSelection) {
					each(chart.axes, function (axis) {
						hasZoomed = axis.zoom();
					});
				} else { // else, zoom in on all axes
					each(event.xAxis.concat(event.yAxis), function (axisData) {
						var axis = axisData.axis,
							isXAxis = axis.isXAxis;

						// don't zoom more than minRange
						if (pointer[isXAxis ? 'zoomX' : 'zoomY'] || pointer[isXAxis ? 'pinchX' : 'pinchY']) {
							hasZoomed = axis.zoom(axisData.min, axisData.max);
							if (axis.displayBtn) {
								displayButton = true;
							}
						}
					});
				}
				
				// Show or hide the Reset zoom button
				resetZoomButton = chart.resetZoomButton;
				if (displayButton && !resetZoomButton) {
					chart.showResetZoom();
				} else if (!displayButton && isObject(resetZoomButton)) {
					chart.resetZoomButton = resetZoomButton.destroy();
				}
				

				// Redraw
				if (hasZoomed) {
					chart.redraw(
						pick(chart.options.chart.animation, event && event.animation, chart.pointCount < 100) // animation
					);
				}
			},

			/**
			 * Pan the chart by dragging the mouse across the pane. This function is called
			 * on mouse move, and the distance to pan is computed from chartX compared to
			 * the first chartX position in the dragging operation.
			 */
			pan: function (e, panning) {

				var chart = this,
					hoverPoints = chart.hoverPoints,
					doRedraw;

				// remove active points for shared tooltip
				if (hoverPoints) {
					each(hoverPoints, function (point) {
						point.setState();
					});
				}

				each(panning === 'xy' ? [1, 0] : [1], function (isX) { // xy is used in maps
					var mousePos = e[isX ? 'chartX' : 'chartY'],
						axis = chart[isX ? 'xAxis' : 'yAxis'][0],
						startPos = chart[isX ? 'mouseDownX' : 'mouseDownY'],
						halfPointRange = (axis.pointRange || 0) / 2,
						extremes = axis.getExtremes(),
						newMin = axis.toValue(startPos - mousePos, true) + halfPointRange,
						newMax = axis.toValue(startPos + chart[isX ? 'plotWidth' : 'plotHeight'] - mousePos, true) - halfPointRange,
						goingLeft = startPos > mousePos; // #3613

					if (axis.series.length && 
							(goingLeft || newMin > mathMin(extremes.dataMin, extremes.min)) && 
							(!goingLeft || newMax < mathMax(extremes.dataMax, extremes.max))) {
						axis.setExtremes(newMin, newMax, false, false, { trigger: 'pan' });
						doRedraw = true;
					}

					chart[isX ? 'mouseDownX' : 'mouseDownY'] = mousePos; // set new reference for next run
				});

				if (doRedraw) {
					chart.redraw(false);
				}
				css(chart.container, { cursor: 'move' });
			}
		});

		/*
		 * Extend the Point object with interaction
		 */
		extend(Point.prototype, {
			/**
			 * Toggle the selection status of a point
			 * @param {Boolean} selected Whether to select or unselect the point.
			 * @param {Boolean} accumulate Whether to add to the previous selection. By default,
			 *		 this happens if the control key (Cmd on Mac) was pressed during clicking.
			 */
			select: function (selected, accumulate) {
				var point = this,
					series = point.series,
					chart = series.chart;

				selected = pick(selected, !point.selected);

				// fire the event with the defalut handler
				point.firePointEvent(selected ? 'select' : 'unselect', { accumulate: accumulate }, function () {
					point.selected = point.options.selected = selected;
					series.options.data[inArray(point, series.data)] = point.options;

					point.setState(selected && SELECT_STATE);

					// unselect all other points unless Ctrl or Cmd + click
					if (!accumulate) {
						each(chart.getSelectedPoints(), function (loopPoint) {
							if (loopPoint.selected && loopPoint !== point) {
								loopPoint.selected = loopPoint.options.selected = false;
								series.options.data[inArray(loopPoint, series.data)] = loopPoint.options;
								loopPoint.setState(NORMAL_STATE);
									loopPoint.firePointEvent('unselect');
							}
						});
					}
				});
			},

			/**
			 * Runs on mouse over the point
			 *
			 * @param {Object} e The event arguments
			 * @param {Boolean} byProximity Falsy for kd points that are closest to the mouse, or to 
			 *        actually hovered points. True for other points in shared tooltip.
			 */
			onMouseOver: function (e, byProximity) {
				var point = this,
					series = point.series,
					chart = series.chart,
					tooltip = chart.tooltip,
					hoverPoint = chart.hoverPoint;

				if (chart.hoverSeries !== series) {
					series.onMouseOver();
				}		

				// set normal state to previous series
				if (hoverPoint && hoverPoint !== point) {
					hoverPoint.onMouseOut();
				}

				if (point.series) { // It may have been destroyed, #4130

					// trigger the event
					point.firePointEvent('mouseOver');

					// update the tooltip
					if (tooltip && (!tooltip.shared || series.noSharedTooltip)) {
						tooltip.refresh(point, e);
					}

					// hover this
					point.setState(HOVER_STATE);
					if (!byProximity) {
						chart.hoverPoint = point;
					}
				}
			},

			/**
			 * Runs on mouse out from the point
			 */
			onMouseOut: function () {
				var chart = this.series.chart,
					hoverPoints = chart.hoverPoints;

				this.firePointEvent('mouseOut');

				if (!hoverPoints || inArray(this, hoverPoints) === -1) { // #887, #2240
					this.setState();
					chart.hoverPoint = null;
				}
			},

			/**
			 * Import events from the series' and point's options. Only do it on
			 * demand, to save processing time on hovering.
			 */
			importEvents: function () {
				if (!this.hasImportedEvents) {
					var point = this,
						options = merge(point.series.options.point, point.options),
						events = options.events,
						eventType;

					point.events = events;

					for (eventType in events) {
						addEvent(point, eventType, events[eventType]);
					}
					this.hasImportedEvents = true;

				}
			},

			/**
			 * Set the point's state
			 * @param {String} state
			 */
			setState: function (state, move) {
				var point = this,
					plotX = point.plotX,
					plotY = point.plotY,
					series = point.series,
					stateOptions = series.options.states,
					markerOptions = defaultPlotOptions[series.type].marker && series.options.marker,
					normalDisabled = markerOptions && !markerOptions.enabled,
					markerStateOptions = markerOptions && markerOptions.states[state],
					stateDisabled = markerStateOptions && markerStateOptions.enabled === false,
					stateMarkerGraphic = series.stateMarkerGraphic,
					pointMarker = point.marker || {},
					chart = series.chart,
					radius,
					halo = series.halo,
					haloOptions,
					newSymbol,
					pointAttr;

				state = state || NORMAL_STATE; // empty string
				pointAttr = point.pointAttr[state] || series.pointAttr[state];

				if (
						// already has this state
						(state === point.state && !move) ||
						// selected points don't respond to hover
						(point.selected && state !== SELECT_STATE) ||
						// series' state options is disabled
						(stateOptions[state] && stateOptions[state].enabled === false) ||
						// general point marker's state options is disabled
						(state && (stateDisabled || (normalDisabled && markerStateOptions.enabled === false))) ||
						// individual point marker's state options is disabled
						(state && pointMarker.states && pointMarker.states[state] && pointMarker.states[state].enabled === false) // #1610

					) {
					return;
				}

				// apply hover styles to the existing point
				if (point.graphic) {
					radius = markerOptions && point.graphic.symbolName && pointAttr.r;
					point.graphic.attr(merge(
						pointAttr,
						radius ? { // new symbol attributes (#507, #612)
							x: plotX - radius,
							y: plotY - radius,
							width: 2 * radius,
							height: 2 * radius
						} : {}
					));

					// Zooming in from a range with no markers to a range with markers
					if (stateMarkerGraphic) {
						stateMarkerGraphic.hide();
					}
				} else {
					// if a graphic is not applied to each point in the normal state, create a shared
					// graphic for the hover state
					if (state && markerStateOptions) {
						radius = markerStateOptions.radius;
						newSymbol = pointMarker.symbol || series.symbol;

						// If the point has another symbol than the previous one, throw away the
						// state marker graphic and force a new one (#1459)
						if (stateMarkerGraphic && stateMarkerGraphic.currentSymbol !== newSymbol) {
							stateMarkerGraphic = stateMarkerGraphic.destroy();
						}

						// Add a new state marker graphic
						if (!stateMarkerGraphic) {
							if (newSymbol) {
								series.stateMarkerGraphic = stateMarkerGraphic = chart.renderer.symbol(
									newSymbol,
									plotX - radius,
									plotY - radius,
									2 * radius,
									2 * radius
								)
								.attr(pointAttr)
								.add(series.markerGroup);
								stateMarkerGraphic.currentSymbol = newSymbol;
							}

						// Move the existing graphic
						} else {
							stateMarkerGraphic[move ? 'animate' : 'attr']({ // #1054
								x: plotX - radius,
								y: plotY - radius
							});
						}
					}

					if (stateMarkerGraphic) {
						stateMarkerGraphic[state && chart.isInsidePlot(plotX, plotY, chart.inverted) ? 'show' : 'hide'](); // #2450
						stateMarkerGraphic.element.point = point; // #4310
					}
				}

				// Show me your halo
				haloOptions = stateOptions[state] && stateOptions[state].halo;
				if (haloOptions && haloOptions.size) {
					if (!halo) {
						series.halo = halo = chart.renderer.path()
							.add(chart.seriesGroup);
					}
					halo.attr(extend({
						fill: Color(point.color || series.color).setOpacity(haloOptions.opacity).get()
					}, haloOptions.attributes))[move ? 'animate' : 'attr']({
						d: point.haloPath(haloOptions.size)
					});
				} else if (halo) {
					halo.attr({ d: [] });
				}

				point.state = state;
			},

			haloPath: function (size) {
				var series = this.series,
					chart = series.chart,
					plotBox = series.getPlotBox(),
					inverted = chart.inverted;

				return chart.renderer.symbols.circle(
					plotBox.translateX + (inverted ? series.yAxis.len - this.plotY : this.plotX) - size, 
					plotBox.translateY + (inverted ? series.xAxis.len - this.plotX : this.plotY) - size, 
					size * 2, 
					size * 2
				);
			}
		});

		/*
		 * Extend the Series object with interaction
		 */

		extend(Series.prototype, {
			/**
			 * Series mouse over handler
			 */
			onMouseOver: function () {
				var series = this,
					chart = series.chart,
					hoverSeries = chart.hoverSeries;

				// set normal state to previous series
				if (hoverSeries && hoverSeries !== series) {
					hoverSeries.onMouseOut();
				}

				// trigger the event, but to save processing time,
				// only if defined
				if (series.options.events.mouseOver) {
					fireEvent(series, 'mouseOver');
				}

				// hover this
				series.setState(HOVER_STATE);
				chart.hoverSeries = series;
			},

			/**
			 * Series mouse out handler
			 */
			onMouseOut: function () {
				// trigger the event only if listeners exist
				var series = this,
					options = series.options,
					chart = series.chart,
					tooltip = chart.tooltip,
					hoverPoint = chart.hoverPoint;

				chart.hoverSeries = null; // #182, set to null before the mouseOut event fires

				// trigger mouse out on the point, which must be in this series
				if (hoverPoint) {
					hoverPoint.onMouseOut();
				}

				// fire the mouse out event
				if (series && options.events.mouseOut) {
					fireEvent(series, 'mouseOut');
				}


				// hide the tooltip
				if (tooltip && !options.stickyTracking && (!tooltip.shared || series.noSharedTooltip)) {
					tooltip.hide();
				}

				// set normal state
				series.setState();
			},

			/**
			 * Set the state of the graph
			 */
			setState: function (state) {
				var series = this,
					options = series.options,
					graph = series.graph,
					stateOptions = options.states,
					lineWidth = options.lineWidth,
					attribs,
					i = 0;

				state = state || NORMAL_STATE;

				if (series.state !== state) {
					series.state = state;

					if (stateOptions[state] && stateOptions[state].enabled === false) {
						return;
					}

					if (state) {
						lineWidth = stateOptions[state].lineWidth || lineWidth + (stateOptions[state].lineWidthPlus || 0); // #4035
					}

					if (graph && !graph.dashstyle) { // hover is turned off for dashed lines in VML
						attribs = {
							'stroke-width': lineWidth
						};
						// use attr because animate will cause any other animation on the graph to stop
						graph.attr(attribs);
						while (series['zoneGraph' + i]) {
							series['zoneGraph' + i].attr(attribs);
							i = i + 1;
						}
					}
				}
			},

			/**
			 * Set the visibility of the graph
			 *
			 * @param vis {Boolean} True to show the series, false to hide. If UNDEFINED,
			 *				the visibility is toggled.
			 */
			setVisible: function (vis, redraw) {
				var series = this,
					chart = series.chart,
					legendItem = series.legendItem,
					showOrHide,
					ignoreHiddenSeries = chart.options.chart.ignoreHiddenSeries,
					oldVisibility = series.visible;

				// if called without an argument, toggle visibility
				series.visible = vis = series.userOptions.visible = vis === UNDEFINED ? !oldVisibility : vis;
				showOrHide = vis ? 'show' : 'hide';

				// show or hide elements
				each(['group', 'dataLabelsGroup', 'markerGroup', 'tracker'], function (key) {
					if (series[key]) {
						series[key][showOrHide]();
					}
				});


				// hide tooltip (#1361)
				if (chart.hoverSeries === series || (chart.hoverPoint && chart.hoverPoint.series) === series) {
					series.onMouseOut();
				}


				if (legendItem) {
					chart.legend.colorizeItem(series, vis);
				}


				// rescale or adapt to resized chart
				series.isDirty = true;
				// in a stack, all other series are affected
				if (series.options.stacking) {
					each(chart.series, function (otherSeries) {
						if (otherSeries.options.stacking && otherSeries.visible) {
							otherSeries.isDirty = true;
						}
					});
				}

				// show or hide linked series
				each(series.linkedSeries, function (otherSeries) {
					otherSeries.setVisible(vis, false);
				});

				if (ignoreHiddenSeries) {
					chart.isDirtyBox = true;
				}
				if (redraw !== false) {
					chart.redraw();
				}

				fireEvent(series, showOrHide);
			},

			/**
			 * Show the graph
			 */
			show: function () {
				this.setVisible(true);
			},

			/**
			 * Hide the graph
			 */
			hide: function () {
				this.setVisible(false);
			},


			/**
			 * Set the selected state of the graph
			 *
			 * @param selected {Boolean} True to select the series, false to unselect. If
			 *				UNDEFINED, the selection state is toggled.
			 */
			select: function (selected) {
				var series = this;
				// if called without an argument, toggle
				series.selected = selected = (selected === UNDEFINED) ? !series.selected : selected;

				if (series.checkbox) {
					series.checkbox.checked = selected;
				}

				fireEvent(series, selected ? 'select' : 'unselect');
			},

			drawTracker: TrackerMixin.drawTrackerGraph
		});
		// global variables
		extend(Highcharts, {
			
			// Constructors
			Color: Color,
			Point: Point,
			Tick: Tick,	
			Renderer: Renderer,
			SVGElement: SVGElement,
			SVGRenderer: SVGRenderer,
			
			// Various
			arrayMin: arrayMin,
			arrayMax: arrayMax,
			charts: charts,
			dateFormat: dateFormat,
			error: error,
			format: format,
			pathAnim: pathAnim,
			getOptions: getOptions,
			hasBidiBug: hasBidiBug,
			isTouchDevice: isTouchDevice,
			setOptions: setOptions,
			addEvent: addEvent,
			removeEvent: removeEvent,
			createElement: createElement,
			discardElement: discardElement,
			css: css,
			each: each,
			map: map,
			merge: merge,
			splat: splat,
			extendClass: extendClass,
			pInt: pInt,
			svg: hasSVG,
			canvas: useCanVG,
			vml: !hasSVG && !useCanVG,
			product: PRODUCT,
			version: VERSION
		});

		}());

		/*** EXPORTS FROM exports-loader ***/
		module.exports = Highcharts

	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var React = __webpack_require__(5);

		module.exports = function (Highcharts, chartType) {
		  var displayName = 'Highcharts' + chartType;
		  var result = React.createClass({
		    displayName: displayName,

		    propTypes: {
		      config: React.PropTypes.object.isRequired,
		      isPureConfig: React.PropTypes.bool
		    },

		    renderChart: function renderChart(config) {
		      if (!config) {
		        throw new Error('Config must be specified for the ' + displayName + ' component');
		      }
		      var chartConfig = config.chart;

		      this.chart = new Highcharts[chartType](_extends({}, config, {
		        chart: _extends({}, chartConfig, {
		          renderTo: this.refs.chart.getDOMNode()
		        })
		      }));
		    },

		    shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
		      if (!this.props.isPureConfig || !(this.props.config === nextProps.config)) {
		        this.renderChart(nextProps.config);
		      }
		      return true;
		    },

		    getChart: function getChart() {
		      if (!this.chart) {
		        throw new Error('getChart() should not be called before the component is mounted');
		      }
		      return this.chart;
		    },

		    componentDidMount: function componentDidMount() {
		      this.renderChart(this.props.config);
		    },

		    render: function render() {
		      var props = this.props;
		      props = _extends({}, props, {
		        ref: 'chart'
		      });
		      return React.createElement('div', props);
		    }
		  });

		  result.Highcharts = Highcharts;
		  return result;
		};

	/***/ },
	/* 5 */
	/***/ function(module, exports) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  Bar: __webpack_require__(319),
	  Doughnut: __webpack_require__(323),
	  Line: __webpack_require__(324),
	  Pie: __webpack_require__(325),
	  PolarArea: __webpack_require__(326),
	  Radar: __webpack_require__(327),
	  createClass: __webpack_require__(320).createClass
	};


/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	var vars = __webpack_require__(320);

	module.exports = vars.createClass('Bar', ['getBarsAtEvent']);


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  createClass: function(chartType, methodNames, dataKey) {
	    var classData = {
	      displayName: chartType + 'Chart',
	      getInitialState: function() { return {}; },
	      render: function() {
	        var _props = {
	          ref: 'canvass'
	        };
	        for (var name in this.props) {
	          if (this.props.hasOwnProperty(name)) {
	            if (name !== 'data' && name !== 'options') {
	              _props[name] = this.props[name];
	            }
	          }
	        }
	        return React.createElement('canvas', _props);
	      }
	    };

	    var extras = ['clear', 'stop', 'resize', 'toBase64Image', 'generateLegend', 'update', 'addData', 'removeData'];
	    function extra(type) {
	      classData[type] = function() {
	        this.state.chart[name].apply(this.state.chart, arguments);
	      };
	    }

	    classData.componentDidMount = function() {
	      this.initializeChart(this.props);
	    };

	    classData.componentWillUnmount = function() {
	      var chart = this.state.chart;
	      chart.destroy();
	    };

	    classData.componentWillReceiveProps = function(nextProps) {
	      var chart = this.state.chart;
	      if (this.props.redraw) {
	        chart.destroy();
	        this.initializeChart(nextProps);
	      } else {
	        dataKey = dataKey || dataKeys[chart.name];
	        updatePoints(nextProps, chart, dataKey);
	        chart.update();
	      }
	    };

	    classData.initializeChart = function(nextProps) {
	      var Chart = __webpack_require__(321);
	      var el = this.getDOMNode();
	      var ctx = el.getContext("2d");
	      var chart = new Chart(ctx)[chartType](nextProps.data, nextProps.options || {});
	      this.state.chart = chart;
	    };

	    // return the chartjs instance
	    classData.getChart = function() {
	      return this.state.chart;
	    };

	    // return the canvass element that contains the chart
	    classData.getCanvass = function() {
	      return this.refs.canvass.getDOMNode();
	    };

	    var i;
	    for (i=0; i<extras.length; i++) {
	      extra(extras[i]);
	    }
	    for (i=0; i<methodNames.length; i++) {
	      extra(methodNames[i]);
	    }

	    var React = __webpack_require__(1);
	    return React.createClass(classData);
	  }
	};

	var dataKeys = {
	  'Line': 'points',
	  'Radar': 'points',
	  'Bar': 'bars'
	};

	var updatePoints = function(nextProps, chart, dataKey) {
	  var name = chart.name;

	  if (name === 'PolarArea' || name === 'Pie' || name === 'Doughnut') {
	    nextProps.data.forEach(function(segment, segmentIndex) {
	      chart.segments[segmentIndex].value = segment.value;
	    });
	  } else {
	    nextProps.data.datasets.forEach(function(set, setIndex) {
	      set.data.forEach(function(val, pointIndex) {
	        chart.datasets[setIndex][dataKey][pointIndex].value = val;
	      });
	    });
	  }
	};






/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * Chart.js
	 * http://chartjs.org/
	 * Version: 1.0.2
	 *
	 * Copyright 2015 Nick Downie
	 * Released under the MIT license
	 * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md
	 */


	(function(){

		"use strict";

		//Declare root variable - window in the browser, global on the server
		var root = this,
			previous = root.Chart;

		//Occupy the global variable of Chart, and create a simple base class
		var Chart = function(context){
			var chart = this;
			this.canvas = context.canvas;

			this.ctx = context;

			//Variables global to the chart
			var computeDimension = function(element,dimension)
			{
				if (element['offset'+dimension])
				{
					return element['offset'+dimension];
				}
				else
				{
					return document.defaultView.getComputedStyle(element).getPropertyValue(dimension);
				}
			}

			var width = this.width = computeDimension(context.canvas,'Width');
			var height = this.height = computeDimension(context.canvas,'Height');

			// Firefox requires this to work correctly
			context.canvas.width  = width;
			context.canvas.height = height;

			var width = this.width = context.canvas.width;
			var height = this.height = context.canvas.height;
			this.aspectRatio = this.width / this.height;
			//High pixel density displays - multiply the size of the canvas height/width by the device pixel ratio, then scale.
			helpers.retinaScale(this);

			return this;
		};
		//Globally expose the defaults to allow for user updating/changing
		Chart.defaults = {
			global: {
				// Boolean - Whether to animate the chart
				animation: true,

				// Number - Number of animation steps
				animationSteps: 60,

				// String - Animation easing effect
				animationEasing: "easeOutQuart",

				// Boolean - If we should show the scale at all
				showScale: true,

				// Boolean - If we want to override with a hard coded scale
				scaleOverride: false,

				// ** Required if scaleOverride is true **
				// Number - The number of steps in a hard coded scale
				scaleSteps: null,
				// Number - The value jump in the hard coded scale
				scaleStepWidth: null,
				// Number - The scale starting value
				scaleStartValue: null,

				// String - Colour of the scale line
				scaleLineColor: "rgba(0,0,0,.1)",

				// Number - Pixel width of the scale line
				scaleLineWidth: 1,

				// Boolean - Whether to show labels on the scale
				scaleShowLabels: true,

				// Interpolated JS string - can access value
				scaleLabel: "<%=value%>",

				// Boolean - Whether the scale should stick to integers, and not show any floats even if drawing space is there
				scaleIntegersOnly: true,

				// Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
				scaleBeginAtZero: false,

				// String - Scale label font declaration for the scale label
				scaleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

				// Number - Scale label font size in pixels
				scaleFontSize: 12,

				// String - Scale label font weight style
				scaleFontStyle: "normal",

				// String - Scale label font colour
				scaleFontColor: "#666",

				// Boolean - whether or not the chart should be responsive and resize when the browser does.
				responsive: false,

				// Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
				maintainAspectRatio: true,

				// Boolean - Determines whether to draw tooltips on the canvas or not - attaches events to touchmove & mousemove
				showTooltips: true,

				// Boolean - Determines whether to draw built-in tooltip or call custom tooltip function
				customTooltips: false,

				// Array - Array of string names to attach tooltip events
				tooltipEvents: ["mousemove", "touchstart", "touchmove", "mouseout"],

				// String - Tooltip background colour
				tooltipFillColor: "rgba(0,0,0,0.8)",

				// String - Tooltip label font declaration for the scale label
				tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

				// Number - Tooltip label font size in pixels
				tooltipFontSize: 14,

				// String - Tooltip font weight style
				tooltipFontStyle: "normal",

				// String - Tooltip label font colour
				tooltipFontColor: "#fff",

				// String - Tooltip title font declaration for the scale label
				tooltipTitleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

				// Number - Tooltip title font size in pixels
				tooltipTitleFontSize: 14,

				// String - Tooltip title font weight style
				tooltipTitleFontStyle: "bold",

				// String - Tooltip title font colour
				tooltipTitleFontColor: "#fff",

				// Number - pixel width of padding around tooltip text
				tooltipYPadding: 6,

				// Number - pixel width of padding around tooltip text
				tooltipXPadding: 6,

				// Number - Size of the caret on the tooltip
				tooltipCaretSize: 8,

				// Number - Pixel radius of the tooltip border
				tooltipCornerRadius: 6,

				// Number - Pixel offset from point x to tooltip edge
				tooltipXOffset: 10,

				// String - Template string for single tooltips
				tooltipTemplate: "<%if (label){%><%=label%>: <%}%><%= value %>",

				// String - Template string for single tooltips
				multiTooltipTemplate: "<%= value %>",

				// String - Colour behind the legend colour block
				multiTooltipKeyBackground: '#fff',

				// Function - Will fire on animation progression.
				onAnimationProgress: function(){},

				// Function - Will fire on animation completion.
				onAnimationComplete: function(){}

			}
		};

		//Create a dictionary of chart types, to allow for extension of existing types
		Chart.types = {};

		//Global Chart helpers object for utility methods and classes
		var helpers = Chart.helpers = {};

			//-- Basic js utility methods
		var each = helpers.each = function(loopable,callback,self){
				var additionalArgs = Array.prototype.slice.call(arguments, 3);
				// Check to see if null or undefined firstly.
				if (loopable){
					if (loopable.length === +loopable.length){
						var i;
						for (i=0; i<loopable.length; i++){
							callback.apply(self,[loopable[i], i].concat(additionalArgs));
						}
					}
					else{
						for (var item in loopable){
							callback.apply(self,[loopable[item],item].concat(additionalArgs));
						}
					}
				}
			},
			clone = helpers.clone = function(obj){
				var objClone = {};
				each(obj,function(value,key){
					if (obj.hasOwnProperty(key)) objClone[key] = value;
				});
				return objClone;
			},
			extend = helpers.extend = function(base){
				each(Array.prototype.slice.call(arguments,1), function(extensionObject) {
					each(extensionObject,function(value,key){
						if (extensionObject.hasOwnProperty(key)) base[key] = value;
					});
				});
				return base;
			},
			merge = helpers.merge = function(base,master){
				//Merge properties in left object over to a shallow clone of object right.
				var args = Array.prototype.slice.call(arguments,0);
				args.unshift({});
				return extend.apply(null, args);
			},
			indexOf = helpers.indexOf = function(arrayToSearch, item){
				if (Array.prototype.indexOf) {
					return arrayToSearch.indexOf(item);
				}
				else{
					for (var i = 0; i < arrayToSearch.length; i++) {
						if (arrayToSearch[i] === item) return i;
					}
					return -1;
				}
			},
			where = helpers.where = function(collection, filterCallback){
				var filtered = [];

				helpers.each(collection, function(item){
					if (filterCallback(item)){
						filtered.push(item);
					}
				});

				return filtered;
			},
			findNextWhere = helpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex){
				// Default to start of the array
				if (!startIndex){
					startIndex = -1;
				}
				for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
					var currentItem = arrayToSearch[i];
					if (filterCallback(currentItem)){
						return currentItem;
					}
				}
			},
			findPreviousWhere = helpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex){
				// Default to end of the array
				if (!startIndex){
					startIndex = arrayToSearch.length;
				}
				for (var i = startIndex - 1; i >= 0; i--) {
					var currentItem = arrayToSearch[i];
					if (filterCallback(currentItem)){
						return currentItem;
					}
				}
			},
			inherits = helpers.inherits = function(extensions){
				//Basic javascript inheritance based on the model created in Backbone.js
				var parent = this;
				var ChartElement = (extensions && extensions.hasOwnProperty("constructor")) ? extensions.constructor : function(){ return parent.apply(this, arguments); };

				var Surrogate = function(){ this.constructor = ChartElement;};
				Surrogate.prototype = parent.prototype;
				ChartElement.prototype = new Surrogate();

				ChartElement.extend = inherits;

				if (extensions) extend(ChartElement.prototype, extensions);

				ChartElement.__super__ = parent.prototype;

				return ChartElement;
			},
			noop = helpers.noop = function(){},
			uid = helpers.uid = (function(){
				var id=0;
				return function(){
					return "chart-" + id++;
				};
			})(),
			warn = helpers.warn = function(str){
				//Method for warning of errors
				if (window.console && typeof window.console.warn == "function") console.warn(str);
			},
			amd = helpers.amd = ("function" == 'function' && __webpack_require__(322)),
			//-- Math methods
			isNumber = helpers.isNumber = function(n){
				return !isNaN(parseFloat(n)) && isFinite(n);
			},
			max = helpers.max = function(array){
				return Math.max.apply( Math, array );
			},
			min = helpers.min = function(array){
				return Math.min.apply( Math, array );
			},
			cap = helpers.cap = function(valueToCap,maxValue,minValue){
				if(isNumber(maxValue)) {
					if( valueToCap > maxValue ) {
						return maxValue;
					}
				}
				else if(isNumber(minValue)){
					if ( valueToCap < minValue ){
						return minValue;
					}
				}
				return valueToCap;
			},
			getDecimalPlaces = helpers.getDecimalPlaces = function(num){
				if (num%1!==0 && isNumber(num)){
					return num.toString().split(".")[1].length;
				}
				else {
					return 0;
				}
			},
			toRadians = helpers.radians = function(degrees){
				return degrees * (Math.PI/180);
			},
			// Gets the angle from vertical upright to the point about a centre.
			getAngleFromPoint = helpers.getAngleFromPoint = function(centrePoint, anglePoint){
				var distanceFromXCenter = anglePoint.x - centrePoint.x,
					distanceFromYCenter = anglePoint.y - centrePoint.y,
					radialDistanceFromCenter = Math.sqrt( distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);


				var angle = Math.PI * 2 + Math.atan2(distanceFromYCenter, distanceFromXCenter);

				//If the segment is in the top left quadrant, we need to add another rotation to the angle
				if (distanceFromXCenter < 0 && distanceFromYCenter < 0){
					angle += Math.PI*2;
				}

				return {
					angle: angle,
					distance: radialDistanceFromCenter
				};
			},
			aliasPixel = helpers.aliasPixel = function(pixelWidth){
				return (pixelWidth % 2 === 0) ? 0 : 0.5;
			},
			splineCurve = helpers.splineCurve = function(FirstPoint,MiddlePoint,AfterPoint,t){
				//Props to Rob Spencer at scaled innovation for his post on splining between points
				//http://scaledinnovation.com/analytics/splines/aboutSplines.html
				var d01=Math.sqrt(Math.pow(MiddlePoint.x-FirstPoint.x,2)+Math.pow(MiddlePoint.y-FirstPoint.y,2)),
					d12=Math.sqrt(Math.pow(AfterPoint.x-MiddlePoint.x,2)+Math.pow(AfterPoint.y-MiddlePoint.y,2)),
					fa=t*d01/(d01+d12),// scaling factor for triangle Ta
					fb=t*d12/(d01+d12);
				return {
					inner : {
						x : MiddlePoint.x-fa*(AfterPoint.x-FirstPoint.x),
						y : MiddlePoint.y-fa*(AfterPoint.y-FirstPoint.y)
					},
					outer : {
						x: MiddlePoint.x+fb*(AfterPoint.x-FirstPoint.x),
						y : MiddlePoint.y+fb*(AfterPoint.y-FirstPoint.y)
					}
				};
			},
			calculateOrderOfMagnitude = helpers.calculateOrderOfMagnitude = function(val){
				return Math.floor(Math.log(val) / Math.LN10);
			},
			calculateScaleRange = helpers.calculateScaleRange = function(valuesArray, drawingSize, textSize, startFromZero, integersOnly){

				//Set a minimum step of two - a point at the top of the graph, and a point at the base
				var minSteps = 2,
					maxSteps = Math.floor(drawingSize/(textSize * 1.5)),
					skipFitting = (minSteps >= maxSteps);

				var maxValue = max(valuesArray),
					minValue = min(valuesArray);

				// We need some degree of seperation here to calculate the scales if all the values are the same
				// Adding/minusing 0.5 will give us a range of 1.
				if (maxValue === minValue){
					maxValue += 0.5;
					// So we don't end up with a graph with a negative start value if we've said always start from zero
					if (minValue >= 0.5 && !startFromZero){
						minValue -= 0.5;
					}
					else{
						// Make up a whole number above the values
						maxValue += 0.5;
					}
				}

				var	valueRange = Math.abs(maxValue - minValue),
					rangeOrderOfMagnitude = calculateOrderOfMagnitude(valueRange),
					graphMax = Math.ceil(maxValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude),
					graphMin = (startFromZero) ? 0 : Math.floor(minValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude),
					graphRange = graphMax - graphMin,
					stepValue = Math.pow(10, rangeOrderOfMagnitude),
					numberOfSteps = Math.round(graphRange / stepValue);

				//If we have more space on the graph we'll use it to give more definition to the data
				while((numberOfSteps > maxSteps || (numberOfSteps * 2) < maxSteps) && !skipFitting) {
					if(numberOfSteps > maxSteps){
						stepValue *=2;
						numberOfSteps = Math.round(graphRange/stepValue);
						// Don't ever deal with a decimal number of steps - cancel fitting and just use the minimum number of steps.
						if (numberOfSteps % 1 !== 0){
							skipFitting = true;
						}
					}
					//We can fit in double the amount of scale points on the scale
					else{
						//If user has declared ints only, and the step value isn't a decimal
						if (integersOnly && rangeOrderOfMagnitude >= 0){
							//If the user has said integers only, we need to check that making the scale more granular wouldn't make it a float
							if(stepValue/2 % 1 === 0){
								stepValue /=2;
								numberOfSteps = Math.round(graphRange/stepValue);
							}
							//If it would make it a float break out of the loop
							else{
								break;
							}
						}
						//If the scale doesn't have to be an int, make the scale more granular anyway.
						else{
							stepValue /=2;
							numberOfSteps = Math.round(graphRange/stepValue);
						}

					}
				}

				if (skipFitting){
					numberOfSteps = minSteps;
					stepValue = graphRange / numberOfSteps;
				}

				return {
					steps : numberOfSteps,
					stepValue : stepValue,
					min : graphMin,
					max	: graphMin + (numberOfSteps * stepValue)
				};

			},
			/* jshint ignore:start */
			// Blows up jshint errors based on the new Function constructor
			//Templating methods
			//Javascript micro templating by John Resig - source at http://ejohn.org/blog/javascript-micro-templating/
			template = helpers.template = function(templateString, valuesObject){

				// If templateString is function rather than string-template - call the function for valuesObject

				if(templateString instanceof Function){
				 	return templateString(valuesObject);
			 	}

				var cache = {};
				function tmpl(str, data){
					// Figure out if we're getting a template, or if we need to
					// load the template - and be sure to cache the result.
					var fn = !/\W/.test(str) ?
					cache[str] = cache[str] :

					// Generate a reusable function that will serve as a template
					// generator (and which will be cached).
					new Function("obj",
						"var p=[],print=function(){p.push.apply(p,arguments);};" +

						// Introduce the data as local variables using with(){}
						"with(obj){p.push('" +

						// Convert the template into pure JavaScript
						str
							.replace(/[\r\t\n]/g, " ")
							.split("<%").join("\t")
							.replace(/((^|%>)[^\t]*)'/g, "$1\r")
							.replace(/\t=(.*?)%>/g, "',$1,'")
							.split("\t").join("');")
							.split("%>").join("p.push('")
							.split("\r").join("\\'") +
						"');}return p.join('');"
					);

					// Provide some basic currying to the user
					return data ? fn( data ) : fn;
				}
				return tmpl(templateString,valuesObject);
			},
			/* jshint ignore:end */
			generateLabels = helpers.generateLabels = function(templateString,numberOfSteps,graphMin,stepValue){
				var labelsArray = new Array(numberOfSteps);
				if (labelTemplateString){
					each(labelsArray,function(val,index){
						labelsArray[index] = template(templateString,{value: (graphMin + (stepValue*(index+1)))});
					});
				}
				return labelsArray;
			},
			//--Animation methods
			//Easing functions adapted from Robert Penner's easing equations
			//http://www.robertpenner.com/easing/
			easingEffects = helpers.easingEffects = {
				linear: function (t) {
					return t;
				},
				easeInQuad: function (t) {
					return t * t;
				},
				easeOutQuad: function (t) {
					return -1 * t * (t - 2);
				},
				easeInOutQuad: function (t) {
					if ((t /= 1 / 2) < 1) return 1 / 2 * t * t;
					return -1 / 2 * ((--t) * (t - 2) - 1);
				},
				easeInCubic: function (t) {
					return t * t * t;
				},
				easeOutCubic: function (t) {
					return 1 * ((t = t / 1 - 1) * t * t + 1);
				},
				easeInOutCubic: function (t) {
					if ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t;
					return 1 / 2 * ((t -= 2) * t * t + 2);
				},
				easeInQuart: function (t) {
					return t * t * t * t;
				},
				easeOutQuart: function (t) {
					return -1 * ((t = t / 1 - 1) * t * t * t - 1);
				},
				easeInOutQuart: function (t) {
					if ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t * t;
					return -1 / 2 * ((t -= 2) * t * t * t - 2);
				},
				easeInQuint: function (t) {
					return 1 * (t /= 1) * t * t * t * t;
				},
				easeOutQuint: function (t) {
					return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
				},
				easeInOutQuint: function (t) {
					if ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t * t * t;
					return 1 / 2 * ((t -= 2) * t * t * t * t + 2);
				},
				easeInSine: function (t) {
					return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
				},
				easeOutSine: function (t) {
					return 1 * Math.sin(t / 1 * (Math.PI / 2));
				},
				easeInOutSine: function (t) {
					return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);
				},
				easeInExpo: function (t) {
					return (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
				},
				easeOutExpo: function (t) {
					return (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
				},
				easeInOutExpo: function (t) {
					if (t === 0) return 0;
					if (t === 1) return 1;
					if ((t /= 1 / 2) < 1) return 1 / 2 * Math.pow(2, 10 * (t - 1));
					return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);
				},
				easeInCirc: function (t) {
					if (t >= 1) return t;
					return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
				},
				easeOutCirc: function (t) {
					return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
				},
				easeInOutCirc: function (t) {
					if ((t /= 1 / 2) < 1) return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
					return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
				},
				easeInElastic: function (t) {
					var s = 1.70158;
					var p = 0;
					var a = 1;
					if (t === 0) return 0;
					if ((t /= 1) == 1) return 1;
					if (!p) p = 1 * 0.3;
					if (a < Math.abs(1)) {
						a = 1;
						s = p / 4;
					} else s = p / (2 * Math.PI) * Math.asin(1 / a);
					return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
				},
				easeOutElastic: function (t) {
					var s = 1.70158;
					var p = 0;
					var a = 1;
					if (t === 0) return 0;
					if ((t /= 1) == 1) return 1;
					if (!p) p = 1 * 0.3;
					if (a < Math.abs(1)) {
						a = 1;
						s = p / 4;
					} else s = p / (2 * Math.PI) * Math.asin(1 / a);
					return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;
				},
				easeInOutElastic: function (t) {
					var s = 1.70158;
					var p = 0;
					var a = 1;
					if (t === 0) return 0;
					if ((t /= 1 / 2) == 2) return 1;
					if (!p) p = 1 * (0.3 * 1.5);
					if (a < Math.abs(1)) {
						a = 1;
						s = p / 4;
					} else s = p / (2 * Math.PI) * Math.asin(1 / a);
					if (t < 1) return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
					return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;
				},
				easeInBack: function (t) {
					var s = 1.70158;
					return 1 * (t /= 1) * t * ((s + 1) * t - s);
				},
				easeOutBack: function (t) {
					var s = 1.70158;
					return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
				},
				easeInOutBack: function (t) {
					var s = 1.70158;
					if ((t /= 1 / 2) < 1) return 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));
					return 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
				},
				easeInBounce: function (t) {
					return 1 - easingEffects.easeOutBounce(1 - t);
				},
				easeOutBounce: function (t) {
					if ((t /= 1) < (1 / 2.75)) {
						return 1 * (7.5625 * t * t);
					} else if (t < (2 / 2.75)) {
						return 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);
					} else if (t < (2.5 / 2.75)) {
						return 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);
					} else {
						return 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);
					}
				},
				easeInOutBounce: function (t) {
					if (t < 1 / 2) return easingEffects.easeInBounce(t * 2) * 0.5;
					return easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;
				}
			},
			//Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
			requestAnimFrame = helpers.requestAnimFrame = (function(){
				return window.requestAnimationFrame ||
					window.webkitRequestAnimationFrame ||
					window.mozRequestAnimationFrame ||
					window.oRequestAnimationFrame ||
					window.msRequestAnimationFrame ||
					function(callback) {
						return window.setTimeout(callback, 1000 / 60);
					};
			})(),
			cancelAnimFrame = helpers.cancelAnimFrame = (function(){
				return window.cancelAnimationFrame ||
					window.webkitCancelAnimationFrame ||
					window.mozCancelAnimationFrame ||
					window.oCancelAnimationFrame ||
					window.msCancelAnimationFrame ||
					function(callback) {
						return window.clearTimeout(callback, 1000 / 60);
					};
			})(),
			animationLoop = helpers.animationLoop = function(callback,totalSteps,easingString,onProgress,onComplete,chartInstance){

				var currentStep = 0,
					easingFunction = easingEffects[easingString] || easingEffects.linear;

				var animationFrame = function(){
					currentStep++;
					var stepDecimal = currentStep/totalSteps;
					var easeDecimal = easingFunction(stepDecimal);

					callback.call(chartInstance,easeDecimal,stepDecimal, currentStep);
					onProgress.call(chartInstance,easeDecimal,stepDecimal);
					if (currentStep < totalSteps){
						chartInstance.animationFrame = requestAnimFrame(animationFrame);
					} else{
						onComplete.apply(chartInstance);
					}
				};
				requestAnimFrame(animationFrame);
			},
			//-- DOM methods
			getRelativePosition = helpers.getRelativePosition = function(evt){
				var mouseX, mouseY;
				var e = evt.originalEvent || evt,
					canvas = evt.currentTarget || evt.srcElement,
					boundingRect = canvas.getBoundingClientRect();

				if (e.touches){
					mouseX = e.touches[0].clientX - boundingRect.left;
					mouseY = e.touches[0].clientY - boundingRect.top;

				}
				else{
					mouseX = e.clientX - boundingRect.left;
					mouseY = e.clientY - boundingRect.top;
				}

				return {
					x : mouseX,
					y : mouseY
				};

			},
			addEvent = helpers.addEvent = function(node,eventType,method){
				if (node.addEventListener){
					node.addEventListener(eventType,method);
				} else if (node.attachEvent){
					node.attachEvent("on"+eventType, method);
				} else {
					node["on"+eventType] = method;
				}
			},
			removeEvent = helpers.removeEvent = function(node, eventType, handler){
				if (node.removeEventListener){
					node.removeEventListener(eventType, handler, false);
				} else if (node.detachEvent){
					node.detachEvent("on"+eventType,handler);
				} else{
					node["on" + eventType] = noop;
				}
			},
			bindEvents = helpers.bindEvents = function(chartInstance, arrayOfEvents, handler){
				// Create the events object if it's not already present
				if (!chartInstance.events) chartInstance.events = {};

				each(arrayOfEvents,function(eventName){
					chartInstance.events[eventName] = function(){
						handler.apply(chartInstance, arguments);
					};
					addEvent(chartInstance.chart.canvas,eventName,chartInstance.events[eventName]);
				});
			},
			unbindEvents = helpers.unbindEvents = function (chartInstance, arrayOfEvents) {
				each(arrayOfEvents, function(handler,eventName){
					removeEvent(chartInstance.chart.canvas, eventName, handler);
				});
			},
			getMaximumWidth = helpers.getMaximumWidth = function(domNode){
				var container = domNode.parentNode;
				// TODO = check cross browser stuff with this.
				return container.clientWidth;
			},
			getMaximumHeight = helpers.getMaximumHeight = function(domNode){
				var container = domNode.parentNode;
				// TODO = check cross browser stuff with this.
				return container.clientHeight;
			},
			getMaximumSize = helpers.getMaximumSize = helpers.getMaximumWidth, // legacy support
			retinaScale = helpers.retinaScale = function(chart){
				var ctx = chart.ctx,
					width = chart.canvas.width,
					height = chart.canvas.height;

				if (window.devicePixelRatio) {
					ctx.canvas.style.width = width + "px";
					ctx.canvas.style.height = height + "px";
					ctx.canvas.height = height * window.devicePixelRatio;
					ctx.canvas.width = width * window.devicePixelRatio;
					ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
				}
			},
			//-- Canvas methods
			clear = helpers.clear = function(chart){
				chart.ctx.clearRect(0,0,chart.width,chart.height);
			},
			fontString = helpers.fontString = function(pixelSize,fontStyle,fontFamily){
				return fontStyle + " " + pixelSize+"px " + fontFamily;
			},
			longestText = helpers.longestText = function(ctx,font,arrayOfStrings){
				ctx.font = font;
				var longest = 0;
				each(arrayOfStrings,function(string){
					var textWidth = ctx.measureText(string).width;
					longest = (textWidth > longest) ? textWidth : longest;
				});
				return longest;
			},
			drawRoundedRectangle = helpers.drawRoundedRectangle = function(ctx,x,y,width,height,radius){
				ctx.beginPath();
				ctx.moveTo(x + radius, y);
				ctx.lineTo(x + width - radius, y);
				ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
				ctx.lineTo(x + width, y + height - radius);
				ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
				ctx.lineTo(x + radius, y + height);
				ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
				ctx.lineTo(x, y + radius);
				ctx.quadraticCurveTo(x, y, x + radius, y);
				ctx.closePath();
			};


		//Store a reference to each instance - allowing us to globally resize chart instances on window resize.
		//Destroy method on the chart will remove the instance of the chart from this reference.
		Chart.instances = {};

		Chart.Type = function(data,options,chart){
			this.options = options;
			this.chart = chart;
			this.id = uid();
			//Add the chart instance to the global namespace
			Chart.instances[this.id] = this;

			// Initialize is always called when a chart type is created
			// By default it is a no op, but it should be extended
			if (options.responsive){
				this.resize();
			}
			this.initialize.call(this,data);
		};

		//Core methods that'll be a part of every chart type
		extend(Chart.Type.prototype,{
			initialize : function(){return this;},
			clear : function(){
				clear(this.chart);
				return this;
			},
			stop : function(){
				// Stops any current animation loop occuring
				cancelAnimFrame(this.animationFrame);
				return this;
			},
			resize : function(callback){
				this.stop();
				var canvas = this.chart.canvas,
					newWidth = getMaximumWidth(this.chart.canvas),
					newHeight = this.options.maintainAspectRatio ? newWidth / this.chart.aspectRatio : getMaximumHeight(this.chart.canvas);

				canvas.width = this.chart.width = newWidth;
				canvas.height = this.chart.height = newHeight;

				retinaScale(this.chart);

				if (typeof callback === "function"){
					callback.apply(this, Array.prototype.slice.call(arguments, 1));
				}
				return this;
			},
			reflow : noop,
			render : function(reflow){
				if (reflow){
					this.reflow();
				}
				if (this.options.animation && !reflow){
					helpers.animationLoop(
						this.draw,
						this.options.animationSteps,
						this.options.animationEasing,
						this.options.onAnimationProgress,
						this.options.onAnimationComplete,
						this
					);
				}
				else{
					this.draw();
					this.options.onAnimationComplete.call(this);
				}
				return this;
			},
			generateLegend : function(){
				return template(this.options.legendTemplate,this);
			},
			destroy : function(){
				this.clear();
				unbindEvents(this, this.events);
				var canvas = this.chart.canvas;

				// Reset canvas height/width attributes starts a fresh with the canvas context
				canvas.width = this.chart.width;
				canvas.height = this.chart.height;

				// < IE9 doesn't support removeProperty
				if (canvas.style.removeProperty) {
					canvas.style.removeProperty('width');
					canvas.style.removeProperty('height');
				} else {
					canvas.style.removeAttribute('width');
					canvas.style.removeAttribute('height');
				}

				delete Chart.instances[this.id];
			},
			showTooltip : function(ChartElements, forceRedraw){
				// Only redraw the chart if we've actually changed what we're hovering on.
				if (typeof this.activeElements === 'undefined') this.activeElements = [];

				var isChanged = (function(Elements){
					var changed = false;

					if (Elements.length !== this.activeElements.length){
						changed = true;
						return changed;
					}

					each(Elements, function(element, index){
						if (element !== this.activeElements[index]){
							changed = true;
						}
					}, this);
					return changed;
				}).call(this, ChartElements);

				if (!isChanged && !forceRedraw){
					return;
				}
				else{
					this.activeElements = ChartElements;
				}
				this.draw();
				if(this.options.customTooltips){
					this.options.customTooltips(false);
				}
				if (ChartElements.length > 0){
					// If we have multiple datasets, show a MultiTooltip for all of the data points at that index
					if (this.datasets && this.datasets.length > 1) {
						var dataArray,
							dataIndex;

						for (var i = this.datasets.length - 1; i >= 0; i--) {
							dataArray = this.datasets[i].points || this.datasets[i].bars || this.datasets[i].segments;
							dataIndex = indexOf(dataArray, ChartElements[0]);
							if (dataIndex !== -1){
								break;
							}
						}
						var tooltipLabels = [],
							tooltipColors = [],
							medianPosition = (function(index) {

								// Get all the points at that particular index
								var Elements = [],
									dataCollection,
									xPositions = [],
									yPositions = [],
									xMax,
									yMax,
									xMin,
									yMin;
								helpers.each(this.datasets, function(dataset){
									dataCollection = dataset.points || dataset.bars || dataset.segments;
									if (dataCollection[dataIndex] && dataCollection[dataIndex].hasValue()){
										Elements.push(dataCollection[dataIndex]);
									}
								});

								helpers.each(Elements, function(element) {
									xPositions.push(element.x);
									yPositions.push(element.y);


									//Include any colour information about the element
									tooltipLabels.push(helpers.template(this.options.multiTooltipTemplate, element));
									tooltipColors.push({
										fill: element._saved.fillColor || element.fillColor,
										stroke: element._saved.strokeColor || element.strokeColor
									});

								}, this);

								yMin = min(yPositions);
								yMax = max(yPositions);

								xMin = min(xPositions);
								xMax = max(xPositions);

								return {
									x: (xMin > this.chart.width/2) ? xMin : xMax,
									y: (yMin + yMax)/2
								};
							}).call(this, dataIndex);

						new Chart.MultiTooltip({
							x: medianPosition.x,
							y: medianPosition.y,
							xPadding: this.options.tooltipXPadding,
							yPadding: this.options.tooltipYPadding,
							xOffset: this.options.tooltipXOffset,
							fillColor: this.options.tooltipFillColor,
							textColor: this.options.tooltipFontColor,
							fontFamily: this.options.tooltipFontFamily,
							fontStyle: this.options.tooltipFontStyle,
							fontSize: this.options.tooltipFontSize,
							titleTextColor: this.options.tooltipTitleFontColor,
							titleFontFamily: this.options.tooltipTitleFontFamily,
							titleFontStyle: this.options.tooltipTitleFontStyle,
							titleFontSize: this.options.tooltipTitleFontSize,
							cornerRadius: this.options.tooltipCornerRadius,
							labels: tooltipLabels,
							legendColors: tooltipColors,
							legendColorBackground : this.options.multiTooltipKeyBackground,
							title: ChartElements[0].label,
							chart: this.chart,
							ctx: this.chart.ctx,
							custom: this.options.customTooltips
						}).draw();

					} else {
						each(ChartElements, function(Element) {
							var tooltipPosition = Element.tooltipPosition();
							new Chart.Tooltip({
								x: Math.round(tooltipPosition.x),
								y: Math.round(tooltipPosition.y),
								xPadding: this.options.tooltipXPadding,
								yPadding: this.options.tooltipYPadding,
								fillColor: this.options.tooltipFillColor,
								textColor: this.options.tooltipFontColor,
								fontFamily: this.options.tooltipFontFamily,
								fontStyle: this.options.tooltipFontStyle,
								fontSize: this.options.tooltipFontSize,
								caretHeight: this.options.tooltipCaretSize,
								cornerRadius: this.options.tooltipCornerRadius,
								text: template(this.options.tooltipTemplate, Element),
								chart: this.chart,
								custom: this.options.customTooltips
							}).draw();
						}, this);
					}
				}
				return this;
			},
			toBase64Image : function(){
				return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);
			}
		});

		Chart.Type.extend = function(extensions){

			var parent = this;

			var ChartType = function(){
				return parent.apply(this,arguments);
			};

			//Copy the prototype object of the this class
			ChartType.prototype = clone(parent.prototype);
			//Now overwrite some of the properties in the base class with the new extensions
			extend(ChartType.prototype, extensions);

			ChartType.extend = Chart.Type.extend;

			if (extensions.name || parent.prototype.name){

				var chartName = extensions.name || parent.prototype.name;
				//Assign any potential default values of the new chart type

				//If none are defined, we'll use a clone of the chart type this is being extended from.
				//I.e. if we extend a line chart, we'll use the defaults from the line chart if our new chart
				//doesn't define some defaults of their own.

				var baseDefaults = (Chart.defaults[parent.prototype.name]) ? clone(Chart.defaults[parent.prototype.name]) : {};

				Chart.defaults[chartName] = extend(baseDefaults,extensions.defaults);

				Chart.types[chartName] = ChartType;

				//Register this new chart type in the Chart prototype
				Chart.prototype[chartName] = function(data,options){
					var config = merge(Chart.defaults.global, Chart.defaults[chartName], options || {});
					return new ChartType(data,config,this);
				};
			} else{
				warn("Name not provided for this chart, so it hasn't been registered");
			}
			return parent;
		};

		Chart.Element = function(configuration){
			extend(this,configuration);
			this.initialize.apply(this,arguments);
			this.save();
		};
		extend(Chart.Element.prototype,{
			initialize : function(){},
			restore : function(props){
				if (!props){
					extend(this,this._saved);
				} else {
					each(props,function(key){
						this[key] = this._saved[key];
					},this);
				}
				return this;
			},
			save : function(){
				this._saved = clone(this);
				delete this._saved._saved;
				return this;
			},
			update : function(newProps){
				each(newProps,function(value,key){
					this._saved[key] = this[key];
					this[key] = value;
				},this);
				return this;
			},
			transition : function(props,ease){
				each(props,function(value,key){
					this[key] = ((value - this._saved[key]) * ease) + this._saved[key];
				},this);
				return this;
			},
			tooltipPosition : function(){
				return {
					x : this.x,
					y : this.y
				};
			},
			hasValue: function(){
				return isNumber(this.value);
			}
		});

		Chart.Element.extend = inherits;


		Chart.Point = Chart.Element.extend({
			display: true,
			inRange: function(chartX,chartY){
				var hitDetectionRange = this.hitDetectionRadius + this.radius;
				return ((Math.pow(chartX-this.x, 2)+Math.pow(chartY-this.y, 2)) < Math.pow(hitDetectionRange,2));
			},
			draw : function(){
				if (this.display){
					var ctx = this.ctx;
					ctx.beginPath();

					ctx.arc(this.x, this.y, this.radius, 0, Math.PI*2);
					ctx.closePath();

					ctx.strokeStyle = this.strokeColor;
					ctx.lineWidth = this.strokeWidth;

					ctx.fillStyle = this.fillColor;

					ctx.fill();
					ctx.stroke();
				}


				//Quick debug for bezier curve splining
				//Highlights control points and the line between them.
				//Handy for dev - stripped in the min version.

				// ctx.save();
				// ctx.fillStyle = "black";
				// ctx.strokeStyle = "black"
				// ctx.beginPath();
				// ctx.arc(this.controlPoints.inner.x,this.controlPoints.inner.y, 2, 0, Math.PI*2);
				// ctx.fill();

				// ctx.beginPath();
				// ctx.arc(this.controlPoints.outer.x,this.controlPoints.outer.y, 2, 0, Math.PI*2);
				// ctx.fill();

				// ctx.moveTo(this.controlPoints.inner.x,this.controlPoints.inner.y);
				// ctx.lineTo(this.x, this.y);
				// ctx.lineTo(this.controlPoints.outer.x,this.controlPoints.outer.y);
				// ctx.stroke();

				// ctx.restore();



			}
		});

		Chart.Arc = Chart.Element.extend({
			inRange : function(chartX,chartY){

				var pointRelativePosition = helpers.getAngleFromPoint(this, {
					x: chartX,
					y: chartY
				});

				//Check if within the range of the open/close angle
				var betweenAngles = (pointRelativePosition.angle >= this.startAngle && pointRelativePosition.angle <= this.endAngle),
					withinRadius = (pointRelativePosition.distance >= this.innerRadius && pointRelativePosition.distance <= this.outerRadius);

				return (betweenAngles && withinRadius);
				//Ensure within the outside of the arc centre, but inside arc outer
			},
			tooltipPosition : function(){
				var centreAngle = this.startAngle + ((this.endAngle - this.startAngle) / 2),
					rangeFromCentre = (this.outerRadius - this.innerRadius) / 2 + this.innerRadius;
				return {
					x : this.x + (Math.cos(centreAngle) * rangeFromCentre),
					y : this.y + (Math.sin(centreAngle) * rangeFromCentre)
				};
			},
			draw : function(animationPercent){

				var easingDecimal = animationPercent || 1;

				var ctx = this.ctx;

				ctx.beginPath();

				ctx.arc(this.x, this.y, this.outerRadius, this.startAngle, this.endAngle);

				ctx.arc(this.x, this.y, this.innerRadius, this.endAngle, this.startAngle, true);

				ctx.closePath();
				ctx.strokeStyle = this.strokeColor;
				ctx.lineWidth = this.strokeWidth;

				ctx.fillStyle = this.fillColor;

				ctx.fill();
				ctx.lineJoin = 'bevel';

				if (this.showStroke){
					ctx.stroke();
				}
			}
		});

		Chart.Rectangle = Chart.Element.extend({
			draw : function(){
				var ctx = this.ctx,
					halfWidth = this.width/2,
					leftX = this.x - halfWidth,
					rightX = this.x + halfWidth,
					top = this.base - (this.base - this.y),
					halfStroke = this.strokeWidth / 2;

				// Canvas doesn't allow us to stroke inside the width so we can
				// adjust the sizes to fit if we're setting a stroke on the line
				if (this.showStroke){
					leftX += halfStroke;
					rightX -= halfStroke;
					top += halfStroke;
				}

				ctx.beginPath();

				ctx.fillStyle = this.fillColor;
				ctx.strokeStyle = this.strokeColor;
				ctx.lineWidth = this.strokeWidth;

				// It'd be nice to keep this class totally generic to any rectangle
				// and simply specify which border to miss out.
				ctx.moveTo(leftX, this.base);
				ctx.lineTo(leftX, top);
				ctx.lineTo(rightX, top);
				ctx.lineTo(rightX, this.base);
				ctx.fill();
				if (this.showStroke){
					ctx.stroke();
				}
			},
			height : function(){
				return this.base - this.y;
			},
			inRange : function(chartX,chartY){
				return (chartX >= this.x - this.width/2 && chartX <= this.x + this.width/2) && (chartY >= this.y && chartY <= this.base);
			}
		});

		Chart.Tooltip = Chart.Element.extend({
			draw : function(){

				var ctx = this.chart.ctx;

				ctx.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);

				this.xAlign = "center";
				this.yAlign = "above";

				//Distance between the actual element.y position and the start of the tooltip caret
				var caretPadding = this.caretPadding = 2;

				var tooltipWidth = ctx.measureText(this.text).width + 2*this.xPadding,
					tooltipRectHeight = this.fontSize + 2*this.yPadding,
					tooltipHeight = tooltipRectHeight + this.caretHeight + caretPadding;

				if (this.x + tooltipWidth/2 >this.chart.width){
					this.xAlign = "left";
				} else if (this.x - tooltipWidth/2 < 0){
					this.xAlign = "right";
				}

				if (this.y - tooltipHeight < 0){
					this.yAlign = "below";
				}


				var tooltipX = this.x - tooltipWidth/2,
					tooltipY = this.y - tooltipHeight;

				ctx.fillStyle = this.fillColor;

				// Custom Tooltips
				if(this.custom){
					this.custom(this);
				}
				else{
					switch(this.yAlign)
					{
					case "above":
						//Draw a caret above the x/y
						ctx.beginPath();
						ctx.moveTo(this.x,this.y - caretPadding);
						ctx.lineTo(this.x + this.caretHeight, this.y - (caretPadding + this.caretHeight));
						ctx.lineTo(this.x - this.caretHeight, this.y - (caretPadding + this.caretHeight));
						ctx.closePath();
						ctx.fill();
						break;
					case "below":
						tooltipY = this.y + caretPadding + this.caretHeight;
						//Draw a caret below the x/y
						ctx.beginPath();
						ctx.moveTo(this.x, this.y + caretPadding);
						ctx.lineTo(this.x + this.caretHeight, this.y + caretPadding + this.caretHeight);
						ctx.lineTo(this.x - this.caretHeight, this.y + caretPadding + this.caretHeight);
						ctx.closePath();
						ctx.fill();
						break;
					}

					switch(this.xAlign)
					{
					case "left":
						tooltipX = this.x - tooltipWidth + (this.cornerRadius + this.caretHeight);
						break;
					case "right":
						tooltipX = this.x - (this.cornerRadius + this.caretHeight);
						break;
					}

					drawRoundedRectangle(ctx,tooltipX,tooltipY,tooltipWidth,tooltipRectHeight,this.cornerRadius);

					ctx.fill();

					ctx.fillStyle = this.textColor;
					ctx.textAlign = "center";
					ctx.textBaseline = "middle";
					ctx.fillText(this.text, tooltipX + tooltipWidth/2, tooltipY + tooltipRectHeight/2);
				}
			}
		});

		Chart.MultiTooltip = Chart.Element.extend({
			initialize : function(){
				this.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);

				this.titleFont = fontString(this.titleFontSize,this.titleFontStyle,this.titleFontFamily);

				this.height = (this.labels.length * this.fontSize) + ((this.labels.length-1) * (this.fontSize/2)) + (this.yPadding*2) + this.titleFontSize *1.5;

				this.ctx.font = this.titleFont;

				var titleWidth = this.ctx.measureText(this.title).width,
					//Label has a legend square as well so account for this.
					labelWidth = longestText(this.ctx,this.font,this.labels) + this.fontSize + 3,
					longestTextWidth = max([labelWidth,titleWidth]);

				this.width = longestTextWidth + (this.xPadding*2);


				var halfHeight = this.height/2;

				//Check to ensure the height will fit on the canvas
				if (this.y - halfHeight < 0 ){
					this.y = halfHeight;
				} else if (this.y + halfHeight > this.chart.height){
					this.y = this.chart.height - halfHeight;
				}

				//Decide whether to align left or right based on position on canvas
				if (this.x > this.chart.width/2){
					this.x -= this.xOffset + this.width;
				} else {
					this.x += this.xOffset;
				}


			},
			getLineHeight : function(index){
				var baseLineHeight = this.y - (this.height/2) + this.yPadding,
					afterTitleIndex = index-1;

				//If the index is zero, we're getting the title
				if (index === 0){
					return baseLineHeight + this.titleFontSize/2;
				} else{
					return baseLineHeight + ((this.fontSize*1.5*afterTitleIndex) + this.fontSize/2) + this.titleFontSize * 1.5;
				}

			},
			draw : function(){
				// Custom Tooltips
				if(this.custom){
					this.custom(this);
				}
				else{
					drawRoundedRectangle(this.ctx,this.x,this.y - this.height/2,this.width,this.height,this.cornerRadius);
					var ctx = this.ctx;
					ctx.fillStyle = this.fillColor;
					ctx.fill();
					ctx.closePath();

					ctx.textAlign = "left";
					ctx.textBaseline = "middle";
					ctx.fillStyle = this.titleTextColor;
					ctx.font = this.titleFont;

					ctx.fillText(this.title,this.x + this.xPadding, this.getLineHeight(0));

					ctx.font = this.font;
					helpers.each(this.labels,function(label,index){
						ctx.fillStyle = this.textColor;
						ctx.fillText(label,this.x + this.xPadding + this.fontSize + 3, this.getLineHeight(index + 1));

						//A bit gnarly, but clearing this rectangle breaks when using explorercanvas (clears whole canvas)
						//ctx.clearRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);
						//Instead we'll make a white filled block to put the legendColour palette over.

						ctx.fillStyle = this.legendColorBackground;
						ctx.fillRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);

						ctx.fillStyle = this.legendColors[index].fill;
						ctx.fillRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);


					},this);
				}
			}
		});

		Chart.Scale = Chart.Element.extend({
			initialize : function(){
				this.fit();
			},
			buildYLabels : function(){
				this.yLabels = [];

				var stepDecimalPlaces = getDecimalPlaces(this.stepValue);

				for (var i=0; i<=this.steps; i++){
					this.yLabels.push(template(this.templateString,{value:(this.min + (i * this.stepValue)).toFixed(stepDecimalPlaces)}));
				}
				this.yLabelWidth = (this.display && this.showLabels) ? longestText(this.ctx,this.font,this.yLabels) : 0;
			},
			addXLabel : function(label){
				this.xLabels.push(label);
				this.valuesCount++;
				this.fit();
			},
			removeXLabel : function(){
				this.xLabels.shift();
				this.valuesCount--;
				this.fit();
			},
			// Fitting loop to rotate x Labels and figure out what fits there, and also calculate how many Y steps to use
			fit: function(){
				// First we need the width of the yLabels, assuming the xLabels aren't rotated

				// To do that we need the base line at the top and base of the chart, assuming there is no x label rotation
				this.startPoint = (this.display) ? this.fontSize : 0;
				this.endPoint = (this.display) ? this.height - (this.fontSize * 1.5) - 5 : this.height; // -5 to pad labels

				// Apply padding settings to the start and end point.
				this.startPoint += this.padding;
				this.endPoint -= this.padding;

				// Cache the starting height, so can determine if we need to recalculate the scale yAxis
				var cachedHeight = this.endPoint - this.startPoint,
					cachedYLabelWidth;

				// Build the current yLabels so we have an idea of what size they'll be to start
				/*
				 *	This sets what is returned from calculateScaleRange as static properties of this class:
				 *
					this.steps;
					this.stepValue;
					this.min;
					this.max;
				 *
				 */
				this.calculateYRange(cachedHeight);

				// With these properties set we can now build the array of yLabels
				// and also the width of the largest yLabel
				this.buildYLabels();

				this.calculateXLabelRotation();

				while((cachedHeight > this.endPoint - this.startPoint)){
					cachedHeight = this.endPoint - this.startPoint;
					cachedYLabelWidth = this.yLabelWidth;

					this.calculateYRange(cachedHeight);
					this.buildYLabels();

					// Only go through the xLabel loop again if the yLabel width has changed
					if (cachedYLabelWidth < this.yLabelWidth){
						this.calculateXLabelRotation();
					}
				}

			},
			calculateXLabelRotation : function(){
				//Get the width of each grid by calculating the difference
				//between x offsets between 0 and 1.

				this.ctx.font = this.font;

				var firstWidth = this.ctx.measureText(this.xLabels[0]).width,
					lastWidth = this.ctx.measureText(this.xLabels[this.xLabels.length - 1]).width,
					firstRotated,
					lastRotated;


				this.xScalePaddingRight = lastWidth/2 + 3;
				this.xScalePaddingLeft = (firstWidth/2 > this.yLabelWidth + 10) ? firstWidth/2 : this.yLabelWidth + 10;

				this.xLabelRotation = 0;
				if (this.display){
					var originalLabelWidth = longestText(this.ctx,this.font,this.xLabels),
						cosRotation,
						firstRotatedWidth;
					this.xLabelWidth = originalLabelWidth;
					//Allow 3 pixels x2 padding either side for label readability
					var xGridWidth = Math.floor(this.calculateX(1) - this.calculateX(0)) - 6;

					//Max label rotate should be 90 - also act as a loop counter
					while ((this.xLabelWidth > xGridWidth && this.xLabelRotation === 0) || (this.xLabelWidth > xGridWidth && this.xLabelRotation <= 90 && this.xLabelRotation > 0)){
						cosRotation = Math.cos(toRadians(this.xLabelRotation));

						firstRotated = cosRotation * firstWidth;
						lastRotated = cosRotation * lastWidth;

						// We're right aligning the text now.
						if (firstRotated + this.fontSize / 2 > this.yLabelWidth + 8){
							this.xScalePaddingLeft = firstRotated + this.fontSize / 2;
						}
						this.xScalePaddingRight = this.fontSize/2;


						this.xLabelRotation++;
						this.xLabelWidth = cosRotation * originalLabelWidth;

					}
					if (this.xLabelRotation > 0){
						this.endPoint -= Math.sin(toRadians(this.xLabelRotation))*originalLabelWidth + 3;
					}
				}
				else{
					this.xLabelWidth = 0;
					this.xScalePaddingRight = this.padding;
					this.xScalePaddingLeft = this.padding;
				}

			},
			// Needs to be overidden in each Chart type
			// Otherwise we need to pass all the data into the scale class
			calculateYRange: noop,
			drawingArea: function(){
				return this.startPoint - this.endPoint;
			},
			calculateY : function(value){
				var scalingFactor = this.drawingArea() / (this.min - this.max);
				return this.endPoint - (scalingFactor * (value - this.min));
			},
			calculateX : function(index){
				var isRotated = (this.xLabelRotation > 0),
					// innerWidth = (this.offsetGridLines) ? this.width - offsetLeft - this.padding : this.width - (offsetLeft + halfLabelWidth * 2) - this.padding,
					innerWidth = this.width - (this.xScalePaddingLeft + this.xScalePaddingRight),
					valueWidth = innerWidth/Math.max((this.valuesCount - ((this.offsetGridLines) ? 0 : 1)), 1),
					valueOffset = (valueWidth * index) + this.xScalePaddingLeft;

				if (this.offsetGridLines){
					valueOffset += (valueWidth/2);
				}

				return Math.round(valueOffset);
			},
			update : function(newProps){
				helpers.extend(this, newProps);
				this.fit();
			},
			draw : function(){
				var ctx = this.ctx,
					yLabelGap = (this.endPoint - this.startPoint) / this.steps,
					xStart = Math.round(this.xScalePaddingLeft);
				if (this.display){
					ctx.fillStyle = this.textColor;
					ctx.font = this.font;
					each(this.yLabels,function(labelString,index){
						var yLabelCenter = this.endPoint - (yLabelGap * index),
							linePositionY = Math.round(yLabelCenter),
							drawHorizontalLine = this.showHorizontalLines;

						ctx.textAlign = "right";
						ctx.textBaseline = "middle";
						if (this.showLabels){
							ctx.fillText(labelString,xStart - 10,yLabelCenter);
						}

						// This is X axis, so draw it
						if (index === 0 && !drawHorizontalLine){
							drawHorizontalLine = true;
						}

						if (drawHorizontalLine){
							ctx.beginPath();
						}

						if (index > 0){
							// This is a grid line in the centre, so drop that
							ctx.lineWidth = this.gridLineWidth;
							ctx.strokeStyle = this.gridLineColor;
						} else {
							// This is the first line on the scale
							ctx.lineWidth = this.lineWidth;
							ctx.strokeStyle = this.lineColor;
						}

						linePositionY += helpers.aliasPixel(ctx.lineWidth);

						if(drawHorizontalLine){
							ctx.moveTo(xStart, linePositionY);
							ctx.lineTo(this.width, linePositionY);
							ctx.stroke();
							ctx.closePath();
						}

						ctx.lineWidth = this.lineWidth;
						ctx.strokeStyle = this.lineColor;
						ctx.beginPath();
						ctx.moveTo(xStart - 5, linePositionY);
						ctx.lineTo(xStart, linePositionY);
						ctx.stroke();
						ctx.closePath();

					},this);

					each(this.xLabels,function(label,index){
						var xPos = this.calculateX(index) + aliasPixel(this.lineWidth),
							// Check to see if line/bar here and decide where to place the line
							linePos = this.calculateX(index - (this.offsetGridLines ? 0.5 : 0)) + aliasPixel(this.lineWidth),
							isRotated = (this.xLabelRotation > 0),
							drawVerticalLine = this.showVerticalLines;

						// This is Y axis, so draw it
						if (index === 0 && !drawVerticalLine){
							drawVerticalLine = true;
						}

						if (drawVerticalLine){
							ctx.beginPath();
						}

						if (index > 0){
							// This is a grid line in the centre, so drop that
							ctx.lineWidth = this.gridLineWidth;
							ctx.strokeStyle = this.gridLineColor;
						} else {
							// This is the first line on the scale
							ctx.lineWidth = this.lineWidth;
							ctx.strokeStyle = this.lineColor;
						}

						if (drawVerticalLine){
							ctx.moveTo(linePos,this.endPoint);
							ctx.lineTo(linePos,this.startPoint - 3);
							ctx.stroke();
							ctx.closePath();
						}


						ctx.lineWidth = this.lineWidth;
						ctx.strokeStyle = this.lineColor;


						// Small lines at the bottom of the base grid line
						ctx.beginPath();
						ctx.moveTo(linePos,this.endPoint);
						ctx.lineTo(linePos,this.endPoint + 5);
						ctx.stroke();
						ctx.closePath();

						ctx.save();
						ctx.translate(xPos,(isRotated) ? this.endPoint + 12 : this.endPoint + 8);
						ctx.rotate(toRadians(this.xLabelRotation)*-1);
						ctx.font = this.font;
						ctx.textAlign = (isRotated) ? "right" : "center";
						ctx.textBaseline = (isRotated) ? "middle" : "top";
						ctx.fillText(label, 0, 0);
						ctx.restore();
					},this);

				}
			}

		});

		Chart.RadialScale = Chart.Element.extend({
			initialize: function(){
				this.size = min([this.height, this.width]);
				this.drawingArea = (this.display) ? (this.size/2) - (this.fontSize/2 + this.backdropPaddingY) : (this.size/2);
			},
			calculateCenterOffset: function(value){
				// Take into account half font size + the yPadding of the top value
				var scalingFactor = this.drawingArea / (this.max - this.min);

				return (value - this.min) * scalingFactor;
			},
			update : function(){
				if (!this.lineArc){
					this.setScaleSize();
				} else {
					this.drawingArea = (this.display) ? (this.size/2) - (this.fontSize/2 + this.backdropPaddingY) : (this.size/2);
				}
				this.buildYLabels();
			},
			buildYLabels: function(){
				this.yLabels = [];

				var stepDecimalPlaces = getDecimalPlaces(this.stepValue);

				for (var i=0; i<=this.steps; i++){
					this.yLabels.push(template(this.templateString,{value:(this.min + (i * this.stepValue)).toFixed(stepDecimalPlaces)}));
				}
			},
			getCircumference : function(){
				return ((Math.PI*2) / this.valuesCount);
			},
			setScaleSize: function(){
				/*
				 * Right, this is really confusing and there is a lot of maths going on here
				 * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
				 *
				 * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
				 *
				 * Solution:
				 *
				 * We assume the radius of the polygon is half the size of the canvas at first
				 * at each index we check if the text overlaps.
				 *
				 * Where it does, we store that angle and that index.
				 *
				 * After finding the largest index and angle we calculate how much we need to remove
				 * from the shape radius to move the point inwards by that x.
				 *
				 * We average the left and right distances to get the maximum shape radius that can fit in the box
				 * along with labels.
				 *
				 * Once we have that, we can find the centre point for the chart, by taking the x text protrusion
				 * on each side, removing that from the size, halving it and adding the left x protrusion width.
				 *
				 * This will mean we have a shape fitted to the canvas, as large as it can be with the labels
				 * and position it in the most space efficient manner
				 *
				 * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif
				 */


				// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
				// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
				var largestPossibleRadius = min([(this.height/2 - this.pointLabelFontSize - 5), this.width/2]),
					pointPosition,
					i,
					textWidth,
					halfTextWidth,
					furthestRight = this.width,
					furthestRightIndex,
					furthestRightAngle,
					furthestLeft = 0,
					furthestLeftIndex,
					furthestLeftAngle,
					xProtrusionLeft,
					xProtrusionRight,
					radiusReductionRight,
					radiusReductionLeft,
					maxWidthRadius;
				this.ctx.font = fontString(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily);
				for (i=0;i<this.valuesCount;i++){
					// 5px to space the text slightly out - similar to what we do in the draw function.
					pointPosition = this.getPointPosition(i, largestPossibleRadius);
					textWidth = this.ctx.measureText(template(this.templateString, { value: this.labels[i] })).width + 5;
					if (i === 0 || i === this.valuesCount/2){
						// If we're at index zero, or exactly the middle, we're at exactly the top/bottom
						// of the radar chart, so text will be aligned centrally, so we'll half it and compare
						// w/left and right text sizes
						halfTextWidth = textWidth/2;
						if (pointPosition.x + halfTextWidth > furthestRight) {
							furthestRight = pointPosition.x + halfTextWidth;
							furthestRightIndex = i;
						}
						if (pointPosition.x - halfTextWidth < furthestLeft) {
							furthestLeft = pointPosition.x - halfTextWidth;
							furthestLeftIndex = i;
						}
					}
					else if (i < this.valuesCount/2) {
						// Less than half the values means we'll left align the text
						if (pointPosition.x + textWidth > furthestRight) {
							furthestRight = pointPosition.x + textWidth;
							furthestRightIndex = i;
						}
					}
					else if (i > this.valuesCount/2){
						// More than half the values means we'll right align the text
						if (pointPosition.x - textWidth < furthestLeft) {
							furthestLeft = pointPosition.x - textWidth;
							furthestLeftIndex = i;
						}
					}
				}

				xProtrusionLeft = furthestLeft;

				xProtrusionRight = Math.ceil(furthestRight - this.width);

				furthestRightAngle = this.getIndexAngle(furthestRightIndex);

				furthestLeftAngle = this.getIndexAngle(furthestLeftIndex);

				radiusReductionRight = xProtrusionRight / Math.sin(furthestRightAngle + Math.PI/2);

				radiusReductionLeft = xProtrusionLeft / Math.sin(furthestLeftAngle + Math.PI/2);

				// Ensure we actually need to reduce the size of the chart
				radiusReductionRight = (isNumber(radiusReductionRight)) ? radiusReductionRight : 0;
				radiusReductionLeft = (isNumber(radiusReductionLeft)) ? radiusReductionLeft : 0;

				this.drawingArea = largestPossibleRadius - (radiusReductionLeft + radiusReductionRight)/2;

				//this.drawingArea = min([maxWidthRadius, (this.height - (2 * (this.pointLabelFontSize + 5)))/2])
				this.setCenterPoint(radiusReductionLeft, radiusReductionRight);

			},
			setCenterPoint: function(leftMovement, rightMovement){

				var maxRight = this.width - rightMovement - this.drawingArea,
					maxLeft = leftMovement + this.drawingArea;

				this.xCenter = (maxLeft + maxRight)/2;
				// Always vertically in the centre as the text height doesn't change
				this.yCenter = (this.height/2);
			},

			getIndexAngle : function(index){
				var angleMultiplier = (Math.PI * 2) / this.valuesCount;
				// Start from the top instead of right, so remove a quarter of the circle

				return index * angleMultiplier - (Math.PI/2);
			},
			getPointPosition : function(index, distanceFromCenter){
				var thisAngle = this.getIndexAngle(index);
				return {
					x : (Math.cos(thisAngle) * distanceFromCenter) + this.xCenter,
					y : (Math.sin(thisAngle) * distanceFromCenter) + this.yCenter
				};
			},
			draw: function(){
				if (this.display){
					var ctx = this.ctx;
					each(this.yLabels, function(label, index){
						// Don't draw a centre value
						if (index > 0){
							var yCenterOffset = index * (this.drawingArea/this.steps),
								yHeight = this.yCenter - yCenterOffset,
								pointPosition;

							// Draw circular lines around the scale
							if (this.lineWidth > 0){
								ctx.strokeStyle = this.lineColor;
								ctx.lineWidth = this.lineWidth;

								if(this.lineArc){
									ctx.beginPath();
									ctx.arc(this.xCenter, this.yCenter, yCenterOffset, 0, Math.PI*2);
									ctx.closePath();
									ctx.stroke();
								} else{
									ctx.beginPath();
									for (var i=0;i<this.valuesCount;i++)
									{
										pointPosition = this.getPointPosition(i, this.calculateCenterOffset(this.min + (index * this.stepValue)));
										if (i === 0){
											ctx.moveTo(pointPosition.x, pointPosition.y);
										} else {
											ctx.lineTo(pointPosition.x, pointPosition.y);
										}
									}
									ctx.closePath();
									ctx.stroke();
								}
							}
							if(this.showLabels){
								ctx.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);
								if (this.showLabelBackdrop){
									var labelWidth = ctx.measureText(label).width;
									ctx.fillStyle = this.backdropColor;
									ctx.fillRect(
										this.xCenter - labelWidth/2 - this.backdropPaddingX,
										yHeight - this.fontSize/2 - this.backdropPaddingY,
										labelWidth + this.backdropPaddingX*2,
										this.fontSize + this.backdropPaddingY*2
									);
								}
								ctx.textAlign = 'center';
								ctx.textBaseline = "middle";
								ctx.fillStyle = this.fontColor;
								ctx.fillText(label, this.xCenter, yHeight);
							}
						}
					}, this);

					if (!this.lineArc){
						ctx.lineWidth = this.angleLineWidth;
						ctx.strokeStyle = this.angleLineColor;
						for (var i = this.valuesCount - 1; i >= 0; i--) {
							if (this.angleLineWidth > 0){
								var outerPosition = this.getPointPosition(i, this.calculateCenterOffset(this.max));
								ctx.beginPath();
								ctx.moveTo(this.xCenter, this.yCenter);
								ctx.lineTo(outerPosition.x, outerPosition.y);
								ctx.stroke();
								ctx.closePath();
							}
							// Extra 3px out for some label spacing
							var pointLabelPosition = this.getPointPosition(i, this.calculateCenterOffset(this.max) + 5);
							ctx.font = fontString(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily);
							ctx.fillStyle = this.pointLabelFontColor;

							var labelsCount = this.labels.length,
								halfLabelsCount = this.labels.length/2,
								quarterLabelsCount = halfLabelsCount/2,
								upperHalf = (i < quarterLabelsCount || i > labelsCount - quarterLabelsCount),
								exactQuarter = (i === quarterLabelsCount || i === labelsCount - quarterLabelsCount);
							if (i === 0){
								ctx.textAlign = 'center';
							} else if(i === halfLabelsCount){
								ctx.textAlign = 'center';
							} else if (i < halfLabelsCount){
								ctx.textAlign = 'left';
							} else {
								ctx.textAlign = 'right';
							}

							// Set the correct text baseline based on outer positioning
							if (exactQuarter){
								ctx.textBaseline = 'middle';
							} else if (upperHalf){
								ctx.textBaseline = 'bottom';
							} else {
								ctx.textBaseline = 'top';
							}

							ctx.fillText(this.labels[i], pointLabelPosition.x, pointLabelPosition.y);
						}
					}
				}
			}
		});

		// Attach global event to resize each chart instance when the browser resizes
		helpers.addEvent(window, "resize", (function(){
			// Basic debounce of resize function so it doesn't hurt performance when resizing browser.
			var timeout;
			return function(){
				clearTimeout(timeout);
				timeout = setTimeout(function(){
					each(Chart.instances,function(instance){
						// If the responsive flag is set in the chart instance config
						// Cascade the resize event down to the chart.
						if (instance.options.responsive){
							instance.resize(instance.render, true);
						}
					});
				}, 50);
			};
		})());


		if (amd) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){
				return Chart;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof module === 'object' && module.exports) {
			module.exports = Chart;
		}

		root.Chart = Chart;

		Chart.noConflict = function(){
			root.Chart = previous;
			return Chart;
		};

	}).call(this);

	(function(){
		"use strict";

		var root = this,
			Chart = root.Chart,
			helpers = Chart.helpers;


		var defaultConfig = {
			//Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
			scaleBeginAtZero : true,

			//Boolean - Whether grid lines are shown across the chart
			scaleShowGridLines : true,

			//String - Colour of the grid lines
			scaleGridLineColor : "rgba(0,0,0,.05)",

			//Number - Width of the grid lines
			scaleGridLineWidth : 1,

			//Boolean - Whether to show horizontal lines (except X axis)
			scaleShowHorizontalLines: true,

			//Boolean - Whether to show vertical lines (except Y axis)
			scaleShowVerticalLines: true,

			//Boolean - If there is a stroke on each bar
			barShowStroke : true,

			//Number - Pixel width of the bar stroke
			barStrokeWidth : 2,

			//Number - Spacing between each of the X value sets
			barValueSpacing : 5,

			//Number - Spacing between data sets within X values
			barDatasetSpacing : 1,

			//String - A legend template
			legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].fillColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"

		};


		Chart.Type.extend({
			name: "Bar",
			defaults : defaultConfig,
			initialize:  function(data){

				//Expose options as a scope variable here so we can access it in the ScaleClass
				var options = this.options;

				this.ScaleClass = Chart.Scale.extend({
					offsetGridLines : true,
					calculateBarX : function(datasetCount, datasetIndex, barIndex){
						//Reusable method for calculating the xPosition of a given bar based on datasetIndex & width of the bar
						var xWidth = this.calculateBaseWidth(),
							xAbsolute = this.calculateX(barIndex) - (xWidth/2),
							barWidth = this.calculateBarWidth(datasetCount);

						return xAbsolute + (barWidth * datasetIndex) + (datasetIndex * options.barDatasetSpacing) + barWidth/2;
					},
					calculateBaseWidth : function(){
						return (this.calculateX(1) - this.calculateX(0)) - (2*options.barValueSpacing);
					},
					calculateBarWidth : function(datasetCount){
						//The padding between datasets is to the right of each bar, providing that there are more than 1 dataset
						var baseWidth = this.calculateBaseWidth() - ((datasetCount - 1) * options.barDatasetSpacing);

						return (baseWidth / datasetCount);
					}
				});

				this.datasets = [];

				//Set up tooltip events on the chart
				if (this.options.showTooltips){
					helpers.bindEvents(this, this.options.tooltipEvents, function(evt){
						var activeBars = (evt.type !== 'mouseout') ? this.getBarsAtEvent(evt) : [];

						this.eachBars(function(bar){
							bar.restore(['fillColor', 'strokeColor']);
						});
						helpers.each(activeBars, function(activeBar){
							activeBar.fillColor = activeBar.highlightFill;
							activeBar.strokeColor = activeBar.highlightStroke;
						});
						this.showTooltip(activeBars);
					});
				}

				//Declare the extension of the default point, to cater for the options passed in to the constructor
				this.BarClass = Chart.Rectangle.extend({
					strokeWidth : this.options.barStrokeWidth,
					showStroke : this.options.barShowStroke,
					ctx : this.chart.ctx
				});

				//Iterate through each of the datasets, and build this into a property of the chart
				helpers.each(data.datasets,function(dataset,datasetIndex){

					var datasetObject = {
						label : dataset.label || null,
						fillColor : dataset.fillColor,
						strokeColor : dataset.strokeColor,
						bars : []
					};

					this.datasets.push(datasetObject);

					helpers.each(dataset.data,function(dataPoint,index){
						//Add a new point for each piece of data, passing any required data to draw.
						datasetObject.bars.push(new this.BarClass({
							value : dataPoint,
							label : data.labels[index],
							datasetLabel: dataset.label,
							strokeColor : dataset.strokeColor,
							fillColor : dataset.fillColor,
							highlightFill : dataset.highlightFill || dataset.fillColor,
							highlightStroke : dataset.highlightStroke || dataset.strokeColor
						}));
					},this);

				},this);

				this.buildScale(data.labels);

				this.BarClass.prototype.base = this.scale.endPoint;

				this.eachBars(function(bar, index, datasetIndex){
					helpers.extend(bar, {
						width : this.scale.calculateBarWidth(this.datasets.length),
						x: this.scale.calculateBarX(this.datasets.length, datasetIndex, index),
						y: this.scale.endPoint
					});
					bar.save();
				}, this);

				this.render();
			},
			update : function(){
				this.scale.update();
				// Reset any highlight colours before updating.
				helpers.each(this.activeElements, function(activeElement){
					activeElement.restore(['fillColor', 'strokeColor']);
				});

				this.eachBars(function(bar){
					bar.save();
				});
				this.render();
			},
			eachBars : function(callback){
				helpers.each(this.datasets,function(dataset, datasetIndex){
					helpers.each(dataset.bars, callback, this, datasetIndex);
				},this);
			},
			getBarsAtEvent : function(e){
				var barsArray = [],
					eventPosition = helpers.getRelativePosition(e),
					datasetIterator = function(dataset){
						barsArray.push(dataset.bars[barIndex]);
					},
					barIndex;

				for (var datasetIndex = 0; datasetIndex < this.datasets.length; datasetIndex++) {
					for (barIndex = 0; barIndex < this.datasets[datasetIndex].bars.length; barIndex++) {
						if (this.datasets[datasetIndex].bars[barIndex].inRange(eventPosition.x,eventPosition.y)){
							helpers.each(this.datasets, datasetIterator);
							return barsArray;
						}
					}
				}

				return barsArray;
			},
			buildScale : function(labels){
				var self = this;

				var dataTotal = function(){
					var values = [];
					self.eachBars(function(bar){
						values.push(bar.value);
					});
					return values;
				};

				var scaleOptions = {
					templateString : this.options.scaleLabel,
					height : this.chart.height,
					width : this.chart.width,
					ctx : this.chart.ctx,
					textColor : this.options.scaleFontColor,
					fontSize : this.options.scaleFontSize,
					fontStyle : this.options.scaleFontStyle,
					fontFamily : this.options.scaleFontFamily,
					valuesCount : labels.length,
					beginAtZero : this.options.scaleBeginAtZero,
					integersOnly : this.options.scaleIntegersOnly,
					calculateYRange: function(currentHeight){
						var updatedRanges = helpers.calculateScaleRange(
							dataTotal(),
							currentHeight,
							this.fontSize,
							this.beginAtZero,
							this.integersOnly
						);
						helpers.extend(this, updatedRanges);
					},
					xLabels : labels,
					font : helpers.fontString(this.options.scaleFontSize, this.options.scaleFontStyle, this.options.scaleFontFamily),
					lineWidth : this.options.scaleLineWidth,
					lineColor : this.options.scaleLineColor,
					showHorizontalLines : this.options.scaleShowHorizontalLines,
					showVerticalLines : this.options.scaleShowVerticalLines,
					gridLineWidth : (this.options.scaleShowGridLines) ? this.options.scaleGridLineWidth : 0,
					gridLineColor : (this.options.scaleShowGridLines) ? this.options.scaleGridLineColor : "rgba(0,0,0,0)",
					padding : (this.options.showScale) ? 0 : (this.options.barShowStroke) ? this.options.barStrokeWidth : 0,
					showLabels : this.options.scaleShowLabels,
					display : this.options.showScale
				};

				if (this.options.scaleOverride){
					helpers.extend(scaleOptions, {
						calculateYRange: helpers.noop,
						steps: this.options.scaleSteps,
						stepValue: this.options.scaleStepWidth,
						min: this.options.scaleStartValue,
						max: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)
					});
				}

				this.scale = new this.ScaleClass(scaleOptions);
			},
			addData : function(valuesArray,label){
				//Map the values array for each of the datasets
				helpers.each(valuesArray,function(value,datasetIndex){
					//Add a new point for each piece of data, passing any required data to draw.
					this.datasets[datasetIndex].bars.push(new this.BarClass({
						value : value,
						label : label,
						x: this.scale.calculateBarX(this.datasets.length, datasetIndex, this.scale.valuesCount+1),
						y: this.scale.endPoint,
						width : this.scale.calculateBarWidth(this.datasets.length),
						base : this.scale.endPoint,
						strokeColor : this.datasets[datasetIndex].strokeColor,
						fillColor : this.datasets[datasetIndex].fillColor
					}));
				},this);

				this.scale.addXLabel(label);
				//Then re-render the chart.
				this.update();
			},
			removeData : function(){
				this.scale.removeXLabel();
				//Then re-render the chart.
				helpers.each(this.datasets,function(dataset){
					dataset.bars.shift();
				},this);
				this.update();
			},
			reflow : function(){
				helpers.extend(this.BarClass.prototype,{
					y: this.scale.endPoint,
					base : this.scale.endPoint
				});
				var newScaleProps = helpers.extend({
					height : this.chart.height,
					width : this.chart.width
				});
				this.scale.update(newScaleProps);
			},
			draw : function(ease){
				var easingDecimal = ease || 1;
				this.clear();

				var ctx = this.chart.ctx;

				this.scale.draw(easingDecimal);

				//Draw all the bars for each dataset
				helpers.each(this.datasets,function(dataset,datasetIndex){
					helpers.each(dataset.bars,function(bar,index){
						if (bar.hasValue()){
							bar.base = this.scale.endPoint;
							//Transition then draw
							bar.transition({
								x : this.scale.calculateBarX(this.datasets.length, datasetIndex, index),
								y : this.scale.calculateY(bar.value),
								width : this.scale.calculateBarWidth(this.datasets.length)
							}, easingDecimal).draw();
						}
					},this);

				},this);
			}
		});


	}).call(this);

	(function(){
		"use strict";

		var root = this,
			Chart = root.Chart,
			//Cache a local reference to Chart.helpers
			helpers = Chart.helpers;

		var defaultConfig = {
			//Boolean - Whether we should show a stroke on each segment
			segmentShowStroke : true,

			//String - The colour of each segment stroke
			segmentStrokeColor : "#fff",

			//Number - The width of each segment stroke
			segmentStrokeWidth : 2,

			//The percentage of the chart that we cut out of the middle.
			percentageInnerCutout : 50,

			//Number - Amount of animation steps
			animationSteps : 100,

			//String - Animation easing effect
			animationEasing : "easeOutBounce",

			//Boolean - Whether we animate the rotation of the Doughnut
			animateRotate : true,

			//Boolean - Whether we animate scaling the Doughnut from the centre
			animateScale : false,

			//String - A legend template
			legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"

		};


		Chart.Type.extend({
			//Passing in a name registers this chart in the Chart namespace
			name: "Doughnut",
			//Providing a defaults will also register the deafults in the chart namespace
			defaults : defaultConfig,
			//Initialize is fired when the chart is initialized - Data is passed in as a parameter
			//Config is automatically merged by the core of Chart.js, and is available at this.options
			initialize:  function(data){

				//Declare segments as a static property to prevent inheriting across the Chart type prototype
				this.segments = [];
				this.outerRadius = (helpers.min([this.chart.width,this.chart.height]) -	this.options.segmentStrokeWidth/2)/2;

				this.SegmentArc = Chart.Arc.extend({
					ctx : this.chart.ctx,
					x : this.chart.width/2,
					y : this.chart.height/2
				});

				//Set up tooltip events on the chart
				if (this.options.showTooltips){
					helpers.bindEvents(this, this.options.tooltipEvents, function(evt){
						var activeSegments = (evt.type !== 'mouseout') ? this.getSegmentsAtEvent(evt) : [];

						helpers.each(this.segments,function(segment){
							segment.restore(["fillColor"]);
						});
						helpers.each(activeSegments,function(activeSegment){
							activeSegment.fillColor = activeSegment.highlightColor;
						});
						this.showTooltip(activeSegments);
					});
				}
				this.calculateTotal(data);

				helpers.each(data,function(datapoint, index){
					this.addData(datapoint, index, true);
				},this);

				this.render();
			},
			getSegmentsAtEvent : function(e){
				var segmentsArray = [];

				var location = helpers.getRelativePosition(e);

				helpers.each(this.segments,function(segment){
					if (segment.inRange(location.x,location.y)) segmentsArray.push(segment);
				},this);
				return segmentsArray;
			},
			addData : function(segment, atIndex, silent){
				var index = atIndex || this.segments.length;
				this.segments.splice(index, 0, new this.SegmentArc({
					value : segment.value,
					outerRadius : (this.options.animateScale) ? 0 : this.outerRadius,
					innerRadius : (this.options.animateScale) ? 0 : (this.outerRadius/100) * this.options.percentageInnerCutout,
					fillColor : segment.color,
					highlightColor : segment.highlight || segment.color,
					showStroke : this.options.segmentShowStroke,
					strokeWidth : this.options.segmentStrokeWidth,
					strokeColor : this.options.segmentStrokeColor,
					startAngle : Math.PI * 1.5,
					circumference : (this.options.animateRotate) ? 0 : this.calculateCircumference(segment.value),
					label : segment.label
				}));
				if (!silent){
					this.reflow();
					this.update();
				}
			},
			calculateCircumference : function(value){
				return (Math.PI*2)*(Math.abs(value) / this.total);
			},
			calculateTotal : function(data){
				this.total = 0;
				helpers.each(data,function(segment){
					this.total += Math.abs(segment.value);
				},this);
			},
			update : function(){
				this.calculateTotal(this.segments);

				// Reset any highlight colours before updating.
				helpers.each(this.activeElements, function(activeElement){
					activeElement.restore(['fillColor']);
				});

				helpers.each(this.segments,function(segment){
					segment.save();
				});
				this.render();
			},

			removeData: function(atIndex){
				var indexToDelete = (helpers.isNumber(atIndex)) ? atIndex : this.segments.length-1;
				this.segments.splice(indexToDelete, 1);
				this.reflow();
				this.update();
			},

			reflow : function(){
				helpers.extend(this.SegmentArc.prototype,{
					x : this.chart.width/2,
					y : this.chart.height/2
				});
				this.outerRadius = (helpers.min([this.chart.width,this.chart.height]) -	this.options.segmentStrokeWidth/2)/2;
				helpers.each(this.segments, function(segment){
					segment.update({
						outerRadius : this.outerRadius,
						innerRadius : (this.outerRadius/100) * this.options.percentageInnerCutout
					});
				}, this);
			},
			draw : function(easeDecimal){
				var animDecimal = (easeDecimal) ? easeDecimal : 1;
				this.clear();
				helpers.each(this.segments,function(segment,index){
					segment.transition({
						circumference : this.calculateCircumference(segment.value),
						outerRadius : this.outerRadius,
						innerRadius : (this.outerRadius/100) * this.options.percentageInnerCutout
					},animDecimal);

					segment.endAngle = segment.startAngle + segment.circumference;

					segment.draw();
					if (index === 0){
						segment.startAngle = Math.PI * 1.5;
					}
					//Check to see if it's the last segment, if not get the next and update the start angle
					if (index < this.segments.length-1){
						this.segments[index+1].startAngle = segment.endAngle;
					}
				},this);

			}
		});

		Chart.types.Doughnut.extend({
			name : "Pie",
			defaults : helpers.merge(defaultConfig,{percentageInnerCutout : 0})
		});

	}).call(this);
	(function(){
		"use strict";

		var root = this,
			Chart = root.Chart,
			helpers = Chart.helpers;

		var defaultConfig = {

			///Boolean - Whether grid lines are shown across the chart
			scaleShowGridLines : true,

			//String - Colour of the grid lines
			scaleGridLineColor : "rgba(0,0,0,.05)",

			//Number - Width of the grid lines
			scaleGridLineWidth : 1,

			//Boolean - Whether to show horizontal lines (except X axis)
			scaleShowHorizontalLines: true,

			//Boolean - Whether to show vertical lines (except Y axis)
			scaleShowVerticalLines: true,

			//Boolean - Whether the line is curved between points
			bezierCurve : true,

			//Number - Tension of the bezier curve between points
			bezierCurveTension : 0.4,

			//Boolean - Whether to show a dot for each point
			pointDot : true,

			//Number - Radius of each point dot in pixels
			pointDotRadius : 4,

			//Number - Pixel width of point dot stroke
			pointDotStrokeWidth : 1,

			//Number - amount extra to add to the radius to cater for hit detection outside the drawn point
			pointHitDetectionRadius : 20,

			//Boolean - Whether to show a stroke for datasets
			datasetStroke : true,

			//Number - Pixel width of dataset stroke
			datasetStrokeWidth : 2,

			//Boolean - Whether to fill the dataset with a colour
			datasetFill : true,

			//String - A legend template
			legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"

		};


		Chart.Type.extend({
			name: "Line",
			defaults : defaultConfig,
			initialize:  function(data){
				//Declare the extension of the default point, to cater for the options passed in to the constructor
				this.PointClass = Chart.Point.extend({
					strokeWidth : this.options.pointDotStrokeWidth,
					radius : this.options.pointDotRadius,
					display: this.options.pointDot,
					hitDetectionRadius : this.options.pointHitDetectionRadius,
					ctx : this.chart.ctx,
					inRange : function(mouseX){
						return (Math.pow(mouseX-this.x, 2) < Math.pow(this.radius + this.hitDetectionRadius,2));
					}
				});

				this.datasets = [];

				//Set up tooltip events on the chart
				if (this.options.showTooltips){
					helpers.bindEvents(this, this.options.tooltipEvents, function(evt){
						var activePoints = (evt.type !== 'mouseout') ? this.getPointsAtEvent(evt) : [];
						this.eachPoints(function(point){
							point.restore(['fillColor', 'strokeColor']);
						});
						helpers.each(activePoints, function(activePoint){
							activePoint.fillColor = activePoint.highlightFill;
							activePoint.strokeColor = activePoint.highlightStroke;
						});
						this.showTooltip(activePoints);
					});
				}

				//Iterate through each of the datasets, and build this into a property of the chart
				helpers.each(data.datasets,function(dataset){

					var datasetObject = {
						label : dataset.label || null,
						fillColor : dataset.fillColor,
						strokeColor : dataset.strokeColor,
						pointColor : dataset.pointColor,
						pointStrokeColor : dataset.pointStrokeColor,
						points : []
					};

					this.datasets.push(datasetObject);


					helpers.each(dataset.data,function(dataPoint,index){
						//Add a new point for each piece of data, passing any required data to draw.
						datasetObject.points.push(new this.PointClass({
							value : dataPoint,
							label : data.labels[index],
							datasetLabel: dataset.label,
							strokeColor : dataset.pointStrokeColor,
							fillColor : dataset.pointColor,
							highlightFill : dataset.pointHighlightFill || dataset.pointColor,
							highlightStroke : dataset.pointHighlightStroke || dataset.pointStrokeColor
						}));
					},this);

					this.buildScale(data.labels);


					this.eachPoints(function(point, index){
						helpers.extend(point, {
							x: this.scale.calculateX(index),
							y: this.scale.endPoint
						});
						point.save();
					}, this);

				},this);


				this.render();
			},
			update : function(){
				this.scale.update();
				// Reset any highlight colours before updating.
				helpers.each(this.activeElements, function(activeElement){
					activeElement.restore(['fillColor', 'strokeColor']);
				});
				this.eachPoints(function(point){
					point.save();
				});
				this.render();
			},
			eachPoints : function(callback){
				helpers.each(this.datasets,function(dataset){
					helpers.each(dataset.points,callback,this);
				},this);
			},
			getPointsAtEvent : function(e){
				var pointsArray = [],
					eventPosition = helpers.getRelativePosition(e);
				helpers.each(this.datasets,function(dataset){
					helpers.each(dataset.points,function(point){
						if (point.inRange(eventPosition.x,eventPosition.y)) pointsArray.push(point);
					});
				},this);
				return pointsArray;
			},
			buildScale : function(labels){
				var self = this;

				var dataTotal = function(){
					var values = [];
					self.eachPoints(function(point){
						values.push(point.value);
					});

					return values;
				};

				var scaleOptions = {
					templateString : this.options.scaleLabel,
					height : this.chart.height,
					width : this.chart.width,
					ctx : this.chart.ctx,
					textColor : this.options.scaleFontColor,
					fontSize : this.options.scaleFontSize,
					fontStyle : this.options.scaleFontStyle,
					fontFamily : this.options.scaleFontFamily,
					valuesCount : labels.length,
					beginAtZero : this.options.scaleBeginAtZero,
					integersOnly : this.options.scaleIntegersOnly,
					calculateYRange : function(currentHeight){
						var updatedRanges = helpers.calculateScaleRange(
							dataTotal(),
							currentHeight,
							this.fontSize,
							this.beginAtZero,
							this.integersOnly
						);
						helpers.extend(this, updatedRanges);
					},
					xLabels : labels,
					font : helpers.fontString(this.options.scaleFontSize, this.options.scaleFontStyle, this.options.scaleFontFamily),
					lineWidth : this.options.scaleLineWidth,
					lineColor : this.options.scaleLineColor,
					showHorizontalLines : this.options.scaleShowHorizontalLines,
					showVerticalLines : this.options.scaleShowVerticalLines,
					gridLineWidth : (this.options.scaleShowGridLines) ? this.options.scaleGridLineWidth : 0,
					gridLineColor : (this.options.scaleShowGridLines) ? this.options.scaleGridLineColor : "rgba(0,0,0,0)",
					padding: (this.options.showScale) ? 0 : this.options.pointDotRadius + this.options.pointDotStrokeWidth,
					showLabels : this.options.scaleShowLabels,
					display : this.options.showScale
				};

				if (this.options.scaleOverride){
					helpers.extend(scaleOptions, {
						calculateYRange: helpers.noop,
						steps: this.options.scaleSteps,
						stepValue: this.options.scaleStepWidth,
						min: this.options.scaleStartValue,
						max: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)
					});
				}


				this.scale = new Chart.Scale(scaleOptions);
			},
			addData : function(valuesArray,label){
				//Map the values array for each of the datasets

				helpers.each(valuesArray,function(value,datasetIndex){
					//Add a new point for each piece of data, passing any required data to draw.
					this.datasets[datasetIndex].points.push(new this.PointClass({
						value : value,
						label : label,
						x: this.scale.calculateX(this.scale.valuesCount+1),
						y: this.scale.endPoint,
						strokeColor : this.datasets[datasetIndex].pointStrokeColor,
						fillColor : this.datasets[datasetIndex].pointColor
					}));
				},this);

				this.scale.addXLabel(label);
				//Then re-render the chart.
				this.update();
			},
			removeData : function(){
				this.scale.removeXLabel();
				//Then re-render the chart.
				helpers.each(this.datasets,function(dataset){
					dataset.points.shift();
				},this);
				this.update();
			},
			reflow : function(){
				var newScaleProps = helpers.extend({
					height : this.chart.height,
					width : this.chart.width
				});
				this.scale.update(newScaleProps);
			},
			draw : function(ease){
				var easingDecimal = ease || 1;
				this.clear();

				var ctx = this.chart.ctx;

				// Some helper methods for getting the next/prev points
				var hasValue = function(item){
					return item.value !== null;
				},
				nextPoint = function(point, collection, index){
					return helpers.findNextWhere(collection, hasValue, index) || point;
				},
				previousPoint = function(point, collection, index){
					return helpers.findPreviousWhere(collection, hasValue, index) || point;
				};

				this.scale.draw(easingDecimal);


				helpers.each(this.datasets,function(dataset){
					var pointsWithValues = helpers.where(dataset.points, hasValue);

					//Transition each point first so that the line and point drawing isn't out of sync
					//We can use this extra loop to calculate the control points of this dataset also in this loop

					helpers.each(dataset.points, function(point, index){
						if (point.hasValue()){
							point.transition({
								y : this.scale.calculateY(point.value),
								x : this.scale.calculateX(index)
							}, easingDecimal);
						}
					},this);


					// Control points need to be calculated in a seperate loop, because we need to know the current x/y of the point
					// This would cause issues when there is no animation, because the y of the next point would be 0, so beziers would be skewed
					if (this.options.bezierCurve){
						helpers.each(pointsWithValues, function(point, index){
							var tension = (index > 0 && index < pointsWithValues.length - 1) ? this.options.bezierCurveTension : 0;
							point.controlPoints = helpers.splineCurve(
								previousPoint(point, pointsWithValues, index),
								point,
								nextPoint(point, pointsWithValues, index),
								tension
							);

							// Prevent the bezier going outside of the bounds of the graph

							// Cap puter bezier handles to the upper/lower scale bounds
							if (point.controlPoints.outer.y > this.scale.endPoint){
								point.controlPoints.outer.y = this.scale.endPoint;
							}
							else if (point.controlPoints.outer.y < this.scale.startPoint){
								point.controlPoints.outer.y = this.scale.startPoint;
							}

							// Cap inner bezier handles to the upper/lower scale bounds
							if (point.controlPoints.inner.y > this.scale.endPoint){
								point.controlPoints.inner.y = this.scale.endPoint;
							}
							else if (point.controlPoints.inner.y < this.scale.startPoint){
								point.controlPoints.inner.y = this.scale.startPoint;
							}
						},this);
					}


					//Draw the line between all the points
					ctx.lineWidth = this.options.datasetStrokeWidth;
					ctx.strokeStyle = dataset.strokeColor;
					ctx.beginPath();

					helpers.each(pointsWithValues, function(point, index){
						if (index === 0){
							ctx.moveTo(point.x, point.y);
						}
						else{
							if(this.options.bezierCurve){
								var previous = previousPoint(point, pointsWithValues, index);

								ctx.bezierCurveTo(
									previous.controlPoints.outer.x,
									previous.controlPoints.outer.y,
									point.controlPoints.inner.x,
									point.controlPoints.inner.y,
									point.x,
									point.y
								);
							}
							else{
								ctx.lineTo(point.x,point.y);
							}
						}
					}, this);

					ctx.stroke();

					if (this.options.datasetFill && pointsWithValues.length > 0){
						//Round off the line by going to the base of the chart, back to the start, then fill.
						ctx.lineTo(pointsWithValues[pointsWithValues.length - 1].x, this.scale.endPoint);
						ctx.lineTo(pointsWithValues[0].x, this.scale.endPoint);
						ctx.fillStyle = dataset.fillColor;
						ctx.closePath();
						ctx.fill();
					}

					//Now draw the points over the line
					//A little inefficient double looping, but better than the line
					//lagging behind the point positions
					helpers.each(pointsWithValues,function(point){
						point.draw();
					});
				},this);
			}
		});


	}).call(this);

	(function(){
		"use strict";

		var root = this,
			Chart = root.Chart,
			//Cache a local reference to Chart.helpers
			helpers = Chart.helpers;

		var defaultConfig = {
			//Boolean - Show a backdrop to the scale label
			scaleShowLabelBackdrop : true,

			//String - The colour of the label backdrop
			scaleBackdropColor : "rgba(255,255,255,0.75)",

			// Boolean - Whether the scale should begin at zero
			scaleBeginAtZero : true,

			//Number - The backdrop padding above & below the label in pixels
			scaleBackdropPaddingY : 2,

			//Number - The backdrop padding to the side of the label in pixels
			scaleBackdropPaddingX : 2,

			//Boolean - Show line for each value in the scale
			scaleShowLine : true,

			//Boolean - Stroke a line around each segment in the chart
			segmentShowStroke : true,

			//String - The colour of the stroke on each segement.
			segmentStrokeColor : "#fff",

			//Number - The width of the stroke value in pixels
			segmentStrokeWidth : 2,

			//Number - Amount of animation steps
			animationSteps : 100,

			//String - Animation easing effect.
			animationEasing : "easeOutBounce",

			//Boolean - Whether to animate the rotation of the chart
			animateRotate : true,

			//Boolean - Whether to animate scaling the chart from the centre
			animateScale : false,

			//String - A legend template
			legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"
		};


		Chart.Type.extend({
			//Passing in a name registers this chart in the Chart namespace
			name: "PolarArea",
			//Providing a defaults will also register the deafults in the chart namespace
			defaults : defaultConfig,
			//Initialize is fired when the chart is initialized - Data is passed in as a parameter
			//Config is automatically merged by the core of Chart.js, and is available at this.options
			initialize:  function(data){
				this.segments = [];
				//Declare segment class as a chart instance specific class, so it can share props for this instance
				this.SegmentArc = Chart.Arc.extend({
					showStroke : this.options.segmentShowStroke,
					strokeWidth : this.options.segmentStrokeWidth,
					strokeColor : this.options.segmentStrokeColor,
					ctx : this.chart.ctx,
					innerRadius : 0,
					x : this.chart.width/2,
					y : this.chart.height/2
				});
				this.scale = new Chart.RadialScale({
					display: this.options.showScale,
					fontStyle: this.options.scaleFontStyle,
					fontSize: this.options.scaleFontSize,
					fontFamily: this.options.scaleFontFamily,
					fontColor: this.options.scaleFontColor,
					showLabels: this.options.scaleShowLabels,
					showLabelBackdrop: this.options.scaleShowLabelBackdrop,
					backdropColor: this.options.scaleBackdropColor,
					backdropPaddingY : this.options.scaleBackdropPaddingY,
					backdropPaddingX: this.options.scaleBackdropPaddingX,
					lineWidth: (this.options.scaleShowLine) ? this.options.scaleLineWidth : 0,
					lineColor: this.options.scaleLineColor,
					lineArc: true,
					width: this.chart.width,
					height: this.chart.height,
					xCenter: this.chart.width/2,
					yCenter: this.chart.height/2,
					ctx : this.chart.ctx,
					templateString: this.options.scaleLabel,
					valuesCount: data.length
				});

				this.updateScaleRange(data);

				this.scale.update();

				helpers.each(data,function(segment,index){
					this.addData(segment,index,true);
				},this);

				//Set up tooltip events on the chart
				if (this.options.showTooltips){
					helpers.bindEvents(this, this.options.tooltipEvents, function(evt){
						var activeSegments = (evt.type !== 'mouseout') ? this.getSegmentsAtEvent(evt) : [];
						helpers.each(this.segments,function(segment){
							segment.restore(["fillColor"]);
						});
						helpers.each(activeSegments,function(activeSegment){
							activeSegment.fillColor = activeSegment.highlightColor;
						});
						this.showTooltip(activeSegments);
					});
				}

				this.render();
			},
			getSegmentsAtEvent : function(e){
				var segmentsArray = [];

				var location = helpers.getRelativePosition(e);

				helpers.each(this.segments,function(segment){
					if (segment.inRange(location.x,location.y)) segmentsArray.push(segment);
				},this);
				return segmentsArray;
			},
			addData : function(segment, atIndex, silent){
				var index = atIndex || this.segments.length;

				this.segments.splice(index, 0, new this.SegmentArc({
					fillColor: segment.color,
					highlightColor: segment.highlight || segment.color,
					label: segment.label,
					value: segment.value,
					outerRadius: (this.options.animateScale) ? 0 : this.scale.calculateCenterOffset(segment.value),
					circumference: (this.options.animateRotate) ? 0 : this.scale.getCircumference(),
					startAngle: Math.PI * 1.5
				}));
				if (!silent){
					this.reflow();
					this.update();
				}
			},
			removeData: function(atIndex){
				var indexToDelete = (helpers.isNumber(atIndex)) ? atIndex : this.segments.length-1;
				this.segments.splice(indexToDelete, 1);
				this.reflow();
				this.update();
			},
			calculateTotal: function(data){
				this.total = 0;
				helpers.each(data,function(segment){
					this.total += segment.value;
				},this);
				this.scale.valuesCount = this.segments.length;
			},
			updateScaleRange: function(datapoints){
				var valuesArray = [];
				helpers.each(datapoints,function(segment){
					valuesArray.push(segment.value);
				});

				var scaleSizes = (this.options.scaleOverride) ?
					{
						steps: this.options.scaleSteps,
						stepValue: this.options.scaleStepWidth,
						min: this.options.scaleStartValue,
						max: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)
					} :
					helpers.calculateScaleRange(
						valuesArray,
						helpers.min([this.chart.width, this.chart.height])/2,
						this.options.scaleFontSize,
						this.options.scaleBeginAtZero,
						this.options.scaleIntegersOnly
					);

				helpers.extend(
					this.scale,
					scaleSizes,
					{
						size: helpers.min([this.chart.width, this.chart.height]),
						xCenter: this.chart.width/2,
						yCenter: this.chart.height/2
					}
				);

			},
			update : function(){
				this.calculateTotal(this.segments);

				helpers.each(this.segments,function(segment){
					segment.save();
				});
				
				this.reflow();
				this.render();
			},
			reflow : function(){
				helpers.extend(this.SegmentArc.prototype,{
					x : this.chart.width/2,
					y : this.chart.height/2
				});
				this.updateScaleRange(this.segments);
				this.scale.update();

				helpers.extend(this.scale,{
					xCenter: this.chart.width/2,
					yCenter: this.chart.height/2
				});

				helpers.each(this.segments, function(segment){
					segment.update({
						outerRadius : this.scale.calculateCenterOffset(segment.value)
					});
				}, this);

			},
			draw : function(ease){
				var easingDecimal = ease || 1;
				//Clear & draw the canvas
				this.clear();
				helpers.each(this.segments,function(segment, index){
					segment.transition({
						circumference : this.scale.getCircumference(),
						outerRadius : this.scale.calculateCenterOffset(segment.value)
					},easingDecimal);

					segment.endAngle = segment.startAngle + segment.circumference;

					// If we've removed the first segment we need to set the first one to
					// start at the top.
					if (index === 0){
						segment.startAngle = Math.PI * 1.5;
					}

					//Check to see if it's the last segment, if not get the next and update the start angle
					if (index < this.segments.length - 1){
						this.segments[index+1].startAngle = segment.endAngle;
					}
					segment.draw();
				}, this);
				this.scale.draw();
			}
		});

	}).call(this);
	(function(){
		"use strict";

		var root = this,
			Chart = root.Chart,
			helpers = Chart.helpers;



		Chart.Type.extend({
			name: "Radar",
			defaults:{
				//Boolean - Whether to show lines for each scale point
				scaleShowLine : true,

				//Boolean - Whether we show the angle lines out of the radar
				angleShowLineOut : true,

				//Boolean - Whether to show labels on the scale
				scaleShowLabels : false,

				// Boolean - Whether the scale should begin at zero
				scaleBeginAtZero : true,

				//String - Colour of the angle line
				angleLineColor : "rgba(0,0,0,.1)",

				//Number - Pixel width of the angle line
				angleLineWidth : 1,

				//String - Point label font declaration
				pointLabelFontFamily : "'Arial'",

				//String - Point label font weight
				pointLabelFontStyle : "normal",

				//Number - Point label font size in pixels
				pointLabelFontSize : 10,

				//String - Point label font colour
				pointLabelFontColor : "#666",

				//Boolean - Whether to show a dot for each point
				pointDot : true,

				//Number - Radius of each point dot in pixels
				pointDotRadius : 3,

				//Number - Pixel width of point dot stroke
				pointDotStrokeWidth : 1,

				//Number - amount extra to add to the radius to cater for hit detection outside the drawn point
				pointHitDetectionRadius : 20,

				//Boolean - Whether to show a stroke for datasets
				datasetStroke : true,

				//Number - Pixel width of dataset stroke
				datasetStrokeWidth : 2,

				//Boolean - Whether to fill the dataset with a colour
				datasetFill : true,

				//String - A legend template
				legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"

			},

			initialize: function(data){
				this.PointClass = Chart.Point.extend({
					strokeWidth : this.options.pointDotStrokeWidth,
					radius : this.options.pointDotRadius,
					display: this.options.pointDot,
					hitDetectionRadius : this.options.pointHitDetectionRadius,
					ctx : this.chart.ctx
				});

				this.datasets = [];

				this.buildScale(data);

				//Set up tooltip events on the chart
				if (this.options.showTooltips){
					helpers.bindEvents(this, this.options.tooltipEvents, function(evt){
						var activePointsCollection = (evt.type !== 'mouseout') ? this.getPointsAtEvent(evt) : [];

						this.eachPoints(function(point){
							point.restore(['fillColor', 'strokeColor']);
						});
						helpers.each(activePointsCollection, function(activePoint){
							activePoint.fillColor = activePoint.highlightFill;
							activePoint.strokeColor = activePoint.highlightStroke;
						});

						this.showTooltip(activePointsCollection);
					});
				}

				//Iterate through each of the datasets, and build this into a property of the chart
				helpers.each(data.datasets,function(dataset){

					var datasetObject = {
						label: dataset.label || null,
						fillColor : dataset.fillColor,
						strokeColor : dataset.strokeColor,
						pointColor : dataset.pointColor,
						pointStrokeColor : dataset.pointStrokeColor,
						points : []
					};

					this.datasets.push(datasetObject);

					helpers.each(dataset.data,function(dataPoint,index){
						//Add a new point for each piece of data, passing any required data to draw.
						var pointPosition;
						if (!this.scale.animation){
							pointPosition = this.scale.getPointPosition(index, this.scale.calculateCenterOffset(dataPoint));
						}
						datasetObject.points.push(new this.PointClass({
							value : dataPoint,
							label : data.labels[index],
							datasetLabel: dataset.label,
							x: (this.options.animation) ? this.scale.xCenter : pointPosition.x,
							y: (this.options.animation) ? this.scale.yCenter : pointPosition.y,
							strokeColor : dataset.pointStrokeColor,
							fillColor : dataset.pointColor,
							highlightFill : dataset.pointHighlightFill || dataset.pointColor,
							highlightStroke : dataset.pointHighlightStroke || dataset.pointStrokeColor
						}));
					},this);

				},this);

				this.render();
			},
			eachPoints : function(callback){
				helpers.each(this.datasets,function(dataset){
					helpers.each(dataset.points,callback,this);
				},this);
			},

			getPointsAtEvent : function(evt){
				var mousePosition = helpers.getRelativePosition(evt),
					fromCenter = helpers.getAngleFromPoint({
						x: this.scale.xCenter,
						y: this.scale.yCenter
					}, mousePosition);

				var anglePerIndex = (Math.PI * 2) /this.scale.valuesCount,
					pointIndex = Math.round((fromCenter.angle - Math.PI * 1.5) / anglePerIndex),
					activePointsCollection = [];

				// If we're at the top, make the pointIndex 0 to get the first of the array.
				if (pointIndex >= this.scale.valuesCount || pointIndex < 0){
					pointIndex = 0;
				}

				if (fromCenter.distance <= this.scale.drawingArea){
					helpers.each(this.datasets, function(dataset){
						activePointsCollection.push(dataset.points[pointIndex]);
					});
				}

				return activePointsCollection;
			},

			buildScale : function(data){
				this.scale = new Chart.RadialScale({
					display: this.options.showScale,
					fontStyle: this.options.scaleFontStyle,
					fontSize: this.options.scaleFontSize,
					fontFamily: this.options.scaleFontFamily,
					fontColor: this.options.scaleFontColor,
					showLabels: this.options.scaleShowLabels,
					showLabelBackdrop: this.options.scaleShowLabelBackdrop,
					backdropColor: this.options.scaleBackdropColor,
					backdropPaddingY : this.options.scaleBackdropPaddingY,
					backdropPaddingX: this.options.scaleBackdropPaddingX,
					lineWidth: (this.options.scaleShowLine) ? this.options.scaleLineWidth : 0,
					lineColor: this.options.scaleLineColor,
					angleLineColor : this.options.angleLineColor,
					angleLineWidth : (this.options.angleShowLineOut) ? this.options.angleLineWidth : 0,
					// Point labels at the edge of each line
					pointLabelFontColor : this.options.pointLabelFontColor,
					pointLabelFontSize : this.options.pointLabelFontSize,
					pointLabelFontFamily : this.options.pointLabelFontFamily,
					pointLabelFontStyle : this.options.pointLabelFontStyle,
					height : this.chart.height,
					width: this.chart.width,
					xCenter: this.chart.width/2,
					yCenter: this.chart.height/2,
					ctx : this.chart.ctx,
					templateString: this.options.scaleLabel,
					labels: data.labels,
					valuesCount: data.datasets[0].data.length
				});

				this.scale.setScaleSize();
				this.updateScaleRange(data.datasets);
				this.scale.buildYLabels();
			},
			updateScaleRange: function(datasets){
				var valuesArray = (function(){
					var totalDataArray = [];
					helpers.each(datasets,function(dataset){
						if (dataset.data){
							totalDataArray = totalDataArray.concat(dataset.data);
						}
						else {
							helpers.each(dataset.points, function(point){
								totalDataArray.push(point.value);
							});
						}
					});
					return totalDataArray;
				})();


				var scaleSizes = (this.options.scaleOverride) ?
					{
						steps: this.options.scaleSteps,
						stepValue: this.options.scaleStepWidth,
						min: this.options.scaleStartValue,
						max: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)
					} :
					helpers.calculateScaleRange(
						valuesArray,
						helpers.min([this.chart.width, this.chart.height])/2,
						this.options.scaleFontSize,
						this.options.scaleBeginAtZero,
						this.options.scaleIntegersOnly
					);

				helpers.extend(
					this.scale,
					scaleSizes
				);

			},
			addData : function(valuesArray,label){
				//Map the values array for each of the datasets
				this.scale.valuesCount++;
				helpers.each(valuesArray,function(value,datasetIndex){
					var pointPosition = this.scale.getPointPosition(this.scale.valuesCount, this.scale.calculateCenterOffset(value));
					this.datasets[datasetIndex].points.push(new this.PointClass({
						value : value,
						label : label,
						x: pointPosition.x,
						y: pointPosition.y,
						strokeColor : this.datasets[datasetIndex].pointStrokeColor,
						fillColor : this.datasets[datasetIndex].pointColor
					}));
				},this);

				this.scale.labels.push(label);

				this.reflow();

				this.update();
			},
			removeData : function(){
				this.scale.valuesCount--;
				this.scale.labels.shift();
				helpers.each(this.datasets,function(dataset){
					dataset.points.shift();
				},this);
				this.reflow();
				this.update();
			},
			update : function(){
				this.eachPoints(function(point){
					point.save();
				});
				this.reflow();
				this.render();
			},
			reflow: function(){
				helpers.extend(this.scale, {
					width : this.chart.width,
					height: this.chart.height,
					size : helpers.min([this.chart.width, this.chart.height]),
					xCenter: this.chart.width/2,
					yCenter: this.chart.height/2
				});
				this.updateScaleRange(this.datasets);
				this.scale.setScaleSize();
				this.scale.buildYLabels();
			},
			draw : function(ease){
				var easeDecimal = ease || 1,
					ctx = this.chart.ctx;
				this.clear();
				this.scale.draw();

				helpers.each(this.datasets,function(dataset){

					//Transition each point first so that the line and point drawing isn't out of sync
					helpers.each(dataset.points,function(point,index){
						if (point.hasValue()){
							point.transition(this.scale.getPointPosition(index, this.scale.calculateCenterOffset(point.value)), easeDecimal);
						}
					},this);



					//Draw the line between all the points
					ctx.lineWidth = this.options.datasetStrokeWidth;
					ctx.strokeStyle = dataset.strokeColor;
					ctx.beginPath();
					helpers.each(dataset.points,function(point,index){
						if (index === 0){
							ctx.moveTo(point.x,point.y);
						}
						else{
							ctx.lineTo(point.x,point.y);
						}
					},this);
					ctx.closePath();
					ctx.stroke();

					ctx.fillStyle = dataset.fillColor;
					ctx.fill();

					//Now draw the points over the line
					//A little inefficient double looping, but better than the line
					//lagging behind the point positions
					helpers.each(dataset.points,function(point){
						if (point.hasValue()){
							point.draw();
						}
					});

				},this);

			}

		});





	}).call(this);

/***/ },
/* 322 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	var vars = __webpack_require__(320);

	module.exports = vars.createClass('Doughnut', ['getSegmentsAtEvent']);


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	var vars = __webpack_require__(320);

	module.exports = vars.createClass('Line', ['getPointsAtEvent']);


/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	var vars = __webpack_require__(320);

	module.exports = vars.createClass('Pie', ['getSegmentsAtEvent']);


/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	var vars = __webpack_require__(320);

	module.exports = vars.createClass('PolarArea', ['getSegmentsAtEvent']);


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	var vars = __webpack_require__(320);

	module.exports = vars.createClass('Radar', ['getPointsAtEvent']);


/***/ },
/* 328 */
/***/ function(module, exports) {

	module.exports = [
	  {
	    "id": 1,
	    "pergunta": "Em novas situações, quando comparadas as anteriores, procuro atingir resultados melhores do que os obtidos naquelas."
	  },
	  {
	    "id": 2,
	    "pergunta": "Não tenho problema algum em insistir e até me sacrificar para conseguir o que pretendo."
	  },
	  {
	    "id": 3,
	    "pergunta": "Se assumi um compromisso, é porque vou cumprir."
	  },
	  {
	    "id": 4,
	    "pergunta": "Desenvolvo procedimentos para atividades e estimulo os outros a fazerem o mesmo, para atingirmos o nível de qualidade desejado."
	  },
	  {
	    "id": 5,
	    "pergunta": "Acompanho o que vai acontecendo e ajusto o que foi planejado de acordo com as novas medições e circunstâncias."
	  },
	  {
	    "id": 6,
	    "pergunta": "Sei onde quero chegar com a minha vida a longo prazo e tenho um plano para isso."
	  },
	  {
	    "id": 7,
	    "pergunta": "Lanço mão de variadas fontes de informação para executar tarefas e projetos."
	  },
	  {
	    "id": 8,
	    "pergunta": "Se o método de resolução de um problema não funciona, lanço mão de outros."
	  },
	  {
	    "id": 9,
	    "pergunta": "Procuro localizar os benefícios para todos os envolvidos em um problema, para conseguir convencê-los."
	  },
	  {
	    "id": 10,
	    "pergunta": "Aposto que alcançarei sucesso, mesmo em projetos difíceis e desafiadores."
	  },
	  {
	    "id": 11,
	    "pergunta": "Ouço sempre qualquer pessoa com muita atenção."
	  },
	  {
	    "id": 12,
	    "pergunta": "Empenho-me em cumprir tudo o que se deve ser feito, antecipando-me às circunstâncias."
	  },
	  {
	    "id": 13,
	    "pergunta": "Busco formas de contornar obstáculos e dificuldades, mas sem perder o foco."
	  },
	  {
	    "id": 14,
	    "pergunta": "Desdobro-me para cumprir o prazo de entrega prometido e até faço a parte dos outros."
	  },
	  {
	    "id": 15,
	    "pergunta": "Registro todos os gastos e os consulto para ter base para novos projetos e planos."
	  },
	  {
	    "id": 16,
	    "pergunta": "Analiso todos os aspectos de um novo projeto e somente me envolvo depois de fazer o que podia para garantir o seu êxito."
	  },
	  {
	    "id": 17,
	    "pergunta": "Não perco tempo preocupando-me com o futuro de minha vida."
	  },
	  {
	    "id": 18,
	    "pergunta": "Questiono bastante para definir exatamente o que querem os clientes antes de sair executando um trabalho ou uma encomenda."
	  },
	  {
	    "id": 19,
	    "pergunta": "Procuro subdividir um grande trabalho ou projeto em atividades menores, definindo prazos."
	  },
	  {
	    "id": 20,
	    "pergunta": "Não antecipo argumentos e formas de influenciar outras pessoas."
	  },
	  {
	    "id": 21,
	    "pergunta": "Ante firme discordância dos meus pontos de vista, procuro adequá-las."
	  },
	  {
	    "id": 22,
	    "pergunta": "Se não obtenho o que desejo, fico irritado."
	  },
	  {
	    "id": 23,
	    "pergunta": "Mexo sim em time que está ganhando: sempre há diferentes maneiras de realizar o que já fizemos antes."
	  },
	  {
	    "id": 24,
	    "pergunta": "Dedico o tempo que for necessário para resolver um problema difícil."
	  },
	  {
	    "id": 25,
	    "pergunta": "Faço o que estiver ao meu alcance para satisfazer a quem contratou o trabalho."
	  },
	  {
	    "id": 26,
	    "pergunta": "Capto oportunidades que passam despercebidas pelos outros e que atendem a alguma necessidade de negócio naquele momento."
	  },
	  {
	    "id": 27,
	    "pergunta": "Evito situações em que percebo que o resultado final fugiria ao meu controle."
	  },
	  {
	    "id": 28,
	    "pergunta": "O futuro é pensado antes e eu gosto de pensar e escolher marcos significativos para mim."
	  },
	  {
	    "id": 29,
	    "pergunta": "Como o mais importante é decidir e agir rápido, não perco tempo buscando atualizar as informações."
	  },
	  {
	    "id": 30,
	    "pergunta": "Estou sempre alerta para as possibilidades e procuro fazer novos negócios ou oferecer novos serviços."
	  },
	  {
	    "id": 31,
	    "pergunta": "Consigo conquistar o aval e a concordância dos outros para os meus pontos de vista ou propostas."
	  },
	  {
	    "id": 32,
	    "pergunta": "Tenho convicção de determinado direcionamento de minhas ações; não serão normas e expectativas dos outros que me deterão."
	  },
	  {
	    "id": 33,
	    "pergunta": "Já sofri insucessos em minha vida."
	  },
	  {
	    "id": 34,
	    "pergunta": "Prefiro trabalhar em assuntos ou projetos que conheço perfeitamente e nos quais me sinto seguro."
	  },
	  {
	    "id": 35,
	    "pergunta": "Perante dificuldades, prefiro passar para outras tarefas ou trabalhos."
	  },
	  {
	    "id": 36,
	    "pergunta": "Finalizo meus trabalhos ou projetos no prazo acertado."
	  },
	  {
	    "id": 37,
	    "pergunta": "O tempo é precioso e fico irritado se o perco."
	  },
	  {
	    "id": 38,
	    "pergunta": "Disponho-me facilmente a seguir empreitadas arriscadas."
	  },
	  {
	    "id": 39,
	    "pergunta": "Devoto a mesma energia para concretizar minhas metas semanais, mensais ou anuais."
	  },
	  {
	    "id": 40,
	    "pergunta": "Costumo consultar as pessoas experientes ou especialistas na área ou ramo de negócio em que estou atuando."
	  },
	  {
	    "id": 41,
	    "pergunta": "Sigo a maré, isto é, lido com os problemas à medida que surgem."
	  },
	  {
	    "id": 42,
	    "pergunta": "Consigo fazer com que as pessoas mudem de opinião, mesmo que elas tenham a princípio, firmeza em suas posições."
	  },
	  {
	    "id": 43,
	    "pergunta": "Mesmo quando confrontado com oposição, não altero a minha decisão e firmeza."
	  },
	  {
	    "id": 44,
	    "pergunta": "Já passei por situação em que obtive vantagem de outras pessoas."
	  },
	  {
	    "id": 45,
	    "pergunta": "Não fico esperando que me peçam para fazer as coisas, saio na frente e faço antes pergunta: '"
	  },
	  {
	    "id": 46,
	    "pergunta": "Avalio bem todos os prós e contras das diferentes possibilidades, antes de executar um trabalho ou projeto."
	  },
	  {
	    "id": 47,
	    "pergunta": "Não coloco prazos de entrega de trabalhos acima de minha vida pessoal e familiar."
	  },
	  {
	    "id": 48,
	    "pergunta": "No trabalho minha produtividade tende a ser superior à das outras pessoas, pois sempre encontro formas de acelerar  ou fazer melhor."
	  },
	  {
	    "id": 49,
	    "pergunta": "Não inicio trabalho ou projetos antes de me assegurar de que vale a pena arriscar."
	  },
	  {
	    "id": 50,
	    "pergunta": "Quanto mais definir o que quero atingir, maior probabilidade de sucesso terei na minha vida."
	  },
	  {
	    "id": 51,
	    "pergunta": "Reúno todas as informações possíveis antes de executar um projeto."
	  },
	  {
	    "id": 52,
	    "pergunta": "Procuro atender todas as possibilidades e preparo alternativas para elas."
	  },
	  {
	    "id": 53,
	    "pergunta": "Para atingir minhas metas, envolvo pessoas que podem influir para que eu alcance os meus propósitos."
	  },
	  {
	    "id": 54,
	    "pergunta": "Tenho confiança de que me sairei bem em qualquer atitude que me interesse fazer."
	  },
	  {
	    "id": 55,
	    "pergunta": "Sinto-me à vontade para reconhecer meu desconhecimento sobre algum assunto."
	  }
	];


/***/ },
/* 329 */
/***/ function(module, exports) {

	module.exports = {
		fatMask: [11,-22,-33,-44,55],
		correcao: function(sum){
			sum += 18;

			if(sum < 20) return 0;

			if(sum < 22) return 3;

			if(sum < 24) return 5;
			
			return 7;
		},
		competencias: [
			{
				label: "Orientação para a ação e oportunidades",
				mask: [1,12,23,-34,45],
				value: 0
			},
			{
				label: "Persistência",
				mask: [2,13,24-35,46],
				value: 0
			},
			{
				label: "Comprometimento",
				mask: [3,14,25,36,-47],
				value: 0
			},
			{
				label: "Eficiencia e Qualidade",
				mask: [4,15,26,37,48],
				value: 0
			},
			{
				label: "Ponderar e correr riscos calculados",
				mask: [5,16,27,-38,49],
				value: 0
			},
			{
				label: "Objetivos e metas",
				mask: [6,-17,28,39,50],
				value: 0
			},
			{
				label: "Coleta de informações",
				mask: [7,18,-29,40,51],
				value: 0
			},
			{
				label: "Planejamento e Monitoramento",
				mask: [8,19,30,-41,52],
				value: 0
			},
			{
				label: "Rede de contatos e capacidade de persuasão",
				mask: [9,-20,31,42,53],
				value: 0
			},
			{
				label: "Confiança em si mesmo e ser independente",
				mask: [10,-21,32,43,54],
				value: 0
			}
		]

	}

/***/ },
/* 330 */
/***/ function(module, exports) {

	/*! @license Firebase v2.2.9
	    License: https://www.firebase.com/terms/terms-of-service.html */
	(function() {var g,aa=this;function n(a){return void 0!==a}function ba(){}function ca(a){a.vb=function(){return a.uf?a.uf:a.uf=new a}}
	function da(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
	else if("function"==b&&"undefined"==typeof a.call)return"object";return b}function ea(a){return"array"==da(a)}function fa(a){var b=da(a);return"array"==b||"object"==b&&"number"==typeof a.length}function p(a){return"string"==typeof a}function ga(a){return"number"==typeof a}function ha(a){return"function"==da(a)}function ia(a){var b=typeof a;return"object"==b&&null!=a||"function"==b}function ja(a,b,c){return a.call.apply(a.bind,arguments)}
	function ka(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function q(a,b,c){q=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ja:ka;return q.apply(null,arguments)}var la=Date.now||function(){return+new Date};
	function ma(a,b){function c(){}c.prototype=b.prototype;a.$g=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Wg=function(a,c,f){for(var h=Array(arguments.length-2),k=2;k<arguments.length;k++)h[k-2]=arguments[k];return b.prototype[c].apply(a,h)}};function r(a,b){for(var c in a)b.call(void 0,a[c],c,a)}function na(a,b){var c={},d;for(d in a)c[d]=b.call(void 0,a[d],d,a);return c}function oa(a,b){for(var c in a)if(!b.call(void 0,a[c],c,a))return!1;return!0}function pa(a){var b=0,c;for(c in a)b++;return b}function qa(a){for(var b in a)return b}function ra(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function sa(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function ta(a,b){for(var c in a)if(a[c]==b)return!0;return!1}
	function ua(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return d}function va(a,b){var c=ua(a,b,void 0);return c&&a[c]}function wa(a){for(var b in a)return!1;return!0}function xa(a){var b={},c;for(c in a)b[c]=a[c];return b}var ya="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
	function za(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<ya.length;f++)c=ya[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Aa(a){a=String(a);if(/^\s*$/.test(a)?0:/^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g,"@").replace(/"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g,"")))try{return eval("("+a+")")}catch(b){}throw Error("Invalid JSON string: "+a);}function Ba(){this.Sd=void 0}
	function Ca(a,b,c){switch(typeof b){case "string":Da(b,c);break;case "number":c.push(isFinite(b)&&!isNaN(b)?b:"null");break;case "boolean":c.push(b);break;case "undefined":c.push("null");break;case "object":if(null==b){c.push("null");break}if(ea(b)){var d=b.length;c.push("[");for(var e="",f=0;f<d;f++)c.push(e),e=b[f],Ca(a,a.Sd?a.Sd.call(b,String(f),e):e,c),e=",";c.push("]");break}c.push("{");d="";for(f in b)Object.prototype.hasOwnProperty.call(b,f)&&(e=b[f],"function"!=typeof e&&(c.push(d),Da(f,c),
	c.push(":"),Ca(a,a.Sd?a.Sd.call(b,f,e):e,c),d=","));c.push("}");break;case "function":break;default:throw Error("Unknown type: "+typeof b);}}var Ea={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\u000b"},Fa=/\uffff/.test("\uffff")?/[\\\"\x00-\x1f\x7f-\uffff]/g:/[\\\"\x00-\x1f\x7f-\xff]/g;
	function Da(a,b){b.push('"',a.replace(Fa,function(a){if(a in Ea)return Ea[a];var b=a.charCodeAt(0),e="\\u";16>b?e+="000":256>b?e+="00":4096>b&&(e+="0");return Ea[a]=e+b.toString(16)}),'"')};function Ga(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^la()).toString(36)};var Ha;a:{var Ia=aa.navigator;if(Ia){var Ja=Ia.userAgent;if(Ja){Ha=Ja;break a}}Ha=""};function Ka(){this.Wa=-1};function La(){this.Wa=-1;this.Wa=64;this.P=[];this.ne=[];this.Uf=[];this.Ld=[];this.Ld[0]=128;for(var a=1;a<this.Wa;++a)this.Ld[a]=0;this.ee=this.ac=0;this.reset()}ma(La,Ka);La.prototype.reset=function(){this.P[0]=1732584193;this.P[1]=4023233417;this.P[2]=2562383102;this.P[3]=271733878;this.P[4]=3285377520;this.ee=this.ac=0};
	function Ma(a,b,c){c||(c=0);var d=a.Uf;if(p(b))for(var e=0;16>e;e++)d[e]=b.charCodeAt(c)<<24|b.charCodeAt(c+1)<<16|b.charCodeAt(c+2)<<8|b.charCodeAt(c+3),c+=4;else for(e=0;16>e;e++)d[e]=b[c]<<24|b[c+1]<<16|b[c+2]<<8|b[c+3],c+=4;for(e=16;80>e;e++){var f=d[e-3]^d[e-8]^d[e-14]^d[e-16];d[e]=(f<<1|f>>>31)&4294967295}b=a.P[0];c=a.P[1];for(var h=a.P[2],k=a.P[3],l=a.P[4],m,e=0;80>e;e++)40>e?20>e?(f=k^c&(h^k),m=1518500249):(f=c^h^k,m=1859775393):60>e?(f=c&h|k&(c|h),m=2400959708):(f=c^h^k,m=3395469782),f=(b<<
	5|b>>>27)+f+l+m+d[e]&4294967295,l=k,k=h,h=(c<<30|c>>>2)&4294967295,c=b,b=f;a.P[0]=a.P[0]+b&4294967295;a.P[1]=a.P[1]+c&4294967295;a.P[2]=a.P[2]+h&4294967295;a.P[3]=a.P[3]+k&4294967295;a.P[4]=a.P[4]+l&4294967295}
	La.prototype.update=function(a,b){if(null!=a){n(b)||(b=a.length);for(var c=b-this.Wa,d=0,e=this.ne,f=this.ac;d<b;){if(0==f)for(;d<=c;)Ma(this,a,d),d+=this.Wa;if(p(a))for(;d<b;){if(e[f]=a.charCodeAt(d),++f,++d,f==this.Wa){Ma(this,e);f=0;break}}else for(;d<b;)if(e[f]=a[d],++f,++d,f==this.Wa){Ma(this,e);f=0;break}}this.ac=f;this.ee+=b}};var u=Array.prototype,Na=u.indexOf?function(a,b,c){return u.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(p(a))return p(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},Oa=u.forEach?function(a,b,c){u.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)},Pa=u.filter?function(a,b,c){return u.filter.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=[],f=0,h=p(a)?
	a.split(""):a,k=0;k<d;k++)if(k in h){var l=h[k];b.call(c,l,k,a)&&(e[f++]=l)}return e},Qa=u.map?function(a,b,c){return u.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f=p(a)?a.split(""):a,h=0;h<d;h++)h in f&&(e[h]=b.call(c,f[h],h,a));return e},Ra=u.reduce?function(a,b,c,d){for(var e=[],f=1,h=arguments.length;f<h;f++)e.push(arguments[f]);d&&(e[0]=q(b,d));return u.reduce.apply(a,e)}:function(a,b,c,d){var e=c;Oa(a,function(c,h){e=b.call(d,e,c,h,a)});return e},Sa=u.every?function(a,b,
	c){return u.every.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};function Ta(a,b){var c=Ua(a,b,void 0);return 0>c?null:p(a)?a.charAt(c):a[c]}function Ua(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1}function Va(a,b){var c=Na(a,b);0<=c&&u.splice.call(a,c,1)}function Wa(a,b,c){return 2>=arguments.length?u.slice.call(a,b):u.slice.call(a,b,c)}
	function Xa(a,b){a.sort(b||Ya)}function Ya(a,b){return a>b?1:a<b?-1:0};var Za=-1!=Ha.indexOf("Opera")||-1!=Ha.indexOf("OPR"),$a=-1!=Ha.indexOf("Trident")||-1!=Ha.indexOf("MSIE"),ab=-1!=Ha.indexOf("Gecko")&&-1==Ha.toLowerCase().indexOf("webkit")&&!(-1!=Ha.indexOf("Trident")||-1!=Ha.indexOf("MSIE")),bb=-1!=Ha.toLowerCase().indexOf("webkit");
	(function(){var a="",b;if(Za&&aa.opera)return a=aa.opera.version,ha(a)?a():a;ab?b=/rv\:([^\);]+)(\)|;)/:$a?b=/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/:bb&&(b=/WebKit\/(\S+)/);b&&(a=(a=b.exec(Ha))?a[1]:"");return $a&&(b=(b=aa.document)?b.documentMode:void 0,b>parseFloat(a))?String(b):a})();var cb=null,db=null,eb=null;function fb(a,b){if(!fa(a))throw Error("encodeByteArray takes an array as a parameter");gb();for(var c=b?db:cb,d=[],e=0;e<a.length;e+=3){var f=a[e],h=e+1<a.length,k=h?a[e+1]:0,l=e+2<a.length,m=l?a[e+2]:0,t=f>>2,f=(f&3)<<4|k>>4,k=(k&15)<<2|m>>6,m=m&63;l||(m=64,h||(k=64));d.push(c[t],c[f],c[k],c[m])}return d.join("")}
	function gb(){if(!cb){cb={};db={};eb={};for(var a=0;65>a;a++)cb[a]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a),db[a]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a),eb[db[a]]=a,62<=a&&(eb["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a)]=a)}};var hb=hb||"2.2.9";function v(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function w(a,b){if(Object.prototype.hasOwnProperty.call(a,b))return a[b]}function ib(a,b){for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&b(c,a[c])}function jb(a){var b={};ib(a,function(a,d){b[a]=d});return b};function kb(a){var b=[];ib(a,function(a,d){ea(d)?Oa(d,function(d){b.push(encodeURIComponent(a)+"="+encodeURIComponent(d))}):b.push(encodeURIComponent(a)+"="+encodeURIComponent(d))});return b.length?"&"+b.join("&"):""}function lb(a){var b={};a=a.replace(/^\?/,"").split("&");Oa(a,function(a){a&&(a=a.split("="),b[a[0]]=a[1])});return b};function x(a,b,c,d){var e;d<b?e="at least "+b:d>c&&(e=0===c?"none":"no more than "+c);if(e)throw Error(a+" failed: Was called with "+d+(1===d?" argument.":" arguments.")+" Expects "+e+".");}function z(a,b,c){var d="";switch(b){case 1:d=c?"first":"First";break;case 2:d=c?"second":"Second";break;case 3:d=c?"third":"Third";break;case 4:d=c?"fourth":"Fourth";break;default:throw Error("errorPrefix called with argumentNumber > 4.  Need to update it?");}return a=a+" failed: "+(d+" argument ")}
	function A(a,b,c,d){if((!d||n(c))&&!ha(c))throw Error(z(a,b,d)+"must be a valid function.");}function mb(a,b,c){if(n(c)&&(!ia(c)||null===c))throw Error(z(a,b,!0)+"must be a valid context object.");};function nb(a){return"undefined"!==typeof JSON&&n(JSON.parse)?JSON.parse(a):Aa(a)}function B(a){if("undefined"!==typeof JSON&&n(JSON.stringify))a=JSON.stringify(a);else{var b=[];Ca(new Ba,a,b);a=b.join("")}return a};function ob(){this.Wd=C}ob.prototype.j=function(a){return this.Wd.Y(a)};ob.prototype.toString=function(){return this.Wd.toString()};function pb(){}pb.prototype.qf=function(){return null};pb.prototype.ze=function(){return null};var qb=new pb;function rb(a,b,c){this.Rf=a;this.Ka=b;this.Kd=c}rb.prototype.qf=function(a){var b=this.Ka.Q;if(sb(b,a))return b.j().J(a);b=null!=this.Kd?new tb(this.Kd,!0,!1):this.Ka.C();return this.Rf.xc(a,b)};rb.prototype.ze=function(a,b,c){var d=null!=this.Kd?this.Kd:ub(this.Ka);a=this.Rf.oe(d,b,1,c,a);return 0===a.length?null:a[0]};function vb(){this.ub=[]}function wb(a,b){for(var c=null,d=0;d<b.length;d++){var e=b[d],f=e.Zb();null===c||f.ca(c.Zb())||(a.ub.push(c),c=null);null===c&&(c=new xb(f));c.add(e)}c&&a.ub.push(c)}function yb(a,b,c){wb(a,c);zb(a,function(a){return a.ca(b)})}function Ab(a,b,c){wb(a,c);zb(a,function(a){return a.contains(b)||b.contains(a)})}
	function zb(a,b){for(var c=!0,d=0;d<a.ub.length;d++){var e=a.ub[d];if(e)if(e=e.Zb(),b(e)){for(var e=a.ub[d],f=0;f<e.vd.length;f++){var h=e.vd[f];if(null!==h){e.vd[f]=null;var k=h.Vb();Bb&&Cb("event: "+h.toString());Db(k)}}a.ub[d]=null}else c=!1}c&&(a.ub=[])}function xb(a){this.ra=a;this.vd=[]}xb.prototype.add=function(a){this.vd.push(a)};xb.prototype.Zb=function(){return this.ra};function D(a,b,c,d){this.type=a;this.Ja=b;this.Xa=c;this.Le=d;this.Qd=void 0}function Eb(a){return new D(Fb,a)}var Fb="value";function Gb(a,b,c,d){this.ve=b;this.$d=c;this.Qd=d;this.ud=a}Gb.prototype.Zb=function(){var a=this.$d.mc();return"value"===this.ud?a.path:a.parent().path};Gb.prototype.Ae=function(){return this.ud};Gb.prototype.Vb=function(){return this.ve.Vb(this)};Gb.prototype.toString=function(){return this.Zb().toString()+":"+this.ud+":"+B(this.$d.mf())};function Hb(a,b,c){this.ve=a;this.error=b;this.path=c}Hb.prototype.Zb=function(){return this.path};Hb.prototype.Ae=function(){return"cancel"};
	Hb.prototype.Vb=function(){return this.ve.Vb(this)};Hb.prototype.toString=function(){return this.path.toString()+":cancel"};function tb(a,b,c){this.w=a;this.ea=b;this.Ub=c}function Ib(a){return a.ea}function Jb(a,b){return b.e()?a.ea&&!a.Ub:sb(a,E(b))}function sb(a,b){return a.ea&&!a.Ub||a.w.Da(b)}tb.prototype.j=function(){return this.w};function Kb(a){this.eg=a;this.Dd=null}Kb.prototype.get=function(){var a=this.eg.get(),b=xa(a);if(this.Dd)for(var c in this.Dd)b[c]-=this.Dd[c];this.Dd=a;return b};function Lb(a,b){this.Nf={};this.fd=new Kb(a);this.ba=b;var c=1E4+2E4*Math.random();setTimeout(q(this.If,this),Math.floor(c))}Lb.prototype.If=function(){var a=this.fd.get(),b={},c=!1,d;for(d in a)0<a[d]&&v(this.Nf,d)&&(b[d]=a[d],c=!0);c&&this.ba.Ve(b);setTimeout(q(this.If,this),Math.floor(6E5*Math.random()))};function Mb(){this.Ec={}}function Nb(a,b,c){n(c)||(c=1);v(a.Ec,b)||(a.Ec[b]=0);a.Ec[b]+=c}Mb.prototype.get=function(){return xa(this.Ec)};var Ob={},Pb={};function Qb(a){a=a.toString();Ob[a]||(Ob[a]=new Mb);return Ob[a]}function Rb(a,b){var c=a.toString();Pb[c]||(Pb[c]=b());return Pb[c]};function F(a,b){this.name=a;this.S=b}function Sb(a,b){return new F(a,b)};function Tb(a,b){return Ub(a.name,b.name)}function Vb(a,b){return Ub(a,b)};function Wb(a,b,c){this.type=Xb;this.source=a;this.path=b;this.Ga=c}Wb.prototype.Xc=function(a){return this.path.e()?new Wb(this.source,G,this.Ga.J(a)):new Wb(this.source,H(this.path),this.Ga)};Wb.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" overwrite: "+this.Ga.toString()+")"};function Yb(a,b){this.type=Zb;this.source=a;this.path=b}Yb.prototype.Xc=function(){return this.path.e()?new Yb(this.source,G):new Yb(this.source,H(this.path))};Yb.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" listen_complete)"};function $b(a,b){this.La=a;this.wa=b?b:ac}g=$b.prototype;g.Oa=function(a,b){return new $b(this.La,this.wa.Oa(a,b,this.La).X(null,null,!1,null,null))};g.remove=function(a){return new $b(this.La,this.wa.remove(a,this.La).X(null,null,!1,null,null))};g.get=function(a){for(var b,c=this.wa;!c.e();){b=this.La(a,c.key);if(0===b)return c.value;0>b?c=c.left:0<b&&(c=c.right)}return null};
	function bc(a,b){for(var c,d=a.wa,e=null;!d.e();){c=a.La(b,d.key);if(0===c){if(d.left.e())return e?e.key:null;for(d=d.left;!d.right.e();)d=d.right;return d.key}0>c?d=d.left:0<c&&(e=d,d=d.right)}throw Error("Attempted to find predecessor key for a nonexistent key.  What gives?");}g.e=function(){return this.wa.e()};g.count=function(){return this.wa.count()};g.Sc=function(){return this.wa.Sc()};g.fc=function(){return this.wa.fc()};g.ia=function(a){return this.wa.ia(a)};
	g.Xb=function(a){return new cc(this.wa,null,this.La,!1,a)};g.Yb=function(a,b){return new cc(this.wa,a,this.La,!1,b)};g.$b=function(a,b){return new cc(this.wa,a,this.La,!0,b)};g.sf=function(a){return new cc(this.wa,null,this.La,!0,a)};function cc(a,b,c,d,e){this.Ud=e||null;this.Ge=d;this.Qa=[];for(e=1;!a.e();)if(e=b?c(a.key,b):1,d&&(e*=-1),0>e)a=this.Ge?a.left:a.right;else if(0===e){this.Qa.push(a);break}else this.Qa.push(a),a=this.Ge?a.right:a.left}
	function J(a){if(0===a.Qa.length)return null;var b=a.Qa.pop(),c;c=a.Ud?a.Ud(b.key,b.value):{key:b.key,value:b.value};if(a.Ge)for(b=b.left;!b.e();)a.Qa.push(b),b=b.right;else for(b=b.right;!b.e();)a.Qa.push(b),b=b.left;return c}function dc(a){if(0===a.Qa.length)return null;var b;b=a.Qa;b=b[b.length-1];return a.Ud?a.Ud(b.key,b.value):{key:b.key,value:b.value}}function ec(a,b,c,d,e){this.key=a;this.value=b;this.color=null!=c?c:!0;this.left=null!=d?d:ac;this.right=null!=e?e:ac}g=ec.prototype;
	g.X=function(a,b,c,d,e){return new ec(null!=a?a:this.key,null!=b?b:this.value,null!=c?c:this.color,null!=d?d:this.left,null!=e?e:this.right)};g.count=function(){return this.left.count()+1+this.right.count()};g.e=function(){return!1};g.ia=function(a){return this.left.ia(a)||a(this.key,this.value)||this.right.ia(a)};function fc(a){return a.left.e()?a:fc(a.left)}g.Sc=function(){return fc(this).key};g.fc=function(){return this.right.e()?this.key:this.right.fc()};
	g.Oa=function(a,b,c){var d,e;e=this;d=c(a,e.key);e=0>d?e.X(null,null,null,e.left.Oa(a,b,c),null):0===d?e.X(null,b,null,null,null):e.X(null,null,null,null,e.right.Oa(a,b,c));return gc(e)};function hc(a){if(a.left.e())return ac;a.left.fa()||a.left.left.fa()||(a=ic(a));a=a.X(null,null,null,hc(a.left),null);return gc(a)}
	g.remove=function(a,b){var c,d;c=this;if(0>b(a,c.key))c.left.e()||c.left.fa()||c.left.left.fa()||(c=ic(c)),c=c.X(null,null,null,c.left.remove(a,b),null);else{c.left.fa()&&(c=jc(c));c.right.e()||c.right.fa()||c.right.left.fa()||(c=kc(c),c.left.left.fa()&&(c=jc(c),c=kc(c)));if(0===b(a,c.key)){if(c.right.e())return ac;d=fc(c.right);c=c.X(d.key,d.value,null,null,hc(c.right))}c=c.X(null,null,null,null,c.right.remove(a,b))}return gc(c)};g.fa=function(){return this.color};
	function gc(a){a.right.fa()&&!a.left.fa()&&(a=lc(a));a.left.fa()&&a.left.left.fa()&&(a=jc(a));a.left.fa()&&a.right.fa()&&(a=kc(a));return a}function ic(a){a=kc(a);a.right.left.fa()&&(a=a.X(null,null,null,null,jc(a.right)),a=lc(a),a=kc(a));return a}function lc(a){return a.right.X(null,null,a.color,a.X(null,null,!0,null,a.right.left),null)}function jc(a){return a.left.X(null,null,a.color,null,a.X(null,null,!0,a.left.right,null))}
	function kc(a){return a.X(null,null,!a.color,a.left.X(null,null,!a.left.color,null,null),a.right.X(null,null,!a.right.color,null,null))}function mc(){}g=mc.prototype;g.X=function(){return this};g.Oa=function(a,b){return new ec(a,b,null)};g.remove=function(){return this};g.count=function(){return 0};g.e=function(){return!0};g.ia=function(){return!1};g.Sc=function(){return null};g.fc=function(){return null};g.fa=function(){return!1};var ac=new mc;function nc(a,b){return a&&"object"===typeof a?(K(".sv"in a,"Unexpected leaf node or priority contents"),b[a[".sv"]]):a}function oc(a,b){var c=new pc;qc(a,new L(""),function(a,e){c.nc(a,rc(e,b))});return c}function rc(a,b){var c=a.B().H(),c=nc(c,b),d;if(a.L()){var e=nc(a.Ca(),b);return e!==a.Ca()||c!==a.B().H()?new sc(e,M(c)):a}d=a;c!==a.B().H()&&(d=d.ga(new sc(c)));a.R(N,function(a,c){var e=rc(c,b);e!==c&&(d=d.O(a,e))});return d};function L(a,b){if(1==arguments.length){this.n=a.split("/");for(var c=0,d=0;d<this.n.length;d++)0<this.n[d].length&&(this.n[c]=this.n[d],c++);this.n.length=c;this.Z=0}else this.n=a,this.Z=b}function O(a,b){var c=E(a);if(null===c)return b;if(c===E(b))return O(H(a),H(b));throw Error("INTERNAL ERROR: innerPath ("+b+") is not within outerPath ("+a+")");}function E(a){return a.Z>=a.n.length?null:a.n[a.Z]}function tc(a){return a.n.length-a.Z}
	function H(a){var b=a.Z;b<a.n.length&&b++;return new L(a.n,b)}function uc(a){return a.Z<a.n.length?a.n[a.n.length-1]:null}g=L.prototype;g.toString=function(){for(var a="",b=this.Z;b<this.n.length;b++)""!==this.n[b]&&(a+="/"+this.n[b]);return a||"/"};g.slice=function(a){return this.n.slice(this.Z+(a||0))};g.parent=function(){if(this.Z>=this.n.length)return null;for(var a=[],b=this.Z;b<this.n.length-1;b++)a.push(this.n[b]);return new L(a,0)};
	g.u=function(a){for(var b=[],c=this.Z;c<this.n.length;c++)b.push(this.n[c]);if(a instanceof L)for(c=a.Z;c<a.n.length;c++)b.push(a.n[c]);else for(a=a.split("/"),c=0;c<a.length;c++)0<a[c].length&&b.push(a[c]);return new L(b,0)};g.e=function(){return this.Z>=this.n.length};g.ca=function(a){if(tc(this)!==tc(a))return!1;for(var b=this.Z,c=a.Z;b<=this.n.length;b++,c++)if(this.n[b]!==a.n[c])return!1;return!0};
	g.contains=function(a){var b=this.Z,c=a.Z;if(tc(this)>tc(a))return!1;for(;b<this.n.length;){if(this.n[b]!==a.n[c])return!1;++b;++c}return!0};var G=new L("");function vc(a,b){this.Ra=a.slice();this.Ha=Math.max(1,this.Ra.length);this.lf=b;for(var c=0;c<this.Ra.length;c++)this.Ha+=wc(this.Ra[c]);xc(this)}vc.prototype.push=function(a){0<this.Ra.length&&(this.Ha+=1);this.Ra.push(a);this.Ha+=wc(a);xc(this)};vc.prototype.pop=function(){var a=this.Ra.pop();this.Ha-=wc(a);0<this.Ra.length&&--this.Ha};
	function xc(a){if(768<a.Ha)throw Error(a.lf+"has a key path longer than 768 bytes ("+a.Ha+").");if(32<a.Ra.length)throw Error(a.lf+"path specified exceeds the maximum depth that can be written (32) or object contains a cycle "+yc(a));}function yc(a){return 0==a.Ra.length?"":"in property '"+a.Ra.join(".")+"'"};function zc(){this.wc={}}zc.prototype.set=function(a,b){null==b?delete this.wc[a]:this.wc[a]=b};zc.prototype.get=function(a){return v(this.wc,a)?this.wc[a]:null};zc.prototype.remove=function(a){delete this.wc[a]};zc.prototype.wf=!0;function Ac(a){this.Fc=a;this.Pd="firebase:"}g=Ac.prototype;g.set=function(a,b){null==b?this.Fc.removeItem(this.Pd+a):this.Fc.setItem(this.Pd+a,B(b))};g.get=function(a){a=this.Fc.getItem(this.Pd+a);return null==a?null:nb(a)};g.remove=function(a){this.Fc.removeItem(this.Pd+a)};g.wf=!1;g.toString=function(){return this.Fc.toString()};function Bc(a){try{if("undefined"!==typeof window&&"undefined"!==typeof window[a]){var b=window[a];b.setItem("firebase:sentinel","cache");b.removeItem("firebase:sentinel");return new Ac(b)}}catch(c){}return new zc}var Cc=Bc("localStorage"),P=Bc("sessionStorage");function Dc(a,b,c,d,e){this.host=a.toLowerCase();this.domain=this.host.substr(this.host.indexOf(".")+1);this.lb=b;this.Db=c;this.Ug=d;this.Od=e||"";this.Pa=Cc.get("host:"+a)||this.host}function Ec(a,b){b!==a.Pa&&(a.Pa=b,"s-"===a.Pa.substr(0,2)&&Cc.set("host:"+a.host,a.Pa))}Dc.prototype.toString=function(){var a=(this.lb?"https://":"http://")+this.host;this.Od&&(a+="<"+this.Od+">");return a};var Fc=function(){var a=1;return function(){return a++}}();function K(a,b){if(!a)throw Gc(b);}function Gc(a){return Error("Firebase ("+hb+") INTERNAL ASSERT FAILED: "+a)}
	function Hc(a){try{var b;if("undefined"!==typeof atob)b=atob(a);else{gb();for(var c=eb,d=[],e=0;e<a.length;){var f=c[a.charAt(e++)],h=e<a.length?c[a.charAt(e)]:0;++e;var k=e<a.length?c[a.charAt(e)]:64;++e;var l=e<a.length?c[a.charAt(e)]:64;++e;if(null==f||null==h||null==k||null==l)throw Error();d.push(f<<2|h>>4);64!=k&&(d.push(h<<4&240|k>>2),64!=l&&d.push(k<<6&192|l))}if(8192>d.length)b=String.fromCharCode.apply(null,d);else{a="";for(c=0;c<d.length;c+=8192)a+=String.fromCharCode.apply(null,Wa(d,c,
	c+8192));b=a}}return b}catch(m){Cb("base64Decode failed: ",m)}return null}function Ic(a){var b=Jc(a);a=new La;a.update(b);var b=[],c=8*a.ee;56>a.ac?a.update(a.Ld,56-a.ac):a.update(a.Ld,a.Wa-(a.ac-56));for(var d=a.Wa-1;56<=d;d--)a.ne[d]=c&255,c/=256;Ma(a,a.ne);for(d=c=0;5>d;d++)for(var e=24;0<=e;e-=8)b[c]=a.P[d]>>e&255,++c;return fb(b)}
	function Kc(a){for(var b="",c=0;c<arguments.length;c++)b=fa(arguments[c])?b+Kc.apply(null,arguments[c]):"object"===typeof arguments[c]?b+B(arguments[c]):b+arguments[c],b+=" ";return b}var Bb=null,Lc=!0;function Cb(a){!0===Lc&&(Lc=!1,null===Bb&&!0===P.get("logging_enabled")&&Mc(!0));if(Bb){var b=Kc.apply(null,arguments);Bb(b)}}function Nc(a){return function(){Cb(a,arguments)}}
	function Oc(a){if("undefined"!==typeof console){var b="FIREBASE INTERNAL ERROR: "+Kc.apply(null,arguments);"undefined"!==typeof console.error?console.error(b):console.log(b)}}function Pc(a){var b=Kc.apply(null,arguments);throw Error("FIREBASE FATAL ERROR: "+b);}function Q(a){if("undefined"!==typeof console){var b="FIREBASE WARNING: "+Kc.apply(null,arguments);"undefined"!==typeof console.warn?console.warn(b):console.log(b)}}
	function Qc(a){var b="",c="",d="",e="",f=!0,h="https",k=443;if(p(a)){var l=a.indexOf("//");0<=l&&(h=a.substring(0,l-1),a=a.substring(l+2));l=a.indexOf("/");-1===l&&(l=a.length);b=a.substring(0,l);e="";a=a.substring(l).split("/");for(l=0;l<a.length;l++)if(0<a[l].length){var m=a[l];try{m=decodeURIComponent(m.replace(/\+/g," "))}catch(t){}e+="/"+m}a=b.split(".");3===a.length?(c=a[1],d=a[0].toLowerCase()):2===a.length&&(c=a[0]);l=b.indexOf(":");0<=l&&(f="https"===h||"wss"===h,k=b.substring(l+1),isFinite(k)&&
	(k=String(k)),k=p(k)?/^\s*-?0x/i.test(k)?parseInt(k,16):parseInt(k,10):NaN)}return{host:b,port:k,domain:c,Rg:d,lb:f,scheme:h,$c:e}}function Rc(a){return ga(a)&&(a!=a||a==Number.POSITIVE_INFINITY||a==Number.NEGATIVE_INFINITY)}
	function Sc(a){if("complete"===document.readyState)a();else{var b=!1,c=function(){document.body?b||(b=!0,a()):setTimeout(c,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",c,!1),window.addEventListener("load",c,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",function(){"complete"===document.readyState&&c()}),window.attachEvent("onload",c))}}
	function Ub(a,b){if(a===b)return 0;if("[MIN_NAME]"===a||"[MAX_NAME]"===b)return-1;if("[MIN_NAME]"===b||"[MAX_NAME]"===a)return 1;var c=Tc(a),d=Tc(b);return null!==c?null!==d?0==c-d?a.length-b.length:c-d:-1:null!==d?1:a<b?-1:1}function Uc(a,b){if(b&&a in b)return b[a];throw Error("Missing required key ("+a+") in object: "+B(b));}
	function Vc(a){if("object"!==typeof a||null===a)return B(a);var b=[],c;for(c in a)b.push(c);b.sort();c="{";for(var d=0;d<b.length;d++)0!==d&&(c+=","),c+=B(b[d]),c+=":",c+=Vc(a[b[d]]);return c+"}"}function Wc(a,b){if(a.length<=b)return[a];for(var c=[],d=0;d<a.length;d+=b)d+b>a?c.push(a.substring(d,a.length)):c.push(a.substring(d,d+b));return c}function Xc(a,b){if(ea(a))for(var c=0;c<a.length;++c)b(c,a[c]);else r(a,b)}
	function Yc(a){K(!Rc(a),"Invalid JSON number");var b,c,d,e;0===a?(d=c=0,b=-Infinity===1/a?1:0):(b=0>a,a=Math.abs(a),a>=Math.pow(2,-1022)?(d=Math.min(Math.floor(Math.log(a)/Math.LN2),1023),c=d+1023,d=Math.round(a*Math.pow(2,52-d)-Math.pow(2,52))):(c=0,d=Math.round(a/Math.pow(2,-1074))));e=[];for(a=52;a;--a)e.push(d%2?1:0),d=Math.floor(d/2);for(a=11;a;--a)e.push(c%2?1:0),c=Math.floor(c/2);e.push(b?1:0);e.reverse();b=e.join("");c="";for(a=0;64>a;a+=8)d=parseInt(b.substr(a,8),2).toString(16),1===d.length&&
	(d="0"+d),c+=d;return c.toLowerCase()}var Zc=/^-?\d{1,10}$/;function Tc(a){return Zc.test(a)&&(a=Number(a),-2147483648<=a&&2147483647>=a)?a:null}function Db(a){try{a()}catch(b){setTimeout(function(){Q("Exception was thrown by user callback.",b.stack||"");throw b;},Math.floor(0))}}function R(a,b){if(ha(a)){var c=Array.prototype.slice.call(arguments,1).slice();Db(function(){a.apply(null,c)})}};function Jc(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);55296<=e&&56319>=e&&(e-=55296,d++,K(d<a.length,"Surrogate pair missing trail surrogate."),e=65536+(e<<10)+(a.charCodeAt(d)-56320));128>e?b[c++]=e:(2048>e?b[c++]=e>>6|192:(65536>e?b[c++]=e>>12|224:(b[c++]=e>>18|240,b[c++]=e>>12&63|128),b[c++]=e>>6&63|128),b[c++]=e&63|128)}return b}function wc(a){for(var b=0,c=0;c<a.length;c++){var d=a.charCodeAt(c);128>d?b++:2048>d?b+=2:55296<=d&&56319>=d?(b+=4,c++):b+=3}return b};function $c(a){var b={},c={},d={},e="";try{var f=a.split("."),b=nb(Hc(f[0])||""),c=nb(Hc(f[1])||""),e=f[2],d=c.d||{};delete c.d}catch(h){}return{Xg:b,Bc:c,data:d,Og:e}}function ad(a){a=$c(a).Bc;return"object"===typeof a&&a.hasOwnProperty("iat")?w(a,"iat"):null}function bd(a){a=$c(a);var b=a.Bc;return!!a.Og&&!!b&&"object"===typeof b&&b.hasOwnProperty("iat")};function cd(a){this.V=a;this.g=a.o.g}function dd(a,b,c,d){var e=[],f=[];Oa(b,function(b){"child_changed"===b.type&&a.g.Ad(b.Le,b.Ja)&&f.push(new D("child_moved",b.Ja,b.Xa))});ed(a,e,"child_removed",b,d,c);ed(a,e,"child_added",b,d,c);ed(a,e,"child_moved",f,d,c);ed(a,e,"child_changed",b,d,c);ed(a,e,Fb,b,d,c);return e}function ed(a,b,c,d,e,f){d=Pa(d,function(a){return a.type===c});Xa(d,q(a.fg,a));Oa(d,function(c){var d=fd(a,c,f);Oa(e,function(e){e.Kf(c.type)&&b.push(e.createEvent(d,a.V))})})}
	function fd(a,b,c){"value"!==b.type&&"child_removed"!==b.type&&(b.Qd=c.rf(b.Xa,b.Ja,a.g));return b}cd.prototype.fg=function(a,b){if(null==a.Xa||null==b.Xa)throw Gc("Should only compare child_ events.");return this.g.compare(new F(a.Xa,a.Ja),new F(b.Xa,b.Ja))};function gd(){this.bb={}}
	function hd(a,b){var c=b.type,d=b.Xa;K("child_added"==c||"child_changed"==c||"child_removed"==c,"Only child changes supported for tracking");K(".priority"!==d,"Only non-priority child changes can be tracked.");var e=w(a.bb,d);if(e){var f=e.type;if("child_added"==c&&"child_removed"==f)a.bb[d]=new D("child_changed",b.Ja,d,e.Ja);else if("child_removed"==c&&"child_added"==f)delete a.bb[d];else if("child_removed"==c&&"child_changed"==f)a.bb[d]=new D("child_removed",e.Le,d);else if("child_changed"==c&&
	"child_added"==f)a.bb[d]=new D("child_added",b.Ja,d);else if("child_changed"==c&&"child_changed"==f)a.bb[d]=new D("child_changed",b.Ja,d,e.Le);else throw Gc("Illegal combination of changes: "+b+" occurred after "+e);}else a.bb[d]=b};function id(a,b,c){this.Rb=a;this.qb=b;this.sb=c||null}g=id.prototype;g.Kf=function(a){return"value"===a};g.createEvent=function(a,b){var c=b.o.g;return new Gb("value",this,new S(a.Ja,b.mc(),c))};g.Vb=function(a){var b=this.sb;if("cancel"===a.Ae()){K(this.qb,"Raising a cancel event on a listener with no cancel callback");var c=this.qb;return function(){c.call(b,a.error)}}var d=this.Rb;return function(){d.call(b,a.$d)}};g.gf=function(a,b){return this.qb?new Hb(this,a,b):null};
	g.matches=function(a){return a instanceof id?a.Rb&&this.Rb?a.Rb===this.Rb&&a.sb===this.sb:!0:!1};g.tf=function(){return null!==this.Rb};function jd(a,b,c){this.ha=a;this.qb=b;this.sb=c}g=jd.prototype;g.Kf=function(a){a="children_added"===a?"child_added":a;return("children_removed"===a?"child_removed":a)in this.ha};g.gf=function(a,b){return this.qb?new Hb(this,a,b):null};
	g.createEvent=function(a,b){K(null!=a.Xa,"Child events should have a childName.");var c=b.mc().u(a.Xa);return new Gb(a.type,this,new S(a.Ja,c,b.o.g),a.Qd)};g.Vb=function(a){var b=this.sb;if("cancel"===a.Ae()){K(this.qb,"Raising a cancel event on a listener with no cancel callback");var c=this.qb;return function(){c.call(b,a.error)}}var d=this.ha[a.ud];return function(){d.call(b,a.$d,a.Qd)}};
	g.matches=function(a){if(a instanceof jd){if(!this.ha||!a.ha)return!0;if(this.sb===a.sb){var b=pa(a.ha);if(b===pa(this.ha)){if(1===b){var b=qa(a.ha),c=qa(this.ha);return c===b&&(!a.ha[b]||!this.ha[c]||a.ha[b]===this.ha[c])}return oa(this.ha,function(b,c){return a.ha[c]===b})}}}return!1};g.tf=function(){return null!==this.ha};function kd(a){this.g=a}g=kd.prototype;g.K=function(a,b,c,d,e,f){K(a.Jc(this.g),"A node must be indexed if only a child is updated");e=a.J(b);if(e.Y(d).ca(c.Y(d))&&e.e()==c.e())return a;null!=f&&(c.e()?a.Da(b)?hd(f,new D("child_removed",e,b)):K(a.L(),"A child remove without an old child only makes sense on a leaf node"):e.e()?hd(f,new D("child_added",c,b)):hd(f,new D("child_changed",c,b,e)));return a.L()&&c.e()?a:a.O(b,c).mb(this.g)};
	g.xa=function(a,b,c){null!=c&&(a.L()||a.R(N,function(a,e){b.Da(a)||hd(c,new D("child_removed",e,a))}),b.L()||b.R(N,function(b,e){if(a.Da(b)){var f=a.J(b);f.ca(e)||hd(c,new D("child_changed",e,b,f))}else hd(c,new D("child_added",e,b))}));return b.mb(this.g)};g.ga=function(a,b){return a.e()?C:a.ga(b)};g.Na=function(){return!1};g.Wb=function(){return this};function ld(a){this.Ce=new kd(a.g);this.g=a.g;var b;a.ma?(b=md(a),b=a.g.Pc(nd(a),b)):b=a.g.Tc();this.ed=b;a.pa?(b=od(a),a=a.g.Pc(pd(a),b)):a=a.g.Qc();this.Gc=a}g=ld.prototype;g.matches=function(a){return 0>=this.g.compare(this.ed,a)&&0>=this.g.compare(a,this.Gc)};g.K=function(a,b,c,d,e,f){this.matches(new F(b,c))||(c=C);return this.Ce.K(a,b,c,d,e,f)};
	g.xa=function(a,b,c){b.L()&&(b=C);var d=b.mb(this.g),d=d.ga(C),e=this;b.R(N,function(a,b){e.matches(new F(a,b))||(d=d.O(a,C))});return this.Ce.xa(a,d,c)};g.ga=function(a){return a};g.Na=function(){return!0};g.Wb=function(){return this.Ce};function qd(a){this.sa=new ld(a);this.g=a.g;K(a.ja,"Only valid if limit has been set");this.ka=a.ka;this.Jb=!rd(a)}g=qd.prototype;g.K=function(a,b,c,d,e,f){this.sa.matches(new F(b,c))||(c=C);return a.J(b).ca(c)?a:a.Eb()<this.ka?this.sa.Wb().K(a,b,c,d,e,f):sd(this,a,b,c,e,f)};
	g.xa=function(a,b,c){var d;if(b.L()||b.e())d=C.mb(this.g);else if(2*this.ka<b.Eb()&&b.Jc(this.g)){d=C.mb(this.g);b=this.Jb?b.$b(this.sa.Gc,this.g):b.Yb(this.sa.ed,this.g);for(var e=0;0<b.Qa.length&&e<this.ka;){var f=J(b),h;if(h=this.Jb?0>=this.g.compare(this.sa.ed,f):0>=this.g.compare(f,this.sa.Gc))d=d.O(f.name,f.S),e++;else break}}else{d=b.mb(this.g);d=d.ga(C);var k,l,m;if(this.Jb){b=d.sf(this.g);k=this.sa.Gc;l=this.sa.ed;var t=td(this.g);m=function(a,b){return t(b,a)}}else b=d.Xb(this.g),k=this.sa.ed,
	l=this.sa.Gc,m=td(this.g);for(var e=0,y=!1;0<b.Qa.length;)f=J(b),!y&&0>=m(k,f)&&(y=!0),(h=y&&e<this.ka&&0>=m(f,l))?e++:d=d.O(f.name,C)}return this.sa.Wb().xa(a,d,c)};g.ga=function(a){return a};g.Na=function(){return!0};g.Wb=function(){return this.sa.Wb()};
	function sd(a,b,c,d,e,f){var h;if(a.Jb){var k=td(a.g);h=function(a,b){return k(b,a)}}else h=td(a.g);K(b.Eb()==a.ka,"");var l=new F(c,d),m=a.Jb?ud(b,a.g):vd(b,a.g),t=a.sa.matches(l);if(b.Da(c)){for(var y=b.J(c),m=e.ze(a.g,m,a.Jb);null!=m&&(m.name==c||b.Da(m.name));)m=e.ze(a.g,m,a.Jb);e=null==m?1:h(m,l);if(t&&!d.e()&&0<=e)return null!=f&&hd(f,new D("child_changed",d,c,y)),b.O(c,d);null!=f&&hd(f,new D("child_removed",y,c));b=b.O(c,C);return null!=m&&a.sa.matches(m)?(null!=f&&hd(f,new D("child_added",
	m.S,m.name)),b.O(m.name,m.S)):b}return d.e()?b:t&&0<=h(m,l)?(null!=f&&(hd(f,new D("child_removed",m.S,m.name)),hd(f,new D("child_added",d,c))),b.O(c,d).O(m.name,C)):b};function wd(a,b){this.ke=a;this.dg=b}function yd(a){this.U=a}
	yd.prototype.ab=function(a,b,c,d){var e=new gd,f;if(b.type===Xb)b.source.xe?c=zd(this,a,b.path,b.Ga,c,d,e):(K(b.source.pf,"Unknown source."),f=b.source.bf,c=Ad(this,a,b.path,b.Ga,c,d,f,e));else if(b.type===Bd)b.source.xe?c=Cd(this,a,b.path,b.children,c,d,e):(K(b.source.pf,"Unknown source."),f=b.source.bf,c=Dd(this,a,b.path,b.children,c,d,f,e));else if(b.type===Ed)if(b.Vd)if(b=b.path,null!=c.tc(b))c=a;else{f=new rb(c,a,d);d=a.Q.j();if(b.e()||".priority"===E(b))Ib(a.C())?b=c.za(ub(a)):(b=a.C().j(),
	K(b instanceof T,"serverChildren would be complete if leaf node"),b=c.yc(b)),b=this.U.xa(d,b,e);else{var h=E(b),k=c.xc(h,a.C());null==k&&sb(a.C(),h)&&(k=d.J(h));b=null!=k?this.U.K(d,h,k,H(b),f,e):a.Q.j().Da(h)?this.U.K(d,h,C,H(b),f,e):d;b.e()&&Ib(a.C())&&(d=c.za(ub(a)),d.L()&&(b=this.U.xa(b,d,e)))}d=Ib(a.C())||null!=c.tc(G);c=Fd(a,b,d,this.U.Na())}else c=Gd(this,a,b.path,b.Qb,c,d,e);else if(b.type===Zb)d=b.path,b=a.C(),f=b.j(),h=b.ea||d.e(),c=Hd(this,new Id(a.Q,new tb(f,h,b.Ub)),d,c,qb,e);else throw Gc("Unknown operation type: "+
	b.type);e=ra(e.bb);d=c;b=d.Q;b.ea&&(f=b.j().L()||b.j().e(),h=Jd(a),(0<e.length||!a.Q.ea||f&&!b.j().ca(h)||!b.j().B().ca(h.B()))&&e.push(Eb(Jd(d))));return new wd(c,e)};
	function Hd(a,b,c,d,e,f){var h=b.Q;if(null!=d.tc(c))return b;var k;if(c.e())K(Ib(b.C()),"If change path is empty, we must have complete server data"),b.C().Ub?(e=ub(b),d=d.yc(e instanceof T?e:C)):d=d.za(ub(b)),f=a.U.xa(b.Q.j(),d,f);else{var l=E(c);if(".priority"==l)K(1==tc(c),"Can't have a priority with additional path components"),f=h.j(),k=b.C().j(),d=d.ld(c,f,k),f=null!=d?a.U.ga(f,d):h.j();else{var m=H(c);sb(h,l)?(k=b.C().j(),d=d.ld(c,h.j(),k),d=null!=d?h.j().J(l).K(m,d):h.j().J(l)):d=d.xc(l,b.C());
	f=null!=d?a.U.K(h.j(),l,d,m,e,f):h.j()}}return Fd(b,f,h.ea||c.e(),a.U.Na())}function Ad(a,b,c,d,e,f,h,k){var l=b.C();h=h?a.U:a.U.Wb();if(c.e())d=h.xa(l.j(),d,null);else if(h.Na()&&!l.Ub)d=l.j().K(c,d),d=h.xa(l.j(),d,null);else{var m=E(c);if(!Jb(l,c)&&1<tc(c))return b;var t=H(c);d=l.j().J(m).K(t,d);d=".priority"==m?h.ga(l.j(),d):h.K(l.j(),m,d,t,qb,null)}l=l.ea||c.e();b=new Id(b.Q,new tb(d,l,h.Na()));return Hd(a,b,c,e,new rb(e,b,f),k)}
	function zd(a,b,c,d,e,f,h){var k=b.Q;e=new rb(e,b,f);if(c.e())h=a.U.xa(b.Q.j(),d,h),a=Fd(b,h,!0,a.U.Na());else if(f=E(c),".priority"===f)h=a.U.ga(b.Q.j(),d),a=Fd(b,h,k.ea,k.Ub);else{c=H(c);var l=k.j().J(f);if(!c.e()){var m=e.qf(f);d=null!=m?".priority"===uc(c)&&m.Y(c.parent()).e()?m:m.K(c,d):C}l.ca(d)?a=b:(h=a.U.K(k.j(),f,d,c,e,h),a=Fd(b,h,k.ea,a.U.Na()))}return a}
	function Cd(a,b,c,d,e,f,h){var k=b;Kd(d,function(d,m){var t=c.u(d);sb(b.Q,E(t))&&(k=zd(a,k,t,m,e,f,h))});Kd(d,function(d,m){var t=c.u(d);sb(b.Q,E(t))||(k=zd(a,k,t,m,e,f,h))});return k}function Ld(a,b){Kd(b,function(b,d){a=a.K(b,d)});return a}
	function Dd(a,b,c,d,e,f,h,k){if(b.C().j().e()&&!Ib(b.C()))return b;var l=b;c=c.e()?d:Md(Nd,c,d);var m=b.C().j();c.children.ia(function(c,d){if(m.Da(c)){var I=b.C().j().J(c),I=Ld(I,d);l=Ad(a,l,new L(c),I,e,f,h,k)}});c.children.ia(function(c,d){var I=!sb(b.C(),c)&&null==d.value;m.Da(c)||I||(I=b.C().j().J(c),I=Ld(I,d),l=Ad(a,l,new L(c),I,e,f,h,k))});return l}
	function Gd(a,b,c,d,e,f,h){if(null!=e.tc(c))return b;var k=b.C();if(null!=d.value){if(c.e()&&k.ea||Jb(k,c))return Ad(a,b,c,k.j().Y(c),e,f,!1,h);if(c.e()){var l=Nd;k.j().R(Od,function(a,b){l=l.set(new L(a),b)});return Dd(a,b,c,l,e,f,!1,h)}return b}l=Nd;Kd(d,function(a){var b=c.u(a);Jb(k,b)&&(l=l.set(a,k.j().Y(b)))});return Dd(a,b,c,l,e,f,!1,h)};function Pd(){}var Qd={};function td(a){return q(a.compare,a)}Pd.prototype.Ad=function(a,b){return 0!==this.compare(new F("[MIN_NAME]",a),new F("[MIN_NAME]",b))};Pd.prototype.Tc=function(){return Rd};function Sd(a){this.cc=a}ma(Sd,Pd);g=Sd.prototype;g.Ic=function(a){return!a.J(this.cc).e()};g.compare=function(a,b){var c=a.S.J(this.cc),d=b.S.J(this.cc),c=c.Dc(d);return 0===c?Ub(a.name,b.name):c};g.Pc=function(a,b){var c=M(a),c=C.O(this.cc,c);return new F(b,c)};
	g.Qc=function(){var a=C.O(this.cc,Td);return new F("[MAX_NAME]",a)};g.toString=function(){return this.cc};function Ud(){}ma(Ud,Pd);g=Ud.prototype;g.compare=function(a,b){var c=a.S.B(),d=b.S.B(),c=c.Dc(d);return 0===c?Ub(a.name,b.name):c};g.Ic=function(a){return!a.B().e()};g.Ad=function(a,b){return!a.B().ca(b.B())};g.Tc=function(){return Rd};g.Qc=function(){return new F("[MAX_NAME]",new sc("[PRIORITY-POST]",Td))};g.Pc=function(a,b){var c=M(a);return new F(b,new sc("[PRIORITY-POST]",c))};
	g.toString=function(){return".priority"};var N=new Ud;function Vd(){}ma(Vd,Pd);g=Vd.prototype;g.compare=function(a,b){return Ub(a.name,b.name)};g.Ic=function(){throw Gc("KeyIndex.isDefinedOn not expected to be called.");};g.Ad=function(){return!1};g.Tc=function(){return Rd};g.Qc=function(){return new F("[MAX_NAME]",C)};g.Pc=function(a){K(p(a),"KeyIndex indexValue must always be a string.");return new F(a,C)};g.toString=function(){return".key"};var Od=new Vd;function Wd(){}ma(Wd,Pd);g=Wd.prototype;
	g.compare=function(a,b){var c=a.S.Dc(b.S);return 0===c?Ub(a.name,b.name):c};g.Ic=function(){return!0};g.Ad=function(a,b){return!a.ca(b)};g.Tc=function(){return Rd};g.Qc=function(){return Xd};g.Pc=function(a,b){var c=M(a);return new F(b,c)};g.toString=function(){return".value"};var Yd=new Wd;function Zd(){this.Tb=this.pa=this.Lb=this.ma=this.ja=!1;this.ka=0;this.Nb="";this.ec=null;this.yb="";this.bc=null;this.wb="";this.g=N}var $d=new Zd;function rd(a){return""===a.Nb?a.ma:"l"===a.Nb}function nd(a){K(a.ma,"Only valid if start has been set");return a.ec}function md(a){K(a.ma,"Only valid if start has been set");return a.Lb?a.yb:"[MIN_NAME]"}function pd(a){K(a.pa,"Only valid if end has been set");return a.bc}
	function od(a){K(a.pa,"Only valid if end has been set");return a.Tb?a.wb:"[MAX_NAME]"}function ae(a){var b=new Zd;b.ja=a.ja;b.ka=a.ka;b.ma=a.ma;b.ec=a.ec;b.Lb=a.Lb;b.yb=a.yb;b.pa=a.pa;b.bc=a.bc;b.Tb=a.Tb;b.wb=a.wb;b.g=a.g;return b}g=Zd.prototype;g.Ie=function(a){var b=ae(this);b.ja=!0;b.ka=a;b.Nb="";return b};g.Je=function(a){var b=ae(this);b.ja=!0;b.ka=a;b.Nb="l";return b};g.Ke=function(a){var b=ae(this);b.ja=!0;b.ka=a;b.Nb="r";return b};
	g.ae=function(a,b){var c=ae(this);c.ma=!0;n(a)||(a=null);c.ec=a;null!=b?(c.Lb=!0,c.yb=b):(c.Lb=!1,c.yb="");return c};g.td=function(a,b){var c=ae(this);c.pa=!0;n(a)||(a=null);c.bc=a;n(b)?(c.Tb=!0,c.wb=b):(c.Zg=!1,c.wb="");return c};function be(a,b){var c=ae(a);c.g=b;return c}function ce(a){var b={};a.ma&&(b.sp=a.ec,a.Lb&&(b.sn=a.yb));a.pa&&(b.ep=a.bc,a.Tb&&(b.en=a.wb));if(a.ja){b.l=a.ka;var c=a.Nb;""===c&&(c=rd(a)?"l":"r");b.vf=c}a.g!==N&&(b.i=a.g.toString());return b}
	function de(a){return!(a.ma||a.pa||a.ja)}function ee(a){var b={};if(de(a)&&a.g==N)return b;var c;a.g===N?c="$priority":a.g===Yd?c="$value":a.g===Od?c="$key":(K(a.g instanceof Sd,"Unrecognized index type!"),c=a.g.toString());b.orderBy=B(c);a.ma&&(b.startAt=B(a.ec),a.Lb&&(b.startAt+=","+B(a.yb)));a.pa&&(b.endAt=B(a.bc),a.Tb&&(b.endAt+=","+B(a.wb)));a.ja&&(rd(a)?b.limitToFirst=a.ka:b.limitToLast=a.ka);return b}g.toString=function(){return B(ce(this))};function fe(a,b){this.Bd=a;this.dc=b}fe.prototype.get=function(a){var b=w(this.Bd,a);if(!b)throw Error("No index defined for "+a);return b===Qd?null:b};function ge(a,b,c){var d=na(a.Bd,function(d,f){var h=w(a.dc,f);K(h,"Missing index implementation for "+f);if(d===Qd){if(h.Ic(b.S)){for(var k=[],l=c.Xb(Sb),m=J(l);m;)m.name!=b.name&&k.push(m),m=J(l);k.push(b);return he(k,td(h))}return Qd}h=c.get(b.name);k=d;h&&(k=k.remove(new F(b.name,h)));return k.Oa(b,b.S)});return new fe(d,a.dc)}
	function ie(a,b,c){var d=na(a.Bd,function(a){if(a===Qd)return a;var d=c.get(b.name);return d?a.remove(new F(b.name,d)):a});return new fe(d,a.dc)}var je=new fe({".priority":Qd},{".priority":N});function sc(a,b){this.A=a;K(n(this.A)&&null!==this.A,"LeafNode shouldn't be created with null/undefined value.");this.aa=b||C;ke(this.aa);this.Cb=null}var le=["object","boolean","number","string"];g=sc.prototype;g.L=function(){return!0};g.B=function(){return this.aa};g.ga=function(a){return new sc(this.A,a)};g.J=function(a){return".priority"===a?this.aa:C};g.Y=function(a){return a.e()?this:".priority"===E(a)?this.aa:C};g.Da=function(){return!1};g.rf=function(){return null};
	g.O=function(a,b){return".priority"===a?this.ga(b):b.e()&&".priority"!==a?this:C.O(a,b).ga(this.aa)};g.K=function(a,b){var c=E(a);if(null===c)return b;if(b.e()&&".priority"!==c)return this;K(".priority"!==c||1===tc(a),".priority must be the last token in a path");return this.O(c,C.K(H(a),b))};g.e=function(){return!1};g.Eb=function(){return 0};g.R=function(){return!1};g.H=function(a){return a&&!this.B().e()?{".value":this.Ca(),".priority":this.B().H()}:this.Ca()};
	g.hash=function(){if(null===this.Cb){var a="";this.aa.e()||(a+="priority:"+me(this.aa.H())+":");var b=typeof this.A,a=a+(b+":"),a="number"===b?a+Yc(this.A):a+this.A;this.Cb=Ic(a)}return this.Cb};g.Ca=function(){return this.A};g.Dc=function(a){if(a===C)return 1;if(a instanceof T)return-1;K(a.L(),"Unknown node type");var b=typeof a.A,c=typeof this.A,d=Na(le,b),e=Na(le,c);K(0<=d,"Unknown leaf type: "+b);K(0<=e,"Unknown leaf type: "+c);return d===e?"object"===c?0:this.A<a.A?-1:this.A===a.A?0:1:e-d};
	g.mb=function(){return this};g.Jc=function(){return!0};g.ca=function(a){return a===this?!0:a.L()?this.A===a.A&&this.aa.ca(a.aa):!1};g.toString=function(){return B(this.H(!0))};function T(a,b,c){this.m=a;(this.aa=b)&&ke(this.aa);a.e()&&K(!this.aa||this.aa.e(),"An empty node cannot have a priority");this.xb=c;this.Cb=null}g=T.prototype;g.L=function(){return!1};g.B=function(){return this.aa||C};g.ga=function(a){return this.m.e()?this:new T(this.m,a,this.xb)};g.J=function(a){if(".priority"===a)return this.B();a=this.m.get(a);return null===a?C:a};g.Y=function(a){var b=E(a);return null===b?this:this.J(b).Y(H(a))};g.Da=function(a){return null!==this.m.get(a)};
	g.O=function(a,b){K(b,"We should always be passing snapshot nodes");if(".priority"===a)return this.ga(b);var c=new F(a,b),d,e;b.e()?(d=this.m.remove(a),c=ie(this.xb,c,this.m)):(d=this.m.Oa(a,b),c=ge(this.xb,c,this.m));e=d.e()?C:this.aa;return new T(d,e,c)};g.K=function(a,b){var c=E(a);if(null===c)return b;K(".priority"!==E(a)||1===tc(a),".priority must be the last token in a path");var d=this.J(c).K(H(a),b);return this.O(c,d)};g.e=function(){return this.m.e()};g.Eb=function(){return this.m.count()};
	var ne=/^(0|[1-9]\d*)$/;g=T.prototype;g.H=function(a){if(this.e())return null;var b={},c=0,d=0,e=!0;this.R(N,function(f,h){b[f]=h.H(a);c++;e&&ne.test(f)?d=Math.max(d,Number(f)):e=!1});if(!a&&e&&d<2*c){var f=[],h;for(h in b)f[h]=b[h];return f}a&&!this.B().e()&&(b[".priority"]=this.B().H());return b};g.hash=function(){if(null===this.Cb){var a="";this.B().e()||(a+="priority:"+me(this.B().H())+":");this.R(N,function(b,c){var d=c.hash();""!==d&&(a+=":"+b+":"+d)});this.Cb=""===a?"":Ic(a)}return this.Cb};
	g.rf=function(a,b,c){return(c=oe(this,c))?(a=bc(c,new F(a,b)))?a.name:null:bc(this.m,a)};function ud(a,b){var c;c=(c=oe(a,b))?(c=c.Sc())&&c.name:a.m.Sc();return c?new F(c,a.m.get(c)):null}function vd(a,b){var c;c=(c=oe(a,b))?(c=c.fc())&&c.name:a.m.fc();return c?new F(c,a.m.get(c)):null}g.R=function(a,b){var c=oe(this,a);return c?c.ia(function(a){return b(a.name,a.S)}):this.m.ia(b)};g.Xb=function(a){return this.Yb(a.Tc(),a)};
	g.Yb=function(a,b){var c=oe(this,b);if(c)return c.Yb(a,function(a){return a});for(var c=this.m.Yb(a.name,Sb),d=dc(c);null!=d&&0>b.compare(d,a);)J(c),d=dc(c);return c};g.sf=function(a){return this.$b(a.Qc(),a)};g.$b=function(a,b){var c=oe(this,b);if(c)return c.$b(a,function(a){return a});for(var c=this.m.$b(a.name,Sb),d=dc(c);null!=d&&0<b.compare(d,a);)J(c),d=dc(c);return c};g.Dc=function(a){return this.e()?a.e()?0:-1:a.L()||a.e()?1:a===Td?-1:0};
	g.mb=function(a){if(a===Od||ta(this.xb.dc,a.toString()))return this;var b=this.xb,c=this.m;K(a!==Od,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var d=[],e=!1,c=c.Xb(Sb),f=J(c);f;)e=e||a.Ic(f.S),d.push(f),f=J(c);d=e?he(d,td(a)):Qd;e=a.toString();c=xa(b.dc);c[e]=a;a=xa(b.Bd);a[e]=d;return new T(this.m,this.aa,new fe(a,c))};g.Jc=function(a){return a===Od||ta(this.xb.dc,a.toString())};
	g.ca=function(a){if(a===this)return!0;if(a.L())return!1;if(this.B().ca(a.B())&&this.m.count()===a.m.count()){var b=this.Xb(N);a=a.Xb(N);for(var c=J(b),d=J(a);c&&d;){if(c.name!==d.name||!c.S.ca(d.S))return!1;c=J(b);d=J(a)}return null===c&&null===d}return!1};function oe(a,b){return b===Od?null:a.xb.get(b.toString())}g.toString=function(){return B(this.H(!0))};function M(a,b){if(null===a)return C;var c=null;"object"===typeof a&&".priority"in a?c=a[".priority"]:"undefined"!==typeof b&&(c=b);K(null===c||"string"===typeof c||"number"===typeof c||"object"===typeof c&&".sv"in c,"Invalid priority type found: "+typeof c);"object"===typeof a&&".value"in a&&null!==a[".value"]&&(a=a[".value"]);if("object"!==typeof a||".sv"in a)return new sc(a,M(c));if(a instanceof Array){var d=C,e=a;r(e,function(a,b){if(v(e,b)&&"."!==b.substring(0,1)){var c=M(a);if(c.L()||!c.e())d=
	d.O(b,c)}});return d.ga(M(c))}var f=[],h=!1,k=a;ib(k,function(a){if("string"!==typeof a||"."!==a.substring(0,1)){var b=M(k[a]);b.e()||(h=h||!b.B().e(),f.push(new F(a,b)))}});if(0==f.length)return C;var l=he(f,Tb,function(a){return a.name},Vb);if(h){var m=he(f,td(N));return new T(l,M(c),new fe({".priority":m},{".priority":N}))}return new T(l,M(c),je)}var pe=Math.log(2);
	function qe(a){this.count=parseInt(Math.log(a+1)/pe,10);this.jf=this.count-1;this.cg=a+1&parseInt(Array(this.count+1).join("1"),2)}function re(a){var b=!(a.cg&1<<a.jf);a.jf--;return b}
	function he(a,b,c,d){function e(b,d){var f=d-b;if(0==f)return null;if(1==f){var m=a[b],t=c?c(m):m;return new ec(t,m.S,!1,null,null)}var m=parseInt(f/2,10)+b,f=e(b,m),y=e(m+1,d),m=a[m],t=c?c(m):m;return new ec(t,m.S,!1,f,y)}a.sort(b);var f=function(b){function d(b,h){var k=t-b,y=t;t-=b;var y=e(k+1,y),k=a[k],I=c?c(k):k,y=new ec(I,k.S,h,null,y);f?f.left=y:m=y;f=y}for(var f=null,m=null,t=a.length,y=0;y<b.count;++y){var I=re(b),xd=Math.pow(2,b.count-(y+1));I?d(xd,!1):(d(xd,!1),d(xd,!0))}return m}(new qe(a.length));
	return null!==f?new $b(d||b,f):new $b(d||b)}function me(a){return"number"===typeof a?"number:"+Yc(a):"string:"+a}function ke(a){if(a.L()){var b=a.H();K("string"===typeof b||"number"===typeof b||"object"===typeof b&&v(b,".sv"),"Priority must be a string or number.")}else K(a===Td||a.e(),"priority of unexpected type.");K(a===Td||a.B().e(),"Priority nodes can't have a priority of their own.")}var C=new T(new $b(Vb),null,je);function se(){T.call(this,new $b(Vb),C,je)}ma(se,T);g=se.prototype;
	g.Dc=function(a){return a===this?0:1};g.ca=function(a){return a===this};g.B=function(){return this};g.J=function(){return C};g.e=function(){return!1};var Td=new se,Rd=new F("[MIN_NAME]",C),Xd=new F("[MAX_NAME]",Td);function Id(a,b){this.Q=a;this.Yd=b}function Fd(a,b,c,d){return new Id(new tb(b,c,d),a.Yd)}function Jd(a){return a.Q.ea?a.Q.j():null}Id.prototype.C=function(){return this.Yd};function ub(a){return a.Yd.ea?a.Yd.j():null};function te(a,b){this.V=a;var c=a.o,d=new kd(c.g),c=de(c)?new kd(c.g):c.ja?new qd(c):new ld(c);this.Hf=new yd(c);var e=b.C(),f=b.Q,h=d.xa(C,e.j(),null),k=c.xa(C,f.j(),null);this.Ka=new Id(new tb(k,f.ea,c.Na()),new tb(h,e.ea,d.Na()));this.Ya=[];this.jg=new cd(a)}function ue(a){return a.V}g=te.prototype;g.C=function(){return this.Ka.C().j()};g.gb=function(a){var b=ub(this.Ka);return b&&(de(this.V.o)||!a.e()&&!b.J(E(a)).e())?b.Y(a):null};g.e=function(){return 0===this.Ya.length};g.Pb=function(a){this.Ya.push(a)};
	g.kb=function(a,b){var c=[];if(b){K(null==a,"A cancel should cancel all event registrations.");var d=this.V.path;Oa(this.Ya,function(a){(a=a.gf(b,d))&&c.push(a)})}if(a){for(var e=[],f=0;f<this.Ya.length;++f){var h=this.Ya[f];if(!h.matches(a))e.push(h);else if(a.tf()){e=e.concat(this.Ya.slice(f+1));break}}this.Ya=e}else this.Ya=[];return c};
	g.ab=function(a,b,c){a.type===Bd&&null!==a.source.Ib&&(K(ub(this.Ka),"We should always have a full cache before handling merges"),K(Jd(this.Ka),"Missing event cache, even though we have a server cache"));var d=this.Ka;a=this.Hf.ab(d,a,b,c);b=this.Hf;c=a.ke;K(c.Q.j().Jc(b.U.g),"Event snap not indexed");K(c.C().j().Jc(b.U.g),"Server snap not indexed");K(Ib(a.ke.C())||!Ib(d.C()),"Once a server snap is complete, it should never go back");this.Ka=a.ke;return ve(this,a.dg,a.ke.Q.j(),null)};
	function we(a,b){var c=a.Ka.Q,d=[];c.j().L()||c.j().R(N,function(a,b){d.push(new D("child_added",b,a))});c.ea&&d.push(Eb(c.j()));return ve(a,d,c.j(),b)}function ve(a,b,c,d){return dd(a.jg,b,c,d?[d]:a.Ya)};function xe(a,b,c){this.type=Bd;this.source=a;this.path=b;this.children=c}xe.prototype.Xc=function(a){if(this.path.e())return a=this.children.subtree(new L(a)),a.e()?null:a.value?new Wb(this.source,G,a.value):new xe(this.source,G,a);K(E(this.path)===a,"Can't get a merge for a child not on the path of the operation");return new xe(this.source,H(this.path),this.children)};xe.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"};function ye(a,b){this.f=Nc("p:rest:");this.F=a;this.Hb=b;this.Aa=null;this.$={}}function ze(a,b){if(n(b))return"tag$"+b;var c=a.o;K(de(c)&&c.g==N,"should have a tag if it's not a default query.");return a.path.toString()}g=ye.prototype;
	g.yf=function(a,b,c,d){var e=a.path.toString();this.f("Listen called for "+e+" "+a.va());var f=ze(a,c),h={};this.$[f]=h;a=ee(a.o);var k=this;Ae(this,e+".json",a,function(a,b){var t=b;404===a&&(a=t=null);null===a&&k.Hb(e,t,!1,c);w(k.$,f)===h&&d(a?401==a?"permission_denied":"rest_error:"+a:"ok",null)})};g.Pf=function(a,b){var c=ze(a,b);delete this.$[c]};g.N=function(a,b){this.Aa=a;var c=$c(a),d=c.data,c=c.Bc&&c.Bc.exp;b&&b("ok",{auth:d,expires:c})};g.he=function(a){this.Aa=null;a("ok",null)};g.Ne=function(){};
	g.Cf=function(){};g.Jd=function(){};g.put=function(){};g.zf=function(){};g.Ve=function(){};
	function Ae(a,b,c,d){c=c||{};c.format="export";a.Aa&&(c.auth=a.Aa);var e=(a.F.lb?"https://":"http://")+a.F.host+b+"?"+kb(c);a.f("Sending REST request for "+e);var f=new XMLHttpRequest;f.onreadystatechange=function(){if(d&&4===f.readyState){a.f("REST Response for "+e+" received. status:",f.status,"response:",f.responseText);var b=null;if(200<=f.status&&300>f.status){try{b=nb(f.responseText)}catch(c){Q("Failed to parse JSON response for "+e+": "+f.responseText)}d(null,b)}else 401!==f.status&&404!==
	f.status&&Q("Got unsuccessful REST response for "+e+" Status: "+f.status),d(f.status);d=null}};f.open("GET",e,!0);f.send()};function Be(a,b){this.value=a;this.children=b||Ce}var Ce=new $b(function(a,b){return a===b?0:a<b?-1:1});function De(a){var b=Nd;r(a,function(a,d){b=b.set(new L(d),a)});return b}g=Be.prototype;g.e=function(){return null===this.value&&this.children.e()};function Ee(a,b,c){if(null!=a.value&&c(a.value))return{path:G,value:a.value};if(b.e())return null;var d=E(b);a=a.children.get(d);return null!==a?(b=Ee(a,H(b),c),null!=b?{path:(new L(d)).u(b.path),value:b.value}:null):null}
	function Fe(a,b){return Ee(a,b,function(){return!0})}g.subtree=function(a){if(a.e())return this;var b=this.children.get(E(a));return null!==b?b.subtree(H(a)):Nd};g.set=function(a,b){if(a.e())return new Be(b,this.children);var c=E(a),d=(this.children.get(c)||Nd).set(H(a),b),c=this.children.Oa(c,d);return new Be(this.value,c)};
	g.remove=function(a){if(a.e())return this.children.e()?Nd:new Be(null,this.children);var b=E(a),c=this.children.get(b);return c?(a=c.remove(H(a)),b=a.e()?this.children.remove(b):this.children.Oa(b,a),null===this.value&&b.e()?Nd:new Be(this.value,b)):this};g.get=function(a){if(a.e())return this.value;var b=this.children.get(E(a));return b?b.get(H(a)):null};
	function Md(a,b,c){if(b.e())return c;var d=E(b);b=Md(a.children.get(d)||Nd,H(b),c);d=b.e()?a.children.remove(d):a.children.Oa(d,b);return new Be(a.value,d)}function Ge(a,b){return He(a,G,b)}function He(a,b,c){var d={};a.children.ia(function(a,f){d[a]=He(f,b.u(a),c)});return c(b,a.value,d)}function Ie(a,b,c){return Je(a,b,G,c)}function Je(a,b,c,d){var e=a.value?d(c,a.value):!1;if(e)return e;if(b.e())return null;e=E(b);return(a=a.children.get(e))?Je(a,H(b),c.u(e),d):null}
	function Ke(a,b,c){var d=G;if(!b.e()){var e=!0;a.value&&(e=c(d,a.value));!0===e&&(e=E(b),(a=a.children.get(e))&&Le(a,H(b),d.u(e),c))}}function Le(a,b,c,d){if(b.e())return a;a.value&&d(c,a.value);var e=E(b);return(a=a.children.get(e))?Le(a,H(b),c.u(e),d):Nd}function Kd(a,b){Me(a,G,b)}function Me(a,b,c){a.children.ia(function(a,e){Me(e,b.u(a),c)});a.value&&c(b,a.value)}function Ne(a,b){a.children.ia(function(a,d){d.value&&b(a,d.value)})}var Nd=new Be(null);
	Be.prototype.toString=function(){var a={};Kd(this,function(b,c){a[b.toString()]=c.toString()});return B(a)};function Oe(a,b,c){this.type=Ed;this.source=Pe;this.path=a;this.Qb=b;this.Vd=c}Oe.prototype.Xc=function(a){if(this.path.e()){if(null!=this.Qb.value)return K(this.Qb.children.e(),"affectedTree should not have overlapping affected paths."),this;a=this.Qb.subtree(new L(a));return new Oe(G,a,this.Vd)}K(E(this.path)===a,"operationForChild called for unrelated child.");return new Oe(H(this.path),this.Qb,this.Vd)};
	Oe.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" ack write revert="+this.Vd+" affectedTree="+this.Qb+")"};var Xb=0,Bd=1,Ed=2,Zb=3;function Qe(a,b,c,d){this.xe=a;this.pf=b;this.Ib=c;this.bf=d;K(!d||b,"Tagged queries must be from server.")}var Pe=new Qe(!0,!1,null,!1),Re=new Qe(!1,!0,null,!1);Qe.prototype.toString=function(){return this.xe?"user":this.bf?"server(queryID="+this.Ib+")":"server"};function Se(a){this.W=a}var Te=new Se(new Be(null));function Ue(a,b,c){if(b.e())return new Se(new Be(c));var d=Fe(a.W,b);if(null!=d){var e=d.path,d=d.value;b=O(e,b);d=d.K(b,c);return new Se(a.W.set(e,d))}a=Md(a.W,b,new Be(c));return new Se(a)}function Ve(a,b,c){var d=a;ib(c,function(a,c){d=Ue(d,b.u(a),c)});return d}Se.prototype.Rd=function(a){if(a.e())return Te;a=Md(this.W,a,Nd);return new Se(a)};function We(a,b){var c=Fe(a.W,b);return null!=c?a.W.get(c.path).Y(O(c.path,b)):null}
	function Xe(a){var b=[],c=a.W.value;null!=c?c.L()||c.R(N,function(a,c){b.push(new F(a,c))}):a.W.children.ia(function(a,c){null!=c.value&&b.push(new F(a,c.value))});return b}function Ye(a,b){if(b.e())return a;var c=We(a,b);return null!=c?new Se(new Be(c)):new Se(a.W.subtree(b))}Se.prototype.e=function(){return this.W.e()};Se.prototype.apply=function(a){return Ze(G,this.W,a)};
	function Ze(a,b,c){if(null!=b.value)return c.K(a,b.value);var d=null;b.children.ia(function(b,f){".priority"===b?(K(null!==f.value,"Priority writes must always be leaf nodes"),d=f.value):c=Ze(a.u(b),f,c)});c.Y(a).e()||null===d||(c=c.K(a.u(".priority"),d));return c};function $e(){this.T=Te;this.na=[];this.Mc=-1}function af(a,b){for(var c=0;c<a.na.length;c++){var d=a.na[c];if(d.kd===b)return d}return null}g=$e.prototype;
	g.Rd=function(a){var b=Ua(this.na,function(b){return b.kd===a});K(0<=b,"removeWrite called with nonexistent writeId.");var c=this.na[b];this.na.splice(b,1);for(var d=c.visible,e=!1,f=this.na.length-1;d&&0<=f;){var h=this.na[f];h.visible&&(f>=b&&bf(h,c.path)?d=!1:c.path.contains(h.path)&&(e=!0));f--}if(d){if(e)this.T=cf(this.na,df,G),this.Mc=0<this.na.length?this.na[this.na.length-1].kd:-1;else if(c.Ga)this.T=this.T.Rd(c.path);else{var k=this;r(c.children,function(a,b){k.T=k.T.Rd(c.path.u(b))})}return!0}return!1};
	g.za=function(a,b,c,d){if(c||d){var e=Ye(this.T,a);return!d&&e.e()?b:d||null!=b||null!=We(e,G)?(e=cf(this.na,function(b){return(b.visible||d)&&(!c||!(0<=Na(c,b.kd)))&&(b.path.contains(a)||a.contains(b.path))},a),b=b||C,e.apply(b)):null}e=We(this.T,a);if(null!=e)return e;e=Ye(this.T,a);return e.e()?b:null!=b||null!=We(e,G)?(b=b||C,e.apply(b)):null};
	g.yc=function(a,b){var c=C,d=We(this.T,a);if(d)d.L()||d.R(N,function(a,b){c=c.O(a,b)});else if(b){var e=Ye(this.T,a);b.R(N,function(a,b){var d=Ye(e,new L(a)).apply(b);c=c.O(a,d)});Oa(Xe(e),function(a){c=c.O(a.name,a.S)})}else e=Ye(this.T,a),Oa(Xe(e),function(a){c=c.O(a.name,a.S)});return c};g.ld=function(a,b,c,d){K(c||d,"Either existingEventSnap or existingServerSnap must exist");a=a.u(b);if(null!=We(this.T,a))return null;a=Ye(this.T,a);return a.e()?d.Y(b):a.apply(d.Y(b))};
	g.xc=function(a,b,c){a=a.u(b);var d=We(this.T,a);return null!=d?d:sb(c,b)?Ye(this.T,a).apply(c.j().J(b)):null};g.tc=function(a){return We(this.T,a)};g.oe=function(a,b,c,d,e,f){var h;a=Ye(this.T,a);h=We(a,G);if(null==h)if(null!=b)h=a.apply(b);else return[];h=h.mb(f);if(h.e()||h.L())return[];b=[];a=td(f);e=e?h.$b(c,f):h.Yb(c,f);for(f=J(e);f&&b.length<d;)0!==a(f,c)&&b.push(f),f=J(e);return b};
	function bf(a,b){return a.Ga?a.path.contains(b):!!ua(a.children,function(c,d){return a.path.u(d).contains(b)})}function df(a){return a.visible}
	function cf(a,b,c){for(var d=Te,e=0;e<a.length;++e){var f=a[e];if(b(f)){var h=f.path;if(f.Ga)c.contains(h)?(h=O(c,h),d=Ue(d,h,f.Ga)):h.contains(c)&&(h=O(h,c),d=Ue(d,G,f.Ga.Y(h)));else if(f.children)if(c.contains(h))h=O(c,h),d=Ve(d,h,f.children);else{if(h.contains(c))if(h=O(h,c),h.e())d=Ve(d,G,f.children);else if(f=w(f.children,E(h)))f=f.Y(H(h)),d=Ue(d,G,f)}else throw Gc("WriteRecord should have .snap or .children");}}return d}function ef(a,b){this.Mb=a;this.W=b}g=ef.prototype;
	g.za=function(a,b,c){return this.W.za(this.Mb,a,b,c)};g.yc=function(a){return this.W.yc(this.Mb,a)};g.ld=function(a,b,c){return this.W.ld(this.Mb,a,b,c)};g.tc=function(a){return this.W.tc(this.Mb.u(a))};g.oe=function(a,b,c,d,e){return this.W.oe(this.Mb,a,b,c,d,e)};g.xc=function(a,b){return this.W.xc(this.Mb,a,b)};g.u=function(a){return new ef(this.Mb.u(a),this.W)};function ff(){this.ya={}}g=ff.prototype;g.e=function(){return wa(this.ya)};g.ab=function(a,b,c){var d=a.source.Ib;if(null!==d)return d=w(this.ya,d),K(null!=d,"SyncTree gave us an op for an invalid query."),d.ab(a,b,c);var e=[];r(this.ya,function(d){e=e.concat(d.ab(a,b,c))});return e};g.Pb=function(a,b,c,d,e){var f=a.va(),h=w(this.ya,f);if(!h){var h=c.za(e?d:null),k=!1;h?k=!0:(h=d instanceof T?c.yc(d):C,k=!1);h=new te(a,new Id(new tb(h,k,!1),new tb(d,e,!1)));this.ya[f]=h}h.Pb(b);return we(h,b)};
	g.kb=function(a,b,c){var d=a.va(),e=[],f=[],h=null!=gf(this);if("default"===d){var k=this;r(this.ya,function(a,d){f=f.concat(a.kb(b,c));a.e()&&(delete k.ya[d],de(a.V.o)||e.push(a.V))})}else{var l=w(this.ya,d);l&&(f=f.concat(l.kb(b,c)),l.e()&&(delete this.ya[d],de(l.V.o)||e.push(l.V)))}h&&null==gf(this)&&e.push(new U(a.k,a.path));return{Ig:e,kg:f}};function hf(a){return Pa(ra(a.ya),function(a){return!de(a.V.o)})}g.gb=function(a){var b=null;r(this.ya,function(c){b=b||c.gb(a)});return b};
	function jf(a,b){if(de(b.o))return gf(a);var c=b.va();return w(a.ya,c)}function gf(a){return va(a.ya,function(a){return de(a.V.o)})||null};function kf(a){this.ta=Nd;this.jb=new $e;this.af={};this.lc={};this.Nc=a}function lf(a,b,c,d,e){var f=a.jb,h=e;K(d>f.Mc,"Stacking an older write on top of newer ones");n(h)||(h=!0);f.na.push({path:b,Ga:c,kd:d,visible:h});h&&(f.T=Ue(f.T,b,c));f.Mc=d;return e?mf(a,new Wb(Pe,b,c)):[]}function nf(a,b,c,d){var e=a.jb;K(d>e.Mc,"Stacking an older merge on top of newer ones");e.na.push({path:b,children:c,kd:d,visible:!0});e.T=Ve(e.T,b,c);e.Mc=d;c=De(c);return mf(a,new xe(Pe,b,c))}
	function of(a,b,c){c=c||!1;var d=af(a.jb,b);if(a.jb.Rd(b)){var e=Nd;null!=d.Ga?e=e.set(G,!0):ib(d.children,function(a,b){e=e.set(new L(a),b)});return mf(a,new Oe(d.path,e,c))}return[]}function pf(a,b,c){c=De(c);return mf(a,new xe(Re,b,c))}function qf(a,b,c,d){d=rf(a,d);if(null!=d){var e=sf(d);d=e.path;e=e.Ib;b=O(d,b);c=new Wb(new Qe(!1,!0,e,!0),b,c);return tf(a,d,c)}return[]}
	function uf(a,b,c,d){if(d=rf(a,d)){var e=sf(d);d=e.path;e=e.Ib;b=O(d,b);c=De(c);c=new xe(new Qe(!1,!0,e,!0),b,c);return tf(a,d,c)}return[]}
	kf.prototype.Pb=function(a,b){var c=a.path,d=null,e=!1;Ke(this.ta,c,function(a,b){var f=O(a,c);d=b.gb(f);e=e||null!=gf(b);return!d});var f=this.ta.get(c);f?(e=e||null!=gf(f),d=d||f.gb(G)):(f=new ff,this.ta=this.ta.set(c,f));var h;null!=d?h=!0:(h=!1,d=C,Ne(this.ta.subtree(c),function(a,b){var c=b.gb(G);c&&(d=d.O(a,c))}));var k=null!=jf(f,a);if(!k&&!de(a.o)){var l=vf(a);K(!(l in this.lc),"View does not exist, but we have a tag");var m=wf++;this.lc[l]=m;this.af["_"+m]=l}h=f.Pb(a,b,new ef(c,this.jb),
	d,h);k||e||(f=jf(f,a),h=h.concat(xf(this,a,f)));return h};
	kf.prototype.kb=function(a,b,c){var d=a.path,e=this.ta.get(d),f=[];if(e&&("default"===a.va()||null!=jf(e,a))){f=e.kb(a,b,c);e.e()&&(this.ta=this.ta.remove(d));e=f.Ig;f=f.kg;b=-1!==Ua(e,function(a){return de(a.o)});var h=Ie(this.ta,d,function(a,b){return null!=gf(b)});if(b&&!h&&(d=this.ta.subtree(d),!d.e()))for(var d=yf(d),k=0;k<d.length;++k){var l=d[k],m=l.V,l=zf(this,l);this.Nc.Ye(m,Af(this,m),l.xd,l.G)}if(!h&&0<e.length&&!c)if(b)this.Nc.be(a,null);else{var t=this;Oa(e,function(a){a.va();var b=t.lc[vf(a)];
	t.Nc.be(a,b)})}Bf(this,e)}return f};kf.prototype.za=function(a,b){var c=this.jb,d=Ie(this.ta,a,function(b,c){var d=O(b,a);if(d=c.gb(d))return d});return c.za(a,d,b,!0)};function yf(a){return Ge(a,function(a,c,d){if(c&&null!=gf(c))return[gf(c)];var e=[];c&&(e=hf(c));r(d,function(a){e=e.concat(a)});return e})}function Bf(a,b){for(var c=0;c<b.length;++c){var d=b[c];if(!de(d.o)){var d=vf(d),e=a.lc[d];delete a.lc[d];delete a.af["_"+e]}}}
	function xf(a,b,c){var d=b.path,e=Af(a,b);c=zf(a,c);b=a.Nc.Ye(b,e,c.xd,c.G);d=a.ta.subtree(d);if(e)K(null==gf(d.value),"If we're adding a query, it shouldn't be shadowed");else for(e=Ge(d,function(a,b,c){if(!a.e()&&b&&null!=gf(b))return[ue(gf(b))];var d=[];b&&(d=d.concat(Qa(hf(b),function(a){return a.V})));r(c,function(a){d=d.concat(a)});return d}),d=0;d<e.length;++d)c=e[d],a.Nc.be(c,Af(a,c));return b}
	function zf(a,b){var c=b.V,d=Af(a,c);return{xd:function(){return(b.C()||C).hash()},G:function(b){if("ok"===b){if(d){var f=c.path;if(b=rf(a,d)){var h=sf(b);b=h.path;h=h.Ib;f=O(b,f);f=new Yb(new Qe(!1,!0,h,!0),f);b=tf(a,b,f)}else b=[]}else b=mf(a,new Yb(Re,c.path));return b}f="Unknown Error";"too_big"===b?f="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"==b?f="Client doesn't have permission to access the desired data.":"unavailable"==b&&
	(f="The service is unavailable");f=Error(b+": "+f);f.code=b.toUpperCase();return a.kb(c,null,f)}}}function vf(a){return a.path.toString()+"$"+a.va()}function sf(a){var b=a.indexOf("$");K(-1!==b&&b<a.length-1,"Bad queryKey.");return{Ib:a.substr(b+1),path:new L(a.substr(0,b))}}function rf(a,b){var c=a.af,d="_"+b;return d in c?c[d]:void 0}function Af(a,b){var c=vf(b);return w(a.lc,c)}var wf=1;
	function tf(a,b,c){var d=a.ta.get(b);K(d,"Missing sync point for query tag that we're tracking");return d.ab(c,new ef(b,a.jb),null)}function mf(a,b){return Cf(a,b,a.ta,null,new ef(G,a.jb))}function Cf(a,b,c,d,e){if(b.path.e())return Df(a,b,c,d,e);var f=c.get(G);null==d&&null!=f&&(d=f.gb(G));var h=[],k=E(b.path),l=b.Xc(k);if((c=c.children.get(k))&&l)var m=d?d.J(k):null,k=e.u(k),h=h.concat(Cf(a,l,c,m,k));f&&(h=h.concat(f.ab(b,e,d)));return h}
	function Df(a,b,c,d,e){var f=c.get(G);null==d&&null!=f&&(d=f.gb(G));var h=[];c.children.ia(function(c,f){var m=d?d.J(c):null,t=e.u(c),y=b.Xc(c);y&&(h=h.concat(Df(a,y,f,m,t)))});f&&(h=h.concat(f.ab(b,e,d)));return h};function Ef(){this.children={};this.nd=0;this.value=null}function Ff(a,b,c){this.Gd=a?a:"";this.Zc=b?b:null;this.w=c?c:new Ef}function Gf(a,b){for(var c=b instanceof L?b:new L(b),d=a,e;null!==(e=E(c));)d=new Ff(e,d,w(d.w.children,e)||new Ef),c=H(c);return d}g=Ff.prototype;g.Ca=function(){return this.w.value};function Hf(a,b){K("undefined"!==typeof b,"Cannot set value to undefined");a.w.value=b;If(a)}g.clear=function(){this.w.value=null;this.w.children={};this.w.nd=0;If(this)};
	g.wd=function(){return 0<this.w.nd};g.e=function(){return null===this.Ca()&&!this.wd()};g.R=function(a){var b=this;r(this.w.children,function(c,d){a(new Ff(d,b,c))})};function Jf(a,b,c,d){c&&!d&&b(a);a.R(function(a){Jf(a,b,!0,d)});c&&d&&b(a)}function Kf(a,b){for(var c=a.parent();null!==c&&!b(c);)c=c.parent()}g.path=function(){return new L(null===this.Zc?this.Gd:this.Zc.path()+"/"+this.Gd)};g.name=function(){return this.Gd};g.parent=function(){return this.Zc};
	function If(a){if(null!==a.Zc){var b=a.Zc,c=a.Gd,d=a.e(),e=v(b.w.children,c);d&&e?(delete b.w.children[c],b.w.nd--,If(b)):d||e||(b.w.children[c]=a.w,b.w.nd++,If(b))}};function Lf(a){K(ea(a)&&0<a.length,"Requires a non-empty array");this.Vf=a;this.Oc={}}Lf.prototype.ge=function(a,b){for(var c=this.Oc[a]||[],d=0;d<c.length;d++)c[d].zc.apply(c[d].Ma,Array.prototype.slice.call(arguments,1))};Lf.prototype.Fb=function(a,b,c){Mf(this,a);this.Oc[a]=this.Oc[a]||[];this.Oc[a].push({zc:b,Ma:c});(a=this.Be(a))&&b.apply(c,a)};Lf.prototype.hc=function(a,b,c){Mf(this,a);a=this.Oc[a]||[];for(var d=0;d<a.length;d++)if(a[d].zc===b&&(!c||c===a[d].Ma)){a.splice(d,1);break}};
	function Mf(a,b){K(Ta(a.Vf,function(a){return a===b}),"Unknown event: "+b)};var Nf=function(){var a=0,b=[];return function(c){var d=c===a;a=c;for(var e=Array(8),f=7;0<=f;f--)e[f]="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(c%64),c=Math.floor(c/64);K(0===c,"Cannot push at time == 0");c=e.join("");if(d){for(f=11;0<=f&&63===b[f];f--)b[f]=0;b[f]++}else for(f=0;12>f;f++)b[f]=Math.floor(64*Math.random());for(f=0;12>f;f++)c+="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(b[f]);K(20===c.length,"nextPushId: Length should be 20.");
	return c}}();function Of(){Lf.call(this,["online"]);this.jc=!0;if("undefined"!==typeof window&&"undefined"!==typeof window.addEventListener){var a=this;window.addEventListener("online",function(){a.jc||(a.jc=!0,a.ge("online",!0))},!1);window.addEventListener("offline",function(){a.jc&&(a.jc=!1,a.ge("online",!1))},!1)}}ma(Of,Lf);Of.prototype.Be=function(a){K("online"===a,"Unknown event type: "+a);return[this.jc]};ca(Of);function Pf(){Lf.call(this,["visible"]);var a,b;"undefined"!==typeof document&&"undefined"!==typeof document.addEventListener&&("undefined"!==typeof document.hidden?(b="visibilitychange",a="hidden"):"undefined"!==typeof document.mozHidden?(b="mozvisibilitychange",a="mozHidden"):"undefined"!==typeof document.msHidden?(b="msvisibilitychange",a="msHidden"):"undefined"!==typeof document.webkitHidden&&(b="webkitvisibilitychange",a="webkitHidden"));this.Ob=!0;if(b){var c=this;document.addEventListener(b,
	function(){var b=!document[a];b!==c.Ob&&(c.Ob=b,c.ge("visible",b))},!1)}}ma(Pf,Lf);Pf.prototype.Be=function(a){K("visible"===a,"Unknown event type: "+a);return[this.Ob]};ca(Pf);var Qf=/[\[\].#$\/\u0000-\u001F\u007F]/,Rf=/[\[\].#$\u0000-\u001F\u007F]/,Sf=/^[a-zA-Z][a-zA-Z._\-+]+$/;function Tf(a){return p(a)&&0!==a.length&&!Qf.test(a)}function Uf(a){return null===a||p(a)||ga(a)&&!Rc(a)||ia(a)&&v(a,".sv")}function Vf(a,b,c,d){d&&!n(b)||Wf(z(a,1,d),b,c)}
	function Wf(a,b,c){c instanceof L&&(c=new vc(c,a));if(!n(b))throw Error(a+"contains undefined "+yc(c));if(ha(b))throw Error(a+"contains a function "+yc(c)+" with contents: "+b.toString());if(Rc(b))throw Error(a+"contains "+b.toString()+" "+yc(c));if(p(b)&&b.length>10485760/3&&10485760<wc(b))throw Error(a+"contains a string greater than 10485760 utf8 bytes "+yc(c)+" ('"+b.substring(0,50)+"...')");if(ia(b)){var d=!1,e=!1;ib(b,function(b,h){if(".value"===b)d=!0;else if(".priority"!==b&&".sv"!==b&&(e=
	!0,!Tf(b)))throw Error(a+" contains an invalid key ("+b+") "+yc(c)+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');c.push(b);Wf(a,h,c);c.pop()});if(d&&e)throw Error(a+' contains ".value" child '+yc(c)+" in addition to actual children.");}}
	function Xf(a,b,c){if(!ia(b)||ea(b))throw Error(z(a,1,!1)+" must be an Object containing the children to replace.");if(v(b,".value"))throw Error(z(a,1,!1)+' must not contain ".value".  To overwrite with a leaf value, just use .set() instead.');Vf(a,b,c,!1)}
	function Yf(a,b,c){if(Rc(c))throw Error(z(a,b,!1)+"is "+c.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!Uf(c))throw Error(z(a,b,!1)+"must be a valid Firebase priority (a string, finite number, server value, or null).");}
	function Zf(a,b,c){if(!c||n(b))switch(b){case "value":case "child_added":case "child_removed":case "child_changed":case "child_moved":break;default:throw Error(z(a,1,c)+'must be a valid event type: "value", "child_added", "child_removed", "child_changed", or "child_moved".');}}function $f(a,b,c,d){if((!d||n(c))&&!Tf(c))throw Error(z(a,b,d)+'was an invalid key: "'+c+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").');}
	function ag(a,b){if(!p(b)||0===b.length||Rf.test(b))throw Error(z(a,1,!1)+'was an invalid path: "'+b+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"');}function bg(a,b){if(".info"===E(b))throw Error(a+" failed: Can't modify data under /.info/");}function cg(a,b){if(!p(b))throw Error(z(a,1,!1)+"must be a valid credential (a string).");}function dg(a,b,c){if(!p(c))throw Error(z(a,b,!1)+"must be a valid string.");}
	function eg(a,b){dg(a,1,b);if(!Sf.test(b))throw Error(z(a,1,!1)+"'"+b+"' is not a valid authentication provider.");}function fg(a,b,c,d){if(!d||n(c))if(!ia(c)||null===c)throw Error(z(a,b,d)+"must be a valid object.");}function gg(a,b,c){if(!ia(b)||!v(b,c))throw Error(z(a,1,!1)+'must contain the key "'+c+'"');if(!p(w(b,c)))throw Error(z(a,1,!1)+'must contain the key "'+c+'" with type "string"');};function hg(){this.set={}}g=hg.prototype;g.add=function(a,b){this.set[a]=null!==b?b:!0};g.contains=function(a){return v(this.set,a)};g.get=function(a){return this.contains(a)?this.set[a]:void 0};g.remove=function(a){delete this.set[a]};g.clear=function(){this.set={}};g.e=function(){return wa(this.set)};g.count=function(){return pa(this.set)};function ig(a,b){r(a.set,function(a,d){b(d,a)})}g.keys=function(){var a=[];r(this.set,function(b,c){a.push(c)});return a};function pc(){this.m=this.A=null}pc.prototype.find=function(a){if(null!=this.A)return this.A.Y(a);if(a.e()||null==this.m)return null;var b=E(a);a=H(a);return this.m.contains(b)?this.m.get(b).find(a):null};pc.prototype.nc=function(a,b){if(a.e())this.A=b,this.m=null;else if(null!==this.A)this.A=this.A.K(a,b);else{null==this.m&&(this.m=new hg);var c=E(a);this.m.contains(c)||this.m.add(c,new pc);c=this.m.get(c);a=H(a);c.nc(a,b)}};
	function jg(a,b){if(b.e())return a.A=null,a.m=null,!0;if(null!==a.A){if(a.A.L())return!1;var c=a.A;a.A=null;c.R(N,function(b,c){a.nc(new L(b),c)});return jg(a,b)}return null!==a.m?(c=E(b),b=H(b),a.m.contains(c)&&jg(a.m.get(c),b)&&a.m.remove(c),a.m.e()?(a.m=null,!0):!1):!0}function qc(a,b,c){null!==a.A?c(b,a.A):a.R(function(a,e){var f=new L(b.toString()+"/"+a);qc(e,f,c)})}pc.prototype.R=function(a){null!==this.m&&ig(this.m,function(b,c){a(b,c)})};var kg="auth.firebase.com";function lg(a,b,c){this.od=a||{};this.fe=b||{};this.$a=c||{};this.od.remember||(this.od.remember="default")}var mg=["remember","redirectTo"];function ng(a){var b={},c={};ib(a||{},function(a,e){0<=Na(mg,a)?b[a]=e:c[a]=e});return new lg(b,{},c)};function og(a,b){this.Re=["session",a.Od,a.Db].join(":");this.ce=b}og.prototype.set=function(a,b){if(!b)if(this.ce.length)b=this.ce[0];else throw Error("fb.login.SessionManager : No storage options available!");b.set(this.Re,a)};og.prototype.get=function(){var a=Qa(this.ce,q(this.og,this)),a=Pa(a,function(a){return null!==a});Xa(a,function(a,c){return ad(c.token)-ad(a.token)});return 0<a.length?a.shift():null};og.prototype.og=function(a){try{var b=a.get(this.Re);if(b&&b.token)return b}catch(c){}return null};
	og.prototype.clear=function(){var a=this;Oa(this.ce,function(b){b.remove(a.Re)})};function pg(){return"undefined"!==typeof navigator&&"string"===typeof navigator.userAgent?navigator.userAgent:""}function qg(){return"undefined"!==typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(pg())}function rg(){return"undefined"!==typeof location&&/^file:\//.test(location.href)}
	function sg(a){var b=pg();if(""===b)return!1;if("Microsoft Internet Explorer"===navigator.appName){if((b=b.match(/MSIE ([0-9]{1,}[\.0-9]{0,})/))&&1<b.length)return parseFloat(b[1])>=a}else if(-1<b.indexOf("Trident")&&(b=b.match(/rv:([0-9]{2,2}[\.0-9]{0,})/))&&1<b.length)return parseFloat(b[1])>=a;return!1};function tg(){var a=window.opener.frames,b;for(b=a.length-1;0<=b;b--)try{if(a[b].location.protocol===window.location.protocol&&a[b].location.host===window.location.host&&"__winchan_relay_frame"===a[b].name)return a[b]}catch(c){}return null}function ug(a,b,c){a.attachEvent?a.attachEvent("on"+b,c):a.addEventListener&&a.addEventListener(b,c,!1)}function vg(a,b,c){a.detachEvent?a.detachEvent("on"+b,c):a.removeEventListener&&a.removeEventListener(b,c,!1)}
	function wg(a){/^https?:\/\//.test(a)||(a=window.location.href);var b=/^(https?:\/\/[\-_a-zA-Z\.0-9:]+)/.exec(a);return b?b[1]:a}function xg(a){var b="";try{a=a.replace("#","");var c=lb(a);c&&v(c,"__firebase_request_key")&&(b=w(c,"__firebase_request_key"))}catch(d){}return b}function yg(){var a=Qc(kg);return a.scheme+"://"+a.host+"/v2"}function zg(a){return yg()+"/"+a+"/auth/channel"};function Ag(a){var b=this;this.Ac=a;this.de="*";sg(8)?this.Rc=this.zd=tg():(this.Rc=window.opener,this.zd=window);if(!b.Rc)throw"Unable to find relay frame";ug(this.zd,"message",q(this.ic,this));ug(this.zd,"message",q(this.Bf,this));try{Bg(this,{a:"ready"})}catch(c){ug(this.Rc,"load",function(){Bg(b,{a:"ready"})})}ug(window,"unload",q(this.zg,this))}function Bg(a,b){b=B(b);sg(8)?a.Rc.doPost(b,a.de):a.Rc.postMessage(b,a.de)}
	Ag.prototype.ic=function(a){var b=this,c;try{c=nb(a.data)}catch(d){}c&&"request"===c.a&&(vg(window,"message",this.ic),this.de=a.origin,this.Ac&&setTimeout(function(){b.Ac(b.de,c.d,function(a,c){b.bg=!c;b.Ac=void 0;Bg(b,{a:"response",d:a,forceKeepWindowOpen:c})})},0))};Ag.prototype.zg=function(){try{vg(this.zd,"message",this.Bf)}catch(a){}this.Ac&&(Bg(this,{a:"error",d:"unknown closed window"}),this.Ac=void 0);try{window.close()}catch(b){}};Ag.prototype.Bf=function(a){if(this.bg&&"die"===a.data)try{window.close()}catch(b){}};function Cg(a){this.pc=Ga()+Ga()+Ga();this.Ef=a}Cg.prototype.open=function(a,b){P.set("redirect_request_id",this.pc);P.set("redirect_request_id",this.pc);b.requestId=this.pc;b.redirectTo=b.redirectTo||window.location.href;a+=(/\?/.test(a)?"":"?")+kb(b);window.location=a};Cg.isAvailable=function(){return!rg()&&!qg()};Cg.prototype.Cc=function(){return"redirect"};var Dg={NETWORK_ERROR:"Unable to contact the Firebase server.",SERVER_ERROR:"An unknown server error occurred.",TRANSPORT_UNAVAILABLE:"There are no login transports available for the requested method.",REQUEST_INTERRUPTED:"The browser redirected the page before the login request could complete.",USER_CANCELLED:"The user cancelled authentication."};function Eg(a){var b=Error(w(Dg,a),a);b.code=a;return b};function Fg(a){var b;(b=!a.window_features)||(b=pg(),b=-1!==b.indexOf("Fennec/")||-1!==b.indexOf("Firefox/")&&-1!==b.indexOf("Android"));b&&(a.window_features=void 0);a.window_name||(a.window_name="_blank");this.options=a}
	Fg.prototype.open=function(a,b,c){function d(a){h&&(document.body.removeChild(h),h=void 0);t&&(t=clearInterval(t));vg(window,"message",e);vg(window,"unload",d);if(m&&!a)try{m.close()}catch(b){k.postMessage("die",l)}m=k=void 0}function e(a){if(a.origin===l)try{var b=nb(a.data);"ready"===b.a?k.postMessage(y,l):"error"===b.a?(d(!1),c&&(c(b.d),c=null)):"response"===b.a&&(d(b.forceKeepWindowOpen),c&&(c(null,b.d),c=null))}catch(e){}}var f=sg(8),h,k;if(!this.options.relay_url)return c(Error("invalid arguments: origin of url and relay_url must match"));
	var l=wg(a);if(l!==wg(this.options.relay_url))c&&setTimeout(function(){c(Error("invalid arguments: origin of url and relay_url must match"))},0);else{f&&(h=document.createElement("iframe"),h.setAttribute("src",this.options.relay_url),h.style.display="none",h.setAttribute("name","__winchan_relay_frame"),document.body.appendChild(h),k=h.contentWindow);a+=(/\?/.test(a)?"":"?")+kb(b);var m=window.open(a,this.options.window_name,this.options.window_features);k||(k=m);var t=setInterval(function(){m&&m.closed&&
	(d(!1),c&&(c(Eg("USER_CANCELLED")),c=null))},500),y=B({a:"request",d:b});ug(window,"unload",d);ug(window,"message",e)}};
	Fg.isAvailable=function(){var a;if(a="postMessage"in window&&!rg())(a=qg()||"undefined"!==typeof navigator&&(!!pg().match(/Windows Phone/)||!!window.Windows&&/^ms-appx:/.test(location.href)))||(a=pg(),a="undefined"!==typeof navigator&&"undefined"!==typeof window&&!!(a.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i)||a.match(/CriOS/)||a.match(/Twitter for iPhone/)||a.match(/FBAN\/FBIOS/)||window.navigator.standalone)),a=!a;return a&&!pg().match(/PhantomJS/)};Fg.prototype.Cc=function(){return"popup"};function Gg(a){a.method||(a.method="GET");a.headers||(a.headers={});a.headers.content_type||(a.headers.content_type="application/json");a.headers.content_type=a.headers.content_type.toLowerCase();this.options=a}
	Gg.prototype.open=function(a,b,c){function d(){c&&(c(Eg("REQUEST_INTERRUPTED")),c=null)}var e=new XMLHttpRequest,f=this.options.method.toUpperCase(),h;ug(window,"beforeunload",d);e.onreadystatechange=function(){if(c&&4===e.readyState){var a;if(200<=e.status&&300>e.status){try{a=nb(e.responseText)}catch(b){}c(null,a)}else 500<=e.status&&600>e.status?c(Eg("SERVER_ERROR")):c(Eg("NETWORK_ERROR"));c=null;vg(window,"beforeunload",d)}};if("GET"===f)a+=(/\?/.test(a)?"":"?")+kb(b),h=null;else{var k=this.options.headers.content_type;
	"application/json"===k&&(h=B(b));"application/x-www-form-urlencoded"===k&&(h=kb(b))}e.open(f,a,!0);a={"X-Requested-With":"XMLHttpRequest",Accept:"application/json;text/plain"};za(a,this.options.headers);for(var l in a)e.setRequestHeader(l,a[l]);e.send(h)};Gg.isAvailable=function(){var a;if(a=!!window.XMLHttpRequest)a=pg(),a=!(a.match(/MSIE/)||a.match(/Trident/))||sg(10);return a};Gg.prototype.Cc=function(){return"json"};function Hg(a){this.pc=Ga()+Ga()+Ga();this.Ef=a}
	Hg.prototype.open=function(a,b,c){function d(){c&&(c(Eg("USER_CANCELLED")),c=null)}var e=this,f=Qc(kg),h;b.requestId=this.pc;b.redirectTo=f.scheme+"://"+f.host+"/blank/page.html";a+=/\?/.test(a)?"":"?";a+=kb(b);(h=window.open(a,"_blank","location=no"))&&ha(h.addEventListener)?(h.addEventListener("loadstart",function(a){var b;if(b=a&&a.url)a:{try{var m=document.createElement("a");m.href=a.url;b=m.host===f.host&&"/blank/page.html"===m.pathname;break a}catch(t){}b=!1}b&&(a=xg(a.url),h.removeEventListener("exit",
	d),h.close(),a=new lg(null,null,{requestId:e.pc,requestKey:a}),e.Ef.requestWithCredential("/auth/session",a,c),c=null)}),h.addEventListener("exit",d)):c(Eg("TRANSPORT_UNAVAILABLE"))};Hg.isAvailable=function(){return qg()};Hg.prototype.Cc=function(){return"redirect"};function Ig(a){a.callback_parameter||(a.callback_parameter="callback");this.options=a;window.__firebase_auth_jsonp=window.__firebase_auth_jsonp||{}}
	Ig.prototype.open=function(a,b,c){function d(){c&&(c(Eg("REQUEST_INTERRUPTED")),c=null)}function e(){setTimeout(function(){window.__firebase_auth_jsonp[f]=void 0;wa(window.__firebase_auth_jsonp)&&(window.__firebase_auth_jsonp=void 0);try{var a=document.getElementById(f);a&&a.parentNode.removeChild(a)}catch(b){}},1);vg(window,"beforeunload",d)}var f="fn"+(new Date).getTime()+Math.floor(99999*Math.random());b[this.options.callback_parameter]="__firebase_auth_jsonp."+f;a+=(/\?/.test(a)?"":"?")+kb(b);
	ug(window,"beforeunload",d);window.__firebase_auth_jsonp[f]=function(a){c&&(c(null,a),c=null);e()};Jg(f,a,c)};
	function Jg(a,b,c){setTimeout(function(){try{var d=document.createElement("script");d.type="text/javascript";d.id=a;d.async=!0;d.src=b;d.onerror=function(){var b=document.getElementById(a);null!==b&&b.parentNode.removeChild(b);c&&c(Eg("NETWORK_ERROR"))};var e=document.getElementsByTagName("head");(e&&0!=e.length?e[0]:document.documentElement).appendChild(d)}catch(f){c&&c(Eg("NETWORK_ERROR"))}},0)}Ig.isAvailable=function(){return"undefined"!==typeof document&&null!=document.createElement};
	Ig.prototype.Cc=function(){return"json"};function Kg(a,b,c,d){Lf.call(this,["auth_status"]);this.F=a;this.ef=b;this.Tg=c;this.Me=d;this.sc=new og(a,[Cc,P]);this.nb=null;this.Te=!1;Lg(this)}ma(Kg,Lf);g=Kg.prototype;g.ye=function(){return this.nb||null};function Lg(a){P.get("redirect_request_id")&&Mg(a);var b=a.sc.get();b&&b.token?(Ng(a,b),a.ef(b.token,function(c,d){Og(a,c,d,!1,b.token,b)},function(b,d){Pg(a,"resumeSession()",b,d)})):Ng(a,null)}
	function Qg(a,b,c,d,e,f){"firebaseio-demo.com"===a.F.domain&&Q("Firebase authentication is not supported on demo Firebases (*.firebaseio-demo.com). To secure your Firebase, create a production Firebase at https://www.firebase.com.");a.ef(b,function(f,k){Og(a,f,k,!0,b,c,d||{},e)},function(b,c){Pg(a,"auth()",b,c,f)})}function Rg(a,b){a.sc.clear();Ng(a,null);a.Tg(function(a,d){if("ok"===a)R(b,null);else{var e=(a||"error").toUpperCase(),f=e;d&&(f+=": "+d);f=Error(f);f.code=e;R(b,f)}})}
	function Og(a,b,c,d,e,f,h,k){"ok"===b?(d&&(b=c.auth,f.auth=b,f.expires=c.expires,f.token=bd(e)?e:"",c=null,b&&v(b,"uid")?c=w(b,"uid"):v(f,"uid")&&(c=w(f,"uid")),f.uid=c,c="custom",b&&v(b,"provider")?c=w(b,"provider"):v(f,"provider")&&(c=w(f,"provider")),f.provider=c,a.sc.clear(),bd(e)&&(h=h||{},c=Cc,"sessionOnly"===h.remember&&(c=P),"none"!==h.remember&&a.sc.set(f,c)),Ng(a,f)),R(k,null,f)):(a.sc.clear(),Ng(a,null),f=a=(b||"error").toUpperCase(),c&&(f+=": "+c),f=Error(f),f.code=a,R(k,f))}
	function Pg(a,b,c,d,e){Q(b+" was canceled: "+d);a.sc.clear();Ng(a,null);a=Error(d);a.code=c.toUpperCase();R(e,a)}function Sg(a,b,c,d,e){Tg(a);c=new lg(d||{},{},c||{});Ug(a,[Gg,Ig],"/auth/"+b,c,e)}
	function Vg(a,b,c,d){Tg(a);var e=[Fg,Hg];c=ng(c);"anonymous"===b||"password"===b?setTimeout(function(){R(d,Eg("TRANSPORT_UNAVAILABLE"))},0):(c.fe.window_features="menubar=yes,modal=yes,alwaysRaised=yeslocation=yes,resizable=yes,scrollbars=yes,status=yes,height=625,width=625,top="+("object"===typeof screen?.5*(screen.height-625):0)+",left="+("object"===typeof screen?.5*(screen.width-625):0),c.fe.relay_url=zg(a.F.Db),c.fe.requestWithCredential=q(a.qc,a),Ug(a,e,"/auth/"+b,c,d))}
	function Mg(a){var b=P.get("redirect_request_id");if(b){var c=P.get("redirect_client_options");P.remove("redirect_request_id");P.remove("redirect_client_options");var d=[Gg,Ig],b={requestId:b,requestKey:xg(document.location.hash)},c=new lg(c,{},b);a.Te=!0;try{document.location.hash=document.location.hash.replace(/&__firebase_request_key=([a-zA-z0-9]*)/,"")}catch(e){}Ug(a,d,"/auth/session",c,function(){this.Te=!1}.bind(a))}}
	g.te=function(a,b){Tg(this);var c=ng(a);c.$a._method="POST";this.qc("/users",c,function(a,c){a?R(b,a):R(b,a,c)})};g.Ue=function(a,b){var c=this;Tg(this);var d="/users/"+encodeURIComponent(a.email),e=ng(a);e.$a._method="DELETE";this.qc(d,e,function(a,d){!a&&d&&d.uid&&c.nb&&c.nb.uid&&c.nb.uid===d.uid&&Rg(c);R(b,a)})};g.qe=function(a,b){Tg(this);var c="/users/"+encodeURIComponent(a.email)+"/password",d=ng(a);d.$a._method="PUT";d.$a.password=a.newPassword;this.qc(c,d,function(a){R(b,a)})};
	g.pe=function(a,b){Tg(this);var c="/users/"+encodeURIComponent(a.oldEmail)+"/email",d=ng(a);d.$a._method="PUT";d.$a.email=a.newEmail;d.$a.password=a.password;this.qc(c,d,function(a){R(b,a)})};g.We=function(a,b){Tg(this);var c="/users/"+encodeURIComponent(a.email)+"/password",d=ng(a);d.$a._method="POST";this.qc(c,d,function(a){R(b,a)})};g.qc=function(a,b,c){Wg(this,[Gg,Ig],a,b,c)};
	function Ug(a,b,c,d,e){Wg(a,b,c,d,function(b,c){!b&&c&&c.token&&c.uid?Qg(a,c.token,c,d.od,function(a,b){a?R(e,a):R(e,null,b)}):R(e,b||Eg("UNKNOWN_ERROR"))})}
	function Wg(a,b,c,d,e){b=Pa(b,function(a){return"function"===typeof a.isAvailable&&a.isAvailable()});0===b.length?setTimeout(function(){R(e,Eg("TRANSPORT_UNAVAILABLE"))},0):(b=new (b.shift())(d.fe),d=jb(d.$a),d.v="js-"+hb,d.transport=b.Cc(),d.suppress_status_codes=!0,a=yg()+"/"+a.F.Db+c,b.open(a,d,function(a,b){if(a)R(e,a);else if(b&&b.error){var c=Error(b.error.message);c.code=b.error.code;c.details=b.error.details;R(e,c)}else R(e,null,b)}))}
	function Ng(a,b){var c=null!==a.nb||null!==b;a.nb=b;c&&a.ge("auth_status",b);a.Me(null!==b)}g.Be=function(a){K("auth_status"===a,'initial event must be of type "auth_status"');return this.Te?null:[this.nb]};function Tg(a){var b=a.F;if("firebaseio.com"!==b.domain&&"firebaseio-demo.com"!==b.domain&&"auth.firebase.com"===kg)throw Error("This custom Firebase server ('"+a.F.domain+"') does not support delegated login.");};function Xg(a){this.ic=a;this.Nd=[];this.Sb=0;this.re=-1;this.Gb=null}function Yg(a,b,c){a.re=b;a.Gb=c;a.re<a.Sb&&(a.Gb(),a.Gb=null)}function Zg(a,b,c){for(a.Nd[b]=c;a.Nd[a.Sb];){var d=a.Nd[a.Sb];delete a.Nd[a.Sb];for(var e=0;e<d.length;++e)if(d[e]){var f=a;Db(function(){f.ic(d[e])})}if(a.Sb===a.re){a.Gb&&(clearTimeout(a.Gb),a.Gb(),a.Gb=null);break}a.Sb++}};function $g(a,b,c){this.se=a;this.f=Nc(a);this.ob=this.pb=0;this.Va=Qb(b);this.Zd=c;this.Hc=!1;this.jd=function(a){b.host!==b.Pa&&(a.ns=b.Db);var c=[],f;for(f in a)a.hasOwnProperty(f)&&c.push(f+"="+a[f]);return(b.lb?"https://":"http://")+b.Pa+"/.lp?"+c.join("&")}}var ah,bh;
	$g.prototype.open=function(a,b){this.hf=0;this.la=b;this.Af=new Xg(a);this.Ab=!1;var c=this;this.rb=setTimeout(function(){c.f("Timed out trying to connect.");c.hb();c.rb=null},Math.floor(3E4));Sc(function(){if(!c.Ab){c.Ta=new ch(function(a,b,d,k,l){dh(c,arguments);if(c.Ta)if(c.rb&&(clearTimeout(c.rb),c.rb=null),c.Hc=!0,"start"==a)c.id=b,c.Gf=d;else if("close"===a)b?(c.Ta.Xd=!1,Yg(c.Af,b,function(){c.hb()})):c.hb();else throw Error("Unrecognized command received: "+a);},function(a,b){dh(c,arguments);
	Zg(c.Af,a,b)},function(){c.hb()},c.jd);var a={start:"t"};a.ser=Math.floor(1E8*Math.random());c.Ta.ie&&(a.cb=c.Ta.ie);a.v="5";c.Zd&&(a.s=c.Zd);"undefined"!==typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(a.r="f");a=c.jd(a);c.f("Connecting via long-poll to "+a);eh(c.Ta,a,function(){})}})};
	$g.prototype.start=function(){var a=this.Ta,b=this.Gf;a.sg=this.id;a.tg=b;for(a.me=!0;fh(a););a=this.id;b=this.Gf;this.gc=document.createElement("iframe");var c={dframe:"t"};c.id=a;c.pw=b;this.gc.src=this.jd(c);this.gc.style.display="none";document.body.appendChild(this.gc)};
	$g.isAvailable=function(){return ah||!bh&&"undefined"!==typeof document&&null!=document.createElement&&!("object"===typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href))&&!("object"===typeof Windows&&"object"===typeof Windows.Vg)&&!0};g=$g.prototype;g.Ed=function(){};g.dd=function(){this.Ab=!0;this.Ta&&(this.Ta.close(),this.Ta=null);this.gc&&(document.body.removeChild(this.gc),this.gc=null);this.rb&&(clearTimeout(this.rb),this.rb=null)};
	g.hb=function(){this.Ab||(this.f("Longpoll is closing itself"),this.dd(),this.la&&(this.la(this.Hc),this.la=null))};g.close=function(){this.Ab||(this.f("Longpoll is being closed."),this.dd())};g.send=function(a){a=B(a);this.pb+=a.length;Nb(this.Va,"bytes_sent",a.length);a=Jc(a);a=fb(a,!0);a=Wc(a,1840);for(var b=0;b<a.length;b++){var c=this.Ta;c.ad.push({Kg:this.hf,Sg:a.length,kf:a[b]});c.me&&fh(c);this.hf++}};function dh(a,b){var c=B(b).length;a.ob+=c;Nb(a.Va,"bytes_received",c)}
	function ch(a,b,c,d){this.jd=d;this.ib=c;this.Qe=new hg;this.ad=[];this.ue=Math.floor(1E8*Math.random());this.Xd=!0;this.ie=Fc();window["pLPCommand"+this.ie]=a;window["pRTLPCB"+this.ie]=b;a=document.createElement("iframe");a.style.display="none";if(document.body){document.body.appendChild(a);try{a.contentWindow.document||Cb("No IE domain setting required")}catch(e){a.src="javascript:void((function(){document.open();document.domain='"+document.domain+"';document.close();})())"}}else throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";
	a.contentDocument?a.fb=a.contentDocument:a.contentWindow?a.fb=a.contentWindow.document:a.document&&(a.fb=a.document);this.Ea=a;a="";this.Ea.src&&"javascript:"===this.Ea.src.substr(0,11)&&(a='<script>document.domain="'+document.domain+'";\x3c/script>');a="<html><body>"+a+"</body></html>";try{this.Ea.fb.open(),this.Ea.fb.write(a),this.Ea.fb.close()}catch(f){Cb("frame writing exception"),f.stack&&Cb(f.stack),Cb(f)}}
	ch.prototype.close=function(){this.me=!1;if(this.Ea){this.Ea.fb.body.innerHTML="";var a=this;setTimeout(function(){null!==a.Ea&&(document.body.removeChild(a.Ea),a.Ea=null)},Math.floor(0))}var b=this.ib;b&&(this.ib=null,b())};
	function fh(a){if(a.me&&a.Xd&&a.Qe.count()<(0<a.ad.length?2:1)){a.ue++;var b={};b.id=a.sg;b.pw=a.tg;b.ser=a.ue;for(var b=a.jd(b),c="",d=0;0<a.ad.length;)if(1870>=a.ad[0].kf.length+30+c.length){var e=a.ad.shift(),c=c+"&seg"+d+"="+e.Kg+"&ts"+d+"="+e.Sg+"&d"+d+"="+e.kf;d++}else break;gh(a,b+c,a.ue);return!0}return!1}function gh(a,b,c){function d(){a.Qe.remove(c);fh(a)}a.Qe.add(c,1);var e=setTimeout(d,Math.floor(25E3));eh(a,b,function(){clearTimeout(e);d()})}
	function eh(a,b,c){setTimeout(function(){try{if(a.Xd){var d=a.Ea.fb.createElement("script");d.type="text/javascript";d.async=!0;d.src=b;d.onload=d.onreadystatechange=function(){var a=d.readyState;a&&"loaded"!==a&&"complete"!==a||(d.onload=d.onreadystatechange=null,d.parentNode&&d.parentNode.removeChild(d),c())};d.onerror=function(){Cb("Long-poll script failed to load: "+b);a.Xd=!1;a.close()};a.Ea.fb.body.appendChild(d)}}catch(e){}},Math.floor(1))};var hh=null;"undefined"!==typeof MozWebSocket?hh=MozWebSocket:"undefined"!==typeof WebSocket&&(hh=WebSocket);function ih(a,b,c){this.se=a;this.f=Nc(this.se);this.frames=this.Kc=null;this.ob=this.pb=this.cf=0;this.Va=Qb(b);this.eb=(b.lb?"wss://":"ws://")+b.Pa+"/.ws?v=5";"undefined"!==typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(this.eb+="&r=f");b.host!==b.Pa&&(this.eb=this.eb+"&ns="+b.Db);c&&(this.eb=this.eb+"&s="+c)}var jh;
	ih.prototype.open=function(a,b){this.ib=b;this.xg=a;this.f("Websocket connecting to "+this.eb);this.Hc=!1;Cc.set("previous_websocket_failure",!0);try{this.ua=new hh(this.eb)}catch(c){this.f("Error instantiating WebSocket.");var d=c.message||c.data;d&&this.f(d);this.hb();return}var e=this;this.ua.onopen=function(){e.f("Websocket connected.");e.Hc=!0};this.ua.onclose=function(){e.f("Websocket connection was disconnected.");e.ua=null;e.hb()};this.ua.onmessage=function(a){if(null!==e.ua)if(a=a.data,e.ob+=
	a.length,Nb(e.Va,"bytes_received",a.length),kh(e),null!==e.frames)lh(e,a);else{a:{K(null===e.frames,"We already have a frame buffer");if(6>=a.length){var b=Number(a);if(!isNaN(b)){e.cf=b;e.frames=[];a=null;break a}}e.cf=1;e.frames=[]}null!==a&&lh(e,a)}};this.ua.onerror=function(a){e.f("WebSocket error.  Closing connection.");(a=a.message||a.data)&&e.f(a);e.hb()}};ih.prototype.start=function(){};
	ih.isAvailable=function(){var a=!1;if("undefined"!==typeof navigator&&navigator.userAgent){var b=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);b&&1<b.length&&4.4>parseFloat(b[1])&&(a=!0)}return!a&&null!==hh&&!jh};ih.responsesRequiredToBeHealthy=2;ih.healthyTimeout=3E4;g=ih.prototype;g.Ed=function(){Cc.remove("previous_websocket_failure")};function lh(a,b){a.frames.push(b);if(a.frames.length==a.cf){var c=a.frames.join("");a.frames=null;c=nb(c);a.xg(c)}}
	g.send=function(a){kh(this);a=B(a);this.pb+=a.length;Nb(this.Va,"bytes_sent",a.length);a=Wc(a,16384);1<a.length&&this.ua.send(String(a.length));for(var b=0;b<a.length;b++)this.ua.send(a[b])};g.dd=function(){this.Ab=!0;this.Kc&&(clearInterval(this.Kc),this.Kc=null);this.ua&&(this.ua.close(),this.ua=null)};g.hb=function(){this.Ab||(this.f("WebSocket is closing itself"),this.dd(),this.ib&&(this.ib(this.Hc),this.ib=null))};g.close=function(){this.Ab||(this.f("WebSocket is being closed"),this.dd())};
	function kh(a){clearInterval(a.Kc);a.Kc=setInterval(function(){a.ua&&a.ua.send("0");kh(a)},Math.floor(45E3))};function mh(a){nh(this,a)}var oh=[$g,ih];function nh(a,b){var c=ih&&ih.isAvailable(),d=c&&!(Cc.wf||!0===Cc.get("previous_websocket_failure"));b.Ug&&(c||Q("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),d=!0);if(d)a.gd=[ih];else{var e=a.gd=[];Xc(oh,function(a,b){b&&b.isAvailable()&&e.push(b)})}}function ph(a){if(0<a.gd.length)return a.gd[0];throw Error("No transports available");};function qh(a,b,c,d,e,f){this.id=a;this.f=Nc("c:"+this.id+":");this.ic=c;this.Wc=d;this.la=e;this.Oe=f;this.F=b;this.Md=[];this.ff=0;this.Of=new mh(b);this.Ua=0;this.f("Connection created");rh(this)}
	function rh(a){var b=ph(a.Of);a.I=new b("c:"+a.id+":"+a.ff++,a.F);a.Se=b.responsesRequiredToBeHealthy||0;var c=sh(a,a.I),d=th(a,a.I);a.hd=a.I;a.cd=a.I;a.D=null;a.Bb=!1;setTimeout(function(){a.I&&a.I.open(c,d)},Math.floor(0));b=b.healthyTimeout||0;0<b&&(a.yd=setTimeout(function(){a.yd=null;a.Bb||(a.I&&102400<a.I.ob?(a.f("Connection exceeded healthy timeout but has received "+a.I.ob+" bytes.  Marking connection healthy."),a.Bb=!0,a.I.Ed()):a.I&&10240<a.I.pb?a.f("Connection exceeded healthy timeout but has sent "+
	a.I.pb+" bytes.  Leaving connection alive."):(a.f("Closing unhealthy connection after timeout."),a.close()))},Math.floor(b)))}function th(a,b){return function(c){b===a.I?(a.I=null,c||0!==a.Ua?1===a.Ua&&a.f("Realtime connection lost."):(a.f("Realtime connection failed."),"s-"===a.F.Pa.substr(0,2)&&(Cc.remove("host:"+a.F.host),a.F.Pa=a.F.host)),a.close()):b===a.D?(a.f("Secondary connection lost."),c=a.D,a.D=null,a.hd!==c&&a.cd!==c||a.close()):a.f("closing an old connection")}}
	function sh(a,b){return function(c){if(2!=a.Ua)if(b===a.cd){var d=Uc("t",c);c=Uc("d",c);if("c"==d){if(d=Uc("t",c),"d"in c)if(c=c.d,"h"===d){var d=c.ts,e=c.v,f=c.h;a.Zd=c.s;Ec(a.F,f);0==a.Ua&&(a.I.start(),uh(a,a.I,d),"5"!==e&&Q("Protocol version mismatch detected"),c=a.Of,(c=1<c.gd.length?c.gd[1]:null)&&vh(a,c))}else if("n"===d){a.f("recvd end transmission on primary");a.cd=a.D;for(c=0;c<a.Md.length;++c)a.Id(a.Md[c]);a.Md=[];wh(a)}else"s"===d?(a.f("Connection shutdown command received. Shutting down..."),
	a.Oe&&(a.Oe(c),a.Oe=null),a.la=null,a.close()):"r"===d?(a.f("Reset packet received.  New host: "+c),Ec(a.F,c),1===a.Ua?a.close():(xh(a),rh(a))):"e"===d?Oc("Server Error: "+c):"o"===d?(a.f("got pong on primary."),yh(a),zh(a)):Oc("Unknown control packet command: "+d)}else"d"==d&&a.Id(c)}else if(b===a.D)if(d=Uc("t",c),c=Uc("d",c),"c"==d)"t"in c&&(c=c.t,"a"===c?Ah(a):"r"===c?(a.f("Got a reset on secondary, closing it"),a.D.close(),a.hd!==a.D&&a.cd!==a.D||a.close()):"o"===c&&(a.f("got pong on secondary."),
	a.Mf--,Ah(a)));else if("d"==d)a.Md.push(c);else throw Error("Unknown protocol layer: "+d);else a.f("message on old connection")}}qh.prototype.Fa=function(a){Bh(this,{t:"d",d:a})};function wh(a){a.hd===a.D&&a.cd===a.D&&(a.f("cleaning up and promoting a connection: "+a.D.se),a.I=a.D,a.D=null)}
	function Ah(a){0>=a.Mf?(a.f("Secondary connection is healthy."),a.Bb=!0,a.D.Ed(),a.D.start(),a.f("sending client ack on secondary"),a.D.send({t:"c",d:{t:"a",d:{}}}),a.f("Ending transmission on primary"),a.I.send({t:"c",d:{t:"n",d:{}}}),a.hd=a.D,wh(a)):(a.f("sending ping on secondary."),a.D.send({t:"c",d:{t:"p",d:{}}}))}qh.prototype.Id=function(a){yh(this);this.ic(a)};function yh(a){a.Bb||(a.Se--,0>=a.Se&&(a.f("Primary connection is healthy."),a.Bb=!0,a.I.Ed()))}
	function vh(a,b){a.D=new b("c:"+a.id+":"+a.ff++,a.F,a.Zd);a.Mf=b.responsesRequiredToBeHealthy||0;a.D.open(sh(a,a.D),th(a,a.D));setTimeout(function(){a.D&&(a.f("Timed out trying to upgrade."),a.D.close())},Math.floor(6E4))}function uh(a,b,c){a.f("Realtime connection established.");a.I=b;a.Ua=1;a.Wc&&(a.Wc(c),a.Wc=null);0===a.Se?(a.f("Primary connection is healthy."),a.Bb=!0):setTimeout(function(){zh(a)},Math.floor(5E3))}
	function zh(a){a.Bb||1!==a.Ua||(a.f("sending ping on primary."),Bh(a,{t:"c",d:{t:"p",d:{}}}))}function Bh(a,b){if(1!==a.Ua)throw"Connection is not connected";a.hd.send(b)}qh.prototype.close=function(){2!==this.Ua&&(this.f("Closing realtime connection."),this.Ua=2,xh(this),this.la&&(this.la(),this.la=null))};function xh(a){a.f("Shutting down all connections");a.I&&(a.I.close(),a.I=null);a.D&&(a.D.close(),a.D=null);a.yd&&(clearTimeout(a.yd),a.yd=null)};function Ch(a,b,c,d){this.id=Dh++;this.f=Nc("p:"+this.id+":");this.xf=this.Fe=!1;this.$={};this.qa=[];this.Yc=0;this.Vc=[];this.oa=!1;this.Za=1E3;this.Fd=3E5;this.Hb=b;this.Uc=c;this.Pe=d;this.F=a;this.tb=this.Aa=this.Ia=this.Xe=null;this.Ob=!1;this.Td={};this.Jg=0;this.nf=!0;this.Lc=this.He=null;Eh(this,0);Pf.vb().Fb("visible",this.Ag,this);-1===a.host.indexOf("fblocal")&&Of.vb().Fb("online",this.yg,this)}var Dh=0,Fh=0;g=Ch.prototype;
	g.Fa=function(a,b,c){var d=++this.Jg;a={r:d,a:a,b:b};this.f(B(a));K(this.oa,"sendRequest call when we're not connected not allowed.");this.Ia.Fa(a);c&&(this.Td[d]=c)};g.yf=function(a,b,c,d){var e=a.va(),f=a.path.toString();this.f("Listen called for "+f+" "+e);this.$[f]=this.$[f]||{};K(!this.$[f][e],"listen() called twice for same path/queryId.");a={G:d,xd:b,Gg:a,tag:c};this.$[f][e]=a;this.oa&&Gh(this,a)};
	function Gh(a,b){var c=b.Gg,d=c.path.toString(),e=c.va();a.f("Listen on "+d+" for "+e);var f={p:d};b.tag&&(f.q=ce(c.o),f.t=b.tag);f.h=b.xd();a.Fa("q",f,function(f){var k=f.d,l=f.s;if(k&&"object"===typeof k&&v(k,"w")){var m=w(k,"w");ea(m)&&0<=Na(m,"no_index")&&Q("Using an unspecified index. Consider adding "+('".indexOn": "'+c.o.g.toString()+'"')+" at "+c.path.toString()+" to your security rules for better performance")}(a.$[d]&&a.$[d][e])===b&&(a.f("listen response",f),"ok"!==l&&Hh(a,d,e),b.G&&b.G(l,
	k))})}g.N=function(a,b,c){this.Aa={gg:a,of:!1,zc:b,md:c};this.f("Authenticating using credential: "+a);Ih(this);(b=40==a.length)||(a=$c(a).Bc,b="object"===typeof a&&!0===w(a,"admin"));b&&(this.f("Admin auth credential detected.  Reducing max reconnect time."),this.Fd=3E4)};g.he=function(a){delete this.Aa;this.oa&&this.Fa("unauth",{},function(b){a(b.s,b.d)})};
	function Ih(a){var b=a.Aa;a.oa&&b&&a.Fa("auth",{cred:b.gg},function(c){var d=c.s;c=c.d||"error";"ok"!==d&&a.Aa===b&&delete a.Aa;b.of?"ok"!==d&&b.md&&b.md(d,c):(b.of=!0,b.zc&&b.zc(d,c))})}g.Pf=function(a,b){var c=a.path.toString(),d=a.va();this.f("Unlisten called for "+c+" "+d);if(Hh(this,c,d)&&this.oa){var e=ce(a.o);this.f("Unlisten on "+c+" for "+d);c={p:c};b&&(c.q=e,c.t=b);this.Fa("n",c)}};g.Ne=function(a,b,c){this.oa?Jh(this,"o",a,b,c):this.Vc.push({$c:a,action:"o",data:b,G:c})};
	g.Cf=function(a,b,c){this.oa?Jh(this,"om",a,b,c):this.Vc.push({$c:a,action:"om",data:b,G:c})};g.Jd=function(a,b){this.oa?Jh(this,"oc",a,null,b):this.Vc.push({$c:a,action:"oc",data:null,G:b})};function Jh(a,b,c,d,e){c={p:c,d:d};a.f("onDisconnect "+b,c);a.Fa(b,c,function(a){e&&setTimeout(function(){e(a.s,a.d)},Math.floor(0))})}g.put=function(a,b,c,d){Kh(this,"p",a,b,c,d)};g.zf=function(a,b,c,d){Kh(this,"m",a,b,c,d)};
	function Kh(a,b,c,d,e,f){d={p:c,d:d};n(f)&&(d.h=f);a.qa.push({action:b,Jf:d,G:e});a.Yc++;b=a.qa.length-1;a.oa?Lh(a,b):a.f("Buffering put: "+c)}function Lh(a,b){var c=a.qa[b].action,d=a.qa[b].Jf,e=a.qa[b].G;a.qa[b].Hg=a.oa;a.Fa(c,d,function(d){a.f(c+" response",d);delete a.qa[b];a.Yc--;0===a.Yc&&(a.qa=[]);e&&e(d.s,d.d)})}g.Ve=function(a){this.oa&&(a={c:a},this.f("reportStats",a),this.Fa("s",a,function(a){"ok"!==a.s&&this.f("reportStats","Error sending stats: "+a.d)}))};
	g.Id=function(a){if("r"in a){this.f("from server: "+B(a));var b=a.r,c=this.Td[b];c&&(delete this.Td[b],c(a.b))}else{if("error"in a)throw"A server-side error has occurred: "+a.error;"a"in a&&(b=a.a,c=a.b,this.f("handleServerMessage",b,c),"d"===b?this.Hb(c.p,c.d,!1,c.t):"m"===b?this.Hb(c.p,c.d,!0,c.t):"c"===b?Mh(this,c.p,c.q):"ac"===b?(a=c.s,b=c.d,c=this.Aa,delete this.Aa,c&&c.md&&c.md(a,b)):"sd"===b?this.Xe?this.Xe(c):"msg"in c&&"undefined"!==typeof console&&console.log("FIREBASE: "+c.msg.replace("\n",
	"\nFIREBASE: ")):Oc("Unrecognized action received from server: "+B(b)+"\nAre you using the latest client?"))}};g.Wc=function(a){this.f("connection ready");this.oa=!0;this.Lc=(new Date).getTime();this.Pe({serverTimeOffset:a-(new Date).getTime()});this.nf&&(a={},a["sdk.js."+hb.replace(/\./g,"-")]=1,qg()&&(a["framework.cordova"]=1),this.Ve(a));Nh(this);this.nf=!1;this.Uc(!0)};
	function Eh(a,b){K(!a.Ia,"Scheduling a connect when we're already connected/ing?");a.tb&&clearTimeout(a.tb);a.tb=setTimeout(function(){a.tb=null;Oh(a)},Math.floor(b))}g.Ag=function(a){a&&!this.Ob&&this.Za===this.Fd&&(this.f("Window became visible.  Reducing delay."),this.Za=1E3,this.Ia||Eh(this,0));this.Ob=a};g.yg=function(a){a?(this.f("Browser went online."),this.Za=1E3,this.Ia||Eh(this,0)):(this.f("Browser went offline.  Killing connection."),this.Ia&&this.Ia.close())};
	g.Df=function(){this.f("data client disconnected");this.oa=!1;this.Ia=null;for(var a=0;a<this.qa.length;a++){var b=this.qa[a];b&&"h"in b.Jf&&b.Hg&&(b.G&&b.G("disconnect"),delete this.qa[a],this.Yc--)}0===this.Yc&&(this.qa=[]);this.Td={};Ph(this)&&(this.Ob?this.Lc&&(3E4<(new Date).getTime()-this.Lc&&(this.Za=1E3),this.Lc=null):(this.f("Window isn't visible.  Delaying reconnect."),this.Za=this.Fd,this.He=(new Date).getTime()),a=Math.max(0,this.Za-((new Date).getTime()-this.He)),a*=Math.random(),this.f("Trying to reconnect in "+
	a+"ms"),Eh(this,a),this.Za=Math.min(this.Fd,1.3*this.Za));this.Uc(!1)};function Oh(a){if(Ph(a)){a.f("Making a connection attempt");a.He=(new Date).getTime();a.Lc=null;var b=q(a.Id,a),c=q(a.Wc,a),d=q(a.Df,a),e=a.id+":"+Fh++;a.Ia=new qh(e,a.F,b,c,d,function(b){Q(b+" ("+a.F.toString()+")");a.xf=!0})}}g.zb=function(){this.Fe=!0;this.Ia?this.Ia.close():(this.tb&&(clearTimeout(this.tb),this.tb=null),this.oa&&this.Df())};g.rc=function(){this.Fe=!1;this.Za=1E3;this.Ia||Eh(this,0)};
	function Mh(a,b,c){c=c?Qa(c,function(a){return Vc(a)}).join("$"):"default";(a=Hh(a,b,c))&&a.G&&a.G("permission_denied")}function Hh(a,b,c){b=(new L(b)).toString();var d;n(a.$[b])?(d=a.$[b][c],delete a.$[b][c],0===pa(a.$[b])&&delete a.$[b]):d=void 0;return d}function Nh(a){Ih(a);r(a.$,function(b){r(b,function(b){Gh(a,b)})});for(var b=0;b<a.qa.length;b++)a.qa[b]&&Lh(a,b);for(;a.Vc.length;)b=a.Vc.shift(),Jh(a,b.action,b.$c,b.data,b.G)}function Ph(a){var b;b=Of.vb().jc;return!a.xf&&!a.Fe&&b};var V={mg:function(){ah=jh=!0}};V.forceLongPolling=V.mg;V.ng=function(){bh=!0};V.forceWebSockets=V.ng;V.Ng=function(a,b){a.k.Sa.Xe=b};V.setSecurityDebugCallback=V.Ng;V.Ze=function(a,b){a.k.Ze(b)};V.stats=V.Ze;V.$e=function(a,b){a.k.$e(b)};V.statsIncrementCounter=V.$e;V.sd=function(a){return a.k.sd};V.dataUpdateCount=V.sd;V.qg=function(a,b){a.k.Ee=b};V.interceptServerData=V.qg;V.wg=function(a){new Ag(a)};V.onPopupOpen=V.wg;V.Lg=function(a){kg=a};V.setAuthenticationServer=V.Lg;function S(a,b,c){this.w=a;this.V=b;this.g=c}S.prototype.H=function(){x("Firebase.DataSnapshot.val",0,0,arguments.length);return this.w.H()};S.prototype.val=S.prototype.H;S.prototype.mf=function(){x("Firebase.DataSnapshot.exportVal",0,0,arguments.length);return this.w.H(!0)};S.prototype.exportVal=S.prototype.mf;S.prototype.lg=function(){x("Firebase.DataSnapshot.exists",0,0,arguments.length);return!this.w.e()};S.prototype.exists=S.prototype.lg;
	S.prototype.u=function(a){x("Firebase.DataSnapshot.child",0,1,arguments.length);ga(a)&&(a=String(a));ag("Firebase.DataSnapshot.child",a);var b=new L(a),c=this.V.u(b);return new S(this.w.Y(b),c,N)};S.prototype.child=S.prototype.u;S.prototype.Da=function(a){x("Firebase.DataSnapshot.hasChild",1,1,arguments.length);ag("Firebase.DataSnapshot.hasChild",a);var b=new L(a);return!this.w.Y(b).e()};S.prototype.hasChild=S.prototype.Da;
	S.prototype.B=function(){x("Firebase.DataSnapshot.getPriority",0,0,arguments.length);return this.w.B().H()};S.prototype.getPriority=S.prototype.B;S.prototype.forEach=function(a){x("Firebase.DataSnapshot.forEach",1,1,arguments.length);A("Firebase.DataSnapshot.forEach",1,a,!1);if(this.w.L())return!1;var b=this;return!!this.w.R(this.g,function(c,d){return a(new S(d,b.V.u(c),N))})};S.prototype.forEach=S.prototype.forEach;
	S.prototype.wd=function(){x("Firebase.DataSnapshot.hasChildren",0,0,arguments.length);return this.w.L()?!1:!this.w.e()};S.prototype.hasChildren=S.prototype.wd;S.prototype.name=function(){Q("Firebase.DataSnapshot.name() being deprecated. Please use Firebase.DataSnapshot.key() instead.");x("Firebase.DataSnapshot.name",0,0,arguments.length);return this.key()};S.prototype.name=S.prototype.name;S.prototype.key=function(){x("Firebase.DataSnapshot.key",0,0,arguments.length);return this.V.key()};
	S.prototype.key=S.prototype.key;S.prototype.Eb=function(){x("Firebase.DataSnapshot.numChildren",0,0,arguments.length);return this.w.Eb()};S.prototype.numChildren=S.prototype.Eb;S.prototype.mc=function(){x("Firebase.DataSnapshot.ref",0,0,arguments.length);return this.V};S.prototype.ref=S.prototype.mc;function Qh(a,b){this.F=a;this.Va=Qb(a);this.fd=null;this.da=new vb;this.Hd=1;this.Sa=null;b||0<=("object"===typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)?(this.ba=new ye(this.F,q(this.Hb,this)),setTimeout(q(this.Uc,this,!0),0)):this.ba=this.Sa=new Ch(this.F,q(this.Hb,this),q(this.Uc,this),q(this.Pe,this));this.Qg=Rb(a,q(function(){return new Lb(this.Va,this.ba)},this));this.uc=new Ff;
	this.De=new ob;var c=this;this.Cd=new kf({Ye:function(a,b,f,h){b=[];f=c.De.j(a.path);f.e()||(b=mf(c.Cd,new Wb(Re,a.path,f)),setTimeout(function(){h("ok")},0));return b},be:ba});Rh(this,"connected",!1);this.la=new pc;this.N=new Kg(a,q(this.ba.N,this.ba),q(this.ba.he,this.ba),q(this.Me,this));this.sd=0;this.Ee=null;this.M=new kf({Ye:function(a,b,f,h){c.ba.yf(a,f,b,function(b,e){var f=h(b,e);Ab(c.da,a.path,f)});return[]},be:function(a,b){c.ba.Pf(a,b)}})}g=Qh.prototype;
	g.toString=function(){return(this.F.lb?"https://":"http://")+this.F.host};g.name=function(){return this.F.Db};function Sh(a){a=a.De.j(new L(".info/serverTimeOffset")).H()||0;return(new Date).getTime()+a}function Th(a){a=a={timestamp:Sh(a)};a.timestamp=a.timestamp||(new Date).getTime();return a}
	g.Hb=function(a,b,c,d){this.sd++;var e=new L(a);b=this.Ee?this.Ee(a,b):b;a=[];d?c?(b=na(b,function(a){return M(a)}),a=uf(this.M,e,b,d)):(b=M(b),a=qf(this.M,e,b,d)):c?(d=na(b,function(a){return M(a)}),a=pf(this.M,e,d)):(d=M(b),a=mf(this.M,new Wb(Re,e,d)));d=e;0<a.length&&(d=Uh(this,e));Ab(this.da,d,a)};g.Uc=function(a){Rh(this,"connected",a);!1===a&&Vh(this)};g.Pe=function(a){var b=this;Xc(a,function(a,d){Rh(b,d,a)})};g.Me=function(a){Rh(this,"authenticated",a)};
	function Rh(a,b,c){b=new L("/.info/"+b);c=M(c);var d=a.De;d.Wd=d.Wd.K(b,c);c=mf(a.Cd,new Wb(Re,b,c));Ab(a.da,b,c)}g.Kb=function(a,b,c,d){this.f("set",{path:a.toString(),value:b,Yg:c});var e=Th(this);b=M(b,c);var e=rc(b,e),f=this.Hd++,e=lf(this.M,a,e,f,!0);wb(this.da,e);var h=this;this.ba.put(a.toString(),b.H(!0),function(b,c){var e="ok"===b;e||Q("set at "+a+" failed: "+b);e=of(h.M,f,!e);Ab(h.da,a,e);Wh(d,b,c)});e=Xh(this,a);Uh(this,e);Ab(this.da,e,[])};
	g.update=function(a,b,c){this.f("update",{path:a.toString(),value:b});var d=!0,e=Th(this),f={};r(b,function(a,b){d=!1;var c=M(a);f[b]=rc(c,e)});if(d)Cb("update() called with empty data.  Don't do anything."),Wh(c,"ok");else{var h=this.Hd++,k=nf(this.M,a,f,h);wb(this.da,k);var l=this;this.ba.zf(a.toString(),b,function(b,d){var e="ok"===b;e||Q("update at "+a+" failed: "+b);var e=of(l.M,h,!e),f=a;0<e.length&&(f=Uh(l,a));Ab(l.da,f,e);Wh(c,b,d)});b=Xh(this,a);Uh(this,b);Ab(this.da,a,[])}};
	function Vh(a){a.f("onDisconnectEvents");var b=Th(a),c=[];qc(oc(a.la,b),G,function(b,e){c=c.concat(mf(a.M,new Wb(Re,b,e)));var f=Xh(a,b);Uh(a,f)});a.la=new pc;Ab(a.da,G,c)}g.Jd=function(a,b){var c=this;this.ba.Jd(a.toString(),function(d,e){"ok"===d&&jg(c.la,a);Wh(b,d,e)})};function Yh(a,b,c,d){var e=M(c);a.ba.Ne(b.toString(),e.H(!0),function(c,h){"ok"===c&&a.la.nc(b,e);Wh(d,c,h)})}function Zh(a,b,c,d,e){var f=M(c,d);a.ba.Ne(b.toString(),f.H(!0),function(c,d){"ok"===c&&a.la.nc(b,f);Wh(e,c,d)})}
	function $h(a,b,c,d){var e=!0,f;for(f in c)e=!1;e?(Cb("onDisconnect().update() called with empty data.  Don't do anything."),Wh(d,"ok")):a.ba.Cf(b.toString(),c,function(e,f){if("ok"===e)for(var l in c){var m=M(c[l]);a.la.nc(b.u(l),m)}Wh(d,e,f)})}function ai(a,b,c){c=".info"===E(b.path)?a.Cd.Pb(b,c):a.M.Pb(b,c);yb(a.da,b.path,c)}g.zb=function(){this.Sa&&this.Sa.zb()};g.rc=function(){this.Sa&&this.Sa.rc()};
	g.Ze=function(a){if("undefined"!==typeof console){a?(this.fd||(this.fd=new Kb(this.Va)),a=this.fd.get()):a=this.Va.get();var b=Ra(sa(a),function(a,b){return Math.max(b.length,a)},0),c;for(c in a){for(var d=a[c],e=c.length;e<b+2;e++)c+=" ";console.log(c+d)}}};g.$e=function(a){Nb(this.Va,a);this.Qg.Nf[a]=!0};g.f=function(a){var b="";this.Sa&&(b=this.Sa.id+":");Cb(b,arguments)};
	function Wh(a,b,c){a&&Db(function(){if("ok"==b)a(null);else{var d=(b||"error").toUpperCase(),e=d;c&&(e+=": "+c);e=Error(e);e.code=d;a(e)}})};function bi(a,b,c,d,e){function f(){}a.f("transaction on "+b);var h=new U(a,b);h.Fb("value",f);c={path:b,update:c,G:d,status:null,Ff:Fc(),df:e,Lf:0,je:function(){h.hc("value",f)},le:null,Ba:null,pd:null,qd:null,rd:null};d=a.M.za(b,void 0)||C;c.pd=d;d=c.update(d.H());if(n(d)){Wf("transaction failed: Data returned ",d,c.path);c.status=1;e=Gf(a.uc,b);var k=e.Ca()||[];k.push(c);Hf(e,k);"object"===typeof d&&null!==d&&v(d,".priority")?(k=w(d,".priority"),K(Uf(k),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.")):
	k=(a.M.za(b)||C).B().H();e=Th(a);d=M(d,k);e=rc(d,e);c.qd=d;c.rd=e;c.Ba=a.Hd++;c=lf(a.M,b,e,c.Ba,c.df);Ab(a.da,b,c);ci(a)}else c.je(),c.qd=null,c.rd=null,c.G&&(a=new S(c.pd,new U(a,c.path),N),c.G(null,!1,a))}function ci(a,b){var c=b||a.uc;b||di(a,c);if(null!==c.Ca()){var d=ei(a,c);K(0<d.length,"Sending zero length transaction queue");Sa(d,function(a){return 1===a.status})&&fi(a,c.path(),d)}else c.wd()&&c.R(function(b){ci(a,b)})}
	function fi(a,b,c){for(var d=Qa(c,function(a){return a.Ba}),e=a.M.za(b,d)||C,d=e,e=e.hash(),f=0;f<c.length;f++){var h=c[f];K(1===h.status,"tryToSendTransactionQueue_: items in queue should all be run.");h.status=2;h.Lf++;var k=O(b,h.path),d=d.K(k,h.qd)}d=d.H(!0);a.ba.put(b.toString(),d,function(d){a.f("transaction put response",{path:b.toString(),status:d});var e=[];if("ok"===d){d=[];for(f=0;f<c.length;f++){c[f].status=3;e=e.concat(of(a.M,c[f].Ba));if(c[f].G){var h=c[f].rd,k=new U(a,c[f].path);d.push(q(c[f].G,
	null,null,!0,new S(h,k,N)))}c[f].je()}di(a,Gf(a.uc,b));ci(a);Ab(a.da,b,e);for(f=0;f<d.length;f++)Db(d[f])}else{if("datastale"===d)for(f=0;f<c.length;f++)c[f].status=4===c[f].status?5:1;else for(Q("transaction at "+b.toString()+" failed: "+d),f=0;f<c.length;f++)c[f].status=5,c[f].le=d;Uh(a,b)}},e)}function Uh(a,b){var c=gi(a,b),d=c.path(),c=ei(a,c);hi(a,c,d);return d}
	function hi(a,b,c){if(0!==b.length){for(var d=[],e=[],f=Qa(b,function(a){return a.Ba}),h=0;h<b.length;h++){var k=b[h],l=O(c,k.path),m=!1,t;K(null!==l,"rerunTransactionsUnderNode_: relativePath should not be null.");if(5===k.status)m=!0,t=k.le,e=e.concat(of(a.M,k.Ba,!0));else if(1===k.status)if(25<=k.Lf)m=!0,t="maxretry",e=e.concat(of(a.M,k.Ba,!0));else{var y=a.M.za(k.path,f)||C;k.pd=y;var I=b[h].update(y.H());n(I)?(Wf("transaction failed: Data returned ",I,k.path),l=M(I),"object"===typeof I&&null!=
	I&&v(I,".priority")||(l=l.ga(y.B())),y=k.Ba,I=Th(a),I=rc(l,I),k.qd=l,k.rd=I,k.Ba=a.Hd++,Va(f,y),e=e.concat(lf(a.M,k.path,I,k.Ba,k.df)),e=e.concat(of(a.M,y,!0))):(m=!0,t="nodata",e=e.concat(of(a.M,k.Ba,!0)))}Ab(a.da,c,e);e=[];m&&(b[h].status=3,setTimeout(b[h].je,Math.floor(0)),b[h].G&&("nodata"===t?(k=new U(a,b[h].path),d.push(q(b[h].G,null,null,!1,new S(b[h].pd,k,N)))):d.push(q(b[h].G,null,Error(t),!1,null))))}di(a,a.uc);for(h=0;h<d.length;h++)Db(d[h]);ci(a)}}
	function gi(a,b){for(var c,d=a.uc;null!==(c=E(b))&&null===d.Ca();)d=Gf(d,c),b=H(b);return d}function ei(a,b){var c=[];ii(a,b,c);c.sort(function(a,b){return a.Ff-b.Ff});return c}function ii(a,b,c){var d=b.Ca();if(null!==d)for(var e=0;e<d.length;e++)c.push(d[e]);b.R(function(b){ii(a,b,c)})}function di(a,b){var c=b.Ca();if(c){for(var d=0,e=0;e<c.length;e++)3!==c[e].status&&(c[d]=c[e],d++);c.length=d;Hf(b,0<c.length?c:null)}b.R(function(b){di(a,b)})}
	function Xh(a,b){var c=gi(a,b).path(),d=Gf(a.uc,b);Kf(d,function(b){ji(a,b)});ji(a,d);Jf(d,function(b){ji(a,b)});return c}
	function ji(a,b){var c=b.Ca();if(null!==c){for(var d=[],e=[],f=-1,h=0;h<c.length;h++)4!==c[h].status&&(2===c[h].status?(K(f===h-1,"All SENT items should be at beginning of queue."),f=h,c[h].status=4,c[h].le="set"):(K(1===c[h].status,"Unexpected transaction status in abort"),c[h].je(),e=e.concat(of(a.M,c[h].Ba,!0)),c[h].G&&d.push(q(c[h].G,null,Error("set"),!1,null))));-1===f?Hf(b,null):c.length=f+1;Ab(a.da,b.path(),e);for(h=0;h<d.length;h++)Db(d[h])}};function W(){this.oc={};this.Qf=!1}W.prototype.zb=function(){for(var a in this.oc)this.oc[a].zb()};W.prototype.rc=function(){for(var a in this.oc)this.oc[a].rc()};W.prototype.we=function(){this.Qf=!0};ca(W);W.prototype.interrupt=W.prototype.zb;W.prototype.resume=W.prototype.rc;function X(a,b){this.bd=a;this.ra=b}X.prototype.cancel=function(a){x("Firebase.onDisconnect().cancel",0,1,arguments.length);A("Firebase.onDisconnect().cancel",1,a,!0);this.bd.Jd(this.ra,a||null)};X.prototype.cancel=X.prototype.cancel;X.prototype.remove=function(a){x("Firebase.onDisconnect().remove",0,1,arguments.length);bg("Firebase.onDisconnect().remove",this.ra);A("Firebase.onDisconnect().remove",1,a,!0);Yh(this.bd,this.ra,null,a)};X.prototype.remove=X.prototype.remove;
	X.prototype.set=function(a,b){x("Firebase.onDisconnect().set",1,2,arguments.length);bg("Firebase.onDisconnect().set",this.ra);Vf("Firebase.onDisconnect().set",a,this.ra,!1);A("Firebase.onDisconnect().set",2,b,!0);Yh(this.bd,this.ra,a,b)};X.prototype.set=X.prototype.set;
	X.prototype.Kb=function(a,b,c){x("Firebase.onDisconnect().setWithPriority",2,3,arguments.length);bg("Firebase.onDisconnect().setWithPriority",this.ra);Vf("Firebase.onDisconnect().setWithPriority",a,this.ra,!1);Yf("Firebase.onDisconnect().setWithPriority",2,b);A("Firebase.onDisconnect().setWithPriority",3,c,!0);Zh(this.bd,this.ra,a,b,c)};X.prototype.setWithPriority=X.prototype.Kb;
	X.prototype.update=function(a,b){x("Firebase.onDisconnect().update",1,2,arguments.length);bg("Firebase.onDisconnect().update",this.ra);if(ea(a)){for(var c={},d=0;d<a.length;++d)c[""+d]=a[d];a=c;Q("Passing an Array to Firebase.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}Xf("Firebase.onDisconnect().update",a,this.ra);A("Firebase.onDisconnect().update",2,b,!0);
	$h(this.bd,this.ra,a,b)};X.prototype.update=X.prototype.update;function Y(a,b,c,d){this.k=a;this.path=b;this.o=c;this.kc=d}
	function ki(a){var b=null,c=null;a.ma&&(b=nd(a));a.pa&&(c=pd(a));if(a.g===Od){if(a.ma){if("[MIN_NAME]"!=md(a))throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if("string"!==typeof b)throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.");}if(a.pa){if("[MAX_NAME]"!=od(a))throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if("string"!==
	typeof c)throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.");}}else if(a.g===N){if(null!=b&&!Uf(b)||null!=c&&!Uf(c))throw Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).");}else if(K(a.g instanceof Sd||a.g===Yd,"unknown index type."),null!=b&&"object"===typeof b||null!=c&&"object"===typeof c)throw Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.");
	}function li(a){if(a.ma&&a.pa&&a.ja&&(!a.ja||""===a.Nb))throw Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");}function mi(a,b){if(!0===a.kc)throw Error(b+": You can't combine multiple orderBy calls.");}g=Y.prototype;g.mc=function(){x("Query.ref",0,0,arguments.length);return new U(this.k,this.path)};
	g.Fb=function(a,b,c,d){x("Query.on",2,4,arguments.length);Zf("Query.on",a,!1);A("Query.on",2,b,!1);var e=ni("Query.on",c,d);if("value"===a)ai(this.k,this,new id(b,e.cancel||null,e.Ma||null));else{var f={};f[a]=b;ai(this.k,this,new jd(f,e.cancel,e.Ma))}return b};
	g.hc=function(a,b,c){x("Query.off",0,3,arguments.length);Zf("Query.off",a,!0);A("Query.off",2,b,!0);mb("Query.off",3,c);var d=null,e=null;"value"===a?d=new id(b||null,null,c||null):a&&(b&&(e={},e[a]=b),d=new jd(e,null,c||null));e=this.k;d=".info"===E(this.path)?e.Cd.kb(this,d):e.M.kb(this,d);yb(e.da,this.path,d)};
	g.Bg=function(a,b){function c(h){f&&(f=!1,e.hc(a,c),b.call(d.Ma,h))}x("Query.once",2,4,arguments.length);Zf("Query.once",a,!1);A("Query.once",2,b,!1);var d=ni("Query.once",arguments[2],arguments[3]),e=this,f=!0;this.Fb(a,c,function(b){e.hc(a,c);d.cancel&&d.cancel.call(d.Ma,b)})};
	g.Ie=function(a){Q("Query.limit() being deprecated. Please use Query.limitToFirst() or Query.limitToLast() instead.");x("Query.limit",1,1,arguments.length);if(!ga(a)||Math.floor(a)!==a||0>=a)throw Error("Query.limit: First argument must be a positive integer.");if(this.o.ja)throw Error("Query.limit: Limit was already set (by another call to limit, limitToFirst, orlimitToLast.");var b=this.o.Ie(a);li(b);return new Y(this.k,this.path,b,this.kc)};
	g.Je=function(a){x("Query.limitToFirst",1,1,arguments.length);if(!ga(a)||Math.floor(a)!==a||0>=a)throw Error("Query.limitToFirst: First argument must be a positive integer.");if(this.o.ja)throw Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new Y(this.k,this.path,this.o.Je(a),this.kc)};
	g.Ke=function(a){x("Query.limitToLast",1,1,arguments.length);if(!ga(a)||Math.floor(a)!==a||0>=a)throw Error("Query.limitToLast: First argument must be a positive integer.");if(this.o.ja)throw Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new Y(this.k,this.path,this.o.Ke(a),this.kc)};
	g.Cg=function(a){x("Query.orderByChild",1,1,arguments.length);if("$key"===a)throw Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===a)throw Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===a)throw Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');$f("Query.orderByChild",1,a,!1);mi(this,"Query.orderByChild");var b=be(this.o,new Sd(a));ki(b);return new Y(this.k,
	this.path,b,!0)};g.Dg=function(){x("Query.orderByKey",0,0,arguments.length);mi(this,"Query.orderByKey");var a=be(this.o,Od);ki(a);return new Y(this.k,this.path,a,!0)};g.Eg=function(){x("Query.orderByPriority",0,0,arguments.length);mi(this,"Query.orderByPriority");var a=be(this.o,N);ki(a);return new Y(this.k,this.path,a,!0)};g.Fg=function(){x("Query.orderByValue",0,0,arguments.length);mi(this,"Query.orderByValue");var a=be(this.o,Yd);ki(a);return new Y(this.k,this.path,a,!0)};
	g.ae=function(a,b){x("Query.startAt",0,2,arguments.length);Vf("Query.startAt",a,this.path,!0);$f("Query.startAt",2,b,!0);var c=this.o.ae(a,b);li(c);ki(c);if(this.o.ma)throw Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");n(a)||(b=a=null);return new Y(this.k,this.path,c,this.kc)};
	g.td=function(a,b){x("Query.endAt",0,2,arguments.length);Vf("Query.endAt",a,this.path,!0);$f("Query.endAt",2,b,!0);var c=this.o.td(a,b);li(c);ki(c);if(this.o.pa)throw Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new Y(this.k,this.path,c,this.kc)};
	g.ig=function(a,b){x("Query.equalTo",1,2,arguments.length);Vf("Query.equalTo",a,this.path,!1);$f("Query.equalTo",2,b,!0);if(this.o.ma)throw Error("Query.equalTo: Starting point was already set (by another call to endAt or equalTo).");if(this.o.pa)throw Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.ae(a,b).td(a,b)};
	g.toString=function(){x("Query.toString",0,0,arguments.length);for(var a=this.path,b="",c=a.Z;c<a.n.length;c++)""!==a.n[c]&&(b+="/"+encodeURIComponent(String(a.n[c])));return this.k.toString()+(b||"/")};g.va=function(){var a=Vc(ce(this.o));return"{}"===a?"default":a};
	function ni(a,b,c){var d={cancel:null,Ma:null};if(b&&c)d.cancel=b,A(a,3,d.cancel,!0),d.Ma=c,mb(a,4,d.Ma);else if(b)if("object"===typeof b&&null!==b)d.Ma=b;else if("function"===typeof b)d.cancel=b;else throw Error(z(a,3,!0)+" must either be a cancel callback or a context object.");return d}Y.prototype.ref=Y.prototype.mc;Y.prototype.on=Y.prototype.Fb;Y.prototype.off=Y.prototype.hc;Y.prototype.once=Y.prototype.Bg;Y.prototype.limit=Y.prototype.Ie;Y.prototype.limitToFirst=Y.prototype.Je;
	Y.prototype.limitToLast=Y.prototype.Ke;Y.prototype.orderByChild=Y.prototype.Cg;Y.prototype.orderByKey=Y.prototype.Dg;Y.prototype.orderByPriority=Y.prototype.Eg;Y.prototype.orderByValue=Y.prototype.Fg;Y.prototype.startAt=Y.prototype.ae;Y.prototype.endAt=Y.prototype.td;Y.prototype.equalTo=Y.prototype.ig;Y.prototype.toString=Y.prototype.toString;var Z={};Z.vc=Ch;Z.DataConnection=Z.vc;Ch.prototype.Pg=function(a,b){this.Fa("q",{p:a},b)};Z.vc.prototype.simpleListen=Z.vc.prototype.Pg;Ch.prototype.hg=function(a,b){this.Fa("echo",{d:a},b)};Z.vc.prototype.echo=Z.vc.prototype.hg;Ch.prototype.interrupt=Ch.prototype.zb;Z.Tf=qh;Z.RealTimeConnection=Z.Tf;qh.prototype.sendRequest=qh.prototype.Fa;qh.prototype.close=qh.prototype.close;
	Z.pg=function(a){var b=Ch.prototype.put;Ch.prototype.put=function(c,d,e,f){n(f)&&(f=a());b.call(this,c,d,e,f)};return function(){Ch.prototype.put=b}};Z.hijackHash=Z.pg;Z.Sf=Dc;Z.ConnectionTarget=Z.Sf;Z.va=function(a){return a.va()};Z.queryIdentifier=Z.va;Z.rg=function(a){return a.k.Sa.$};Z.listens=Z.rg;Z.we=function(a){a.we()};Z.forceRestClient=Z.we;function U(a,b){var c,d,e;if(a instanceof Qh)c=a,d=b;else{x("new Firebase",1,2,arguments.length);d=Qc(arguments[0]);c=d.Rg;"firebase"===d.domain&&Pc(d.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead");c&&"undefined"!=c||Pc("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com");d.lb||"undefined"!==typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&Q("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");
	c=new Dc(d.host,d.lb,c,"ws"===d.scheme||"wss"===d.scheme);d=new L(d.$c);e=d.toString();var f;!(f=!p(c.host)||0===c.host.length||!Tf(c.Db))&&(f=0!==e.length)&&(e&&(e=e.replace(/^\/*\.info(\/|$)/,"/")),f=!(p(e)&&0!==e.length&&!Rf.test(e)));if(f)throw Error(z("new Firebase",1,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".');if(b)if(b instanceof W)e=b;else if(p(b))e=W.vb(),c.Od=b;else throw Error("Expected a valid Firebase.Context for second argument to new Firebase()");
	else e=W.vb();f=c.toString();var h=w(e.oc,f);h||(h=new Qh(c,e.Qf),e.oc[f]=h);c=h}Y.call(this,c,d,$d,!1)}ma(U,Y);var oi=U,pi=["Firebase"],qi=aa;pi[0]in qi||!qi.execScript||qi.execScript("var "+pi[0]);for(var ri;pi.length&&(ri=pi.shift());)!pi.length&&n(oi)?qi[ri]=oi:qi=qi[ri]?qi[ri]:qi[ri]={};U.goOffline=function(){x("Firebase.goOffline",0,0,arguments.length);W.vb().zb()};U.goOnline=function(){x("Firebase.goOnline",0,0,arguments.length);W.vb().rc()};
	function Mc(a,b){K(!b||!0===a||!1===a,"Can't turn on custom loggers persistently.");!0===a?("undefined"!==typeof console&&("function"===typeof console.log?Bb=q(console.log,console):"object"===typeof console.log&&(Bb=function(a){console.log(a)})),b&&P.set("logging_enabled",!0)):a?Bb=a:(Bb=null,P.remove("logging_enabled"))}U.enableLogging=Mc;U.ServerValue={TIMESTAMP:{".sv":"timestamp"}};U.SDK_VERSION=hb;U.INTERNAL=V;U.Context=W;U.TEST_ACCESS=Z;
	U.prototype.name=function(){Q("Firebase.name() being deprecated. Please use Firebase.key() instead.");x("Firebase.name",0,0,arguments.length);return this.key()};U.prototype.name=U.prototype.name;U.prototype.key=function(){x("Firebase.key",0,0,arguments.length);return this.path.e()?null:uc(this.path)};U.prototype.key=U.prototype.key;
	U.prototype.u=function(a){x("Firebase.child",1,1,arguments.length);if(ga(a))a=String(a);else if(!(a instanceof L))if(null===E(this.path)){var b=a;b&&(b=b.replace(/^\/*\.info(\/|$)/,"/"));ag("Firebase.child",b)}else ag("Firebase.child",a);return new U(this.k,this.path.u(a))};U.prototype.child=U.prototype.u;U.prototype.parent=function(){x("Firebase.parent",0,0,arguments.length);var a=this.path.parent();return null===a?null:new U(this.k,a)};U.prototype.parent=U.prototype.parent;
	U.prototype.root=function(){x("Firebase.ref",0,0,arguments.length);for(var a=this;null!==a.parent();)a=a.parent();return a};U.prototype.root=U.prototype.root;U.prototype.set=function(a,b){x("Firebase.set",1,2,arguments.length);bg("Firebase.set",this.path);Vf("Firebase.set",a,this.path,!1);A("Firebase.set",2,b,!0);this.k.Kb(this.path,a,null,b||null)};U.prototype.set=U.prototype.set;
	U.prototype.update=function(a,b){x("Firebase.update",1,2,arguments.length);bg("Firebase.update",this.path);if(ea(a)){for(var c={},d=0;d<a.length;++d)c[""+d]=a[d];a=c;Q("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}Xf("Firebase.update",a,this.path);A("Firebase.update",2,b,!0);this.k.update(this.path,a,b||null)};U.prototype.update=U.prototype.update;
	U.prototype.Kb=function(a,b,c){x("Firebase.setWithPriority",2,3,arguments.length);bg("Firebase.setWithPriority",this.path);Vf("Firebase.setWithPriority",a,this.path,!1);Yf("Firebase.setWithPriority",2,b);A("Firebase.setWithPriority",3,c,!0);if(".length"===this.key()||".keys"===this.key())throw"Firebase.setWithPriority failed: "+this.key()+" is a read-only object.";this.k.Kb(this.path,a,b,c||null)};U.prototype.setWithPriority=U.prototype.Kb;
	U.prototype.remove=function(a){x("Firebase.remove",0,1,arguments.length);bg("Firebase.remove",this.path);A("Firebase.remove",1,a,!0);this.set(null,a)};U.prototype.remove=U.prototype.remove;
	U.prototype.transaction=function(a,b,c){x("Firebase.transaction",1,3,arguments.length);bg("Firebase.transaction",this.path);A("Firebase.transaction",1,a,!1);A("Firebase.transaction",2,b,!0);if(n(c)&&"boolean"!=typeof c)throw Error(z("Firebase.transaction",3,!0)+"must be a boolean.");if(".length"===this.key()||".keys"===this.key())throw"Firebase.transaction failed: "+this.key()+" is a read-only object.";"undefined"===typeof c&&(c=!0);bi(this.k,this.path,a,b||null,c)};U.prototype.transaction=U.prototype.transaction;
	U.prototype.Mg=function(a,b){x("Firebase.setPriority",1,2,arguments.length);bg("Firebase.setPriority",this.path);Yf("Firebase.setPriority",1,a);A("Firebase.setPriority",2,b,!0);this.k.Kb(this.path.u(".priority"),a,null,b)};U.prototype.setPriority=U.prototype.Mg;
	U.prototype.push=function(a,b){x("Firebase.push",0,2,arguments.length);bg("Firebase.push",this.path);Vf("Firebase.push",a,this.path,!0);A("Firebase.push",2,b,!0);var c=Sh(this.k),c=Nf(c),c=this.u(c);"undefined"!==typeof a&&null!==a&&c.set(a,b);return c};U.prototype.push=U.prototype.push;U.prototype.ib=function(){bg("Firebase.onDisconnect",this.path);return new X(this.k,this.path)};U.prototype.onDisconnect=U.prototype.ib;
	U.prototype.N=function(a,b,c){Q("FirebaseRef.auth() being deprecated. Please use FirebaseRef.authWithCustomToken() instead.");x("Firebase.auth",1,3,arguments.length);cg("Firebase.auth",a);A("Firebase.auth",2,b,!0);A("Firebase.auth",3,b,!0);Qg(this.k.N,a,{},{remember:"none"},b,c)};U.prototype.auth=U.prototype.N;U.prototype.he=function(a){x("Firebase.unauth",0,1,arguments.length);A("Firebase.unauth",1,a,!0);Rg(this.k.N,a)};U.prototype.unauth=U.prototype.he;
	U.prototype.ye=function(){x("Firebase.getAuth",0,0,arguments.length);return this.k.N.ye()};U.prototype.getAuth=U.prototype.ye;U.prototype.vg=function(a,b){x("Firebase.onAuth",1,2,arguments.length);A("Firebase.onAuth",1,a,!1);mb("Firebase.onAuth",2,b);this.k.N.Fb("auth_status",a,b)};U.prototype.onAuth=U.prototype.vg;U.prototype.ug=function(a,b){x("Firebase.offAuth",1,2,arguments.length);A("Firebase.offAuth",1,a,!1);mb("Firebase.offAuth",2,b);this.k.N.hc("auth_status",a,b)};U.prototype.offAuth=U.prototype.ug;
	U.prototype.Xf=function(a,b,c){x("Firebase.authWithCustomToken",2,3,arguments.length);cg("Firebase.authWithCustomToken",a);A("Firebase.authWithCustomToken",2,b,!1);fg("Firebase.authWithCustomToken",3,c,!0);Qg(this.k.N,a,{},c||{},b)};U.prototype.authWithCustomToken=U.prototype.Xf;U.prototype.Yf=function(a,b,c){x("Firebase.authWithOAuthPopup",2,3,arguments.length);eg("Firebase.authWithOAuthPopup",a);A("Firebase.authWithOAuthPopup",2,b,!1);fg("Firebase.authWithOAuthPopup",3,c,!0);Vg(this.k.N,a,c,b)};
	U.prototype.authWithOAuthPopup=U.prototype.Yf;U.prototype.Zf=function(a,b,c){x("Firebase.authWithOAuthRedirect",2,3,arguments.length);eg("Firebase.authWithOAuthRedirect",a);A("Firebase.authWithOAuthRedirect",2,b,!1);fg("Firebase.authWithOAuthRedirect",3,c,!0);var d=this.k.N;Tg(d);var e=[Cg],f=ng(c);"anonymous"===a||"firebase"===a?R(b,Eg("TRANSPORT_UNAVAILABLE")):(P.set("redirect_client_options",f.od),Ug(d,e,"/auth/"+a,f,b))};U.prototype.authWithOAuthRedirect=U.prototype.Zf;
	U.prototype.$f=function(a,b,c,d){x("Firebase.authWithOAuthToken",3,4,arguments.length);eg("Firebase.authWithOAuthToken",a);A("Firebase.authWithOAuthToken",3,c,!1);fg("Firebase.authWithOAuthToken",4,d,!0);p(b)?(dg("Firebase.authWithOAuthToken",2,b),Sg(this.k.N,a+"/token",{access_token:b},d,c)):(fg("Firebase.authWithOAuthToken",2,b,!1),Sg(this.k.N,a+"/token",b,d,c))};U.prototype.authWithOAuthToken=U.prototype.$f;
	U.prototype.Wf=function(a,b){x("Firebase.authAnonymously",1,2,arguments.length);A("Firebase.authAnonymously",1,a,!1);fg("Firebase.authAnonymously",2,b,!0);Sg(this.k.N,"anonymous",{},b,a)};U.prototype.authAnonymously=U.prototype.Wf;
	U.prototype.ag=function(a,b,c){x("Firebase.authWithPassword",2,3,arguments.length);fg("Firebase.authWithPassword",1,a,!1);gg("Firebase.authWithPassword",a,"email");gg("Firebase.authWithPassword",a,"password");A("Firebase.authWithPassword",2,b,!1);fg("Firebase.authWithPassword",3,c,!0);Sg(this.k.N,"password",a,c,b)};U.prototype.authWithPassword=U.prototype.ag;
	U.prototype.te=function(a,b){x("Firebase.createUser",2,2,arguments.length);fg("Firebase.createUser",1,a,!1);gg("Firebase.createUser",a,"email");gg("Firebase.createUser",a,"password");A("Firebase.createUser",2,b,!1);this.k.N.te(a,b)};U.prototype.createUser=U.prototype.te;U.prototype.Ue=function(a,b){x("Firebase.removeUser",2,2,arguments.length);fg("Firebase.removeUser",1,a,!1);gg("Firebase.removeUser",a,"email");gg("Firebase.removeUser",a,"password");A("Firebase.removeUser",2,b,!1);this.k.N.Ue(a,b)};
	U.prototype.removeUser=U.prototype.Ue;U.prototype.qe=function(a,b){x("Firebase.changePassword",2,2,arguments.length);fg("Firebase.changePassword",1,a,!1);gg("Firebase.changePassword",a,"email");gg("Firebase.changePassword",a,"oldPassword");gg("Firebase.changePassword",a,"newPassword");A("Firebase.changePassword",2,b,!1);this.k.N.qe(a,b)};U.prototype.changePassword=U.prototype.qe;
	U.prototype.pe=function(a,b){x("Firebase.changeEmail",2,2,arguments.length);fg("Firebase.changeEmail",1,a,!1);gg("Firebase.changeEmail",a,"oldEmail");gg("Firebase.changeEmail",a,"newEmail");gg("Firebase.changeEmail",a,"password");A("Firebase.changeEmail",2,b,!1);this.k.N.pe(a,b)};U.prototype.changeEmail=U.prototype.pe;
	U.prototype.We=function(a,b){x("Firebase.resetPassword",2,2,arguments.length);fg("Firebase.resetPassword",1,a,!1);gg("Firebase.resetPassword",a,"email");A("Firebase.resetPassword",2,b,!1);this.k.N.We(a,b)};U.prototype.resetPassword=U.prototype.We;})();

	module.exports = Firebase;


/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strictUriEncode = __webpack_require__(332);

	exports.extract = function (str) {
		return str.split('?')[1] || '';
	};

	exports.parse = function (str) {
		if (typeof str !== 'string') {
			return {};
		}

		str = str.trim().replace(/^(\?|#|&)/, '');

		if (!str) {
			return {};
		}

		return str.split('&').reduce(function (ret, param) {
			var parts = param.replace(/\+/g, ' ').split('=');
			var key = parts[0];
			var val = parts[1];

			key = decodeURIComponent(key);

			// missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			val = val === undefined ? null : decodeURIComponent(val);

			if (!ret.hasOwnProperty(key)) {
				ret[key] = val;
			} else if (Array.isArray(ret[key])) {
				ret[key].push(val);
			} else {
				ret[key] = [ret[key], val];
			}

			return ret;
		}, {});
	};

	exports.stringify = function (obj) {
		return obj ? Object.keys(obj).sort().map(function (key) {
			var val = obj[key];

			if (Array.isArray(val)) {
				return val.sort().map(function (val2) {
					return strictUriEncode(key) + '=' + strictUriEncode(val2);
				}).join('&');
			}

			return strictUriEncode(key) + '=' + strictUriEncode(val);
		}).filter(function (x) {
			return x.length > 0;
		}).join('&') : '';
	};


/***/ },
/* 332 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function (str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
			return '%' + c.charCodeAt(0).toString(16);
		});
	};


/***/ },
/* 333 */
/***/ function(module, exports) {

	/* 
	(The MIT License)

	Copyright (c) 2014 Halász Ádám <mail@adamhalasz.com>

	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	*/

	// Unique Hexatridecimal ID Generator
	module.exports = function(){
		var time = new Date().getTime();
		while (time == new Date().getTime());
		return new Date().getTime().toString(36);
	}

/***/ }
/******/ ]);